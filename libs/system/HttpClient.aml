(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2002-2003
 *
 * Last change:
 *   $Date: 2007-03-22 12:01:47 $ by $Author: rossberg $
 *   $Revision: 1.15 $
 *)

import structure MkHashImpMap from "../data/MkHashImpMap"
import structure IO           from "IO"
import structure Socket       from "Socket"
import structure Url          from "Url"
import structure Http         from "Http"
import signature HTTP_CLIENT  from "HTTP_CLIENT-sig"

structure HttpClient :> HTTP_CLIENT =
    struct
	type document = {contentType: string, body: string}

	exception Authority

	val userAgent = "Alice/1.4"

	fun parseAuthority authority =
	    case CharVector.findi (fn (_, c) => c = #":") authority of
		SOME (i, _) =>
		    let
			val host = String.substring (authority, 0, i)
			val port = String.extract (authority, i + 1, NONE)
		    in
			(host,
			 case Int.fromString port of
			     SOME port => port
			   | NONE => raise Authority)
		    end
	      | NONE => (authority, 80)

	structure Connection =
	    struct
		structure Map =
		    MkHashImpMap(type t = string * int
				 val equal = op=
				 fun hash (host, port) =
				     String.hash host + port)

		val map: Socket.t list Map.t = Map.map ()
		val lock = Lock.lock ()

		fun new' (host, port) =
		    case Map.lookup (map, (host, port)) of
			SOME [socket] =>
			    (Map.removeExistent (map, (host, port)); socket)
		      | SOME (socket::rest) =>
			    (Map.insert (map, (host, port), rest); socket)
		      | (NONE | SOME nil) => Socket.client (host, port)

		val new = Lock.sync lock new'

		fun idle' (host, port, socket) =
		    let
			val sockets =
			    case Map.lookup (map, (host, port)) of
				SOME sockets => sockets
			      | NONE => nil
		    in
(*--** spawn thread to close this connection after some idle time *)
			Map.insert (map, (host, port), socket::sockets)
		    end

		val idle = Lock.sync lock idle'
	    end

	fun request (url, request) =
	    let
		val authority =
		    case Url.getAuthority url of
			SOME authority => authority
		      | NONE => raise Authority
		val (host, port) = parseAuthority authority
	    in
		request' (host, port, request)
	    end
	and request' (host, port, request) =
	    let
		val socket = Connection.new (host, port)
		val closed =
		    (Http.writeRequest (socket, request); false)
		    handle IO.Io {...} => true   (*--** already closed *)
	    in
		if closed then request' (host, port, request)
		else
		    Http.readResponse socket
		    before Connection.idle (host, port, socket)
	    end

	fun localUrl url = Url.setScheme (Url.setAuthority (url, NONE), NONE)

	fun get url =
	    let
		val headers = Http.StringMap.map ()
		val authority =
		    case Url.getAuthority url of
			SOME authority => authority
		      | NONE => raise Authority
	    in
		Http.StringMap.insert (headers, "Host", authority);
		Http.StringMap.insert (headers, "User-Agent", userAgent);
		(*--** Date *)
		request (url, {method = "GET",
			       uri = localUrl url,
			       protocol = "HTTP/1.1",
			       headers, body = ""})
	    end

	fun post (url, {contentType, body}) =
	    let
		val headers = Http.StringMap.map ()
		val authority =
		    case Url.getAuthority url of
			SOME authority => authority
		      | NONE => raise Authority
	    in
		Http.StringMap.insert (headers, "Host", authority);
		Http.StringMap.insert (headers, "User-Agent", userAgent);
		Http.StringMap.insert (headers, "Content-Type", contentType);
		Http.StringMap.insert (headers, "Content-Length",
				       Int.toString (String.size body));
		(*--** Date *)
		request (url, {method = "POST",
			       uri = localUrl url,
			       protocol = "HTTP/1.1",
			       headers, body})
	    end
    end
