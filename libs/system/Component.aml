(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2001-2007
 *
 * Last change:
 *   $Date: 2007-04-07 18:11:54 $ by $Author: rossberg $
 *   $Revision: 1.66 $
 *)

import structure Inf               from "../rtt/Inf"
import structure PathMap           from "../rtt/PathMap"
import structure TextIO            from "TextIO"
import structure PrettyPrint       from "../utility/PrettyPrint"
import structure PPPath            from "../rtt/PPPath"
import structure PPType            from "../rtt/PPType"
import structure PPInf             from "../rtt/PPInf"
import structure IO                from "IO"
import structure OS                from "OS"
import structure Reflect           from "Reflect"
import structure Url               from "Url"
import structure Resolver          from "Resolver"
import structure UnsafeComponent   from "UnsafeComponent"
import structure DynMatch          from "DynMatch"
import structure UrlMap            from "UrlMap"
import signature COMPONENT         from "COMPONENT-sig"
import signature COMPONENT_MANAGER from "COMPONENT_MANAGER-sig"

(* Lazy! Only used for nested instances, and should reference parent manager. *)
(*ignore*)import structure ComponentManager : COMPONENT_MANAGER from "x-alice:/lib/system/ComponentManager"

local
structure Component' =
struct
    nonfix mod
    type inf = Inf.t option
    type mod = Reflect.module

    __primitive type component = "Component.component"
    type t = component
    datatype component' =
	EVALUATED of { inf: inf, mod: mod }
      | UNEVALUATED of { imports: (string * inf) vector,
			 body:    mod vector -> mod,
			 inf:     inf }
      | VNATIVE of { name: string, component: component' option ref }
	(* VNATIVE tag must be > UNEVALUATED for backwards compatibility! *)

    signature CM_COMPONENT = (structure ComponentManager : COMPONENT_MANAGER)
    structure CMSig = lazy Reflect.ReflectSig (signature S = CM_COMPONENT)

    __primitive val cast : 'a -> 'b = "Unsafe.cast"

    exception Sited    = UnsafeComponent.Sited
    exception Corrupt  = UnsafeComponent.Corrupt
    exception NotFound = UnsafeComponent.NotFound
    exception Mismatch = UnsafeComponent.Mismatch
    exception Eval     = UnsafeComponent.Eval
    exception Failure  = UnsafeComponent.Failure
    exception Internal of exn

    val extension = UnsafeComponent.extension

    fun trace (logger, id, s) =
	logger ("[component manager " ^ Int.toString id ^ "] " ^ s ^ "\n")

    val defaultLogStream =
	Option.map (fn "" => TextIO.stdErr
		     | s  => TextIO.openOut s handle IO.Io _ =>
			     (trace (fn s => TextIO.output(TextIO.stdErr, s), 0,
				     "warning: could not open log file " ^ s ^
				     ", falling back to stderr");
			      TextIO.stdErr))
		   (OS.Process.getEnv "ALICE_TRACE_COMPONENT")

    fun defaultLogger s =
	case defaultLogStream of
	    NONE => ()
	  | SOME f => (TextIO.output (f, s); TextIO.flushOut f)

    fun createEvaluated (mod, inf) = cast (EVALUATED {inf, mod}) : component
    fun createUnevaluated (imports, body, inf) =
	cast (UNEVALUATED {imports, body, inf}) : component
    fun createNative name =
	cast (VNATIVE {name, component = ref NONE}) : component

    fun fromPackage p =
	let
	    val (mod, j) = Reflect.reflectPackage p
	in
	     createEvaluated (mod, SOME j)
	end

    functor Create (signature S  functor F (CM: COMPONENT_MANAGER): S) =
	let
	    functor Body (CMComp: CM_COMPONENT) = F CMComp.ComponentManager
	    structure Sig = Reflect.ReflectSig (signature S = S)
	    structure Mod = Reflect.Reflect (signature S = CM_COMPONENT -> S
					     structure X = Body)
	    val imports = #[("x-alice:/lib/system/ComponentManager",
			     SOME CMSig.x)]
	    val body' = cast Mod.x
	    val body = fn #[cm] => body' cm
	in
	    (val component = createUnevaluated (imports, body, SOME Sig.x))
	end

    val primalHandlers =
	case OS.Process.getEnv "ALICE_LOAD" of
	    SOME s => Resolver.Handler.parse s
	  | NONE => [Resolver.Handler.default]

    val primalResolver =
	    Resolver.resolver {name = "load", handlers = primalHandlers,
			       memoize = true}

    val defaultResolver =
	let
	    val handlers =
		Resolver.Handler.prefix ("x-alice:", "delegate-x-alice:")
		::primalHandlers
	in
	    Resolver.resolver {name = "load", handlers, memoize = true}
	end

    fun safeUrl s = String.isPrefix "lib/fundamental/" s orelse
		    String.isPrefix "lib/rtt/" s

    type initial_table = (string * inf * mod) vector
    val primalTable = lazy UnsafeComponent.getInitialTable ()
    val defaultTable =
	lazy Vector.fromList (List.filter (fn (s, inf, mod) => safeUrl s)
					  (Vector.toList primalTable))

    val natives: component UrlMap.t =
	lazy UrlMap.map (
		Vector.fromList (
		    List.mapPartial
		    (fn (s, NONE, mod) =>
			    (SOME (Url.fromString ("x-alice:/" ^ s),
			     cast (EVALUATED {mod, inf=NONE})))
		      | _ => NONE) (Vector.toList primalTable)))

    fun load' (logger, id, resolver, delegate) url =
	case Resolver.localize resolver url of
	    SOME (Resolver.FILE name) =>
		(UnsafeComponent.load name
		 handle UnsafeComponent.CorruptInternal =>
		 case UrlMap.lookupNew (natives, Url.fromString name) of
		     UrlMap.EXISTING component => component
		   | UrlMap.NEW p =>
		     let
			 val component = createNative name
		     in
			 Promise.fulfill (p, component); component
		     end)
	  | SOME (Resolver.STRING string) =>
		(UnsafeComponent.unpack_ (UnsafeComponent.unzip string)
		 handle (UnsafeComponent.CorruptInternal | UnsafeComponent.Corrupt) =>
		            raise IO.Io {name = Url.toStringRaw url,
					 function = "load", cause = Corrupt}
		      | cause =>
			    raise IO.Io {name = Url.toStringRaw url,
					 function = "load", cause})
	  | SOME (Resolver.DELEGATE url') => delegate (logger, id, url')
	  | NONE => raise IO.Io {name = Url.toStringRaw url,
				 function = "load", cause = NotFound}

    val defaultLoadPromise = Promise.promise ()
    val defaultLinkPromise = Promise.promise ()
    val defaultLoad = Promise.future defaultLoadPromise
    val defaultLink = Promise.future defaultLinkPromise

    fun loadDelegate (logger, id, url) =
	(trace (logger, id, "delegate load " ^ Url.toStringRaw url);
	 defaultLoad url before
	 trace (logger, id, "inherited back " ^ Url.toStringRaw url)
	 handle Failure (_, e) =>
	    (trace (logger, id, "delegation failed with exception " ^
				Exn.name e ^ " for " ^ Url.toStringRaw url);
	     raise IO.Io {name = Url.toStringRaw url,
			  function = "load", cause = e}))

    fun linkDelegate (logger, id, url) =
	(trace (logger, id, "delegate link " ^ Url.toStringRaw url);
	 fromPackage (defaultLink url) before
	 trace (logger, id, "inherited back " ^ Url.toStringRaw url)
	 handle Failure (_, e) =>
	    case UrlMap.lookup (natives, url) of
		SOME component => (* pervasive component *)
		    (trace (logger, id, "inherited back native " ^
					Url.toStringRaw url);
		     component)
	      | NONE =>
		    (trace (logger, id, "delegation failed with exception " ^
			     Exn.name e ^ " for " ^ Url.toStringRaw url);
		     raise IO.Io {name = Url.toStringRaw url,
				  function = "load", cause = e}))

    fun noDelegate (logger, id, url) =
	(trace (logger, id, "delegate failed " ^ Url.toStringRaw url);
	 raise IO.Io {name = Url.toStringRaw url,
		      function = "load", cause = NotFound})

    val load = load' (defaultLogger, 0, primalResolver, noDelegate)

    fun save (name, component) =
	UnsafeComponent.save (name, component)
	handle UnsafeComponent.SitedInternal =>
		   raise IO.Io {name, function = "save", cause = Sited}
	     | cause => raise IO.Io {name, function = "save", cause}

    fun inf component = inf' (cast component)
    and inf' (EVALUATED {inf, ...}) = inf
      | inf' (UNEVALUATED {inf, ...}) = inf
      | inf' (VNATIVE _) = NONE

    fun imports component = imports' (cast component)
    and imports' (UNEVALUATED {imports, ...}) =
	Vector.map (Pair.mapFst Url.fromString) imports
      | imports' (EVALUATED _ | VNATIVE _) = #[]


    signature MANAGER_CONFIG = (val initialTable : initial_table
				val resolver : Resolver.t
				val nested : bool)

    functor MkManager'' (Config: MANAGER_CONFIG) =
    struct
	(*--** should query and fragment be rejected instead of ignored? *)

	val id = UnsafeComponent.counter ()

	exception Conflict

	val logger = ref defaultLogger

	val map: (mod * inf) UrlMap.t =
	    lazy UrlMap.map (Vector.map (fn (s, inf, mod) =>
					 (Url.fromString ("x-alice:/" ^ s),
					  (mod, inf)))

			     Config.initialTable)

	fun matchWith (rea, SOME inf, SOME importInf) =
	    Inf.matchWith (rea, inf, importInf)
	  | matchWith (rea, NONE, SOME _) =
	    trace (!logger, id,
		   "warning: no export signature, accepted unchecked")
	  | matchWith (rea, SOME _, NONE) =
	    trace (!logger, id,
		   "warning: no import signature, accepted unchecked")
	  | matchWith (rea, NONE, NONE) =
	    trace (!logger, id,
		   "warning: no import/export signatures, accepted unchecked")

	fun pathToString path = PrettyPrint.toString (PPPath.ppPath path, 10000)
	fun typToString typ = PrettyPrint.toString (PPType.ppTyp typ, 10000)
	fun infToString NONE = "(none)"
	  | infToString (SOME inf) = PrettyPrint.toString (PPInf.ppInf inf, 80)

	fun reraiseAs (packet, exn) = Exn.reraise (Exn.update (packet, exn))

	fun typeCheck (inf, rea, importInf, mod, url, baseUrlOpt) : mod =
	    let
		val url' = Url.toStringRaw url
		val baseUrlOpt' = Option.map Url.toString baseUrlOpt
		val message = url' ^ (case baseUrlOpt' of
					  SOME s => " imported by " ^ s
					| NONE => " linked explicitly")
	    in
		trace (!logger, id, "type-checking " ^ message);
		Exn.catch
		  (fn packet =>
		   case Exn.fromPacket packet of
		     Inf.Mismatch m =>
		     (trace (!logger, id, "type-checking failed");
		      trace (!logger, id, "signature expected" ^
					  (case baseUrlOpt' of
					       NONE => ""
					     | SOME s => " by " ^ s) ^
			    		  ":\n" ^ infToString importInf);
		      trace (!logger, id, "signature found in " ^ url' ^
					  ":\n" ^ infToString inf);
		      trace (!logger, id, "under realisation\n" ^
					  PathMap.foldi (fn (path, typ, s) =>
					      pathToString path ^ " -> " ^
					      typToString typ ^ "\n" ^ s)
					  (PathMap.foldi (fn (path, inf, s) =>
					      pathToString path ^ " ->\n" ^
					      infToString (SOME inf)^ "\n" ^ s)
					   "" (#inf_rea rea)) (#typ_rea rea));
		      reraiseAs
		      (packet, Failure (url, Mismatch {component = url,
						       request = baseUrlOpt,
						       cause = m})))
		   | Failure (url', e) =>
		     (trace (!logger, id, "exception " ^ exnName e ^
					  " propagated from " ^
					      Url.toStringRaw url' ^
					      " during type-checking");
		      reraiseAs (packet, Failure (url, e)))
		   | e =>
		     (trace (!logger, id, "internal exception " ^ exnName e ^
					      " during type-checking");
		      reraiseAs (packet, Failure (url, Internal e))))
		  (fn _ => matchWith (rea, inf, importInf));
		trace (!logger, id, "type-checked  " ^ message);
		mod
	    end

	fun load'' (url, delegate) =
	    Exn.catch (fn packet =>
			reraiseAs (packet, Failure(url, Exn.fromPacket packet)))
		      (fn _ => 	load' (!logger, id, Config.resolver, delegate)
				      url)

	fun load url = load'' (url, loadDelegate)

	fun lazyLink url : mod * inf =
	    let
		val result = lazy
		    case UrlMap.lookupNew (map, url) of
			UrlMap.EXISTING entry => entry
		      | UrlMap.NEW p =>
			    let
				val entry =
				    lazy eval' (url, load'' (url, linkDelegate))
			    in
				Promise.fulfill (p, entry); entry
			    end
	    in
		(lazy #1 result, lazy #2 result)
	    end
	and typedLink (url, rea, importInf, baseUrlOpt) : mod =
	    let
		val (mod, inf) = lazyLink url
		val rea' = Inf.cloneRea rea
		val mod' = lazy typeCheck (inf, rea', importInf, mod,
					   url, baseUrlOpt)
	    in
		case importInf of
		    NONE => ()
		  | SOME inf' => DynMatch.matchWith (rea, mod', inf');
(*DEBUG
trace (!logger, id, "considering import " ^ Url.toStringRaw url ^ ":\n" ^ infToString importInf);
trace (!logger, id, "extended realisation after considering import " ^ Url.toStringRaw url ^ ":" ^
	 PathMap.foldi (fn (path, typ, s) => "\n" ^ pathToString path ^ " -> _" ^ s)
	 (PathMap.foldi (fn (path, inf, s) => "\n" ^ pathToString path ^ " -> _" ^ s)
	  "" (#inf_rea rea)) (#typ_rea rea));
*)
		mod'
	    end
	and eval' (baseUrl, component) = eval'' (baseUrl, cast component)
	and eval'' (_, EVALUATED {mod, inf}) = (Future.await mod, inf)
	  | eval'' (baseUrl, UNEVALUATED {imports, body, inf}) =
	    let
		fun resolve s =
		    let
			val url = Url.fromString s
			val url = Url.setQuery (url, NONE)
			val url = Url.setFragment (url, NONE)
		    in
			Url.resolve baseUrl url
		    end
		val rea = Inf.rea ()
		do trace (!logger, id, "linking " ^ Url.toStringRaw baseUrl)
		val imports' =
		    Vector.map (fn (importUrlS, importInf) =>
				   typedLink (resolve importUrlS, rea,
					      importInf, SOME baseUrl))
			       imports
		do trace (!logger, id, "evaluating " ^ Url.toStringRaw baseUrl)
		val mod = Exn.catch
			  (fn packet =>
			   case Exn.fromPacket packet of
			      Failure _ => Exn.reraise packet
			    | e =>
			      (trace (!logger, id,
				      "evaluation failed in " ^
				      Url.toStringRaw baseUrl);
			       reraiseAs (packet, Failure (baseUrl, Eval e))))
			  (fn _ => body imports')
		do trace (!logger, id, "evaluated  " ^ Url.toStringRaw baseUrl)
		val dynInf =
		    case inf of
			NONE => NONE
		      | SOME inf' =>
			SOME (lazy DynMatch.strengthenWith (rea, mod, inf'))
		do trace (!logger, id, "linked " ^ Url.toStringRaw baseUrl)
	    in
		(mod, dynInf)
	    end
	  | eval'' (baseUrl, VNATIVE {name, component = compOpt}) =
	    let
		val p = Promise.promise ()
		val component = 
		    case Ref.exchange (compOpt, Promise.future p) of
			SOME component => component
		      | NONE =>
			    UnsafeComponent.linkNative name
			    handle cause' =>
				let
				    val (cause, msg) =
					case cause' of
					    UnsafeComponent.Native msg =>
						(cause', msg)
					  | UnsafeComponent.CorruptInternal =>
						(Corrupt,
						 "could not resolve symbol")
					  | _ =>
						(cause', "internal exception "
						 ^ Exn.name cause')
				    val exn = IO.Io {name, function = "load",
						     cause}
				in
				    trace (!logger, id, "link native " ^ msg);
				    Promise.fail (p, exn); raise exn
				end
	    in
		Promise.fulfill (p, SOME component);
		eval'' (baseUrl, component)
	    end

	fun validate url =
	    let
		val cwd = Url.fromString (OS.FileSys.getDir () ^ "/")
		val cwd = Url.setScheme (cwd, SOME "file")
		val url = Url.resolve cwd url
		val url = Url.setQuery (url, NONE)
		val url = Url.setFragment (url, NONE)
	    in
		url
	    end

	fun eval (url, component) =
	    let
		val (mod, inf) = eval' (validate url, component)
	    in
		case inf of
		    SOME j => Reflect.reifyPackage (mod, j)
		  | NONE => raise Failure (url, Internal Corrupt)
	    end

	fun link url =
	    let
		do trace (!logger, id, "link " ^ Url.toStringRaw url)
		val (mod, inf) = lazyLink (validate url)
	    in
		case inf of
		    SOME j => Reflect.reifyPackage (mod, j)
		  | NONE => raise Failure (url, Internal Corrupt)
	    end

	fun enter (url', component) =
	    let
		val url = validate url'
	    in
		case UrlMap.lookupNew (map, url) of
		    UrlMap.EXISTING _ => raise Conflict
		  | UrlMap.NEW p =>
			Promise.fulfill (p, lazy eval' (url, component))
			before trace (!logger, id,
				      "entered " ^ Url.toStringRaw url)
	    end

	fun lookup url =
	    case UrlMap.lookup (map, validate url) of
		SOME entry => SOME (createEvaluated entry)
	      | NONE => NONE

	functor Eval (val component: component val url: Url.t signature S): S =
	    let
		structure Sig = Reflect.ReflectSig(signature S = S)
		val url = validate url
		val (mod, inf) = eval' (url, component)
		do matchWith (Inf.rea (), inf, SOME Sig.x)
		   handle Inf.Mismatch m =>
		    raise Failure (url, Mismatch{component = Url.fromString "",
						 request = NONE, cause = m})
	    in
		Reflect.Reify(val x = mod signature S = S)
	    end

	functor Link (val url: Url.t signature S): S =
	    let
		structure Sig = Reflect.ReflectSig(signature S = S)
		val mod = typedLink (validate url, Inf.rea (), SOME Sig.x, NONE)
	    in
		Reflect.Reify(val x = await mod signature S = S)
	    end

	functor Enter (val url: Url.t signature S structure X: S) =
	    (do enter (url, fromPackage (pack X : S)))

	do trace (!logger, id, "created")
    end

    val url = Url.fromString "x-alice:/lib/system/Component"
    val unsafeUrl = Url.fromString "x-alice:/lib/system/UnsafeComponent"
    val managerUrl = Url.fromString "x-alice:/lib/system/ComponentManager"

    (* Wild hack to implement proper manager nesting *)
    signature UNSAFE_COMPONENT = (* copied from UnsafeComponent.asig *)
    sig
	exception SitedInternal
	exception CorruptInternal
	exception Sited
	exception Corrupt
	exception NotFound

	exception Mismatch of {component : Url.t,
			       request : Url.t option,
			       cause : Inf.mismatch}
	exception Eval of exn
	exception Failure of Url.t * exn

	exception Native of string

	val extension: string
	val counter: unit -> int

	val getInitialTable: unit -> (string * 'sign * 'str) vector

	val save: string * 'component -> unit   (* OS.SysErr,
						   SitedInternal *)
	val load: string -> 'component          (* OS.SysErr, NotFound,
						   CorruptInternal *)
	val linkNative: string -> 'component    (* Native *)

	val pack_: 'component -> string         (* SitedInternal *)
	val unpack_: string -> 'component       (* CorruptInternal *)

        val unzip : string -> string            (* Corrupt *)
    end

    structure MyUnsafeComponent : UNSAFE_COMPONENT =
    struct
	open UnsafeComponent
	val load = fn f => cast load f
	val save = fn f => cast save f
	fun getInitialTable () = #[]
    end

    functor MkManager' (Config : MANAGER_CONFIG) : COMPONENT_MANAGER =
    let
	structure Manager = MkManager'' Config
	val self =
	    fromPackage (pack (structure ComponentManager = Manager)
			    : (structure ComponentManager : COMPONENT_MANAGER))
	val unsafe =
	    fromPackage (pack (structure UnsafeComponent = MyUnsafeComponent)
			    : (structure UnsafeComponent : UNSAFE_COMPONENT))
	do Manager.enter (managerUrl, self)
	do if Config.nested then Manager.enter (unsafeUrl, unsafe)
    in
	Manager
    end

    functor MkManager (val resolver : Resolver.t) =
	MkManager' (val resolver = resolver
		    val initialTable = defaultTable
		    val nested = true)
end
in
    structure Component : COMPONENT = Component'
    structure PrimalManager =
	Component'.MkManager' (val resolver = Component'.primalResolver
			       val initialTable = Component'.primalTable
			       val nested = false)

    do if Vector.length Component'.primalTable > 0 then
	(*) We are the root instance...
	let
	    val self = pack (structure Component = Component
			     structure PrimalManager = PrimalManager)
			  : (structure Component : COMPONENT
			     structure PrimalManager : COMPONENT_MANAGER)
	in
	    PrimalManager.enter (Component'.url, Component.fromPackage self);
	    Promise.fulfill (Component'.defaultLoadPromise, PrimalManager.load);
	    Promise.fulfill (Component'.defaultLinkPromise, PrimalManager.link)
	end
	else
	(*) We are a nested manager's instance...
	(
	    Promise.fulfill (Component'.defaultLoadPromise, ComponentManager.load);
	    Promise.fulfill (Component'.defaultLinkPromise, ComponentManager.link)
	)
end
