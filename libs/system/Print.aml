(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2003-2005
 *
 * Last change:
 *   $Date: 2005-04-21 12:05:11 $ by $Author: rossberg $
 *   $Revision: 1.4 $
 *)

import structure Type        from "../rtt/Type"
import structure TextIO      from "TextIO"
import structure PrettyPrint from "../utility/PrettyPrint"
import structure PPValue     from "PPValue"
import structure PPType      from "../rtt/PPType"
import signature PRINT       from "PRINT-sig"

structure Print' =
struct
    val depth       = PPValue.defaultDepth
    val width       = PPValue.defaultWidth
    val layoutWidth = ref 80

    fun outputVal'  t (s,x,n) = PrettyPrint.output(s, PPValue.ppVal t x, n)
    fun outputType' t (s,x,n) = PrettyPrint.output(s, PPType.ppTyp t, n)

    fun printVal'  t x = (outputVal'  t (TextIO.stdOut, x, !layoutWidth);
			  TextIO.flushOut TextIO.stdOut)
    fun printType' t x = (outputType' t (TextIO.stdOut, x, !layoutWidth);
			  TextIO.flushOut TextIO.stdOut)

    fun register t f =
	PPValue.registerTyp' t (fn _ => fn _ => fn x =>
				SOME (PrettyPrint.text (f x)))
end

structure Print (* : PRINT *) =
struct
    val depth = Print'.depth
    val width = Print'.width
    val layoutWidth = Print'.layoutWidth
    __overload 'a printVal :   'a -> unit = Print'.printVal'
    __overload 'a printType :  'a -> unit = Print'.printType'
    __overload 'a outputVal :  TextIO.outstream * 'a * int -> unit
				= Print'.outputVal'
    __overload 'a outputType : TextIO.outstream * 'a * int -> unit
				= Print'.outputType'

    exception Type = Type.Type
    __overload 'a register : ('a -> string) -> unit = Print'.register
end
