(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2002-2005
 *
 * Last change:
 *   $Date: 2007-02-18 12:56:26 $ by $Author: rossberg $
 *   $Revision: 1.5 $
 *)

import structure OS from "OS"

signature PRIM_IO =
    sig
	type elem
	type vector
	type vector_slice
	eqtype array
	type array_slice

	eqtype pos
	val compare: pos * pos -> order

	datatype reader = RD of
	    {name: string,
	     chunkSize: int,
	     readVec: (int -> vector) option,
	     readArr: (array_slice -> int) option,
	     readVecNB: (int -> vector option) option,
	     readArrNB: (array_slice -> int option) option,
	     block: (unit -> unit) option,
	     canInput: (unit -> bool) option,
	     avail: unit -> int option,
	     getPos: (unit -> pos) option,
	     setPos: (pos -> unit) option,
	     endPos: (unit -> pos) option,
	     verifyPos: (unit -> pos) option,
	     close: unit -> unit,
	     ioDesc: OS.IO.iodesc option}

	datatype writer = WR of
	    {name: string,
	     chunkSize: int,
	     writeVec: (vector_slice -> int) option,
	     writeArr: (array_slice -> int) option,
	     writeVecNB: (vector_slice -> int option) option,
	     writeArrNB: (array_slice -> int option) option,
	     block: (unit -> unit) option,
	     canOutput: (unit -> bool) option,
	     getPos: (unit -> pos) option,
	     setPos: (pos -> unit) option,
	     endPos: (unit -> pos) option,
	     verifyPos: (unit -> pos) option,
	     close: unit -> unit,
	     ioDesc: OS.IO.iodesc option}

	val openVectorListRd: vector list -> reader
	val openVectorListWr: unit -> vector list * writer
	val openVector: vector -> reader
	val nullRd: unit -> reader
	val nullWr: unit -> writer
	val augmentReader: reader -> reader
	val augmentWriter: writer -> writer
    end
