(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2000-2003
 *
 * Last change:
 *   $Date: 2006-05-09 12:43:24 $ by $Author: rossberg $
 *   $Revision: 1.5 $
 *)

import structure TextIO from "TextIO"
import structure OS from "OS"

signature UNIX =
sig
    type ('a,'b) proc
    type signal

    datatype exit_status =
       W_EXITED
      | W_EXITSTATUS of Word8.word
      | W_SIGNALED of signal
      | W_STOPPED of signal

    val execute :	string * string list -> ('a,'b) proc

(*TODO
    val executeInEnv :	string * string list * string list -> ('a,'b) proc
    val fromStatus :	OS.Process.status -> exit_status
    val textInstreamOf:	(TextIO.instream, 'a) proc -> TextIO.instream
    val binInstreamOf :	(BinIO.instream, 'a) proc -> BinIO.instream
    val textOutstreamOf: ('a, TextIO.outstream) proc -> TextIO.outstream
    val binOutstreamOf:	('a, BinIO.outstream) proc -> BinIO.outstream
    val kill :		('a,'b) proc * signal -> unix
    val exit :		Word8.word -> 'a
*)

    val streamsOf :	(TextIO.instream, TextIO.outstream) proc
			-> TextIO.instream * TextIO.outstream

    val wait    :       ('a,'b) proc -> OS.Process.status
    val reap :		('a,'b) proc -> OS.Process.status 
end
