(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date: 2005-05-30 07:26:57 $ by $Author: tack $
 *   $Revision: 1.5 $
 *)

import structure FD               from "x-alice:/lib/gecode/FD"
import structure FS               from "x-alice:/lib/gecode/FS"
import structure Space            from "x-alice:/lib/gecode/Space"
import structure Inspector        from "x-alice:/lib/tools/Inspector"

import signature EXPLORER_INSPECT from "EXPLORER_INSPECT-sig"

structure ExplorerInspect :> EXPLORER_INSPECT 
  where type space = Space.space =
  struct

    type space = Space.space
      
    fun createFD s (depth,v,t,_,_) = 
        let
            fun addCommas nil = nil
              | addCommas [x] = [x]
              | addCommas (x::xr) = x::", "::(addCommas xr)

            fun boundsToString bs =
                addCommas (Vector.toList (Vector.map (fn(x,y) =>
                                           if x=y then Int.toString x
                                           else Int.toString x^".."^
                                                Int.toString y) bs))

            val descr = Inspector.Value(v,t)
            val rep =
                let
                    val dom = FD.Reflect.dom(s,v)
                in
                    String.concat (boundsToString dom)
                end
                    handle Space.InvalidVar => "invalid"
            val cont =
            Inspector.container (descr,
				 Array.fromVector
				 #[Inspector.simple(descr,
						    (rep,
						     Inspector.intStyle)),
				   Inspector.simple(descr,
						    ("", Inspector.defaultStyle))])
        in 
	    Inspector.concat{prefix=
			     [("intvar{|",
			       Inspector.brackStyle)],
			     tree=cont,
			     suffix=
			     [("|}",
			       Inspector.brackStyle)],
			     orient=Inspector.Son}
        end

    fun createBool s (depth,v,t,_,_) = 
        let
            val descr = Inspector.Value(v,t)
            val rep = (if FD.Reflect.boolVal(s,v) then "true" else "false")
                handle FD.NotAssigned => "undet"
                     | Space.InvalidVar => "invalid"
            val cont =
            Inspector.container (descr,
				 Array.fromVector
				 #[Inspector.simple(descr,
						    (rep,
						     Inspector.intStyle))])
        in 
	    Inspector.concat{prefix=
			     [("boolvar{|",
			       Inspector.brackStyle)],
			     tree=cont,
			     suffix=
			     [("|}",
			       Inspector.brackStyle)],
			     orient=Inspector.Son}
        end

    fun createFS s (depth,v,t,_,_) = 
        let
            fun addCommas nil = nil
              | addCommas [x] = [x]
              | addCommas (x::xr) = x::", "::(addCommas xr)

            fun boundsToString bs =
                addCommas (Vector.toList (Vector.map (fn(x,y) =>
                                           if x=y then Int.toString x
                                           else Int.toString x^".."^
                                                Int.toString y) bs))

            val descr = Inspector.Value(v,t)
            val lb = FS.Reflect.lowerBound(s,v)
            val lbs = String.concat (boundsToString lb)
            val ub = FS.Reflect.upperBound(s,v)
            val ubs = String.concat (boundsToString ub)
            val rep = 
                let
                    val card =
                        let
                            val (cmin,cmax) = FS.Reflect.card(s,v)
                        in
                            if FS.Value.is(s,v) then
                                Int.toString cmin
                            else
                                Int.toString cmin^"/"^
                                Int.toString cmax
                        end
                in
                    if FS.Value.is(s,v) then
                        "<"^lbs^"> ("^card^")"
                    else
                        "<"^lbs^"> / <"^ubs^"> ("^card^")"
                end
                    handle Space.InvalidVar => "invalid"
            val cont =
            Inspector.container (descr,
				 Array.fromVector
				 #[Inspector.simple(descr,
						    (rep,
						     Inspector.intStyle))])
        in 
	    Inspector.concat{prefix=
			     [("setvar{|",
			       Inspector.brackStyle)],
			     tree=cont,
			     suffix=
			     [("|}",
			       Inspector.brackStyle)],
			     orient=Inspector.Son}
        end
     
    fun inspect t root s =
	(Inspector.register2 (createFD s);
	 Inspector.register2 (createBool s);
	 Inspector.register2 (createFS s);
	 Inspector.inspectVal t root)

  end
