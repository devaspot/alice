(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2004
 *
 * Last change:
 *   $Date: 2005-08-29 07:04:15 $ by $Author: bgrund $
 *   $Revision: 1.5 $
 *)

import structure FD        from "x-alice:/lib/gecode/FD"
import structure Explorer  from "Explorer"

fun queens n cl space =
    let
	open FD

	val v = rangeVec(space, n, (0, n-1))
	val v1 = Vector.tabulate (n, fn n => (n, Vector.sub(v,n)))
	val v2 = Vector.tabulate (n, fn n => (~n, Vector.sub(v,n)))
    in
	distinctOffset(space, v1, cl);
	distinctOffset(space, v2, cl);
	distinct(space, v, cl);
	branch(space, v, B_SIZE_MIN, B_MIN);
	v
    end

;Explorer.init (queens 8 FD.DEF);

fun money cl space = 
    let
	open FD

	val v as #[s,e,n,d,m,o',r,y] = rangeVec(space, 8, (0,9))

        val root = {s=s,e=e,n=n,d=d,m=m,o'=o',r=r,y=y}

	val v1 = #[(1000,   s),
		   (100,    e),
		   (10,     n),
		   (1,      d),

		   (1000,   m),
		   (100,    o'),
		   (10,     r),
		   (1,      e),

		   (~10000, m),
		   (~1000,  o'),
		   (~100,   n),
		   (~10,    e),
		   (~1,     y)]
    in
	relI(space, s, NQ, 0);
	relI(space, m, NQ, 0);
	linear(space, v1, EQ, 0, cl);
	distinct(space, v, cl);
	branch(space, v, B_SIZE_MIN, B_MIN);
        root
    end

fun photo space =
    let
	open FD

	val s_prefs = #[(0,2), (1,4), (2,3), 
			(2,4), (3,0), (4,3),
			(4,0), (4,1)]
	val small = {n_names=5, n_prefs=8, prefs=s_prefs}
	val spec = small
	val pos = rangeVec(space,
			   #n_names spec,
			   (0,(#n_names spec)-1))
	val sat = range(space, (0, #n_prefs spec))
	val ful = boolvarVec (space, #n_prefs spec)

	val eq = Vector.tabulate ((#n_prefs spec)+1,
            fn n => 
	       if n=(#n_prefs spec) then
		   (~1, sat)
	       else
		   (1, boolvar2intvar (Vector.sub(ful, n))))

	fun better(s1, s2) =
	    relI(s1, sat, GR, Reflect.value(s2, sat))
    in
	Vector.appi (fn (i,(pa, pb)) =>
			let
			    val b = boolvarVec (space, 2)
			in
			    Reified.linear(space,
				    #[(1, Vector.sub(pos, pb)),
				      (~1, Vector.sub(pos, pa))],
				    EQ, 1, Vector.sub(b, 0), DEF);
			    Reified.linear(space,
				    #[(1, Vector.sub(pos, pa)),
				      (~1, Vector.sub(pos, pb))],
				    EQ, 1, Vector.sub(b, 1), DEF);
			    exor(space,
				     Vector.sub(b, 0),
				     Vector.sub(b, 1),
				     Vector.sub(ful, i))
			end) (#prefs spec);

	linear(space, eq, EQ, 0, DEF);
	distinct(space, pos, DEF);
	rel(space, Vector.sub(pos, 0), LE,
	    Vector.sub(pos, 1));
	branch(space, pos, B_NONE, B_MIN);

	((pos, sat), better)
    end

(*val _ = Explorer.init (queens 32 FD.BND)*)
(*val _ = Explorer.exploreBest photo*)
val _ = Explorer.exploreAll (money FD.BND)
