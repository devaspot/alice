(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date: 2005-07-20 12:37:52 $ by $Author: tack $
 *   $Revision: 1.2 $
 *)

import signature SPACE      from "x-alice:/lib/gecode/SPACE-sig"
import signature TYPES         from "TYPES-sig"
import signature TREE_NODE     from "TREE_NODE-sig"
import signature GTK_NODE      from "GTK_NODE-sig"

import signature VISUAL_NODE   from "VISUAL_NODE-sig"

functor MkVisualNode (Space : SPACE)
    (Types : TYPES
     where type space = Space.space)
    (TreeNode : TREE_NODE
     where type tree = Types.tree
     where type status = Types.status)
    (GtkNode : GTK_NODE
     where type explorer_state = Types.explorer_state
     where type status = Types.status
     where type tree = Types.tree)
    : VISUAL_NODE
    where type tree = Types.tree
    where type explorer_state = Types.explorer_state
    =
  struct
      type tree = Types.tree
      type explorer_state = Types.explorer_state

  fun dirtyUp (Types.N({dirty=ref true,...},_,_)) = ()
    | dirtyUp (Types.N({dirty=dirty,...},ref parent, _)) =
      (dirty:=true;
       case parent of
	   NONE => ()
	 | SOME p => dirtyUp p)

  fun undrawAndDirtyUp node =
      (GtkNode.undrawSubtree node;
       dirtyUp node)

  fun adjust (state, v as Types.N({dirty=dirty,oldOffset=oldOffset,vNode=vNode,
				   offset=offset,status=ref status,
				   connection=connection,
				   hidden=ref hidden,
                                   groupOffset=ref groupOffset,...},
				  ref mom,ref children),
	      momX, momByX, myY, momGroupOffset) =
      let
	  val myOffset = !offset
	  val myByX = momByX + myOffset -
		      (case !oldOffset of NONE => myOffset
					| SOME x => x)
      in
	  oldOffset := NONE;
	  if (!dirty) then
	      (dirty := false;
	       case (!vNode) of NONE =>
                                GtkNode.drawNode (state, momX,
                                                  myY-TreeNode.verSpaceI, v)
			      | SOME v =>
                 (if myByX <> 0 then
                      GtkNode.moveNode (state, v, myByX) else ();
		  (case mom of NONE => ()
			     | SOME m =>
	             ((case (!connection) of NONE => ()
					   | SOME c => (GtkNode.unconnect c));
		      connection := SOME (GtkNode.connect
					      (state, hidden, status,
					       TreeNode.getStatus m,
					       momX+myOffset,
					       myY,
					       momX,
					       myY-TreeNode.verSpaceI))));
		  if hidden then ()
		  else Vector.app
			   (fn k => adjust (state, k,
					    momX+myOffset-groupOffset,
					    myByX, myY+TreeNode.verSpaceI,
					    groupOffset)) children))
	  else
              (if myByX<>0 then
		   (GtkNode.moveTree state (v, myByX);
		    case mom of NONE => ()
			      | SOME m =>
                      ((case (!connection) of NONE => ()
					    | SOME c => (GtkNode.unconnect c));
		       connection :=
                       SOME (GtkNode.connect (state, hidden, status,
					      TreeNode.getStatus m,
					      momX+myOffset,
					      myY,
					      momX,
					      myY-TreeNode.verSpaceI))))
	       else
		   ())
      end

          
  fun toggleHide (ref (SOME ({tree={currentNode=ref (SOME v),
                                    tree=tree,...},...}
			     : Types.explorer_state))) =
      (case v of
	   Types.N(_,_,ref #[]) => ()
	 | Types.N({hidden=hidden as ref true,...},_,_) =>
	   (GtkNode.undrawSubtree v;
	    hidden:=false;
	    dirtyUp v)
	 | Types.N({hidden=hidden,...},_,_) =>
	   (GtkNode.undrawSubtree v;
	    hidden:=true;
	    dirtyUp v))	    
    | toggleHide _ = ()


  fun unhideAll (v as Types.N({hidden=hidden,...},_,children)) =
      if (!hidden) then
	  (GtkNode.undrawSubtree v;
	   hidden:=false;
	   dirtyUp v;
	   Vector.app unhideAll (!children))  
      else
	  Vector.app unhideAll (!children)

  fun hideFailed (v as Types.N({hidden=hidden,status=status,openChildren=openChildren,
                                hasSolBelow=hasSolBelow,...},_,children)) =
      if (!hidden) then ()
      else
	  case (!status) of
	      Types.CHOICE _ =>
	      if (!hasSolBelow) orelse (!openChildren)>0 then
		  Vector.app hideFailed (!children)
	      else
		  (GtkNode.undrawSubtree v;
		   hidden:=true;
		   dirtyUp v)
            | _ => ()
  end
