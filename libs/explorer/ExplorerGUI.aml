(*
 * This is a generated file, created by alice-glade.
 * Modifications may get lost.
 *)


import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"

import structure Key from "x-alice:/lib/gtk/Key"

structure ExplorerGUI =
  struct
    structure Helpers = struct
      val accelGroup = Gtk.AccelGroup.new()
      val tooltips = Gtk.Tooltips.new()
      fun containerAddList(cont, children) = 
        List.app (fn c => Gtk.Container.add(cont,c)) children
    end

    val aliceexplorer = Gtk.Window.new(Gtk.WindowType.TOPLEVEL)
    val _ = Gtk.Window.setTitle(aliceexplorer,"Alice/Gecode Explorer")
    val _ = Gtk.Window.addAccelGroup(aliceexplorer,Helpers.accelGroup)
    val vbox1 = Gtk.VBox.new(false,0)
    val menubar = Gtk.MenuBar.new()
    val menuitem1 = Gtk.MenuItem.newWithMnemonic("_File")
    val menuitem1_menu = Gtk.Menu.new()
    val save = Gtk.ImageMenuItem.newFromStock("gtk-save",Helpers.accelGroup)
    val cancel_search = Gtk.ImageMenuItem.newWithMnemonic("_Cancel")
    val _ = Gtk.Widget.addAccelerator(cancel_search,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_C, [Gdk.ModifierType.CONTROL_MASK],[Gtk.AccelFlags.VISIBLE])
    val image24 = Gtk.Image.newFromStock("gtk-cancel",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(cancel_search,image24)
    val reset = Gtk.ImageMenuItem.newWithMnemonic("_Reset")
    val _ = Gtk.Widget.addAccelerator(reset,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_R,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image25 = Gtk.Image.newFromStock("gtk-clear",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(reset,image25)
    val separatormenuitem1 = Gtk.MenuItem.new()
    val quit = Gtk.ImageMenuItem.newFromStock("gtk-quit",Helpers.accelGroup)
    val _ = Helpers.containerAddList(menuitem1_menu,[save,cancel_search,reset,separatormenuitem1,quit])
    val _ = Gtk.MenuItem.setSubmenu(menuitem1,menuitem1_menu)
    val nodemenu = Gtk.MenuItem.newWithMnemonic("_Node")
    val nodemenu_menu = Gtk.Menu.new()
    val hidenodes = Gtk.MenuItem.newWithMnemonic("(Un)_Hide")
    val _ = Gtk.Widget.addAccelerator(hidenodes,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_h,[],[Gtk.AccelFlags.VISIBLE])
    val unhide_all = Gtk.MenuItem.newWithMnemonic("Unhide _subtree")
    val _ = Gtk.Widget.addAccelerator(unhide_all,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_h,([Gdk.ModifierType.SHIFT_MASK]),[Gtk.AccelFlags.VISIBLE])
    val hide_failed = Gtk.MenuItem.newWithMnemonic("Hide _failed subtrees")
    val _ = Gtk.Widget.addAccelerator(hide_failed,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_f,[],[Gtk.AccelFlags.VISIBLE])
    val separator2 = Gtk.MenuItem.new()
    val go_to_child = Gtk.ImageMenuItem.newWithMnemonic("Go to _child")
    val _ = Gtk.Widget.addAccelerator(go_to_child,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Down,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image26 = Gtk.Image.newFromStock("gtk-go-down",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(go_to_child,image26)
    val go_to_parent = Gtk.ImageMenuItem.newWithMnemonic("Go to _parent")
    val _ = Gtk.Widget.addAccelerator(go_to_parent,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Up,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image27 = Gtk.Image.newFromStock("gtk-go-up",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(go_to_parent,image27)
    val go_to_left_sibling = Gtk.ImageMenuItem.newWithMnemonic("Go to _left sibling")
    val _ = Gtk.Widget.addAccelerator(go_to_left_sibling,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Left,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image28 = Gtk.Image.newFromStock("gtk-go-back",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(go_to_left_sibling,image28)
    val go_to_right_sibling = Gtk.ImageMenuItem.newWithMnemonic("Go to _right sibling")
    val _ = Gtk.Widget.addAccelerator(go_to_right_sibling,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Right,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image29 = Gtk.Image.newFromStock("gtk-go-forward",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(go_to_right_sibling,image29)
    val _ = Helpers.containerAddList(nodemenu_menu,[hidenodes,unhide_all,hide_failed,separator2,go_to_child,go_to_parent,go_to_left_sibling,go_to_right_sibling])
    val _ = Gtk.MenuItem.setSubmenu(nodemenu,nodemenu_menu)
    val search = Gtk.MenuItem.newWithMnemonic("_Search")
    val search_menu = Gtk.Menu.new()
    val next_solution = Gtk.MenuItem.newWithMnemonic("Ne_xt solution")
    val _ = Gtk.Widget.addAccelerator(next_solution,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_n,[],[Gtk.AccelFlags.VISIBLE])
    val next_n_solutions = Gtk.MenuItem.newWithMnemonic("Next _n solutions")
    val _ = Gtk.Widget.addAccelerator(next_n_solutions,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_n,([Gdk.ModifierType.SHIFT_MASK]),[Gtk.AccelFlags.VISIBLE])
    val all_solutions = Gtk.MenuItem.newWithMnemonic("_All solutions")
    val _ = Gtk.Widget.addAccelerator(all_solutions,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_a,[],[Gtk.AccelFlags.VISIBLE])
    val one_step = Gtk.MenuItem.newWithMnemonic("One _step")
    val _ = Gtk.Widget.addAccelerator(one_step,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_s,[],[Gtk.AccelFlags.VISIBLE])
    val _ = Helpers.containerAddList(search_menu,[next_solution,next_n_solutions,all_solutions,one_step])
    val _ = Gtk.MenuItem.setSubmenu(search,search_menu)
    val options1 = Gtk.MenuItem.newWithMnemonic("_Options")
    val options1_menu = Gtk.Menu.new()
    val inspection1 = Gtk.MenuItem.newWithMnemonic("_Inspection")
    val view1 = Gtk.MenuItem.newWithMnemonic("_View...")
    val search1 = Gtk.MenuItem.newWithMnemonic("_Search...")
    val _ = Helpers.containerAddList(options1_menu,[inspection1,view1,search1])
    val _ = Gtk.MenuItem.setSubmenu(options1,options1_menu)
    val menuitem4 = Gtk.MenuItem.newWithMnemonic("_Help")
    val menuitem4_menu = Gtk.Menu.new()
    val about = Gtk.ImageMenuItem.newWithMnemonic("_About...")
    val image30 = Gtk.Image.newFromStock("gtk-dialog-info",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(about,image30)
    val _ = Gtk.Container.add(menuitem4_menu,about)
    val _ = Gtk.MenuItem.setSubmenu(menuitem4,menuitem4_menu)
    val _ = Helpers.containerAddList(menubar,[menuitem1,nodemenu,search,options1,menuitem4])
    val hbox1 = Gtk.HBox.new(false,0)
    val scrolledwindow_xa = Gtk.Adjustment.new(0.0,0.0,400.0,1.0,400.0,400.0)
    val scrolledwindow_ya = Gtk.Adjustment.new(0.0,0.0,250.0,1.0,250.0,250.0)
    val scrolledwindow = Gtk.ScrolledWindow.new(scrolledwindow_xa,scrolledwindow_ya)
    val _ = Gtk.ScrolledWindow.setPlacement(scrolledwindow,Gtk.CornerType.TOP_LEFT)
    val _ = Gtk.ScrolledWindow.setShadowType(scrolledwindow,Gtk.ShadowType.NONE)
    val _ = Gtk.ScrolledWindow.setPolicy(scrolledwindow,Gtk.PolicyType.ALWAYS,Gtk.PolicyType.ALWAYS)
    val _ = Gtk.Widget.setSizeRequest(scrolledwindow,400,250)
    val vbox2 = Gtk.VBox.new(false,0)
    val zoomToFit = Gtk.Button.new()
    val _ = Gtk.Widget.setSizeRequest(zoomToFit,24,24)
    val _ = Gtk.Button.setRelief(zoomToFit,Gtk.ReliefStyle.NONE)
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,zoomToFit,"Zoom to fit window","")
    val image1 = Gtk.Image.newFromStock("gtk-zoom-fit", Gtk.IconSize.BUTTON)
    val _ = Gtk.Container.add(zoomToFit,image1)
    val scale_adj = Gtk.Adjustment.new(1.0,0.1,3.0,0.1,0.0,0.0)
    val scale = Gtk.VScale.new(scale_adj)
    val _ = Gtk.Scale.setDrawValue(scale,false)
    val _ = Gtk.Scale.setValuePos(scale,Gtk.PositionType.TOP)
    val _ = Gtk.Scale.setDigits(scale,1)
    val _ = Gtk.Range.setUpdatePolicy(scale,Gtk.UpdateType.CONTINUOUS)
    val _ = Gtk.Range.setInverted(scale,false)
    val _ = Gtk.Box.packStart(vbox2,zoomToFit,false,false,0)
    val _ = Gtk.Box.packStart(vbox2,scale,true,true,0)
    val _ = Gtk.Box.packStart(hbox1,scrolledwindow,true,true,0)
    val _ = Gtk.Box.packStart(hbox1,vbox2,false,true,0)
    val toolbar1 = Gtk.Toolbar.new()
    val label6 = Gtk.Label.new("Choices:")
    val noOfChoices = Gtk.Label.new("00000")
    val label7 = Gtk.Label.new("   Failures:")
    val noOfFailed = Gtk.Label.new("00000")
    val label8 = Gtk.Label.new("   Solutions:")
    val noOfSolved = Gtk.Label.new("00000")
    val _ = Helpers.containerAddList(toolbar1,[label6,noOfChoices,label7,noOfFailed,label8,noOfSolved])
    val statusbar = Gtk.Statusbar.new()
    val _ = Gtk.Box.packStart(vbox1,menubar,false,false,0)
    val _ = Gtk.Box.packStart(vbox1,hbox1,true,true,0)
    val _ = Gtk.Box.packStart(vbox1,toolbar1,false,false,0)
    val _ = Gtk.Box.packStart(vbox1,statusbar,false,false,0)
    val _ = Gtk.Container.add(aliceexplorer,vbox1)
  end

(* Created by alice-glade *)
