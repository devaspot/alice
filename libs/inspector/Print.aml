import structure GrTypes from "gui/GrTypes"
import structure AbsTree from "AbsTree"
import structure PrettyPrint from "x-alice:/lib/utility/PrettyPrint"

(* Prints stuff :) *)

structure MyPrint =
struct

datatype tree = datatype GrTypes.tree
datatype elem = datatype GrTypes.elem
datatype item = datatype AbsTree.item
datatype content = datatype GrTypes.content
datatype declaration = datatype AbsTree.declaration

fun printDesc desc =
  case desc of
    NestedRow _ => "NestedRow"
  | TopLevel    => "TopLevel"
  | ListTail _ => "ListTail"
  | Value _ => "Value"
  | Module _ => "Module"
  | Struct => "Struct"
  | Decl (FixItem _) => "Decl FixItem"
  | Decl (ValItem _) => "Decl ValItem"
  | Decl (TypItem _) => "Decl TypItem"
  | Decl (ModItem _) => "Decl ModItem"
  | Decl (SigItem _) => "Decl SigItem"

fun info elem =
  case elem of
    Nowhere => "There is no element here."
  | InTree atree =>
      (case atree of
            Simple {index, depth, delta, desc, ...} =>
              "Simple {index = " ^ (Int.toString index) ^
              ", depth = " ^ (Int.toString depth) ^
              ", delta = " ^ (Int.toString (!delta)) ^ 
              ", desc = " ^ (printDesc desc) ^ "}"
          | Prefix {index, depth, delta, ...} => assert false
          | Container {index, depth, delta, desc, ...} =>
              "Container {index = " ^ (Int.toString (!index)) ^
              ", depth = " ^ (Int.toString depth) ^
              ", delta = " ^ (Int.toString (!delta)) ^
              ", desc = " ^ (printDesc desc) ^ "}")

  | InSuffix (_, orient, simple, depth) =>
      "Suffix : depth = " ^ (Int.toString depth)

  | InPrefix (Prefix {index, depth, delta, ...}) =>
        "Prefix {index = " ^ (Int.toString index) ^
        ", depth = " ^ (Int.toString depth) ^
        ", delta = " ^ (Int.toString (!delta)) ^ "}"

  | InPrefix _ => assert false

structure PP = PrettyPrint

val ppFold = PP.text "?"
val ppWidthLimit = PP.text "..."
infix ^^
infix ^/^
fun a ^^ b = PP.^^ (a,b)
fun a ^/^ b = PP.^/^ (a,b)

val test = ppFold ^^ ppFold

fun contentToDoc content =
  case content of
    String (txt, _) => PP.text txt
  | Fold _ => ppFold
  | WidthLimit _ => ppWidthLimit

fun garmentToDoc gl =
    List.foldl
      (fn ((_, (txt, _)), doc) => (PP.text txt) ^^ doc)
      PP.empty gl

fun suffixToDoc ([], depth, doc) = doc
  | suffixToDoc ((gl, orient, d) :: xs, depth, doc) =
    if GrTypes.suffixIsInObj (d, orient, depth) 
    then suffixToDoc (xs, depth, garmentToDoc gl ^^ doc)
    else suffixToDoc (xs, depth, doc)

fun treeToDoc' (tree, depth) = 
  case tree of
    Simple {content, suffix, ...} => 
      (contentToDoc content) ^^ (suffixToDoc (suffix, depth, PP.empty))

  | Prefix {prefix, tree, ...} => (garmentToDoc prefix) ^^
				  (treeToDoc' (!tree, depth))
  | Container {mode, kids, ...} =>
      let
	val innerBox = Array.foldl
			 (fn (tree, doc) => doc ^/^ (treeToDoc' (tree, depth)))
			 PP.empty
			 (!kids)
	val innerBox = PP.below innerBox
      in
	case !mode of
	  GrTypes.Horizontal => PP.hbox innerBox
	| GrTypes.Vertical _ => PP.vbox innerBox
	| GrTypes.AlwaysVertical => PP.vbox innerBox
      end

fun treeToDoc tree = treeToDoc' (tree, GrTypes.getDepth tree)

fun printDoc doc =
  (print (PP.toString (doc, 80)) ;
   print "\n\n\n")

fun pprintTrees trees = List.app printDoc (List.map treeToDoc trees)

end
