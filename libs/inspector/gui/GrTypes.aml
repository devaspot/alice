import structure GLib          from "x-alice:/lib/gtk/GLib"
import structure Gtk           from "x-alice:/lib/gtk/Gtk"
import structure Canvas        from "x-alice:/lib/gtk/Canvas"
import structure Prefs         from "../Prefs"
import structure AbsTree       from "../AbsTree"

structure GrTypes =
struct

datatype display_mode = Horizontal
                      | Vertical of int (* Index of the first container *)
                      | AlwaysVertical

datatype status = Clean      (* Container is clean. *)
                | Dirty      (* This element's size is not up to date. *)
                | RedoLayout of display_mode
                             (* The horizontal/vertical layout has changed. *)

datatype item = datatype AbsTree.item
datatype flag = datatype AbsTree.flag
			 
type critem = (int ref) item
      
type group = Gtk.object
type canvas_item = Gtk.object
		   				     
type text = string * Prefs.style
type garment = canvas_item * text

(* A graphical tree.
 *
 * Each value is represented by a Simple or a Container.
 * Decoration (garments) can be around, in the form of prefixes or suffixes.
 * Prefixes are trees and are nested around the object they apply to.
 * Suffixes are always added to the last element of containers,
 *   until they reach a Simple. Hence, only Simples have suffixes.
 * The object a suffix belongs to is identified using its depth.
 *
 * Invariant : between a container and the embedded value (Container or Simple)
 *             is a sequence of 'Prefixes' whose orientation is of the form
 * Container --> ParentPrefx* --> StrictSonPrefx* --> SonPrefx* --> SON 
 * The SON's parent is always the Container, not the last prefix.
 *
 * The elements of a container always have a new group and xpos = 0.
 *
 * Each object is located at (xpos, 0) relatively to its group.
 * We do not give xpos directly. Instead, there is a field 'delta'.
 * When delta is >= 0, it is equal to xpos.
 * When delta is <= 0, xpos is 0 and the meaning of delta depends on the mode
 *  of its container (which must be its direct parent) :
 *         Horizontal => -x of this group relatively to its parent's group.
 *         Vertical   => -y of this group relatively to its parent's group.
 *
 * Interestingly, 'delta' is a unique identifier for a Prefix in a sequence.
 *   (a sequence means that all prefixes have the same parent)
 * 
 * As you can see, delta is quite overloaded.
 *)
datatype orient = datatype Prefs.orientation

datatype content = String of text
		 | Fold of {tree  : tree,
			    group : group} option
		 | WidthLimit of AbsTree.limit_description

and tree =
	 Simple of {textItem     : canvas_item,
		    delta        : int ref,
		    desc         : critem, 
		    parent       : tree,
		    index        : int,   (* Index in the parent's array. *)
                    depth        : int,
		    width        : int,   (* Width not including the suffix. *)
		    height       : int,
		    content      : content,
		    suffix       : (garment list * orient ref * int) list, 
		    suffixWidth  : int}      (* The suffix list is reversed. *)
		   
       | Prefix of {group        : group,
		    delta        : int ref,
		    parent       : tree,
		    index        : int,
                    depth        : int,
		    prefix       : garment list, (* reversed order *)
		    tree         : tree ref,
		    orient       : orient ref,
		    prefixWidth  : int,
		    prefixHeight : int}

       | Container of {group     : group,
		       delta     : int ref,
		       desc      : critem, 
		       parent    : tree ref,
		       index     : int ref,
                       depth     : int,
		       height    : int ref,
		       width     : int ref,
		       status    : status ref,
		       kids      : tree array ref,
		       mode      : display_mode ref }

datatype elem = Nowhere
              | InPrefix of tree
              | InTree   of tree
              | InSuffix of tree * garment list * orient ref * int

fun suffixIsInObj (sdepth, orient, odepth) =
    if sdepth > odepth then true
    else if sdepth < odepth then false
    else case !orient of
	   Son => true
	 | (SonStrict | Parent) => false

fun getDepth (Simple {depth, ...} | Prefix {depth, ...} 
             | Container {depth, ...}) = depth

fun getDesc (Prefix {tree, ...}) = getDesc (!tree)
  | getDesc (Simple {desc, ...} | Container {desc, ...}) = desc

fun getGroup (Simple {textItem,...}) = Gtk.Value.toObject (GLib.Object.getProperty (textItem, "parent"))
  | getGroup (Prefix {group, ...} | Container {group, ...}) = group

fun getStatus (Container {status, ...}) = status
  | getStatus _ = assert false

fun fromParent (parent, index) =
  if index < 0 then assert false
  else
    case parent of
      Container {kids, ...} => Array.sub (!kids, index)
  | _ => assert false

fun getSize (Simple {width, suffixWidth, height, ...}) =
                                                 (width + suffixWidth, height)
  | getSize (Container {width, height, ...}) = (!width, !height)
  | getSize (Prefix {tree, prefixWidth, prefixHeight, ...}) =
    let val (w, h) = getSize (!tree)
    in
      (prefixWidth + w, Int.max (h, prefixHeight))
    end

fun getDelta (Simple {textItem, delta, ...}) =
                        (Gtk.Value.toObject (GLib.Object.getProperty (textItem, "parent")), delta)
  | getDelta (Prefix {group, delta, ...} |
              Container {group, delta, ...}) = (group, delta)

fun getOrigin tree =
  let val (group, delta) = getDelta tree
  in
    (group, Int.max (0, !delta))
  end

fun getParent (Simple {parent, index, ...} |
	       Prefix {parent, index, ...}) = (parent, index)
  | getParent (Container {parent, index, ...}) = (!parent, !index)

fun getPath (tree, accu) =
  let val (parent, index) = getParent tree
  in
    if index < 0 then index :: accu
    else getPath (parent, index :: accu)
  end

fun fromPath (tree, path) =
    case tree of 
      Simple {desc = Struct, parent, ...} => SOME parent
    | Simple _ => SOME tree
    | Prefix {tree, ...} => fromPath (!tree, path)
    | Container {kids, ...} =>
      let
	val kids = !kids
	val size = Array.length kids
      in
	case path of
	  [] => SOME tree
	| x :: xs => (assert x >= 0 ;
		      if x >= size then NONE
		      else fromPath (Array.sub (kids, x), xs))
      end

(* Given two trees that have the same parent, tells if they are equal. *)
fun isSameTree (Simple _, Simple _) = true
  | isSameTree (Simple _, Prefix _) = false
  | isSameTree (Simple _, Container _) = assert false
  | isSameTree (Prefix {delta = d1, ...},
		Prefix {delta = d2, ...}) = (!d1) = (!d2)
  | isSameTree (Prefix _, _) = assert false
  | isSameTree (Container _, Simple _) = assert false
  | isSameTree (Container _, Prefix _) = false
  | isSameTree (Container _, Container _) = true

fun isDirectSon tree = isSameTree (tree, fromParent (getParent tree))

fun destroyPrefix prefix = List.app (fn (item, _) => Gtk.Object.destroy item)
				    prefix

(* Destroy the group associated with the given tree. *)
fun destroy' tree = Gtk.Object.destroy (getGroup tree)

(* Destroy all canvas items of the given tree (including suffixes !) *)
fun destroy tree =
      case tree of
	Simple {textItem, suffix, ...} => 
	      (Gtk.Object.destroy textItem ;
	       List.app (fn (gl, _, _) => destroyPrefix gl) suffix)
      | Prefix {prefix, tree, ...} => (destroyPrefix prefix ; destroy (!tree))
      | Container {kids, index, ...} =>
              if !index = ~1 (* This is a faked container. *)
                then destroy (Array.sub (!kids, 0))
              else Array.app destroy' (!kids)

(* Reparent a tree. *)
fun reparent' group' tree = Canvas.Item.reparent (getGroup tree, group')

fun reparentPrefix (group', prefix) =
    List.app (fn (item, _) => Canvas.Item.reparent (item, group')) prefix

fun reparentSuffix (group', suffix) =
    List.app (fn (gl, _, _) => reparentPrefix (group', gl)) suffix

fun reparent group' =
    let fun loop tree =
	    case tree of
	      Container {kids, ...} => Array.app (reparent' group') (!kids)
	    | Simple {textItem, suffix, ...}
	                       => (Canvas.Item.reparent (textItem, group') ;
				   reparentSuffix (group', suffix))
	    | Prefix {prefix, tree, ...} => (reparentPrefix (group', prefix) ;
					     loop (!tree))
    in
	loop
    end

(* Changes the parent/index of a tree. *)
fun updateParent (tree, parent', index') =
  case tree of
    Simple r => Simple {r where index = index',
                                parent = parent'}
  | Prefix r => (#tree r := updateParent (!(#tree r), parent', index') ;
                 Prefix {r where index = index',
                                 parent = parent'})
  | Container {parent, index, ...} => (parent := parent' ;
                                       index  := index' ;
                                       tree)


fun getSonOf (Container {kids, ...}) = Array.sub (!kids, 0)
  | getSonOf _ = assert false

fun mapSuffix [] = []
  | mapSuffix ((_, t) :: xs) = t :: (mapSuffix xs)

fun getSuffixes' ([], depth, accu) = accu
  | getSuffixes' ((gl, or, d') :: xs, depth, accu) =
    if suffixIsInObj (d', or, depth)
      then getSuffixes' (xs, depth, accu)
      else getSuffixes' (xs, depth, (mapSuffix gl, or, d') :: accu)

fun getSuffixes (tree, depth) =
    case tree of
      Simple {suffix, ...} => getSuffixes' (suffix, depth, [])
    | Prefix {tree, ...} => getSuffixes (!tree, depth)
    | Container {kids, ...} => 
      let
        val kids = !kids
        val size = Array.length kids
      in
        getSuffixes (Array.sub (kids, size - 1), depth)
      end

end
