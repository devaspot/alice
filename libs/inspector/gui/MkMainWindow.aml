import structure Gdk         from "x-alice:/lib/gtk/Gdk"
import structure Gtk         from "x-alice:/lib/gtk/Gtk"
import structure Canvas      from "x-alice:/lib/gtk/Canvas"
import structure Prefs       from "../Prefs"
import signature MAIN_WINDOW from "MAIN_WINDOW-sig"

functor MkMainWindow () :> MAIN_WINDOW =
struct

  (**************************************************************
   * Creates a new top-level main window.                       *
   **************************************************************)

  val null = Gtk.NULL

  (* Create the new window. *)
  val window = Gtk.Window.new Gtk.WindowType.TOPLEVEL

  val vbox = Gtk.VBox.new (false, 0) (* main vbox *)

  (* MENUS *)
  val menubar        = Gtk.MenuBar.new ()
  val menuInspector  = Gtk.MenuItem.newWithLabel "Inspector"
  val menuInspectorM = Gtk.Menu.new ()
  val menuSelection  = Gtk.MenuItem.newWithLabel "Selection"
  val menuSelectionM = Gtk.Menu.new ()
  val menuOptions    = Gtk.MenuItem.newWithLabel "Options"
  val menuOptionsM   = Gtk.Menu.new ()
    
  (* MENU : INSPECTOR *)
  val menuItemAbout = Gtk.MenuItem.newWithLabel "About..."
  val menuItemClear = Gtk.MenuItem.newWithLabel "Clear"
  val menuItemSep11 = Gtk.MenuItem.new ()
  val menuItemClose = Gtk.MenuItem.newWithLabel "Close"
    
  (* MENU : Selection *)
  val menuItemExpandF = Gtk.MenuItem.newWithLabel "Fully Expand"
  val menuItemExpand = Gtk.MenuItem.newWithLabel "Expand"
  val menuItemFold = Gtk.MenuItem.newWithLabel "Fold"
  val menuItemSep21  = Gtk.MenuItem.new ()
  val menuItemReinspect = Gtk.MenuItem.newWithLabel "Reinspect"
  val menuItemForceEval = Gtk.MenuItem.newWithLabel "Force Evaluation"
  val menuItemSep22  = Gtk.MenuItem.new ()
  val menuItemRemovEntry = Gtk.MenuItem.newWithLabel "Remove entry"
  val menuItemSep23  = Gtk.MenuItem.new ()
  val menuItemPPrintT = Gtk.MenuItem.newWithLabel "Pretty Print to Terminal"

  val _ = Gtk.Widget.setSensitive(menuSelection, false)
  val _ = Gtk.Widget.setSensitive(menuItemExpand, false)
  val _ = Gtk.Widget.setSensitive(menuItemExpandF, false)
  val _ = Gtk.Widget.setSensitive(menuItemFold, false)
  val _ = Gtk.Widget.setSensitive(menuItemReinspect, false)
  val _ = Gtk.Widget.setSensitive(menuItemRemovEntry, false)
  val _ = Gtk.Widget.setSensitive(menuItemForceEval, false)
    
  (* MENU : Options *)
  val menuItemPreferences = Gtk.MenuItem.newWithLabel "Preferences..."
    
  (* The CANVAS *)
  val canvas = Canvas.new ()
  val scrollWindow = Gtk.ScrolledWindow.new (null, null)
  val hadjust = Gtk.ScrolledWindow.getHadjustment scrollWindow
  val vadjust = Gtk.ScrolledWindow.getVadjustment scrollWindow
    
  (* The status bar *)
  val status = Gtk.Statusbar.new ()
  val statusContextId = Gtk.Statusbar.getContextId (status, "foobar")
  (* Invariant : there is always exactly one message in the statusbar. *)
  fun setStatus message =
    (Gtk.Statusbar.pop (status, statusContextId) ;
     Gtk.Statusbar.push (status, statusContextId, message) ;
     ())

  val canvasWidth = Gdk.Screen.getWidth (Gtk.Widget.getScreen window)
    
  val _ =   
    (
     (* Sets the hierarchy and some preferences. *)
     Gtk.Window.setDefaultSize(window, Prefs.defaultWidth, Prefs.defaultHeight);
     Gtk.Window.setTitle (window, Prefs.windowTitle);
     Gtk.Container.setBorderWidth (window, 0);
     Gtk.Container.setBorderWidth (vbox, 0); 
     Gtk.Container.add (window, vbox);
     
     (* MENUS *)
     Gtk.Box.packStart (vbox, menubar, false, true, 0) ;
     Gtk.MenuShell.append (menubar, menuInspector) ;
     Gtk.MenuItem.setSubmenu (menuInspector, menuInspectorM) ;
     Gtk.MenuShell.append (menubar, menuSelection) ;
     Gtk.MenuItem.setSubmenu (menuSelection, menuSelectionM) ;
     Gtk.MenuShell.append (menubar, menuOptions) ;
     Gtk.MenuItem.setSubmenu (menuOptions, menuOptionsM) ;
     
     Gtk.MenuShell.append (menuInspectorM, menuItemAbout) ;
     Gtk.MenuShell.append (menuInspectorM, menuItemClear) ;
     Gtk.MenuShell.append (menuInspectorM, menuItemSep11) ;
     Gtk.MenuShell.append (menuInspectorM, menuItemClose) ;
     
     Gtk.MenuShell.append (menuSelectionM, menuItemExpandF) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemExpand) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemFold) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemSep21) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemReinspect) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemForceEval) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemSep22) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemRemovEntry) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemSep23) ;
     Gtk.MenuShell.append (menuSelectionM, menuItemPPrintT) ;
     
     Gtk.MenuShell.append (menuOptionsM, menuItemPreferences) ;
     
     (* CANVAS *)
     Gtk.Container.add (scrollWindow, canvas);
     Gtk.Container.add (vbox, scrollWindow) ;
     
     (* Status bar *)
     Gtk.Box.packEnd (vbox, status, false, true, 0) ;
     Gtk.Statusbar.push (status, statusContextId, " Starting... ") ;

     (* Increment of scrollbars. *)
     Gtk.Adjustment.setFieldStepIncrement (hadjust, 40.0) ;
     Gtk.Adjustment.setFieldStepIncrement (vadjust, 40.0) ;
     
     (* SHOW ALL *)
     Gtk.Widget.showAll window ;

     ())

    (****************** POPUP MENU ********************)
    fun popup (button, time) =
       Gtk.Menu.popup (menuSelectionM, null, null, null, null, button, 0)
      
end
