import structure Reflect         from "x-alice:/lib/system/Reflect"
import structure Gtk             from "x-alice:/lib/gtk/Gtk"
import structure Common          from "../Common"
import signature CANVAS_DRIVER   from "CANVAS_DRIVER-sig"
import structure AbsTree         from "../AbsTree"
import structure Prefs           from "../Prefs"
import signature GR_TREE         from "GR_TREE-sig"
import structure GrTypes         from "GrTypes"
import structure MkMonitors      from "../MkMonitors"
import structure MkLayout        from "MkLayout"

functor MkGrTree (Driver: CANVAS_DRIVER) (QueuePut : Common.QUEUE_PUT)
     :> GR_TREE =
struct

open GrTypes

structure Driver     = Driver
structure Layout     = MkLayout Driver QueuePut
structure Monitors   = MkMonitors QueuePut

val refl = Reflect.reflect

(* Node representing the board, the root window. Kept abstract. *)
val root = (Common.undefined "GrTree.root" : tree)
val undefinedKid = Common.undefined "GrTree.kid"
		   
val gtkZero = Gtk.REAL 0.0

(* Find the mode of a container. *)
fun findMode (depth, arr, index, size) =
    if index >= size then Horizontal
    else if AbsTree.isContainer (depth, Array.sub (arr, index))
    then Vertical index
    else findMode (depth, arr, index+1, size)
	 
(* Create a garment list from a text list. *)
fun fromTexts (group, xpos, height, textList, accu) =
    case textList of 
      [] => (accu, xpos, height)
    | rep :: rest =>
      let
	val (item, width, height') = Driver.newTextItem (rep, group, xpos)
	val height = Int.max (height, height')
      in
	fromTexts (group, xpos + width, height, rest, (item, rep) :: accu)
     end
	
(* Special handling of references, because of the subscript. *)      
fun refPrefix (group, xpos, ((lbl, style) as rep)::rest, id) =
     let
       val _ = assert lbl = Prefs.refL
       val (item, width, height) =
         Driver.newTextItemId ((Prefs.refIdL, style), group, xpos, id)
     in
       fromTexts (group, xpos + width, height, rest, [(item, rep)])
     end
  | refPrefix _ = assert false


fun makeSuffix' (group, [], xpos, height, accu) = (accu, xpos, height)
  | makeSuffix' (group, (sl, orient, depth) :: xs, xpos, height, accu) =
    let val (garments, xpos, height) = fromTexts (group, xpos, height, sl, [])
    in
      makeSuffix' (group, xs, xpos, height, (garments, orient, depth) :: accu)
    end

fun makeSuffix (group, xs, xpos, height) =
    let val (xs, xpos', height) = makeSuffix' (group, xs, xpos, height, [])
    in
      (xs, xpos' - xpos, height)
    end

fun setIr (ir, i) = (assert !ir = 0 ; ir := i ; SOME (i - 1))

fun mapDesc (NestedRow t) = NestedRow t
  | mapDesc TopLevel = TopLevel
  | mapDesc Struct   = Struct
  | mapDesc (Decl d) = Decl d
  | mapDesc (Value (t, v, Future ())) = Value (t, v, Future (ref 0))
  | mapDesc (Value (t, v, Noflag)) = Value (t, v, Noflag)
  | mapDesc (Value (t, v, Reference)) = Value (t, v, Reference)
  | mapDesc (Module (s, m, Future ())) = Module (s, m, Future (ref 0))
  | mapDesc (Module (s, m, Noflag)) = Module (s, m, Noflag)
  | mapDesc (Module (s, m, Reference)) = assert false
  | mapDesc (ListTail (t, v, Noflag)) = ListTail (t, v, Noflag)
  | mapDesc (ListTail (t, v, Future ())) = ListTail (t, v, Future (ref 0))
  | mapDesc (ListTail (t, v, Reference)) = assert false

fun unmapDesc (NestedRow t) = NestedRow t
  | unmapDesc TopLevel = TopLevel
  | unmapDesc Struct    = Struct
  | unmapDesc (Decl d)  = Decl d
  | unmapDesc (Value (t, v, Future _)) = Value (t, v, Future ())
  | unmapDesc (Value (t, v, Noflag)) = Value (t, v, Noflag)
  | unmapDesc (Value (t, v, Reference)) = Value (t, v, Reference)
  | unmapDesc (Module (s, m, Future _)) = Module (s, m, Future ())
  | unmapDesc (Module (s, m, Noflag)) = Module (s, m, Noflag)
  | unmapDesc (Module (s, m, Reference)) = assert false
  | unmapDesc (ListTail (t, v, Future _)) = ListTail (t, v, Future ())
  | unmapDesc (ListTail (t, v, Noflag)) = ListTail (t, v, Noflag)
  | unmapDesc (ListTail (t, v, Reference)) = assert false

(* "Register" a new tree : check if it has to be monitored. *)
fun newTree (tree, desc) =
  let val id =
    case desc of
      NestedRow _ => NONE
    | TopLevel => NONE
    | Struct => NONE
    | Decl _ => NONE
    (* Register a reference, a future. *)
    | Value (_, v, Reference) => SOME (Monitors.addReference (v, tree))
    | Value (_, v, Future ir) => setIr (ir, Monitors.addFuture (v, tree))
    | ListTail (_, v, Future ir) => setIr(ir, Monitors.addFuture (refl v,tree))
    | Module (_, m, Future ir) => setIr (ir, Monitors.addFuture (refl m, tree))
    | Value _ => NONE
    | Module _ => NONE
    | ListTail _ => NONE
  in
    if !Prefs.identifiers then id else NONE
  end

(* Create a simple node (just text). *)
fun makeSimple {group, delta, content, suffixes, desc, parent,index,depth,id} =
  let
    val xpos = Int.max (0, delta)
    val delta = ref delta

    val (item, width, height) =
      case content of 
        String rep => Driver.newTextItemId (rep, group, xpos, id)
      | Fold _ => Driver.newTextItem((Prefs.foldL, Prefs.limitStyle),
				     group, xpos)
      | WidthLimit _ => Driver.newTextItem((Prefs.cutL, Prefs.limitStyle),
                                           group, xpos)

    val (suffix, suffixWidth, height) =
      makeSuffix (group, suffixes, width + xpos, height)

    val node = Simple {textItem = item, delta, depth, desc, parent, index,
                       width, height, content, suffix, suffixWidth}
  in
    (node, height, width + suffixWidth)
  end

fun fromAbsTree {group, delta, abstree, parent, index, depth, suffixes, id} =
  case AbsTree.read (depth, abstree) of
    AbsTree.Simple {desc, rep} =>
      makeSimple {group, delta, content = String rep, suffixes,
		  desc = mapDesc desc, parent, index, depth, id}
	
  | AbsTree.Concat {prefix, tree = abstree, suffix, orient} =>
      let
	val xpos = Int.max (0, delta)
	val (prefix, xpos1, pheight) =
                       if id = NONE then fromTexts (group, xpos, 0, prefix, [])
                       else refPrefix (group, xpos, prefix, id)
	val prefixWidth = xpos1 - xpos
          
        val suffixes =
          case suffix of [] => suffixes
                       | _  => (suffix, orient, depth) :: suffixes 

	val delta' = if List.null prefix then delta else xpos1
	val (tree, theight, twidth) =
	    fromAbsTree {group, parent, index, depth, delta = delta',
			 abstree, suffixes, id = NONE}
      in
        case prefix of 
          [] => (tree, theight, twidth)
        | _  =>
            let
              val height = Int.max (pheight, theight)
              val tree = ref tree
              val node = Prefix {group, parent, index, prefix,
				 tree, depth, orient, delta = ref delta,
                                 prefixWidth, prefixHeight = pheight}
            in
              (node, height, prefixWidth + twidth)
            end
      end
    
  | AbsTree.Raw x => assert false
      
  | AbsTree.Fold desc => 
      makeSimple {group, delta, content = Fold NONE, suffixes, parent, 
                  desc = AbsTree.castItem desc, index, depth, id = NONE}

  | AbsTree.WidthLimit limitDescr =>
      let val desc = case limitDescr of
                        AbsTree.ListLimit (t, _) => NestedRow (SOME t)
                      | _ => NestedRow NONE
      in
        makeSimple {group, delta, content = WidthLimit limitDescr, suffixes,
                    desc, parent, index, depth, id = NONE}
      end
      
  | AbsTree.Container {desc, limit, kids} =>
      let
	val xpos  = Int.max (0, delta)
	val size  = Array.length kids
	val kids' = Array.array (size, undefinedKid)
	(* Which mode ? *)
	val mode  = case desc of AbsTree.Struct => AlwaysVertical
                               | _ => findMode (depth, kids, 0, size)
	val height = ref 0
	val width  = ref 0
        val delta = ref delta
	val desc = mapDesc desc
	val cont = Container {group, delta, desc, depth,
			      parent = ref parent, index = ref index,
			      height, width,
			      status = ref Clean,
			      kids   = ref kids',
			      mode   = ref mode }
	val id = newTree (cont, desc)
	val depth = depth + 1
		    
        (* Insert kids in the container. *)
	fun loop i =
	  if i >= size then ()
	  else
	    let
	      val curHeight = !height
	      val curWidth  = !width
              val (x, y, delta) =
                case mode of
                  Horizontal => let val pdelta = curWidth + xpos
                                in
                                  (real pdelta,
                                   0.0,
                                   ~pdelta)
                                end
                | (Vertical _ | AlwaysVertical) =>
                                let val pdelta = curHeight
                                in
                                  (real xpos,
                                   real pdelta,
                                   ~pdelta)
                                end
              val group' = Driver.newGroup' (group, x, y)
              val suffixes = if i + 1 = size then suffixes else []
                
	      val (item, height', width') = 
                  fromAbsTree {group = group', delta,
                               abstree = Array.sub(kids, i),
                               parent = cont, index = i, depth, suffixes, id}
	    in
	      (* Update the size of the container. *)
	      (case mode of
		 Horizontal => (width := curWidth + width' ;
				if height' > curHeight
				then height := height' else ())
	       | (Vertical _ | AlwaysVertical) =>
                               (height := curHeight + height' ;
                                if width' > curWidth
                                then width := width' else ())) ;
	      
	      (* Add the item. *)
	      Array.update (kids', i, item) ;
	      
	      (* Loop. *)
	      loop (i+1)
	    end
      in
	loop 0 ;
        (cont, !height, !width)
      end

end
