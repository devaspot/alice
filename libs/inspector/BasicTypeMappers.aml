import structure UnsafeValue   from "x-alice:/lib/system/UnsafeValue"
import structure Reflect       from "x-alice:/lib/system/Reflect"
import structure Label         from "x-alice:/lib/rtt/Label"
import structure Type          from "x-alice:/lib/rtt/Type"
import structure PervasiveType from "x-alice:/lib/rtt/PervasiveType"
import structure AbsTree       from "AbsTree"
import structure Common        from "Common"
import structure Prefs         from "Prefs"
import structure Cache         from "Cache"

(* Type mappers for basic core types : arrows, tuples, records, ... *)

structure Basic =
struct

  val undefinedKid = Common.undefined "Basic-KID"

  datatype tree = datatype AbsTree.tree
  datatype row = datatype AbsTree.row
             
  (* Mapper for default (unknown) constructors. *)
  fun abstract item = AbsTree.simpleText (item, Prefs.absL, Prefs.defaultStyle)

  (* Mapper for functions and other non-displayable things. *)
  fun arrow item = AbsTree.simpleText (item, Prefs.funL, Prefs.defaultStyle)

  (* Mapper for products (records, tuples)
   * tagged is a boolean wich tells if the value is a tagged block. *)
  fun prod (depth, item, row, value, tagged) =
    let
      val row' = Cache.rowToRow row
      val length = case row' of 
                     Tuple typVec       => Vector.length typVec
                   | Record (_, typArr) => Array.length typArr
    in
    if length = 0 then AbsTree.unit
    else
    let
      val widthLimit = !Prefs.widthLimit
      val (limit, width) =
        if length > widthLimit then (true, widthLimit + 1) else (false, length)
      val kids = Array.array (width, undefinedKid)
        
      val (prefix, suffix) =
        case row' of
          Tuple typVec =>
            (AbsTree.makeTuple (depth - 1, limit, kids,
                                typVec, value, tagged, 0) ;
             (AbsTree.openParenthesisL,    (* "(" *)
              AbsTree.closeParenthesisL))  (* ")" *)

        | Record (labVec, typArr) =>
            (AbsTree.makeRecord (depth - 1, limit, kids,
                                 labVec, typArr, value, tagged, 0) ;
             (AbsTree.openBracketL,        (* "{" *)
              AbsTree.closeBracketL))      (* "}" *)

      val tree = Container {desc = item, limit, kids}
    in
      Concat {prefix, tree, suffix, orient = AbsTree.orientSon}
    end
    end

  (* Type inspection helper. Directly from PPValue. *)
  datatype tag_desc = Nullary | Unary of Type.typ | Nary of Type.row

  fun unarg t = case Type.inspect t of
    Type.Apply(t1,t2) =>
      if not(Type.equal(t1, PervasiveType.typ_strict)) then Unary t else
        (case Type.inspect t2 of
           Type.Prod r => if Type.isEmptyRow r then Nullary else Nary r
         | _ => assert false)
  | _ => Unary t      
      
  (* Mapper for sum types. *)
  fun sum (depth, item, row, value) =
    let
      val (labVec, typArr) = Cache.rowToVector row
      val index = UnsafeValue.tag (value, labVec)
      val label = Label.toString (Vector.sub (labVec, index))
      val typ   = Array.sub (typArr, index)
    in
      case unarg typ of
        Nullary    => AbsTree.simpleText (item, label, Prefs.consStyle)
      | Unary typ' =>
          let
            val arg   = UnsafeValue.projTaggedTuple (value, 1, 0)
            val item' = Common.Value (typ', arg)
            val tree  = AbsTree.mapValue (depth - 1, item', typ', arg)
          in
            AbsTree.applicationWithPar (item, label, tree)
          end
      | Nary row'  =>
          let
            val item' = AbsTree.NestedRow (SOME (Type.prod row'))
            val tree  = prod (depth - 1, item', row', value, true)
          in
            AbsTree.applicationNoPar (item, label, tree)
          end
    end

  (* Futures are put in unary containers. *)
  fun future (item, value) =
      let 
	val item' = AbsTree.NestedRow NONE
	val subtree =
	    if Hole.isHole value
	    then AbsTree.simpleText (item', Prefs.holeL, Prefs.holeStyle)
	    else if Future.isLazy value
	    then AbsTree.simpleText (item', Prefs.lazL, Prefs.lazyStyle)
	    else AbsTree.simpleText (item', Prefs.futL, Prefs.futureStyle)

	val kids = Array.array (1, subtree)
      in
	Container {desc  = item, limit = false, kids}
      end

  (* Read the exception from a failed future. *)
  fun failedFuture (item, depth, value) =
    let
      (* We read the exception. *)
      val e = Reflect.reflect(Future.await value) handle e => Reflect.reflect e
      val typ' = PervasiveType.typ_exn
      val item' = Common.Value (typ', e)
      val tree = AbsTree.mapValue (depth - 1, item', typ', e)
    in
      AbsTree.makeAbsBox {label = Prefs.faiL, item, tree}
    end

end
