import structure MkRedBlackImpSet from "x-alice:/lib/data/MkRedBlackImpSet"
import signature QUEUE            from "QUEUE-sig"


functor MkQueue (type t) :> QUEUE where type elem = t =
struct

  type elem = t

  exception Empty

  (*** Implementation of priority queues : RedBlack trees. ***)

  fun compare ((pr1, id1, _), (pr2, id2, x2)) =
    case Int.compare (pr1, pr2) of
      EQUAL => Int.compare (id1, id2)
    | x => x

  structure Set = MkRedBlackImpSet(type t = int * int * t
                                   val compare = compare)
  
  (*** Implementation of concurrency ***)
  
  datatype readers = Nil | Cons of (t Promise.promise) * (readers ref)

  (* Fulfills the last element of the list with the given value,
   * and removes the element from the list. *)
  fun fulfill' (r, x, v, xsr) =
    case !xsr of
      Nil => (Promise.fulfill (x, v) ; r := Nil)
    | Cons (x', xsr') => fulfill' (xsr, x', v, xsr')

  fun fulfill (r, v) =
    case !r of 
      Nil => assert false
    | Cons (x, xsr) => fulfill' (r, x, v, xsr)

  type queue = {set     : Set.t,
                readers : readers ref,
                counter : int ref, (* Counter for fresh ids and lock. *)
                closed  : bool ref}
  type t = queue

  (* A queue is a set and a counter for fresh identifiers. *)
  fun queue () = {set     = Set.set (),
                  readers = ref Nil,
                  counter = ref 0,
                  closed  = ref false}

  fun put ({set, readers, counter, closed}, item, prio) =
    if !closed then ()
    else
    let
      val p  = Promise.promise ()
      val i  = Future.await (Ref.exchange (counter, Promise.future p))
      val i' = case !readers of
                 Nil    => (Set.insert (set, (prio, i, item)) ; i + 1)
               | Cons _ => (fulfill (readers, item) ; i)
    in
      Promise.fulfill (p, i')
    end

  fun get {set, readers, counter, closed} =
    let
      val p = Promise.promise ()
      val i = Future.await (Ref.exchange (counter, Promise.future p))
      val (v, i') =
        if Set.isEmpty set
          then
            if !closed then raise Empty
            else
              let val p' = Promise.promise ()
              in
                readers := Cons (p', ref (!readers)) ;
                (Promise.future p', 0)
              end
        else case Set.choose set of
            NONE      => assert false
          | SOME item => (Set.remove (set, item) ; (#3 item, i))
    in
      Promise.fulfill (p, i') ;
      v
    end
    
  fun close {set, readers, counter, closed} = closed := true

  fun isClosed {set, readers, counter, closed} = !closed

  fun app f queue =  (while true do f (get queue)) handle Empty => ()

  fun purge {set, readers, counter, closed} = 
    let
      val p  = Promise.promise ()
      val i  = Future.await (Ref.exchange (counter, Promise.future p))
    in
      Set.removeAll set ;
      Promise.fulfill (p, i)
    end


end
