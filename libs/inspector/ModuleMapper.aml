import structure Name          from "x-alice:/lib/rtt/Name"
import structure UnsafeValue   from "x-alice:/lib/system/UnsafeValue"
import structure PrettyPrint   from "x-alice:/lib/utility/PrettyPrint"
import structure PPMisc        from "x-alice:/lib/rtt/PPMisc"
import structure Label         from "x-alice:/lib/rtt/Label"
import structure Type          from "x-alice:/lib/rtt/Type"
import structure PPType        from "x-alice:/lib/rtt/PPType"
import structure Inf           from "x-alice:/lib/rtt/Inf"
import structure Path          from "x-alice:/lib/rtt/Path"
import structure Fixity        from "x-alice:/lib/rtt/Fixity"
import structure AbsTree       from "AbsTree"
import structure Common        from "Common"
import structure Prefs         from "Prefs"

(* Type mappers for basic core types : arrows, tuples, records, ... *)

local 
  open PrettyPrint
  open PPMisc
  infixr ^^ ^/^
in

structure ModuleMapper =
struct

  datatype tree = datatype AbsTree.tree

  (*open PrettyPrint *)

  val undefinedKid = Common.undefined "Basic-KID"

  (* Modules *)
  val labelStruct = Simple {desc = AbsTree.Struct,
			    rep = ("struct", Prefs.structStyle) }
  val labelEnd    = Simple {desc = AbsTree.Struct,
			    rep = ("end", Prefs.structStyle) }
  val indentPrefix = [("  ", Prefs.defaultStyle)]


  datatype declaration = datatype AbsTree.declaration
  datatype assoc = datatype Fixity.assoc
  datatype fix   = datatype Fixity.fix
  datatype item  = datatype AbsTree.item

  (* Maps a fixity declaration to a prefix. *)
  val pNonfixL = [("nonfix", Prefs.fixStyle)]
  val pPrefix = ("prefix ", Prefs.fixStyle)
  val pPostfix = ("postfix ", Prefs.fixStyle)
  val pInfix = ("infix ", Prefs.fixStyle)
  val pInfixr = ("infixr ", Prefs.fixStyle)
  val pInfixn = ("infixn ", Prefs.fixStyle)
  fun fixPrefix NONFIX = pNonfixL
    | fixPrefix(PREFIX n) = pPrefix ::[(Int.toString n, Prefs.fixStyle)]
    | fixPrefix(POSTFIX n) = pPostfix ::[(Int.toString n, Prefs.fixStyle)]
    | fixPrefix(INFIX(n, LEFT)) = pInfix ::[(Int.toString n, Prefs.fixStyle)]
    | fixPrefix(INFIX(n, RIGHT)) = pInfixr::[(Int.toString n, Prefs.fixStyle)]
    | fixPrefix(INFIX(n,NEITHER)) = pInfixn::[(Int.toString n, Prefs.fixStyle)]

  val pVal = ("val ", Prefs.valStyle)
  val pValL = [pVal]
  val pFunL = [("fun ", Prefs.valStyle)]
  val pMod = ("structure ", Prefs.structStyle)
  val pModL = [pMod]
  val pFctL = [("functor ", Prefs.structStyle)]
  val pTypL = [("type ", Prefs.typStyle)]
  val pTypxL = [("exttype ", Prefs.typStyle)]
  val pDatatypL = [("datatype ", Prefs.typStyle)]
  val pSigL = [("signature ", Prefs.typStyle)]

  (* From lib/system/DynMatch *)
  fun trName f (Name.ExId s)	= Name.ExId(f s)
    | trName f  n		= n
  fun trLab f l		= Label.fromName(trName f (Label.toName l))
  val trValLab		= trLab(fn s => s)
  val trTypLab		= trLab(fn s => "$" ^ s)
  val trModLab		= trLab(fn s => s ^ "$")
  val trInfLab		= trLab(fn s => "$" ^ s ^ "$")

  fun getVal (modl, label) = UnsafeValue.projPoly (modl, trValLab label)
  fun getMod (modl, label) = UnsafeValue.projPoly (modl, trModLab label)
  fun getSig (modl, label) = UnsafeValue.projPoly (modl, trInfLab label)
  fun getTyp (modl, label) = UnsafeValue.projPoly (modl, trTypLab label)

  (* Directly from PPComponent.aml *)
  fun makeEq(b,k) = if b then Type.eqKind k else k
  fun unarrowTKind'(k,ks,eq) =
      case Type.inspectKind k of
        Type.ArrowKind(k1,k2) => unarrowTKind'(k2, makeEq(eq,k1)::ks, eq)
       | Type.EqKind k1 => unarrowTKind'(k1, ks, true)
       | _ => (List.rev ks, makeEq(eq,k))
  fun unarrowTKind k = unarrowTKind' (k,[],false)

  fun unlambdaTyp'(t,vs) =
    case Type.inspect t of
      Type.Lambda(v,t')	=> unlambdaTyp'(t',v::vs)
    | Type.Mu t' => unlambdaTyp'(t',vs)
    | _	 => (List.rev vs, t)
  fun unlambdaTyp t = unlambdaTyp'(t,[])

  fun parenPrec p (p',doc) = if p > p' then paren doc else doc

  fun ppVarAnnot(prec, doc0, k) =
      case Type.inspectKind k of
	(Type.StarKind | Type.ExtKind) =>
	  (doc0, doc0)
      | Type.EqKind k' =>
	  ppVarAnnot(prec, doc0, k')
      | Type.ArrowKind _ =>
	let
	  val doc1 = PPType.ppKind k
	  val doc  = abox(below(nest(doc0 ^^ text " :" ^/^ doc1)))
	in
	  (doc0, parenPrec prec (0,doc))
	end
      | Type.SingKind t =>
	let
	  val doc1 = PPType.ppTyp t
	  val doc  = abox(below(nest(doc0 ^^ text " =" ^/^ doc1)))
	in
	  (doc1, parenPrec prec (0,doc))
	end

  fun ppVar prec (n,a) =
      let
	val doc0 = PPType.ppVar(n,a)
      in
	ppVarAnnot(prec, doc0, Type.kindVar a)
      end

  fun ppVars vs =
    let
      val m     = Type.Map.map()
      val prec  = case vs of ([] | [_]) => 1 | _ => 0
      val ddocs = List.mapi (ppVar prec) vs
      val doc   = ppCommaList #2 ddocs
    in
      ListPair.app (fn(v, (doc,_)) =>
                    Type.Map.insert(m, Type.canonical(Type.var v), doc))
      (vs, ddocs);
      (if prec = 1 then doc else paren doc, m)
    end

  (* Maps a declaration to an abstract tree. *)
  fun mapDecl (modl, depth, decl) =
      case decl of
	FixItem (l, f) =>
	let 
	  val label = " " ^ Label.toString l
	  val tree = AbsTree.simpleText (Decl decl, label, Prefs.labStyle)
	  val prefix = fixPrefix f
	in
	  Concat {prefix, tree, suffix = [], orient = AbsTree.orientSon}
	end
	  
      | ValItem (label, typ, value) =>
	(*let
          val tree = AbsTree.simpleText (Decl decl, label, Prefs.labStyle)
          val prefix = if Type.isArrow typ then pFunL else pValL
	in
	  Concat {prefix, tree, suffix=[], orient = AbsTree.orientSon}
	end*)
        let
          val prefix = pVal :: (label, Prefs.labStyle) :: AbsTree.equalL
          val item = Common.Value (typ, value)
          val tree = AbsTree.mapValue (depth - 1, item, typ, value)
        in
          Concat {prefix, tree, suffix = [], orient = AbsTree.orientSonStrict}
        end

      | TypItem (path, k, _) =>
        let
          val lab   = Path.toLab path
          val label = Label.toString lab
          val typ   = getTyp (modl, lab)

          (* Inspired by PPComponent.aml *)
          val typ = if Type.isAbbrev typ then #2 (Type.asAbbrev typ) else typ
          val isDatatype = Type.isMu typ 
          val (vs,typRepr) = if Type.isAbbrev typ then ([], typ)
                             else unlambdaTyp typ

          val (vs, isExtType) =
            let
              val (ks, k') = unarrowTKind (Type.kind typ)
              val isExtType = Type.isExtKind k'
              val vs2 = if isExtType
                         then List.map
                                 (fn k => Type.newVar(k, Type.Unconstrained))
                                 ks
                         else []
            in
              (vs2 @ vs, isExtType)
            end

          val (doc,m) = ppVars vs
              
          val vars = PrettyPrint.toString (doc, 80)
          val text = if vars = "" then label else vars ^ " " ^ label
          val tooltip =
            PrettyPrint.toString
                   (PPType.ppTyp' ([], List.length vs, m) typRepr, 120)
          val decl = TypItem (path, k, tooltip)
          val tree = AbsTree.simpleText (Decl decl, text, Prefs.labStyle)
          val prefix = if isExtType then pTypxL
                       else if isDatatype then pDatatypL
                            else pTypL
        in
          Concat {prefix, tree, suffix=[], orient = AbsTree.orientSon}
        end

      | ModItem (label, msig, mvalue) =>
        (*let
          val tree = AbsTree.simpleText (Decl decl, label, Prefs.labStyle)
          val prefix = if Inf.isArrow msig then pFctL else pModL
        in
          Concat {prefix, tree, suffix=[], orient = AbsTree.orientSon}
        end*)
        let
          val prefix = pMod :: (label, Prefs.labStyle) :: AbsTree.equalL
          val item = Common.Module (msig, mvalue)
          val tree = AbsTree.map (depth - 1, item)
        in
          Concat {prefix, tree, suffix = [], orient = AbsTree.orientSonStrict}
        end

      | SigItem (l, sign) =>
        let val tree = AbsTree.simpleText (Decl decl, l, Prefs.labStyle)
        in
          Concat {prefix = pSigL, tree, suffix=[], orient = AbsTree.orientSon}
        end

  (* Expands a declaration. *)
  fun fromDecl (module, decl) =
      case decl of
	FixItem _ => NONE
      | ValItem (l, t, value) => 
          (*if Type.isArrow t then NONE else*)
            let
              val prefix = pVal :: (l, Prefs.labStyle) :: AbsTree.equalL
              val item = Common.Value (t, value)
              val tree = AbsTree.mapValue (!Prefs.incrDepth, item, t, value)
            in
              SOME (Concat {prefix, tree, suffix = [],
                            orient = AbsTree.orientSonStrict})
            end

      | TypItem _ => NONE

      | ModItem (l, msig, mvalue) =>
        (*if Inf.isArrow msig then NONE else*)
          let
            val prefix = pMod :: (l, Prefs.labStyle) :: AbsTree.equalL
            val item = Common.Module (msig, mvalue)
            val tree = AbsTree.map (!Prefs.incrDepth, item)
          in
            SOME (Concat {prefix, tree, suffix = [],
                          orient = AbsTree.orientSonStrict})
          end

      | SigItem (l, sign) => NONE

  fun addDecl (_, _, _, index, size, []) = (assert index = size ; [])
    | addDecl (modl, depth, kids, index, size, (el :: elems) as rest) =
      if index >= size then rest (* Finished. *)
      else
	(Array.update (kids, index, mapDecl (modl, depth, el)) ;
	 addDecl (modl, depth, kids, index + 1, size, elems))

  fun makeDecl (module, depth, kids, items, length, limit) =
      let
	val width = Array.length kids
	val size = width - (if limit then 1 else 0)
	val rest = addDecl (module, depth, kids, 0, size, items)
      in
	assert (List.length rest = length - size) ; (* Can be removed. *)
	if limit then 
	  let val limitDesc = AbsTree.ModuleLimit (rest, length - size)
	  in
	    Array.update (kids, size, WidthLimit limitDesc)
	  end
	else ()
      end

  (* Maps Inf items to Abstree declarations. *)
  fun mapItem (modl, Inf.FixItem (l, f)) = SOME (FixItem (l, f))
    | mapItem (modl, Inf.ValItem (lab, typ)) =
      let val label = Label.toString lab
      in
        if String.sub (label, 0) = #"'" then NONE
        else SOME (ValItem (label, typ, getVal (modl, lab)))
      end
    | mapItem (modl, Inf.TypItem (path, k)) = SOME (TypItem (path, k, ""))
    | mapItem (modl, Inf.ModItem (path, inf)) =
      let
        val lab   = Path.toLab path
        val label = Label.toString lab
      in
        SOME (ModItem (label, inf, getMod (modl, lab)))
      end
    | mapItem (modl, Inf.InfItem (path, _)) = 
      let
        val lab = Path.toLab path
        val label = Label.toString lab
      in
          SOME (SigItem (label, getSig (modl, lab)))
      end
    | mapItem (modl, Inf.HiddenItem _) = NONE

  fun filterItems (modl, [], acc, n) = (acc, n)
    | filterItems (modl, x :: xs, acc, n) =
          case mapItem (modl, Inf.inspectItem x) of
	    NONE => filterItems (modl, xs, acc, n)
	  | SOME i => filterItems (modl, xs, i :: acc, n + 1)

  fun structur (depth, item, sign, module) =
    let
      val (items, length) = filterItems (module, Inf.items sign, [], 0)
      val widthLimit = !Prefs.widthLimit
      val (limit, width) =
        if length > widthLimit then (true, widthLimit + 1) else (false, length)
      val elemKids = Array.array (width, undefinedKid)
      val elems = Container {desc = AbsTree.Struct, limit, kids = elemKids}

      val kids = Array.array (3, undefinedKid)
      val body = Concat {prefix = indentPrefix, tree = elems,
                         suffix = if length = 1 then indentPrefix else [],
                         orient = AbsTree.orientParent}
    in
      Array.update (kids, 0, labelStruct) ;
      Array.update (kids, 1, body) ;
      Array.update (kids, 2, labelEnd) ;
      makeDecl (module, depth - 1, elemKids, items, length, limit) ;
      if length = 0 then AbsTree.simpleText (item, "struct end", Prefs.structStyle)
      else Container {desc = item, limit = false, kids}
    end

  (* Maps a module to an abstree. *)
  fun module (depth, item, intf, modl) =
    case Inf.inspect intf of
       Inf.Top => AbsTree.simpleText (item, Prefs.topL, Prefs.defaultStyle)
     | Inf.Con _ => AbsTree.simpleText (item, Prefs.topL, Prefs.defaultStyle)
     | Inf.Arrow _ => AbsTree.simpleText (item, Prefs.fctL, Prefs.defaultStyle)
     | Inf.Exist (_, _, inf') => module (depth, item, inf', modl)
     | Inf.Lambda _ => AbsTree.simpleText (item, Prefs.fctLambdaL, Prefs.defaultStyle)
     | Inf.Apply _ => AbsTree.simpleText(item, Prefs.topL, Prefs.defaultStyle)
     | Inf.Sing m => module (depth, item, #2 (Inf.asMod m), modl)
     | Inf.Sig sign => structur (depth, item, sign, modl)

end
end
