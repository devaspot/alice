import structure Atom          from "x-alice:/lib/data/Atom"
import structure Inspector     from "Inspector"
import signature GTK           from "x-alice:/lib/gtk/GTK-sig"
import structure PervasiveType from "x-alice:/lib/rtt/PervasiveType"

fun waitLine () = TextIO.inputLine TextIO.stdIn

fun waitfor n = Thread.sleep (Time.fromMilliseconds (LargeInt.fromInt n))

val _ = Inspector.inspect ()

val r1 = ref 5
val r2 = ref 5

val _ = Inspector.inspect [r1, r2, r2, r2, r1]
val _ = Inspector.inspect [r1, r2, r2, r2, r1]
val _ = Inspector.inspect [r1, r2, r2, r2, r1]
val _ = waitLine ()
val _ = Exn.catch Exn.dumpTrace (fn () =>  Inspector.inspect [r1, r2, r2, r2, r1])
val _ = waitLine ()

val _ = Exn.catch Exn.dumpTrace (fn () => Inspector.inspect ())
val _ = waitLine ()

datatype tree =
  A | B | C of int * int | D of string list
| E of int * tree * tree | FisALabelLongerThanOtherLabels of tree list ref

fun longlist (n, l) = if n = 0 then l else longlist (n-1, lazy (n :: l))
fun listn n = longlist (n, [])


fun lazy longtest n acc = 
	if n<=0 then acc 
	else longtest (n-1) (longtest (n-1) (n::acc)) 
val z = longtest 4 nil
val _ = Inspector.inspect z
val _ = Inspector.inspect z
val _ = waitLine ()




val recd = {aone = "1" ,
           btwo = 2 ,
           cthree = [3, 3, 3] ,
           dfour = {foura = "foura" ,
                   fourb = [] ,
                   fourc = 25.0 } ,
           efive = "five" ,
           fsix = 6}

val tupleA = (1, 2, 3, 4, 5, 6)

val tupleB = (1, "2", [3, 3, 3],
                  {foura = "foura" ,
                   fourb = [] ,
                   fourc = 25.0 }, "five", 6)

(*
datatype yala = Yala of {afield : int * int * int * int * int * int,
                         b : yala,
                         c : yala,
                         dfield : int * string * int list * {foura : string,
                                                             fourb : int list,
                                                             fourc : real}
                                                          * string * int,
                         efield : yala * {aone : string,
                                          btwo : int,
                                          cthree : int list,
                                          dfour : {foura : string,
                                                   fourb : int list,
                                                   fourc : real},
                                          efive : string,
                                          fsix : int} * yala,
                         f : {one : yala, two : {aone : string,
                                          btwo : int,
                                          cthree : int list,
                                          dfour : {foura : string,
                                                   fourb : int list,
                                                   fourc : real},
                                          efive : string,
                                          fsix : int}},
                         g : {one : {aone : string,
                                     btwo : int,
                                     cthree : int list,
                                     dfour : {foura : string,
                                              fourb : int list,
                                              fourc : real},
                                     efive : string,
                                     fsix : int}, two : yala},
                         h : yala list list list,
                         i : yala}

val rec recf = Yala {afield = tupleA,
                     b = recf,
                     c = recf,
                     dfield = tupleB,
                     efield = (recf, recd, recf),
                     f = {one = recf, two = recd},
                     g = {one = recd, two = recf},
                     h = [[[recf, recf, recf]]],
                     i = recf}
*)

val _ = print "Two.\n" 

(*
datatype yala = Yala of {afield : int, b : yala, c : yala list}
val rec yala = Yala {afield = 100, b = yala, c = [yala, yala]}
*)
(*
val rece = { afield = tupleA ,
	     b = recd,
	     c = recd,
	     dfield = tupleB,
	     efield = recd,
	     f = [tupleB, tupleB, tupleB],
	     gfield = [tupleA, tupleA, tupleA],
	     hfield = [recd, recd, recd],
	     i = recd }
*)
val _ = print "Three.\n" 

val p = Promise.promise ()

datatype t = Jzzz of int | JJ of int | C of int * int | D of { labelA : int, labelB : int }

val rr = {afirstCons = C (10, 20) ,
	  bsecondCons = D { labelA = 100, labelB = 200 },
	  cthirdCons = JJ 5,
	  dfourCons = [10, 20]}

val rrr = {labelOne = {ao = [1, 2, 3], labelThree = (4,50)},
	   zo = 20000}

val hi = { labelAAAAAA = { labelB = { labelCCC = 10,
				      labelDD  = 20},
			   labelEEEEE = { labelF = 30,
					  labelGG = 40}},
	   labelH = 50}

val hj = { labelZ = { labelB = { labelCCC = 10,
				      labelDD  = 20},
			   labelEEEEE = { labelF = 30,
					  labelGG = 40}},
	   labelHAAAAAA = 50}


val k0 = {ab = 200, c = 300}

val k1 = {zo = {aLABELLABEL = 10 , lABBell = k0}}
val k2 = {zo = {aLABELLABELm = 10 , lABBell = k0}}
val k3 = {zo = {aLABELLABELmm = 10 , lABBell = k0}}
val k4 = {zo = {aLABELLABELmmm = 10 , lABBell = k0}}
val k5 = {zo = {aLABELLABELmmmm = 10 , lABBell = k0}}
val k6 = {zo = {aLABELLABELmmmmm = 10 , lABBell = k0}}
val k7 = {zo = {aLABELLABELmmmmmm = 10 , lABBell = k0}}
val k8 = {zo = {aLABELLABELmmmmmmm = 10 , lABBell = k0}}
val k9 = {zo = {aLABELLABELmmmmmmmm = 10 , lABBell = k0}}
val k10= {zo = {aLABELLABELmmmmmmmmm = 10 , lABBell = k0}}

val kk = {aab = k0, aac = k0, aad = k0}
val kkk = {aA = kk, bB = kk, cC = kk}
val kkkk = {aone = kkk, btwo = kk, cthree = 200, dfour = kkk}

val rr = ref 10
val pb = Promise.promise ()	 

fun makeList (x, n) = if n <= 0 then [] else (x :: (makeList (x, n - 1)))

val bigrr = (makeList (rr, 5)) :: 
	    (makeList (rr, 20)) :: 
	    (makeList (rr, 50)) :: 
	    (makeList (makeList (rr, 100), 50)) 

val alazy = lazy (Thread.sleep (Time.fromMilliseconds (LargeInt.fromInt 2500));
		  [10, lazy 20, 30])

val rop = ref []

val ppd = Promise.promise ()
val ppe = (Promise.promise () : string Promise.t)

val l = (1 :: 2 :: 3 :: 4 :: 5 :: (Promise.future p))

val l1 = lazy [1, 2]
val l2 = 3 :: 4 :: l1
val l3 = 5 :: 6 :: (lazy l2)
val l4 = 7 :: 8 :: l3
val l5 = 9 :: 10 :: l4
val l6 = 11 :: 12 :: (lazy [])
val l7 = lazy []

val longlist = [FST 500, FST 400, FST 300, FST 200, FST 100,
		SND l1, SND l2, SND l3]

datatype 'a foo = Foo of 'a

val lzz = lazy "a_lazy"
val lyy = lazy 10 :: 20 :: 30 :: (lazy 40 :: 50 ::
				       (60 :: 70 :: 80 :: (lazy [90])))

val lz2 = lazy (10, lazy 20, 30)

val _ =
  (print "Launching test.\n" ;
   print "Wait a few seconds, then press enter repeatedly to proceed.\n" ;
   Inspector.inspect (100, 999) ; waitLine () ;
   Inspector.inspect (Atom.atom "Foo") ; waitLine () ;
   Inspector.inspect lyy ;
   ())

signature COMPLEX =
  sig
    type complex
    val getReal : complex -> real
    val getIm   : complex -> real
    val create : real * real -> complex
  end

structure Complex :> COMPLEX =
  struct
    type complex = {real : real,
                    im   : real}
    fun getReal {real, im} = real
    fun getIm   {real, im} = im
    fun create (real, im) = {real, im}
  end

val typReal = PervasiveType.typ_real

fun makeReal x =
  Inspector.simple (Inspector.Value (x, typReal),
                    (Real.toString x, Inspector.realStyle))

val plusImL = [("+ ", Inspector.sepStyle)]
val iImL = [("i", Inspector.labelStyle)]

fun mapComplex (depth, value, t, _, _) =
  let
    val real = Complex.getReal value
    val im   = Complex.getIm value
    val leftSon = makeReal real
    val rightSon = Inspector.concat {prefix = plusImL,
                                     tree = makeReal im,
                                     suffix = iImL,
                                     orient = Inspector.Parent}

    val kids = Array.array (2, leftSon) 
    val son = Inspector.container (Inspector.Value (value, t), kids)
  in
    Array.update (kids, 1, rightSon) ;
    Inspector.concat {prefix = Inspector.openBracketL,
                      tree = son,
                      suffix = Inspector.closeBracketL,
                      orient = Inspector.Son}
  end

val _ = Inspector.register2 mapComplex
  
val cx = Complex.create (1.0, ~3.14159)
val _ = Inspector.inspect cx

structure MyS = struct type t1 = int type t2 = int type t3 = int
                       exttype t10
                       exttype 'a t11
                       constructor Foo : t10
		       datatype t4 = Zero | One of int | Two of int * t4
		       datatype 'a t4b = Zerob | Oneb of 'a | Twob of int * 'a t4b
                       type 'a t5 = 'a * 'a
                       type ('a, 'b) t6 = 'a * 'b * int
                       exttype 'a t11
                       constructor Moo of t4 * 'a t5 * ('a, 'a) t6 : 'a t11
                       exception Foobar
                       exception Zoo of int * int
                       val x1 = 10 val x2 = 20 val x3 = 30 val x4 = 40 
                       val x5 = 50 val x6 = 60 val x7 = 70 val x8 = Zero
                       val x9 = One 90 val x10 = Two (100, x9)
                       structure MyInt = Int
                       signature MY_GTK = GTK
                end

signature MY_S = sig type t1 = int type t2 = t1 type t3
                       exttype t10
                       constructor Foo : t10
                     datatype t4 = Zero | One of int | Two of int * t4
		       datatype 'a t4b = Zerob | Oneb of 'a | Twob of int * 'a t4b
                       type 'a t5 = 'a * 'a
                       type ('a, 'b) t6 = 'a * 'b * int

                       exttype 'a t11
                       constructor Moo of t4 * 'a t5 * ('a, 'a) t6 : 'a t11

                     val x1 : int val x2 : t2 val x3 : t3 val x4 : int
                     val x5 : t1 val x6 : t2 val x7 : t3 val x8 : t4
                     val x9 : t4 val x10 : t4
                     structure MyInt : INTEGER
                     signature MY_GTK
                 end 

signature MY_S2 = sig type t1 = int type t2 = t1 type t3 type t4
                       exttype t10
                       constructor Foo : t10
                       type 'a t5 = 'a * 'a
                       type ('a, 'b) t6 = 'a * 'b * int
		       datatype 'a t4b = Zerob | Oneb of 'a | Twob of int * 'a t4b
                       exttype 'a t11
                       constructor Moo of t4 * 'a t5 * ('a, 'a) t6 : 'a t11

                     exception Foobar exception Zoo of int * int
                     val x1 : t1 val x2 : t2 val x3 : t3 val x4 : int
                     val x5 : t1 val x6 : t2 val x7 : t3 val x8 : t4
                     val x9 : t4 val x10 : t4
                     structure MyInt : INTEGER
                     signature MY_GTK
                 end 

val pck = pack MyS :> MY_S

val _ = Inspector.inspect pck

structure _ = Inspector.Inspect (signature S = MY_S2
                                 structure X = MyS)

val _ = waitLine ()

structure _ = Inspector.Inspect (signature S = MY_S
                                 structure X = MyS)

val _ = waitLine ()

val llo = lazy 100
val ar = Array.array (5, llo)

val _ =
(Inspector.inspect (LargeInt.fromInt 2500) ;
 Inspector.inspect (Time.fromMilliseconds (LargeInt.fromInt 2500)) ;
 waitLine () ;
 Inspector.inspect llo ;
 Inspector.inspect llo ;
 Inspector.inspect (Promise.future ppd) ;
 Inspector.inspect (ref 200) ;
 Inspector.inspect (ref [{a = 10, b = 20}]) ;
 waitLine () ;
 Inspector.inspect (ref [{a = 10, b = 20}]) ;
 waitLine () ;
 Inspector.inspect (ref [{a = 10, b = 20}]) ;
 waitLine () ;
 Inspector.inspect ar ;
 Array.update (ar, 0, 51) ; Inspector.inspect ar ;
 waitLine () ;
 Array.update (ar, 1, 52) ; Inspector.inspect ar ;
 Array.update (ar, 2, 53) ; Inspector.inspect ar ;
 waitLine () ;
 Array.update (ar, 3, 54) ; Inspector.inspect ar ;
 Array.update (ar, 4, 55) ; Inspector.inspect ar ;
 waitLine () ;
 Inspector.inspect (Vector.fromList [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ;
 Inspector.inspect (Vector.fromList []) ;

 Inspector.inspect (listn 500) ; waitLine () ;
 Inspector.inspect {a = (100, 999), b = (200, 300, 400)} ; waitLine () ;
 Inspector.inspect lz2 ;
 Inspector.inspect (1, lz2, 3) ; waitLine () ;
 
 Inspector.inspect (1, 2, lzz, {a = lzz, b = lzz}, 5, lzz) ;
  Inspector.inspect { a = Jzzz 10 , b = Foo "ok", c = Foo [10, 20, 30],
                     d = Foo "Yap", e = Jzzz 40} ;
  waitLine () ;
  Inspector.inspect lyy ;
  Inspector.inspect { aaa = lyy , bbb = lyy , ccc = {ccc1 = lyy, ccc2 = lyy}} ;
  Inspector.inspect (lyy, lyy, lyy) ;
  Inspector.inspect (Foo lyy, Foo lyy, {aa = Foo lyy, bb = Foo lyy}) ;
  waitLine () ;
  Inspector.inspect [] ; waitLine () ;
  Inspector.inspect [1] ; waitLine () ;
  Inspector.inspect (listn 2)  ; waitLine () ;
  Inspector.inspect (listn 3)  ; waitLine () ;
  Inspector.inspect (listn 4)  ; waitLine () ;
  Inspector.inspect (listn 5)  ; waitLine () ;
  Inspector.inspect (listn 6)  ; waitLine () ;
  Inspector.inspect (listn 7)  ; waitLine () ;
  Inspector.inspect {a = (listn 8), b = listn 9, c = listn 8}  ; waitLine () ;
  Inspector.inspect (listn 10)  ; waitLine () ;
  Inspector.inspect (listn 20)  ; waitLine () ;
  Inspector.inspect (listn 50)  ; waitLine () ;
  Inspector.inspect ((1,2) :: (3, 4) :: (5, 6) ::
		     (lazy (6, 7) :: (7, 8) :: [])) ;
  waitLine () ;
  Inspector.inspect longlist ; waitLine () ;
  Inspector.inspect (1, 2, 3, 4) ; waitLine () ;
  Inspector.inspect (1, 2, 3, 4, 5) ; waitLine () ;
  Inspector.inspect {a = 1, b = 2, c = 3, d = 4} ; waitLine () ;
  Inspector.inspect {a = 1, b = 2, c = 3, d = 4, e = 5} ; waitLine () ;

  Inspector.inspect {a = l , b = (l,l), c = [l, l], d = l}; waitLine ();
  Inspector.inspect {a = l1 ,b = (l2,l3), c = [l4, l5], d = l6, e = l7};
  waitLine ();
  Inspector.inspect {a = k0 :: k0 :: (lazy []) ,
		     b = k0 :: k0 :: (lazy [k0]),
		     c = k0 :: k0 :: (lazy [k0, k0]),
		     d = k0 :: k0 :: (lazy [k0, k0, k0]),
		     e = lazy [],
		     f = lazy (k0 :: k0 :: (lazy (k0 :: k0 :: (lazy []))))} ;
  waitLine () ;
  Inspector.inspect {a = 12 :: 12 :: (lazy []) ,
		     b = 12 :: 12 :: (lazy [12]),
		     c = 12 :: 12 :: (lazy [12, 12]),
		     d = 12 :: 12 :: (lazy [12, 12, 12]),
		     e = lazy [],
		     f = lazy (12 :: 12 :: (lazy (12 :: 12 :: (lazy []))))} ;

  Inspector.inspect (99:: (lazy (2 :: 3 :: (lazy(raise (Fail "A failure"))))));
  waitLine () ;
  Promise.fulfill (p, [6, 7, 8]) ; waitLine () ;
  Inspector.inspect {a = "ok", b = 20, c = Promise.future ppd} ; waitLine () ;
  Promise.fulfill (ppd, k0) ; waitLine () ;
  Inspector.inspect (listn 100) ;  waitLine () ;
  Inspector.inspect rr ;
  Inspector.inspect rop ; 
  Inspector.inspect rop ;
  Inspector.inspect { aa1 = rr , bb2 = rop , cc3 = (Promise.future pb) ,
		      dd4 = alazy, ee5 = lazy rop, ff6 = Promise.future ppe } ;
  Inspector.inspect "Here is a line.\n" ; waitLine () ;
  Inspector.inspect { aA = { a = "A text\n on several \n lines" ,
                            blabel = "Is always cumbersome \n to display." ,
                            c = "Indeed."},
                     bB = "It can\n spread \n" ^
                          "on\n many lines \n making it \n" ^ 
                          "really\n really\n really\n high."} ;
  rop := [ { a = "OK", b = 999, c = true, d = ("Yes", "No") } ] ; waitLine () ;
  rop := [] ; waitLine () ;
  rop := [ { a = "Yablu", b = 111, c = false, d = ("No", "Yes") } ] ;
  waitLine () ;
  rop := [ { a = "OK", b = 999, c = true, d = ("Yes", "No") } ] ; waitLine () ;
  Inspector.inspect pb ; waitLine () ;
  Inspector.inspect alazy ;
  Inspector.inspect (1, 2, alazy, "yoo", alazy, lazy "Yabu...", alazy) ;
  waitLine () ;
  Inspector.inspect (Promise.future pb) ; waitLine () ;
  Promise.fulfill (pb, "This is quite a long string.") ; waitLine () ;
  Promise.fail (ppe, Fail "this is a failure.") ;

(*  Inspector.inspect bigrr ; *)
  rr := 20 ; waitLine () ;
  rr := 30 ; waitLine () ;
  rr := 40 ; waitLine () ;
  rr := 50 ; waitLine () ;
  rr := 60 ; waitLine () ;

  Inspector.inspect "ok" ; waitLine () ;
  Inspector.inspect (Jzzz 123) ; waitLine () ;
  Inspector.inspect tupleB ; waitLine () ;
  Inspector.inspect kkkk ; waitLine () ;
  Inspector.inspect (10, 2, 300, 400000) ; waitLine () ;
  Inspector.inspect (10000, 2, 30000000, 400000, 500, 600000, 70000, 800000) ;
  waitLine () ;
  Inspector.inspect {zo = {aLABELLABELm = 10 , lABBell = 2}} ;
  Inspector.inspect k0 ;
  Inspector.inspect k1 ;
  Inspector.inspect k2 ;
  Inspector.inspect k3 ;
  Inspector.inspect k4 ;
  Inspector.inspect k5 ;
  Inspector.inspect k6 ;
  Inspector.inspect k7 ;
  Inspector.inspect k8 ;
  Inspector.inspect k9 ;
  Inspector.inspect k10 ;
  

  Inspector.inspect rr ; waitLine () ;
  Inspector.inspect rrr ; waitLine () ;
  Inspector.inspect hi ; waitLine () ;
  Inspector.inspect hj ; waitLine () ;

  Inspector.inspect tupleA ; waitLine () ;
  Inspector.inspect tupleB ; waitLine () ;
(*  Inspector.inspect rece ; waitLine () ; *)
(*  Inspector.inspect yala ; waitLine () ; *)
(*  Inspector.inspect recf ; waitLine () ; *)
  Inspector.inspect (E (100, A, B)) ; waitLine () ;
  Inspector.inspect ([E (100, A, B)]) ; waitLine () ;
  Inspector.inspect ([[E (100, A, B)]]) ; waitLine () ;
  Inspector.inspect ([E (100, A, B), E (200, B, A)]) ; waitLine () ;
  Inspector.inspect (listn 10) ; waitLine () ;
  Inspector.inspect (listn 20) ;
  Inspector.inspect (listn 30) ;
  Inspector.inspect (listn 40) ;
  Inspector.inspect (listn 50) ;
  Inspector.inspect (listn 100) ;
  Inspector.inspect (listn 1000) ; waitLine () ;
  Inspector.inspect listn ; waitLine () ;

  let fun f x = Inspector.inspect [x] in f 5 end ; waitLine () ;

  print "Quitting.\n" ; waitLine () ;
  OS.Process.exit OS.Process.success ;
  ())

