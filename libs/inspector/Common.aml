import structure Inf     from "x-alice:/lib/rtt/Inf"
import structure Type    from "x-alice:/lib/rtt/Type"
import structure Reflect from "x-alice:/lib/system/Reflect" 
import structure MkQueue from "MkQueue"

structure Common =
struct

  exception BadTypeMapper

  datatype alice_item =  Value  of Type.typ * Reflect.value
                       | Module of Inf.t    * Reflect.module 
  
  (* Instructions to be sequentially "processed" by the Inspector. *)
  datatype instruction =
    NewFont                  (* The font has been changed. *)
  | Identifiers              (* Show/Hide identifiers for futures and refs. *)
  | NewLimits                (* The depth or width limit has been changed. *)
  | Inspect   of alice_item  (* Inspect some alice value. *)
  | RemoveEntry              (* Remove selected entry. *)
  | Clear                    (* Clear the board. *)
  | Expand of bool           (* Expand the selection, fully or not. *)
  | FoldTree                 (* Fold the selection. *)
  | Reinspect                (* Reinspect the selection. *)
  | ForceEval                (* Force the evaluation of the selected value. *)
  | Layout  of int           (* Do the layout of the given entry. *)
  | Monitor                  (* Monitor all references. *)
  | Future of int            (* Update the future with the given number. *)
  | DoSelect of int list list (* Select the given paths. *)
  | ClicAt of int * int * int (* Select a value. (x, y, modifier) *)
  | InfoAt of int * int * int
  | PopupAt of int * int * int * int * IntInf.int
  | Tooltip of int * int
  | HideTooltip

  (* Sets the priority of each instruction. *)
  fun getPrio instr =
    case instr of
      NewFont     => 1
    | Identifiers => 1
    | NewLimits   => 1
    | Inspect _   => 1
    | RemoveEntry => 1
    | Clear       => 1
    | Expand _    => 1
    | FoldTree    => 1
    | Reinspect   => 1
    | ForceEval   => 1
    | Future _    => 2
    | Layout _    => 3
    | DoSelect _  => 4
    | ClicAt _    => 5
    | InfoAt _    => 5
    | PopupAt _   => 5
    | Monitor     => 6
    | Tooltip _   => 7
    | HideTooltip => 1

  structure Queue = (* lazy *) MkQueue (type t = instruction)
  signature QUEUE_PUT = (val put : instruction -> unit)

  fun queuePut queue x = Queue.put (queue, x, getPrio x)

  fun undefined name =
    lazy (print ("************************************************\n" ^ 
                 "ERROR : Undefined " ^ name ^ " requested.\n" ^
                 "************************************************\n") ;
          raise (Fail "Undefined"))

  fun warning text = print ("*** Alice Inspector Warning ---  " ^ text ^
			    "  *** \n")

  (* A path is a list of integers. comparePaths (p1, p2) tells if
   *   - p1 and p2 are equal  : Equal
   *   - p1 is a prefix of p2 : Contains
   *   - p2 is a prefix of p1 : Belongs 
   *   - otherwise            : Distinct *)
  datatype comparison = Equal | Contains | Belongs | Distinct

  fun comparePaths ([], []) = Equal
    | comparePaths (_,  []) = Belongs
    | comparePaths ([], _ ) = Contains
    | comparePaths (x :: xs, y :: ys) = if x = y then comparePaths (xs, ys)
                                        else Distinct

  fun decomposePath p = case List.rev p of [] => assert false
                                         | [a, b] => (~b, [])
                                         | x :: xs => (x, xs)

  (* Map length elements from the array src to the array dst. *)
  fun map {src, isrc, dst, idst, length, f} =
      if length <= 0 then ()
      else (Array.update (dst, idst, f ((Array.sub (src, isrc), idst))) ;
	    map {src, isrc = isrc + 1,
		 dst, idst = idst + 1, length = length - 1, f})

  fun app {src, isrc, length, f} =
    if length <= 0 then ()
    else (f (Array.sub (src, isrc), isrc) ;
          app {src, isrc = isrc + 1, length = length - 1, f})

  fun id (x, _) = x

  (* Copy length elements from the array src to the array dst. *)
  fun copy {src, dst, length} =
      (map {src, isrc = 0, dst, idst = 0, length, f = id} ;
       dst)

  (* Get the length of the given list, or max if it is longer. *)
  fun getMaxListLength (l, length, max) = 
      if length >= max then max else
      case l of [] => length
	      | _ :: xs => getMaxListLength (xs, length + 1, max)


  val inspectItemPromise = Promise.promise ()
  val inspectItem = Promise.future inspectItemPromise
  fun inspectVal ty x = inspectItem (Value (ty, Reflect.reflect x))
  __overload 'a inspect : 'a -> unit = inspectVal

end
