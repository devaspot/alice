(*
 * Author:
 *   Jens Regenberg <jens@ps.uni-sb.de>
 *
 * Copyright:
 *   Jens Regenberg, 2002
 *
 * Last change:
 *   $Date: 2004-02-19 17:34:57 $ by $Author: jens $
 *   $Revision: 1.4 $
 *)

import structure Model from "Model"
import structure Stream from "Stream"
import structure TextIO from "../../lib/system/TextIO"
import signature EVENTLISTENER from "EVENTLISTENER-sig"
import structure Debug from "../../lib/system/Debug"

import structure Debugger from "../../lib/system/Debugger"

structure Eventlistener :> EVENTLISTENER =
    struct
	type eventlistener = ((Model.event -> unit) list) ref

	(* Helper functions *)
	fun convertSystemEvent(Debugger.Breakpoint x) = Model.Breakpoint x
	  | convertSystemEvent(Debugger.Entry x)      = Model.Entry x
	  | convertSystemEvent(Debugger.Exit x)       = Model.Exit x
	  | convertSystemEvent(Debugger.UnCaught x)   = Model.UnCaught x
	  | convertSystemEvent(Debugger.Blocked x)    = Model.Blocked x
	  | convertSystemEvent(Debugger.Runnable x)   = Model.Runnable x
	  | convertSystemEvent(Debugger.Terminated x) = Model.Terminated x
	(* End helper functions *)

	fun new user_event_stream = 
	    let 
		val eventlistener = (ref nil) : eventlistener
		val system_event_stream = Debugger.getEventStream();
		fun consumeUserStream (x::xs) =
		    (List.app (fn f => f x) (!eventlistener);
		     consumeUserStream xs)
		  | consumeUserStream _       = raise Subscript
		fun consumeSystemStream stream = 
		    let 
			val (event, new_stream) = Debugger.readEventStream(stream)
		    in 
			(List.app 
			 (fn f => f (convertSystemEvent event)) (!eventlistener);
			 consumeSystemStream new_stream)
		    end
		val _ = (spawn (consumeUserStream (Stream.read user_event_stream)
				handle e => 
				    TextIO.print ("Userevent sind tot "^ General.exnName e^ "\n"));
			 spawn (consumeSystemStream system_event_stream 
				handle e => 
				    TextIO.print ("SystemEvents sind tot "^ General.exnName e^ "\n")))

	    in
		eventlistener
	    end

	fun update eventlistener = fn () => ()
	fun addModel(handleEvent, eventlistener) = 
	    eventlistener := handleEvent::(!eventlistener)

    end


