(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2001
 *
 * Last Change:
 *   $Date: 2001-05-03 07:39:35 $ by $Author: bruni $
 *   $Revision: 1.2 $
 *
 *)

import signature SERVER from "SERVER-sig"

structure Server :> SERVER =
    struct
	type lock = unit ref

	fun server () =
	    let
		val tail   = Promise.promise ()
		val stream = ref tail
		    
		fun process s = (case s of
				     nil   => ()
				   | p::pr => (p (); process pr))
		fun send p =
		    let
			val newtail = Promise.promise ()
			val tail    = Ref.exchange(stream, newtail)
		    in
			Promise.fulfill(tail, p::(Promise.future newtail))
		    end
	    in
		(Thread.spawn (fn () => process(Promise.future tail));
		 send)
	    end

	fun lock () = ref ()
	
	fun secure (cell, f) =
	    (fn x =>
	     let
		 val newlock = Promise.promise ()
		 val lock    = Ref.exchange(cell, Promise.future newlock)
		 val _       = Future.await lock
		 val y       = f x
		 val _       = Promise.fulfill(newlock, ())
	     in
		 y
	     end)
    end
