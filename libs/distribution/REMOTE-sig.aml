(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus and Leif Kornstaedt and Andreas Rossberg, 2001-2006
 *
 * Last Change:
 *   $Date: 2007-03-13 13:23:44 $ by $Author: rossberg $
 *   $Revision: 1.22 $
 *)

import structure Socket    from "x-alice:/lib/system/Socket"
import structure Component from "x-alice:/lib/system/Component"
import signature COMPONENT_MANAGER
    from "x-alice:/lib/system/COMPONENT_MANAGER-sig"

signature REMOTE =
    sig
	type ticket = string

	exception Port
	exception Ticket
	exception Proxy of exn
	exception SitedArgument			(* only as proxy cause *)
	exception SitedResult			(* only as proxy cause *)
	exception Protocol of string		(* only as proxy cause *)
	exception Remote of exn
	exception Connection			(* only as remote cause *)
	exception Exit of OS.Process.status	(* only as remote cause *)

	val port: unit -> Socket.port option
	val setPort: Socket.port -> unit                  (* Port *)

	(*--** once-only offer and proxy are missing *)
	val proxy: ('a -> 'b) -> 'a -> 'b

	val offer: Package.package -> ticket              (* Sited *)
	val take: ticket -> Package.package               (* Ticket *)

	val eval: string * Component.t -> package
	val run: string * Component.t -> package

	functor Proxy(signature S structure X: S): S

	functor Offer(signature S structure X: S): (val ticket: ticket)
							  (* Sited *)
	functor Take(val ticket: ticket signature S): S   (* Ticket *)

	functor Eval(val host: string
		     signature S
		     functor F: COMPONENT_MANAGER -> S): S
	functor Run(val host: string
		    signature S
		    functor F: COMPONENT_MANAGER -> S): S
    end
