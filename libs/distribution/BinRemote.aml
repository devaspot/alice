(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Benedikt Grundmann, 2004 
 *
 * Last change:
 *   $Date: 2007-03-13 13:23:44 $ by $Author: rossberg $
 *   $Revision: 1.34 $
 *)

import structure Url               from "x-alice:/lib/system/Url"
import structure UnsafeRemote      from "UnsafeRemote"
import structure Socket		   from "x-alice:/lib/system/Socket"
import structure MkHashImpMap	   from "x-alice:/lib/data/MkHashImpMap"
import structure Stream      	   from "x-alice:/lib/data/Stream"
import structure MkRemote
       signature REMOTE_PORT       from "MkRemote"

local 
(**** Binary Message handling (BinaryMessage, BinaryServer, BinaryClient) ****)

structure BinaryMessage :>
sig
    exception Protocol of string

    type tag	= int	
    (** The type of a tag, which identifies the kind of a message.
        range: 0 - 255 *)
	
    type path	= int	(** range: 0 - 2^30 *)
    

    val tagNotFound:	    int
    val tagInternalError:   int
    val tagClose:	    int
    val tagUser:	    int	    
    (** If a user of this module needs any new
	tags he should use only those in the
	range tagUser - 255
      *)

    type message = path * tag * string

    val read:	Socket.socket -> message
    val write:	Socket.socket * message -> unit
end
=
struct
    exception Protocol = UnsafeRemote.Protocol

    type tag	= int	(* range: 0 - 255 *)
    type path	= int

    val tagNotFound	    = 0
    val tagInternalError    = 1
    val tagClose	    = 2
    val tagUser		    = 10

    type message = path * tag * string

    fun uintToStr i =	(* convert a integer into a 4 byte binary encoded string *)
	let val part3 = i div (256 * 256 * 256) 
	    val rest3 = i mod (256 * 256 * 256)
	    val part2 = rest3 div (256 * 256)
	    val rest2 = rest3 mod (256 * 256)
	    val part1 = rest2 div 256
	    val rest  = rest2 mod 256 
	in
            implode [Char.chr part3, 
                     Char.chr part2, 
                     Char.chr part1, 
                     Char.chr rest]
	end

    fun strToUint (s, off) =	
	(* the reverse of uintToStr. starts at offset [off] in 
           the str [s] using exactly 4 characters (bytes).
	 *)
	let val part3 = Char.ord (String.sub (s, off)) 
	    val part2 = Char.ord (String.sub (s, off + 1))
	    val part1 = Char.ord (String.sub (s, off + 2))
	    val rest  = Char.ord (String.sub (s, off + 3))
	in
	    part3 * 256 * 256 * 256 + part2 * 256 * 256 + part1* 256 + rest
	end

    fun read socket =
	let
	    val header	= Socket.inputN (socket, 9)
	    val _	= if String.size header <> 9 then 
			    raise Protocol "socket closed prematurely" 
			  else ()
	    val path	= strToUint (header, 0)
	    val tag	= Char.ord (String.sub (header, 4))
	    val	len	= strToUint (header, 5)
            val str = if len = 0 then "" else 
                let
                    val content = Socket.inputN (socket, len) 
                in
                    if String.size content <> len then
                        raise Protocol "socket closed prematurely in content"
                    else
                        content
                end
	in
	    (path, tag, str)
	end

    fun write (socket, (path, tag, content)) =
	let
	    val len	= String.size content
	    val message	= String.concat [
		uintToStr path, 
		String.str (Char.chr tag),
		uintToStr len,
		content
	    ]
	in
	    (* Note that creating the message in memory using
	       String.concat and using only a single Socket.output
	       resulted in a big speed up
	     *)
	    Socket.output (socket, message)
	end
end


structure BinaryServer :> 
sig
    (** BinaryServer is mostly a straightforward 
	adaption of HttpServer (read copy & paste )
      *)
    type message = BinaryMessage.message 

    type handler = message -> message

    val start: int option -> int   

    val register:   int * int * handler -> unit
end
=
struct
    type message    = BinaryMessage.message
    type handler    = message -> message


    val logOut: TextIO.outstream option ref = ref NONE

    fun trace s = 
	case !logOut of
	    SOME q => (TextIO.output (q, s); TextIO.flushOut q)
	  | NONE => ()

    val idleTime = ref (Time.fromSeconds (Int.toLarge 30))

    val myPort: int option ref = ref NONE

    fun notFoundHandler (request: message) = 
        (#1 request, BinaryMessage.tagNotFound, "")

    structure Map = MkHashImpMap (type t = int * int
				  val equal = op=
				  fun hash (j, i) = Int.hash j + Int.hash i)

    val handlerMap: handler Map.t = Map.map ()

    fun findHandler key =
	case Map.lookup (handlerMap, key) of
	    SOME handler => handler
	|   NONE => (trace ("could not find handler for: " ^
			    Int.toString (#1 key) ^ "/" ^
			    Int.toString (#2 key) ^ "\n"); 
		     notFoundHandler)

    (*--**  Currently have to pass token stream as reference
	    in order to work around infamous thread space leak
	    (particularly under Mozart). *)
    fun closeIdle (tokens, socket) =
	case Future.awaitEither (Future.alarm (!idleTime), !tokens) of
	    SND (()::tokens') =>
		(tokens := tokens';
		closeIdle (tokens, socket))
	|   SND nil =>
	    (trace "explicitly closing connection\n";
	    Socket.close socket)
	|   FST _ =>
            (*--** This does not work, at least not under Mozart!
             * Sockets are synchronized, so the close will
             * be performed *after* the concurrent blocking read
             * stemming from readRequest in handleConnection
             * has returned - i.e. when the next request arrives.
             * This is not only useless but completely wrong,
             * because it causes that request to fail (the response
             * cannot be sent back).
             * There seems to be no way in the Mozart API to implement
             * the timeout properly, so for now, we simply keep
             * connections live forever.
            (trace "closing idle connection";
             Socket.close socket)
            *)
            ()

   
    fun handleExchange (socket, host, port, stream) =
	let
	    val request = BinaryMessage.read socket
	    val _ = trace ("request from " ^ host ^ ":" ^
			   Int.toString port ^ "\n")
	    val p = Promise.promise ()
	    val _ = Stream.send (stream, Promise.future p)
	    val handler = findHandler (#2 request, #1 request)
	    val response = handler request
		handle _ => (#1 request, BinaryMessage.tagInternalError, "")
	in
	    BinaryMessage.write (socket, response);
	    Promise.fulfill (p, ());
	    #2 request <> BinaryMessage.tagClose
	end
	handle BinaryMessage.Protocol _ =>
		   false before trace "protocol error\n"
	     | IO.Io {...} =>
		   false before trace "i/o error\n"

    fun handleConnection' (socket, host, port, stream) =
	let
	in
	    if handleExchange (socket, host, port, stream) then
		handleConnection' (socket, host, port, stream)
	    else
		Stream.close stream
	end

    fun handleConnection (socket, host, port) =
	let
	    val (stream, tokens) = Stream.stream ()
	in
	    trace ("connection from " ^ host ^ ":" ^ Int.toString port ^ "\n");
	    spawn handleConnection' (socket, host, port, stream);
	    spawn closeIdle (ref tokens, socket)
	end

    fun start portOpt =
	let
	    val p = Promise.promise ()
	in
	    case Ref.exchange (myPort, Promise.future p) of
		portOpt as SOME port =>
		    (Promise.fulfill (p, portOpt); port)
	      | NONE =>
		    let
			val (_, serverPort) =
			    Socket.server (portOpt, handleConnection)
		    in
			Promise.fulfill (p, SOME serverPort);
			serverPort
		    end
	end

    fun register (tag, id, handler) = Map.insert (handlerMap, (tag, id), handler)
end

structure BinaryClient :>
sig
    (** BinaryClient is mostly a straightforward adaption
	of HttpClient (read copy & paste) 
      *)
    exception Authority 

    val post: Url.t * BinaryMessage.message -> BinaryMessage.message
end
=
struct
    exception Authority

    structure Connection =
    struct
	structure Map =
	    MkHashImpMap(type t = string * int
			 val equal = op=
			 fun hash (host, port) =
			     String.hash host + port)

	val map: Socket.t list Map.t = Map.map ()
	val lock = Lock.lock ()

	fun new' (host, port) =
	    case Map.lookup (map, (host, port)) of
		SOME [socket] =>
		    (Map.removeExistent (map, (host, port)); socket)
	      | SOME (socket::rest) =>
		    (Map.insert (map, (host, port), rest); socket)
	      | (NONE | SOME nil) => Socket.client (host, port)

	val new = Lock.sync lock new'

	fun idle' (host, port, socket) =
	    let
		val sockets =
		    case Map.lookup (map, (host, port)) of
			SOME sockets => sockets
		      | NONE => nil
	    in
(*--** spawn thread to close this connection after some idle time *)
		Map.insert (map, (host, port), socket::sockets)
	    end

	val idle = Lock.sync lock idle'
    end

    fun parseAuthority authority =
	case CharVector.findi (fn (_, c) => c = #":") authority of
	    SOME (i, _) =>
		let
		    val host = String.substring (authority, 0, i)
		    val port = String.extract (authority, i + 1, NONE)
		in
		    (host,
		     case Int.fromString port of
			 SOME port => port
		       | NONE => raise Authority)
		end
	  | NONE => raise Authority


    fun request (url, (path, tag, text)) =
	let
	    val authority =
		case Url.getAuthority url of
		    SOME authority => authority
		  | NONE => raise Authority
	    val (host, port) = parseAuthority authority
	    val path =
		case Url.getPath url of
		    [_, s] =>
			(case Int.fromString s of
			     SOME i => i
			   | NONE => raise Authority
			)
		   | _ => raise Authority
	in
	    request' (host, port, (path, tag, text))
	end
    and request' (host, port, request) =
	let
	    val socket = Connection.new (host, port)
	    val closed =
		(BinaryMessage.write (socket, request); false)
		handle IO.Io {...} => true   
	in
	    if closed then request' (host, port, request)
	    else
		BinaryMessage.read socket
		before Connection.idle (host, port, socket)
	end

    fun post (url, msg) = request (url, msg)
end

(***** ----------- Binary Remote Port implementation ----------- ******)

structure BinaryRemotePort :> REMOTE_PORT =
struct
    type ticket = Url.t

    exception Port = UnsafeRemote.Port
    exception Ticket = UnsafeRemote.Ticket
    exception Proxy = UnsafeRemote.Proxy
    exception SitedArgument = UnsafeRemote.SitedArgument
    exception SitedResult = UnsafeRemote.SitedResult
    exception Protocol = BinaryMessage.Protocol
    exception Remote = UnsafeRemote.Remote
    exception Connection = UnsafeRemote.Connection
    exception Exit = UnsafeRemote.Exit

    val portState = ref NONE

    val rootUrl = lazy
	let
	    val p = Promise.promise ()
	    val portOpt = Ref.exchange (portState, Promise.future p)
	    val port = BinaryServer.start portOpt handle e =>
			(Promise.fail (p, e); raise e)
	in
	    Promise.fulfill (p, SOME port);
	    "x-alice://" ^ UnsafeRemote.getLocalIP () ^ ":" ^ Int.toString port
	end

    fun port () = await (!portState)

    fun setPort port =
	let
	    val p = Promise.promise ()
	in
	    case Ref.exchange (portState, Promise.future p) of
	        NONE => Promise.fulfill (p, SOME port)
	      | some => (Promise.fulfill (p, some); raise Port)
	end


    val tagImport   = BinaryMessage.tagUser 
    val tagExport   = tagImport + 1
    val tagCall     = tagExport + 1
    val tagReturn   = tagCall	+ 1

    fun tagToClass tag =
	if tag = tagImport then "offer"
	else if tag = tagCall then "proxy"
	else raise Protocol "invalid tag"

    val counterOffer = ref 1
    val counterProxy = ref 1

    fun register (tag, counter, handler) =
	let
	    val p   = Promise.promise ()
	    val n   = Ref.exchange (counter, Promise.future p)
	    val uri = Url.setPath (Url.empty, [Int.toString n])
	    val class = tagToClass tag
	in
	    Promise.fulfill (p, n + 1);
	    BinaryServer.register (tag, n, handler);
	    Url.resolve (Url.fromString (rootUrl ^ "/" ^ class ^ "/")) uri
	end

   
    fun checkTag (expected, actual) =
        if expected <> actual then 
            raise Protocol ("expected message of tag " ^ Int.toString expected
                            ^ ", got " ^ Int.toString actual) 
        else ()

    fun export packedValue =
	let 
	    fun handler (path, tag, msg) =
		(checkTag (tagImport, tag);
		 (path, tagExport, packedValue))
	in
	    register (tagImport, counterProxy, handler)
	end

    fun download url =
	let
	    val answer =
		BinaryClient.post (url, (0, tagImport, ""))
                handle BinaryClient.Authority   => raise Ticket
	in
	    checkTag (tagExport, #2 answer);
	    #3 answer
	end

    fun exportFn f =
	let
	    fun handler (path, tag, msg) =
		(checkTag (tagCall, tag);
		 (path, tagReturn, f msg))
	in
	    register (tagCall, counterOffer, handler)
	end

    fun call (url, value) =
	let
            val (path, tag, res) = 
                BinaryClient.post (url, (0, tagCall, value))
                handle BinaryClient.Authority => raise Ticket                    
	in
	    checkTag (tagReturn, tag);
	    res
	end
end

in
    structure Remote = MkRemote(BinaryRemotePort)
end
