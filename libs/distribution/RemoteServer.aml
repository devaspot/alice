(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg and Leif Kornstaedt, 2001-2005
 *
 * Last change:
 *   $Date: 2006-05-09 12:43:50 $ by $Author: rossberg $
 *   $Revision: 1.9 $
 *)

import structure Url              from "x-alice:/lib/system/Url"
import structure Component        from "x-alice:/lib/system/Component"
import structure ComponentManager from "x-alice:/lib/system/ComponentManager"
import structure OS               from "x-alice:/lib/system/OS"
import structure CommandLine      from "x-alice:/lib/system/CommandLine"
import structure Remote           from "Remote"

val logfile =
    case OS.Process.getEnv "ALICE_REMOTE_LOG" of NONE => NONE | SOME name =>
    SOME (TextIO.openAppend name)
    handle IO.Io _ =>
	(TextIO.output (TextIO.stdErr,
			"aliceremote: error opening log file " ^ name ^ "\n");
	 OS.Process.exit OS.Process.failure)

fun log s =
    case logfile of NONE => () | SOME file =>
    (TextIO.output (file, "-- " ^ s ^ "\n"); TextIO.flushOut file)

fun main ((flag as ("-x"|"-r"))::[ticket]) =
    (let
	datatype reply = OK of package | EXN of exn

	val _ = log ("Taking component from " ^ ticket)
	structure Query =
	    unpack Remote.take ticket : (val component : Component.t
					 val return : reply -> unit)

	val returned = ref false
	fun return (reply, message) =
	    let
		val p = Promise.promise ()
	    in
		if Ref.exchange (returned, Promise.future p)
		then ()
		else (log message; Query.return reply)
		     handle e => (Promise.fulfill (p, false); raise e);
		Promise.fulfill (p, true)
	    end
(*
	val _ = OS.Process.atExit
		(fn _ => (log "Exit called";
			  return (EXN Remote.Exit, "Returning exception Exit")))
*)
	val _ = log ("Evaluating component")
	val reply =
	    OK (ComponentManager.eval (Url.fromString "", Query.component))
	    handle exn => EXN exn
    in
	return (reply, case reply of OK _ => "Returning result"
				 | EXN e => "Returning exception " ^ Exn.name e)
	handle Remote.Proxy Remote.SitedArgument =>
	       (return (EXN(Remote.Remote Remote.SitedResult), "Sited result");
	        OS.Process.exit OS.Process.success)
	     | Remote.Proxy e =>
	       (return (EXN(Remote.Remote e), "Exception Proxy(" ^ Exn.name e ^
					      ") raised while returning!");
	        OS.Process.exit OS.Process.success)
	     | e =>
	       (return (EXN(Remote.Remote e), "Exception " ^ Exn.name e ^
					      " raised while returning!");
	        OS.Process.exit OS.Process.success);
	case (flag, reply)
	 of ("-r", OK _) => ()
	  | (_, _)       => OS.Process.exit OS.Process.success
    end
    handle Remote.Ticket =>
	   (TextIO.output (TextIO.stdErr, "aliceremote: \
					  \invalid ticket " ^ ticket ^ "\n");
	    log ("Ticket invalid!");
	    OS.Process.exit OS.Process.failure)
	 | e =>
	   (TextIO.output (TextIO.stdErr, "aliceremote: \
					  \could not return to caller, \
					  \exception " ^ Exn.name e ^ "\n");
	    log ("Return failed with exception " ^ Exn.name e ^ "!");
	    OS.Process.exit OS.Process.failure)
	)
  | main args =
	(log ("Invalid arguments: " ^ String.concatWith " " args);
	 OS.Process.exit OS.Process.failure)

val _ = main (CommandLine.arguments ())
