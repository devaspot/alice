(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2002
 *
 * Last change:
 *   $Date: 2003-09-10 09:07:44 $ by $Author: rossberg $
 *   $Revision: 1.10 $
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                   from "Pervasive"
import __primitive type unit and int
       type bool and order and option and list from "ToplevelTypes"

signature SUBSTRING =
sig
    eqtype char
    eqtype string
    type substring
    type t = substring							(**)

    val equal :		substring * substring -> bool			(**)
    val hash :		substring -> int				(**)

    val base :		substring -> string * int * int
    val string :	substring -> string
    val substring :	string * int * int -> substring
    val extract :	string * int * int option -> substring

    val isEmpty :	substring -> bool
    val size :		substring -> int

    val full :		string -> substring
    val getc :		substring -> (char * substring) option
    val first :		substring -> char option
    val triml :		int -> substring -> substring
    val trimr :		int -> substring -> substring
    val sub :		substring * int -> char
    val slice :		substring * int * int option -> substring
    val concat :	substring list -> string
    val concatWith :	string -> substring list -> string
    val explode :	substring -> char list

    val isPrefix :	string -> substring -> bool
    val isSuffix :	string -> substring -> bool
    val isSubstring :	string -> substring -> bool
    val compare :	substring * substring -> order
    val collate :	(char * char -> order) -> substring * substring -> order

    val splitAt :	substring * int -> substring * substring
    val splitl :	(char -> bool) -> substring -> substring * substring
    val splitr :	(char -> bool) -> substring -> substring * substring
    val dropl :		(char -> bool) -> substring -> substring
    val dropr :		(char -> bool) -> substring -> substring
    val takel :		(char -> bool) -> substring -> substring
    val taker :		(char -> bool) -> substring -> substring

    val position :	string -> substring -> substring * substring

    val span :		substring * substring -> substring
    val translate :	(char -> string) -> substring -> string

    val tokens :	(char -> bool) -> substring -> substring list
    val fields :	(char -> bool) -> substring -> substring list

    val app :		(char -> unit) -> substring -> unit
    val appr :		(char -> unit) -> substring -> unit	(**)
    val foldl :		(char * 'a -> 'a) -> 'a -> substring -> 'a
    val foldr :		(char * 'a -> 'a) -> 'a -> substring -> 'a
end
