(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 1999-2002
 *
 * Last change:
 *   $Date: 2006-07-10 14:03:21 $ by $Author: rossberg $
 *   $Revision: 1.4 $
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                       from "Pervasive"
import __primitive
       type int
       datatype bool and order and option and list from "ToplevelTypes"
import __primitive
       infix 4 = <> >= infixr 5 :: infix 6 + -
       val op = and op <> and op >=
       val op + and op -                           from "ToplevelValues"

functor MkRow(type 'a row
	      type 'a elem
	      val length : 'a row -> int
	      val sub :    'a row * int -> 'a elem) =
struct
    val length			= length
    val sub			= sub

    fun app  f r		= app'(f,r,0)
    and app'(f,r,i) if (i = length r) = ()
      | app'(f,r,i)		= (f(sub(r,i)) ; app'(f,r,i+1))

    fun appi  f r		= appi'(f,r,0)
    and appi'(f,r,i) if (i = length r) = ()
      | appi'(f,r,i)		= (f(i,sub(r,i)) ; appi'(f,r,i+1))

    fun appr  f r		= appr'(f, r, length(r)-1)
    and appr'(f,r,~1)		= ()
      | appr'(f,r,i)		= (f(sub(r,i)) ; appr'(f,r,i-1))

    fun appri  f r		= appri'(f, r, length(r)-1)
    and appri'(f,r,~1)		= ()
      | appri'(f,r,i)		= (f(i,sub(r,i)) ; appri'(f,r,i-1))

    fun foldl  f x r		= foldl'(f,x,r,0)
    and foldl'(f,x,r,i) if (i = length r) = x
      | foldl'(f,x,r,i)		= foldl'(f, f(sub(r,i),x), r, i+1)

    fun foldli  f x r		= foldli'(f,x,r,0)
    and foldli'(f,x,r,i) if (i = length r) = x
      | foldli'(f,x,r,i)	= foldli'(f, f(i,sub(r,i),x), r, i+1)

    fun foldr  f x r		= foldr'(f, x, r, length(r)-1)
    and foldr'(f,x,r,~1)	= x
      | foldr'(f,x,r,i)		= foldr'(f, f(sub(r,i),x), r, i-1)

    fun foldri  f x r		= foldri'(f, x, r, length(r)-1)
    and foldri'(f,x,r,~1)	= x
      | foldri'(f,x,r,i)	= foldri'(f, f(i,sub(r,i),x), r, i-1)

    fun all  f r		= all'(f,r,0)
    and all'(f,r,i) 		= i = length r orelse
				  f(sub(r,i)) andalso all'(f,r,i+1)

    fun alli  f r		= alli'(f,r,0)
    and alli'(f,r,i) 		= i = length r orelse
				  f(i,sub(r,i)) andalso alli'(f,r,i+1)

    fun exists  f r		= exists'(f,r,0)
    and exists'(f,r,i) 		= i <> length r andalso
				  (f(sub(r,i)) orelse exists'(f,r,i+1))

    fun existsi  f r		= existsi'(f,r,0)
    and existsi'(f,r,i) 	= i <> length r andalso
				  (f(i,sub(r,i)) orelse existsi'(f,r,i+1))

    fun find  f r					= find'(f,r,0)
    and find'(f,r,i) if (i = length r)			= NONE
      | find'(f,r,i) withval x = sub(r,i) end if (f x)	= SOME x
      | find'(f,r,i)					= find'(f,r,i+1)

    fun findi  f r					= findi'(f,r,0)
    and findi'(f,r,i) if (i = length r)			= NONE
      | findi'(f,r,i) withval x = sub(r,i) end if (f(i,x)) = SOME(i,x)
      | findi'(f,r,i)					= findi'(f,r,i+1)

    fun contains  eq r x	= contains'(eq,r,x,0)
    and contains'(eq,r,x,i)	= i <> length r andalso
				  (eq(x,sub(r,i)) orelse contains'(eq,r,x,i+1))
    fun notContains eq r x	= if contains'(eq,r,x,0) then false else true

    fun equal  eq (r1,r2)	= length r1 = length r2 andalso
				  equal'(eq,r1,r2,0)
    and equal'(eq,r1,r2,i)	= i = length r1 orelse
				  eq(sub(r1,i), sub(r2,i)) andalso
				  equal'(eq,r1,r2,i+1)

    fun collate cmp (r1,r2)	= collate'(cmp,r1,r2,0)
    and collate'(cmp,r1,r2,i)	= case (i = length r1, i = length r2)
				    of (true,  true)  => EQUAL
				     | (true,  false) => LESS
				     | (false, true)  => GREATER
				     | (false, false) =>
				  case cmp(sub(r1,i), sub(r2,i))
				    of EQUAL => collate'(cmp,r1,r2,i+1)
				     | other => other

    fun isSorted  cmp r		= isSorted'(cmp,r,1)
    and isSorted'(cmp,r,i)	= i >= length r orelse
				  cmp(sub(r,i-1), sub(r,i)) <> GREATER
				  andalso isSorted'(cmp,r,i+1)
end
