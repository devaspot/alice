(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 1999-2004
 *
 * Last change:
 *   $Date: 2004-05-04 13:51:21 $ by $Author: rossberg $
 *   $Revision: 1.4 $
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive         from "Pervasive"
import __primitive type int and list from "ToplevelTypes"
import __primitive structure List    from "List"
import functor MkSlice               from "MkSlice"
import __primitive functor MkVector  from "MkVector"

functor MkVectorSlice(type 'a vector
		      type 'a elem
		      val vlength :   'a vector -> int
		      val vsub :      'a vector * int -> 'a elem
		      val vextract :  'a vector * int * int -> 'a vector
		      val vtabulate : int * (int -> 'a elem) -> 'a vector
		      val vconcat :   'a vector list -> 'a vector
		      val vfromList : 'a elem list -> 'a vector) =
struct
    structure Slice = MkSlice(type row     = vector
			      type vector  = vector
			      type elem    = elem
			      val rlength  = vlength
			      val rsub     = vsub
			      val rextract = vextract)

    fun concat sls = vconcat(List.map Slice.vector sls)	(*INEFFICIENT*)

    structure Vector = MkVector(type dst_vector = vector
				type vector     = Slice.t
				type elem       = elem
				val maxLen      = 0
				val length      = Slice.length
				val sub         = Slice.sub
				val toList      = Slice.toList
				val tabulate    = vtabulate
				val fromList    = vfromList
				val concat      = concat)
    open Vector
    open Slice
end
