(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2005
 *
 * Last change:
 *   $Date: 2005-06-10 14:25:13 $ by $Author: rossberg $
 *   $Revision: 1.9 $
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                               from "Pervasive"
import __primitive
       type int and word and real and char and string
       type vector and array and package
       datatype exn and ref
       datatype bool and order and alt and option and list from "ToplevelTypes"
import __primitive infix  0 before
       infix  3 := :=: o
       infix  4 = <> < > >= <=
       infixr 5 :: @
       infix  6 + - ^
       infix  7 * / div mod
       val op = and op <>
       val op < and op > and op <= and op >=
       val ~ and abs and op + and op -
       val op * and op / and op div and op mod             from "ToplevelValues"
import __primitive structure General                       from "General"
import __primitive structure Bool                          from "Bool"
import __primitive structure Alt                           from "Alt"
import __primitive structure Option                        from "Option"
import __primitive structure List                          from "List"
import __primitive structure Real                          from "Real"
import __primitive structure Char                          from "Char"
import __primitive structure String                        from "String"
import __primitive structure Substring                     from "Substring"
import __primitive structure Vector                        from "Vector"
import __primitive structure Future                        from "Future"


structure Toplevel =						(**)
struct
    infix  0  before
    infix  3  := :=: o
    infix  4  = <> < > >= <=
    infixr 5  :: @
    infix  6  + - ^
    infix  7  * / div mod

    type int		= int
    type word		= word
    type real		= real
    type char		= char
    type string		= string
    type substring	= Substring.t
    type vector		= vector
    type array		= array
    type package	= package

    datatype exn	= datatype exn
    datatype ref	= datatype ref

    datatype bool	= datatype bool
    datatype order	= datatype order
    datatype alt	= datatype alt
    datatype option	= datatype option
    datatype list	= datatype list

    val op =		= op =
    val op <>		= op <>
    val op <		= op <
    val op >		= op >
    val op <=		= op <=
    val op >=		= op >=

    val ~		= ~
    val abs		= abs
    val op +		= op +
    val op -		= op -
    val op *		= op *
    val op /		= op /
    val op div		= op div
    val op mod		= op mod

    open General						(**)

    exception Alt	= Alt.Alt				(**)
    exception Option	= Option.Option
    exception Empty	= List.Empty

    val not		= Bool.not

    val isFst		= Alt.isFst				(**)
    val isSnd		= Alt.isSnd				(**)

    val getOpt		= Option.getOpt
    val isNone		= Option.isNone				(**)
    val isSome		= Option.isSome
    val valOf		= Option.valOf

    val null		= List.null
    val hd		= List.hd
    val tl		= List.tl
    val length		= List.length
    val rev		= List.rev
    val op @		= List.@
    val app		= List.app
    val appr		= List.appr				(**)
    val map		= List.map
    val foldr		= List.foldr
    val foldl		= List.foldl

    val ord		= Char.ord
    val chr		= Char.chr

    val str		= String.str
    val size		= String.size
    val op ^		= String.^
    val concat		= String.concat
    val explode		= String.explode
    val implode		= String.implode
    val substring	= String.substring

    val vector		= Vector.fromList

    val real		= Real.fromInt
    val ceil		= Real.ceil
    val floor		= Real.floor
    val trunc		= Real.trunc
    val round		= Real.round

    val await		= Future.await
    (*TODO (or not)
    __primitive val use : string -> unit = "use"
    *)
end
