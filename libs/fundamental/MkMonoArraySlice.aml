(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2002-2004
 *
 * Last change:
 *   $Date: 2007-02-18 12:56:19 $ by $Author: rossberg $
 *   $Revision: 1.6 $
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                  from "Pervasive"
import __primitive type unit and int          from "ToplevelTypes"
import functor   MkArraySlice                 from "MkArraySlice"
import __primitive signature MONO_ARRAY_SLICE from "MONO_ARRAY_SLICE-sig"

functor MkMonoArraySlice(type elem
			 type vector
			 eqtype array
			 type vector_slice
			 type slice
			 val alength :   array -> int
			 val asub :      array * int -> elem
			 val aupdate :   array * int * elem -> unit
			 val aextract :  array * int * int -> vector
			 val vtabulate : int * (int -> elem) -> vector
			 val vsllength : vector_slice -> int
			 val vslsub :    vector_slice * int -> elem) =
let
    structure MonoArraySlice =
    struct
	structure ArraySlice = MkArraySlice(
	    type 'a array        = array
	    type 'a vector       = vector
	    type 'a vector_slice = vector_slice
	    type 'a elem         = elem
	    val alength          = alength
	    val asub             = asub
	    val aupdate          = aupdate
	    val aextract         = aextract
	    val vtabulate        = vtabulate
	    val vsllength        = vsllength
	    val vslsub           = vslsub
	)
	open ArraySlice

	type elem         = elem
	type vector       = vector
	type array        = array
	type vector_slice = vector_slice
	type slice        = elem slice
	type t            = slice
    end

    __primitive
	functor Cast (structure X : MONO_ARRAY_SLICE signature S) : S = "Cast"
in
    Cast (
	signature S = MONO_ARRAY_SLICE
			where type elem         = elem
			  and type vector       = vector
			  and type array        = array
			  and type vector_slice = vector_slice
			  and type slice        = slice
	structure X = MonoArraySlice
    )
end
