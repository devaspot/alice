(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2002-2004
 *
 * Last change:
 *   $Date: 2004-09-16 15:57:53 $ by $Author: rossberg $
 *   $Revision: 1.5 $
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                           from "Pervasive"
import __primitive
       type unit and int and vector and array          from "ToplevelTypes"
import __primitive val op =                            from "ToplevelValues"
import __primitive structure VectorSlice               from "VectorSlice"
import functor MkArraySlice                            from "MkArraySlice"
import __primitive signature ARRAY_SLICE               from "ARRAY_SLICE-sig"

local
    structure ArraySlice : ARRAY_SLICE =
    struct
	type a = array
	type v = vector

	structure ArraySlice = MkArraySlice(
	    type array        = array
	    type vector       = vector
	    type vector_slice = VectorSlice.slice
	    type 'a elem      = 'a
	    __primitive val alength :  'a a -> int		= "Array.length"
	    __primitive val asub :	   'a a * int -> 'a	= "Array.sub"
	    __primitive val aupdate :  'a a * int * 'a -> unit	= "Array.update"
	    __primitive val aextract : 'a a * int * int -> 'a v = "Array.extract"
	    __primitive val vtabulate : int * (int->'a) -> 'a v = "Vector.tabulate"
	    val vsllength = VectorSlice.length
	    val vslsub    = VectorSlice.sub
	)
	open ArraySlice

	(* TODO: should we use this?
	    __primitive val asub : 'a t * int -> 'a = "Unsafe.Array.sub"
	*)

	type 'a slice	= 'a t

	fun contains sl	= ArraySlice.contains op= sl
	fun notContains sl	= ArraySlice.notContains op= sl
    end

    __primitive __eqeqtype slice = "'a ArraySlice.slice"
    __primitive functor Cast (structure X : ARRAY_SLICE signature S) : S = "Cast"
in
    structure ArraySlice =
	Cast (signature S = ARRAY_SLICE where type slice = slice
	      structure X = ArraySlice)
end
