(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2002-2004
 *
 * Last change:
 *   $Date: 2004-05-04 13:51:21 $ by $Author: rossberg $
 *   $Revision: 1.3 $
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                   from "Pervasive"
import __primitive
       type unit and int
       type bool and order and option and list from "ToplevelTypes"

signature MONO_ARRAY_SLICE =
sig
    type elem
    type vector
    type vector_slice
    type array
    type slice
    type t = slice							(**)

    val full :		array -> slice
    val slice :		array * int * int option -> slice
    val subslice :	slice * int * int option -> slice
    val vector :	slice -> vector
    val toVector :	slice -> vector					(**)
    val toList :	slice -> elem list				(**)

    val length :	slice -> int
    val isEmpty :	slice -> bool
    val base :		slice -> array * int * int
    val sub :		slice * int -> elem
    val update :	slice * int * elem -> unit
    val swap :		slice * int * int -> unit			(**)
    val getItem :	slice -> (elem * slice) option

    val triml :		int -> slice -> slice				(**)
    val trimr :		int -> slice -> slice				(**)
    val splitAt :	slice * int -> slice * slice			(**)
    val splitl :	(elem -> bool) -> slice -> slice * slice	(**)
    val splitr :	(elem -> bool) -> slice -> slice * slice	(**)
    val dropl :		(elem -> bool) -> slice -> slice		(**)
    val dropr :		(elem -> bool) -> slice -> slice		(**)
    val takel :		(elem -> bool) -> slice -> slice		(**)
    val taker :		(elem -> bool) -> slice -> slice		(**)

    val rev :		slice -> unit					(**)
    val copy :		{src : slice,        dst : array, di : int} -> unit
    val copyVec :	{src : vector_slice, dst : array, di : int} -> unit

    val app :		(elem -> unit) -> slice -> unit
    val appr :		(elem -> unit) -> slice -> unit			(**)
    val modify :	(elem -> elem) -> slice -> unit
    val foldl :		(elem * 'b -> 'b) -> 'b -> slice -> 'b
    val foldr :		(elem * 'b -> 'b) -> 'b -> slice -> 'b
    val all :		(elem -> bool) -> slice -> bool
    val exists :	(elem -> bool) -> slice -> bool
    val find :		(elem -> bool) -> slice -> elem option

    val appi :		(int * elem -> unit) -> slice -> unit
    val appri :		(int * elem -> unit) -> slice -> unit		(**)
    val modifyi :	(int * elem -> elem) -> slice -> unit
    val foldli :	(int * elem * 'b -> 'b) -> 'b -> slice -> 'b
    val foldri :	(int * elem * 'b -> 'b) -> 'b -> slice -> 'b
    val alli :		(int * elem -> bool) -> slice -> bool		(**)
    val existsi :	(int * elem -> bool) -> slice -> bool		(**)
    val findi :		(int * elem -> bool) -> slice -> (int * elem) option

    val contains :	(elem * elem -> bool) -> slice -> elem -> bool	(**)
    val notContains :	(elem * elem -> bool) -> slice -> elem -> bool	(**)

    val equal :		(elem * elem -> bool) -> slice * slice -> bool	(**)
    val collate :	(elem * elem -> order) -> slice * slice -> order

    val isSorted :	(elem * elem -> order) -> slice -> bool		(**)
    val sort :		(elem * elem -> order) -> slice -> unit		(**)
end
