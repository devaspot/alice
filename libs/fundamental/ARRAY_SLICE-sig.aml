(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2002
 *
 * Last change:
 *   $Date: 2002-11-04 16:54:46 $ by $Author: rossberg $
 *   $Revision: 1.2 $
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                   from "Pervasive"
import __primitive
       type unit and int and vector and array
       type bool and order and option and list from "ToplevelTypes"
import __primitive structure VectorSlice       from "VectorSlice"

signature ARRAY_SLICE =
sig
    type 'a slice
    type 'a t = 'a slice						(**)

    val full :		'a array -> 'a slice
    val slice :		'a array * int * int option -> 'a slice
    val subslice :	'a slice * int * int option -> 'a slice
    val vector :	'a slice -> 'a vector
    val toVector :	'a slice -> 'a vector				(**)
    val toList :	'a slice -> 'a list				(**)

    val length :	'a slice -> int
    val isEmpty :	'a slice -> bool
    val base :		'a slice -> 'a array * int * int
    val sub :		'a slice * int -> 'a
    val update :	'a slice * int * 'a -> unit
    val swap :		'a slice * int * int -> unit			(**)
    val getItem :	'a slice -> ('a * 'a slice) option

    val triml :		int -> 'a slice -> 'a slice			(**)
    val trimr :		int -> 'a slice -> 'a slice			(**)
    val splitAt :	'a slice * int -> 'a slice * 'a slice		(**)
    val splitl :	('a -> bool) -> 'a slice -> 'a slice * 'a slice	(**)
    val splitr :	('a -> bool) -> 'a slice -> 'a slice * 'a slice	(**)
    val dropl :		('a -> bool) -> 'a slice -> 'a slice		(**)
    val dropr :		('a -> bool) -> 'a slice -> 'a slice		(**)
    val takel :		('a -> bool) -> 'a slice -> 'a slice		(**)
    val taker :		('a -> bool) -> 'a slice -> 'a slice		(**)

    val rev :		'a slice -> unit				(**)
    val copy :		{src : 'a slice,  dst : 'a array, di : int} -> unit
    val copyVec :	{src : 'a VectorSlice.slice, dst : 'a array, di : int} -> unit

    val app :		('a -> unit) -> 'a slice -> unit
    val appr :		('a -> unit) -> 'a slice -> unit		(**)
    val modify :	('a -> 'a) -> 'a slice -> unit
    val foldl :		('a * 'b -> 'b) -> 'b -> 'a slice -> 'b
    val foldr :		('a * 'b -> 'b) -> 'b -> 'a slice -> 'b
    val all :		('a -> bool) -> 'a slice -> bool
    val exists :	('a -> bool) -> 'a slice -> bool
    val find :		('a -> bool) -> 'a slice -> 'a option

    val appi :		(int * 'a -> unit) -> 'a slice -> unit
    val appri :		(int * 'a -> unit) -> 'a slice -> unit		(**)
    val modifyi :	(int * 'a -> 'a) -> 'a slice -> unit
    val foldli :	(int * 'a * 'b -> 'b) -> 'b -> 'a slice -> 'b
    val foldri :	(int * 'a * 'b -> 'b) -> 'b -> 'a slice -> 'b
    val alli :		(int * 'a -> bool) -> 'a slice -> bool		(**)
    val existsi :	(int * 'a -> bool) -> 'a slice -> bool		(**)
    val findi :		(int * 'a -> bool) -> 'a slice -> (int * 'a) option

    val contains :	''a slice -> ''a -> bool			(**)
    val notContains :	''a slice -> ''a -> bool			(**)

    val equal :		('a * 'a -> bool) -> 'a slice * 'a slice -> bool (**)
    val collate :	('a * 'a -> order) -> 'a slice * 'a slice -> order

    val isSorted :	('a * 'a -> order) -> 'a slice -> bool		(**)
    val sort :		('a * 'a -> order) -> 'a slice -> unit		(**)
end
