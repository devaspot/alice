(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2002-2004
 *
 * Last change:
 *   $Date: 2004-05-04 13:51:21 $ by $Author: rossberg $
 *   $Revision: 1.7 $
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                   from "Pervasive"
import __primitive type unit and int
       type bool and option and order and list from "ToplevelTypes"

signature MONO_ARRAY =
sig
    type elem
    type vector
    eqtype array
    type t = array							(**)

    val maxLen: int

    val array: int * elem -> array
    val vector: array -> vector
    val toList:	array -> elem list					(**)
    val fromList: elem list -> array
    val toVector: array -> vector					(**)
    val fromVector: vector -> array					(**)
    val tabulate: int * (int -> elem) -> array

    val length: array -> int
    val sub: array * int -> elem
    val update: array * int * elem -> unit
    val swap: array * int * int -> unit					(**)
    val rev: array -> unit						(**)
    val copy: {src: array, dst: array, di: int} -> unit
    val copyVec: {src: vector, dst: array, di: int} -> unit

    val app: (elem -> unit) -> array -> unit
    val appr: (elem -> unit) -> array -> unit				(**)
    val modify: (elem -> elem) -> array -> unit
    val foldl: (elem * 'b -> 'b) -> 'b -> array -> 'b
    val foldr: (elem * 'b -> 'b) -> 'b -> array -> 'b
    val all: (elem -> bool) -> array -> bool
    val exists:	(elem -> bool) -> array -> bool
    val find: (elem -> bool) -> array -> elem option

    val appi: (int * elem -> unit) -> array -> unit
    val appri: (int * elem -> unit) -> array -> unit			(**)
    val modifyi: (int * elem -> elem) -> array -> unit
    val foldli: (int * elem * 'b -> 'b) -> 'b -> array -> 'b
    val foldri: (int * elem * 'b -> 'b) -> 'b -> array -> 'b
    val alli: (int * elem -> bool) -> array -> bool			(**)
    val existsi: (int * elem -> bool) -> array -> bool			(**)
    val findi: (int * elem -> bool) -> array -> (int * elem) option

    val contains: (elem * elem -> bool) -> array -> elem -> bool	(**)
    val notContains: (elem * elem -> bool) -> array -> elem -> bool	(**)

    val equal: (elem * elem -> bool) -> array * array -> bool		(**)
    val collate: (elem * elem -> order) -> array * array -> order

    val isSorted: (elem * elem -> order) -> array -> bool		(**)
    val sort: (elem * elem -> order) -> array -> unit			(**)
end
