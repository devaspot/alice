(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2005
 *
 * Last change:
 *   $Date: 2007-02-06 14:16:11 $ by $Author: rossberg $
 *   $Revision: 1.9 $
 *)

import structure Name        from "../rtt/Name"
import structure Label       from "../rtt/Label"
import structure Path        from "../rtt/Path"
import structure Type        from "../rtt/Type"
import structure Inf         from "../rtt/Inf"
import structure Reflect     from "../system/Reflect"
import structure UnsafeValue from "../system/UnsafeValue"
import signature LOCK        from "LOCK-sig"

structure Lock =
struct
    open Lock

    local
	open __pervasive

	exception Hidden

	(* Keep in sync with compiler/frontend-common/NameTranslation! *)
	fun trName f (Name.ExId s) = Name.ExId (f s)
	  | trName f Name.InId = Name.InId
	fun trLab f l = Label.fromName(trName f (Label.toName l))
	val trValLab = Fn.id
	val trTypLab = trLab (fn s => "$" ^ s)
	val trModLab = trLab (fn s => s ^ "$")
	val trInfLab = trLab (fn s => "$" ^ s ^ "$")

	fun syncMod (lock, m, j) =
	    case Inf.inspect j of
		Inf.Sig s =>
		    let
			val lvs = syncSig (lock, [], m, Inf.items s)
		    in
			UnsafeValue.prodPoly (Vector.fromList lvs)
		    end
              | Inf.Arrow(p, j1, j2) =>
		    let
			fun f x = syncMod (lock, UnsafeValue.cast m x, j2)
		    in
			UnsafeValue.cast (sync lock f)
		    end
              | Inf.Sing m' => syncMod (lock, m, #2 (Inf.asMod m'))
	      | (Inf.Top | Inf.Con _ | Inf.Apply _) => m
	      | Inf.Exist _ => raise Hidden
	      | Inf.Lambda _ => raise Inf.Interface

	and syncSig (lock, lvs, m, []) = lvs
	  | syncSig (lock, lvs, m, item::items) =
	    case Inf.inspectItem item of
		Inf.FixItem _ => syncSig (lock, lvs, m, items)
	      | Inf.ValItem (l, t) =>
		    let
			val l' = trValLab l
			val v = UnsafeValue.projPoly (m, l')
			val v' = syncVal (lock, v, t)
		    in
			syncSig (lock, (l', v')::lvs, m, items)
		    end
	      | Inf.TypItem (p, k) =>
		    let
			val l' = trTypLab (Path.toLab p)
			val v = UnsafeValue.projPoly (m, l')
		    in
			syncSig (lock, (l',v)::lvs, m, items)
		    end
	      | Inf.ModItem (p, j) =>
		    let
			val l' = trModLab (Path.toLab p)
			val v = UnsafeValue.projPoly (m, l')
			val v' = syncMod (lock, v, j)
		    in
			syncSig (lock, (l', v')::lvs, m, items)
		    end
	      | Inf.InfItem (p, k) =>
		    let
			val l' = trInfLab (Path.toLab p)
			val v = UnsafeValue.projPoly (m, l')
		    in
			syncSig (lock, (l',v)::lvs, m, items)
		    end
	      | Inf.HiddenItem _ => raise Hidden

	and syncVal (lock, v, t) =
	    case Type.inspect t of
		Type.Arrow (t1, t2) =>
		    let
			fun f x = syncVal (lock, UnsafeValue.cast v x, t2)
		    in
			UnsafeValue.cast (sync lock f)
		    end
	      | (Type.All (_, t') | Type.Exist (_, t')) => syncVal (lock, v, t')
	      | _ => v
    in
	functor Sync (val lock : lock signature S structure X : S) =
	    let
		structure M = Reflect.Reflect (signature S = S structure X = X)
		structure J = Reflect.ReflectSig (signature S = S)
	    in
		Reflect.Reify (val x = syncMod (lock, UnsafeValue.cast M.x, J.x)
			       signature S = S)
	    end
    end
end
