(*
 * Authors:
 *   Robert Grabowski <grabow@ps.uni-sb.de>
 *
 * Copyright:
 *   Robert Grabowski, 2003
 *
 * Last Change:
 *   $Date: 2004-10-14 12:19:27 $ by $Author: bgrund $
 *   $Revision: 1.7 $
 *
 *)

import structure Canvas from "../Canvas"
import structure Gtk       from "../Gtk"

local
    fun newServer () =
	let
	    val tail   = Promise.promise ()
	    val stream = Ref.ref tail

	    fun process s = (case s of
				 nil   => ()
			       | p::pr => (p (); process pr))
	    fun send p =
		let
		    val newtail = Promise.promise ()
		    val tail    = Ref.exchange(stream, newtail)
		in
		    Promise.fulfill(tail, p::(Promise.future newtail))
		end
	in
	    (spawn (process(Promise.future tail));
	     send)
	end

    val serve = newServer ()

    val MyCanvas = Canvas.new()
    val root     = Canvas.root MyCanvas

    val image = Gtk.imageNewFromFile("logo.png")
    val ibox = Gtk.eventBoxNew()

    val (xstart, ystart) = (10,10)
    val (xdelta, ydelta) = (1,1)
    val (ximagesize, yimagesize) = (254, 80)
    val (xcanvassize, ycanvassize) = (400, 400)

    val args =
	[("widget", Gtk.OBJECT ibox),
	 ("x", Gtk.REAL (Real.fromInt xstart)),
	 ("y", Gtk.REAL (Real.fromInt ystart)),
	 ("width", Gtk.REAL (Real.fromInt ximagesize)),
	 ("height", Gtk.REAL (Real.fromInt yimagesize))]

    val item = Canvas.itemCreate(root,Canvas.widgetGetType(),args)

    fun move(x,y,xdelta,ydelta) = fn () =>
        let
	    fun sleep ms =
                Thread.sleep (Time.fromMilliseconds (Int.toLarge ms))
	    val xdnew = if x+xdelta>0 andalso x+xdelta<(xcanvassize-ximagesize)
			    then xdelta 
			    else ~xdelta
	    val ydnew = if y+ydelta>0 andalso y+ydelta<(ycanvassize-yimagesize)
			    then ydelta 
			    else ~ydelta
	in
	    (sleep 10;
	     Canvas.itemMove(item, Real.fromInt xdnew,Real.fromInt ydnew);
	     Canvas.updateNow MyCanvas;
	     serve (move(x+xdnew, y+ydnew, xdnew, ydnew)))
	end
   
    fun toBlue    _ = 
	Gtk.imageSetFromFile(image, "logo-blue.png")
    fun toRainbow _ = 
	Gtk.imageSetFromFile(image, "logo.png")

    fun delete _  = serve (fn _ => OS.Process.exit OS.Process.success)
    val window    = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
in
    val _ = (Gtk.windowSetTitle (window, "Alice Logo Demo");
	     Gtk.containerSetBorderWidth (window, 10);
	     Gtk.widgetSetSizeRequest(MyCanvas, xcanvassize, ycanvassize);
	     Canvas.setScrollRegion(MyCanvas, 0.0, 0.0, 
		    Real.fromInt xcanvassize, Real.fromInt ycanvassize);
	     Gtk.signalConnect(window, "delete-event", delete);
	     Gtk.signalConnect(ibox, "button_press_event", toBlue);
	     Gtk.signalConnect(ibox, "button_release_event", toRainbow);
	     Gtk.containerAdd(ibox, image);
	     Gtk.containerAdd (window, MyCanvas);
	     Gtk.widgetShowAll window;
	     serve (move(xstart, ystart, xdelta, ydelta)))
end
