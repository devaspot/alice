(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2000
 *
 * Last Change:
 *   $Date: 2002-10-17 16:22:30 $ by $Author: grabow $
 *   $Revision: 1.1 $
 *
 *)

import structure Gtk from "../Gtk"

local
    fun deleteEvent _ = OS.Process.exit OS.Process.success
    
    fun makeBox(Homogeneous, Spacing, Expand, Fill, Padding) =
	let
	    val Box     = Gtk.hboxNew (Homogeneous, Spacing)
	    val Button1 = Gtk.buttonNewWithLabel "{Box packStart("
	    val Button2 = Gtk.buttonNewWithLabel "Button"
	    val Button3 = Gtk.buttonNewWithLabel (Bool.toString Expand)
	    val Button4 = Gtk.buttonNewWithLabel (Bool.toString Fill)
	    val Button5 =
		Gtk.buttonNewWithLabel ((Int.toString Padding) ^ ")}")
	    val show    = fn button =>
		(Gtk.boxPackStart(Box, button, Expand, Fill, Padding);
		 Gtk.widgetShow button)
	in
	    map show [Button1, Button2, Button3, Button4, Button5]; Box
	end

    fun runDemo demo =
	let
	    val Window  = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
	    val Box1    = Gtk.vboxNew(false, 0)
	    val QuitBox = Gtk.hboxNew(false, 0)
	    val Button  = Gtk.buttonNewWithLabel "Quit"
	in
	    (Gtk.signalConnect(Window, "delete-event", deleteEvent);
	     Gtk.containerSetBorderWidth(Window, 10);
	     demo Box1;
	     Gtk.signalConnect(Button, "clicked", fn _ => ());
	     Gtk.boxPackStart(Box1, QuitBox, false, false, 0);
	     Gtk.containerAdd(Window, Box1);
	     Gtk.widgetShow Button;
	     Gtk.widgetShow QuitBox;
	     Gtk.widgetShow Box1;
	     Gtk.widgetShow Window)
	end
    
    fun demoOne Box1 =
	let
	    val Label1     = Gtk.labelNew "Box = {New Gtk.hBox init(0 0)}"
	    val Box2       = makeBox(false, 0, false, false, 0)
	    val Box3       = makeBox(false, 0, true, false, 0)
	    val Box4       = makeBox(false, 0, true, true, 0)
	    val Separator1 = Gtk.hseparatorNew ()
	    val Label2     = Gtk.labelNew "Box = {Gtk.hBox init(1 0)}"
	    val Box5       = makeBox(true, 0, true, false, 0)
	    val Box6       = makeBox(true, 0, true, true, 0)
	    val Separator2 = Gtk.hseparatorNew ()
	in
	    (Gtk.miscSetAlignment(Label1, 0.0, 0.0);
	     Gtk.boxPackStart(Box1, Label1, false , false, 0);
	     Gtk.widgetShow Label1;
	     Gtk.boxPackStart(Box1, Box2, false , false, 0);
	     Gtk.widgetShow Box2;
	     Gtk.boxPackStart(Box1, Box3, false, false, 0);
	     Gtk.widgetShow Box3;
	     Gtk.boxPackStart(Box1, Box4, false, false, 0);
	     Gtk.widgetShow Box4;
	     Gtk.boxPackStart(Box1, Separator1, false, true, 5);
	     Gtk.widgetShow Separator1;
	     Gtk.miscSetAlignment(Label2, 0.0, 0.0);
	     Gtk.boxPackStart(Box1, Label2, false, false, 0);
	     Gtk.widgetShow Label2;
	     Gtk.boxPackStart(Box1, Box5, false, false, 0);
	     Gtk.widgetShow Box5;
	     Gtk.boxPackStart(Box1, Box6, false, false, 0);
	     Gtk.widgetShow Box6;
	     Gtk.boxPackStart(Box1, Separator2, false, true, 5);
	     Gtk.widgetShow Separator2)
	end
in
    val _ = runDemo demoOne
end
