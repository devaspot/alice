(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2000
 *
 * Last Change:
 *   $Date: 2004-01-23 12:24:57 $ by $Author: tack $
 *   $Revision: 1.8 $
 *
 *)


(* As soon as inspector tool runs on SEAM, 
   one could replace all "print" function calls by "Inspector.inspect". *)

import structure Gtk        from "../Gtk"
import structure GtkBuilder from "../GtkBuilder"

local
    open GtkBuilder
in
    local
	fun DummyHandler _ = print "DummyHandler was called"
	val start1 = Button("Start 1",
			    [Handler("clicked", DummyHandler)])
	val start2 = Button("Start 2 Button",
			    [Handler("clicked", DummyHandler)])
	val end1   = Button("End 1",
			    [Handler("clicked", DummyHandler)])
	val end2   = Button("End 2 Button",
			    [Handler("clicked", DummyHandler)])

	val entries = [BoxStart(false, false, 0, start1),
		       BoxStart(false, false, 0, start2),
		       BoxEnd(false, false, 0, end1),
		       BoxEnd(false, false, 0, end2)]
	val child   = VBox {homogeneous=false, spacing=0, entries=entries}
	fun DeleteHandler _ = print "Delete was called!"
	val widget  = Toplevel {title="Vertical Box", border=10,
				handler=[Handler("destroy", DeleteHandler)],
				inner=child}
    in
	val _ = MakeWidget widget
    end


    local
	fun MakeHandler s = fn _ => print s

	val leftup    = Button("Left Up",
			       [Handler("clicked", MakeHandler "Left Up")])
	val rightup   = Button("Right Up",
			       [Handler("clicked", MakeHandler "Right Up")])
	val leftdown  = Button("Left Down",
			       [Handler("clicked", MakeHandler "Left Down")])
	val rightdown = Button("Right Down",
			       [Handler("clicked", MakeHandler "Right Down")])

	val entries = [TableSimple {x=0, y=0, item=leftup},
		       TableSimple {x=1, y=0, item=rightup},
		       TableSimple {x=0, y=1, item=leftdown},
		       TableSimple {x=1, y=1, item=rightdown}]
	val child  = Table {rows=2, columns=2, homogeneous=true,
			    entries=entries}
	val widget = Toplevel
	    {title="Table Demo", border=10,
	     handler=[Handler("delete-event",
			      MakeHandler "Toplevel::delete")],
	     inner=child}
    in
	val _ = MakeWidget widget
    end


    local
	fun MakeHandler s = fn _ => print s

	val entries =
	    [BoxSimple(CheckButton ("Red",
				    [Handler("clicked", MakeHandler "red")])),
	     BoxSimple(CheckButton ("Yellow",
				    [Handler("clicked",
					     MakeHandler "yellow")])),
	     BoxSimple(CheckButton ("Green",
				    [Handler("clicked",
					     MakeHandler "green")]))]
	val box     = VBox {homogeneous=false, spacing=0, entries=entries}
	val child   = Frame {title="Traffic Lights", ftype=ShadowEtchedIn,
			     inner=box}
	val widget  =
	    Toplevel {title="Frame Demo", border=10,
		      handler=[Handler("delete-event",
				       MakeHandler "Toplevel::delete")],
		      inner=child}
    in
	val _ = MakeWidget widget
    end

    local
	fun MakeHandler s = fn _ => print s

	val left   = Button("Left", nil)
	val right  = Button("Right", nil)
	val child  = HPane {left=left, right=right}
	val widget =
	    Toplevel {title="Horizontal Pane", border=10,
		      handler=[Handler("delete-event",
				       MakeHandler "Toplevel::delete")],
		      inner=child}

    in
	val _ = MakeWidget widget
    end

    local
	fun MakeHandler s = fn _ => print s

	val entries = [{label="First", note=Button("First Page", nil)},
		       {label="Second", note=Button("Second Page", nil)},
		       {label="Third", note=Button("Third Page", nil)},
		       {label="Fourth", note=Button("Fourth Page", nil)}]

	val child   = Notebook(true, entries)
	val widget  =
	    Toplevel {title="NotebookEntry", border=10,
		      handler=[Handler("delete-event",
				       MakeHandler "Toplevel::delete")],
		      inner=child}
    in
	val _ = MakeWidget widget
    end

    local
	fun MakeHandler s = fn _ => print s

	val entries = [Button("Ok", nil),
		       Button("Refresh", nil),
		       Button("Clear", nil),
		       Button("Cancel", nil)]

	val child   = HButtonBox(DefaultStyle, entries)
	val widget  =
	    Toplevel {title="HButtonBox", border=10,
		      handler=[Handler("delete-event",
				       MakeHandler "Toplevel::delete")],
		      inner=child}
    in
	val _ = MakeWidget widget
    end

    local
	fun MakeHandler s = fn _ => print s
	    
	val list1 =
	    [MenuItem("first",
		      [Handler("activate",
			       MakeHandler "files/first clicked")]),
	     MenuItem("second", nil)]

	val list22 = [MenuItem("I am a submenu", nil)]
	    
	val list2 = [SubMenu("first 2", list22),
		     MenuItem("second 2", nil)]

	val child = MenuBar([{label="Files", submenu=list1},
			     {label="Tools", submenu=list2}])
	val widget =
	    Toplevel {title="Menu Bar", border=10,
		      handler=[Handler("delete-event",
				       MakeHandler "Toplevel::delete")],
		      inner=child}
    in
	val _ = MakeWidget widget
    end

    local
	fun MakeHandler s = fn _ => print s

	val w = Promise.promise ()  

	fun updateDate(cal, _) =
	    let
		val (year, month, day) = Gtk.calendarGetDate cal
		val date =
		    ((Int.toString (month + 1)) ^ "/" ^
		     (Int.toString day) ^ "/" ^ (Int.toString year))
	    in
		Gtk.windowSetTitle(Promise.future w, "Calendar: " ^ date)
	    end

	val child   =
	    Calendar([Handler("month-changed", updateDate),
		      Handler("day-selected", updateDate),
		      Handler("day-selected-double-click", updateDate),
		      Handler("prev-month", updateDate),
		      Handler("next-month", updateDate),
		      Handler("prev-year", updateDate),
		      Handler("next-year", updateDate)])
	    
	val widget  =
	    Toplevel {title="Calendar Test", border=10,
		      handler=[Handler("delete-event",
				       MakeHandler "Toplevel::delete")],
		      inner=child}
    in
	val _ = Promise.fulfill(w, MakeWidget widget)
    end

    local
	fun MakeHandler s = fn _ => print s

	val child   = Text {xdim=50.0, ydim=50.0, text=nil}
	val widget  =
	    Toplevel {title="TextWidget Test", border=10,
		      handler=[Handler("delete-event",
				       MakeHandler "Toplevel::delete")],
		      inner=child}
    in
	val _ = MakeWidget widget
    end

end
