(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2000
 *
 * Last Change:
 *   $Date: 2002-10-17 16:22:31 $ by $Author: grabow $
 *   $Revision: 1.1 $
 *
 *)

import structure Inspector from "x-alice:/lib/tools/Inspector"
import structure FD        from "x-alice:/lib/constraints/FD"
import structure Space     from "x-alice:/lib/constraints/Space"
import structure Search    from "x-alice:/lib/constraints/Search"

structure Money =
    struct
	fun money() =
	    let
		val digits as #[S, E, N, D, M, O, R, Y] = FD.rangeVec(8, (0, 9))
		val send                                = FD.fd NONE
		val more                                = FD.fd NONE
		val money                               = FD.fd NONE
		val zero                                = FD.fromInt 0
	    in
		FD.sumC(#[(1000, S), (100, E), (10, N), (1, D)], FD.EQUAL, send);
		FD.sumC(#[(1000, M), (100, O), (10, R), (1, E)], FD.EQUAL, more);
		FD.sumC(#[(10000, M), (1000, O), (100, N), (10, E), (1, Y)], FD.EQUAL, money);
		FD.notequal(S, zero);
		FD.notequal(M, zero);
		FD.distinct(digits);
		FD.plus(send, more, money);
		FD.distribute(FD.FIRSTFAIL, digits);
		{S, E, N, D, M, O, R, Y}
	    end

	(* Inspect the solution *)
	val _ = Inspector.inspect(Search.searchAll money)
    end
