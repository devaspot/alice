(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2000
 *
 * Last Change:
 *   $Date: 2002-10-17 16:22:31 $ by $Author: grabow $
 *   $Revision: 1.1 $
 *
 *)

import structure Inspector from "x-alice:/lib/tools/Inspector"
import structure GtkCore   from "x-alice:/lib/gtk/GtkCore"
import structure Gtk       from "x-alice:/lib/gtk/Gtk"
import structure Gdk       from "x-alice:/lib/gtk/Gdk"
import structure Canvas    from "x-alice:/lib/gtk/Canvas"

local
    open GtkCore

    val pieceSize = 50

    val font = "-adobe-helvetica-bold-r-normal--24-240-75-75-p-138-iso8859-1"

    val map   = Gdk.colormapGetSystem ()
    val black = Gdk.allocateGdkColor(0,0,0)
    val white = Gdk.allocateGdkColor(65535, 65535, 65535)
    val _     = Gdk.colormapAllocColor(map, black, false, true)
    val _     = Gdk.colormapAllocColor(map, white, false, true)

    exception Error
    
    fun numToHex 0 = #"0"
      | numToHex 1 = #"1"
      | numToHex 2 = #"2"
      | numToHex 3 = #"3"
      | numToHex 4 = #"4"
      | numToHex 5 = #"5"
      | numToHex 6 = #"6"
      | numToHex 7 = #"7"
      | numToHex 8 = #"8"
      | numToHex 9 = #"9"
      | numToHex 10 = #"A"
      | numToHex 11 = #"B"
      | numToHex 12 = #"C"
      | numToHex 13 = #"D"
      | numToHex 14 = #"E"
      | numToHex 15 = #"F"
      | numToHex _  = raise Error

    fun makeHeX col = String.implode [numToHex(col div 16), numToHex(col mod 16)]

    fun getPieceColor piece =
	let
	    val y      = piece div 4
	    val x      = piece mod 4
	    val r      = ((4 - x) * 255) div 4
	    val g      = ((4 - y) * 255) div 4
	    val b      = 128
(*	    val color  = Gdk.allocateGdkColor((r * 256 + r), (g * 256 + r), (b * 256 + b)) *)
	    val color  = Gdk.allocateGdkColor(0, 0, 0)
	    val colStr = "RGB:" ^ (makeHeX r) ^ "/" ^ (makeHeX g) ^ "/" ^ (makeHeX b)
	    val _      = Gdk.colorParse(colStr, color) 
	    val _      = Gdk.colormapAllocColor(map, color, false, true) 
	in
	    color
	end

    fun createCanvas () =
	let
	    val canvas = Canvas.new ()
	    val xDim   = (pieceSize * 4 + 1)
	    val yDim   = (pieceSize * 4 + 1)
	in
	    (Gtk.widgetSetUsize(canvas, xDim, yDim);
	     Canvas.setScrollRegion(canvas, 0.0, 0.0, Real.fromInt xDim, Real.fromInt yDim);
	     canvas)
	end

    fun isEmpty(itemArr, i) =
	(case Array.sub(itemArr, i) of
	     NONE => true
	   | _    => false)
	     
    fun checkMove(itemArr, x, y) =
	let
	    val pos1 = ((y - 1) * 4 + x)
	    val pos2 = ((y + 1) * 4 + x)
	    val pos3 = (y * 4 + x - 1)
	    val pos4 = (y * 4 + x + 1)
	in
	    if      ((y > 0) andalso isEmpty(itemArr, pos1)) then (0.0, ~1.0, x, y - 1, true)
	    else if ((y < 3) andalso isEmpty(itemArr, pos2)) then (0.0, 1.0, x, y + 1, true)
	    else if ((x > 0) andalso isEmpty(itemArr, pos3)) then (~1.0, 0.0, x - 1, y, true)
	    else if ((x < 3) andalso isEmpty(itemArr, pos4)) then (1.0, 0.0, x + 1, y, true)
	    else (0.0, 0.0, x, y, false)
	end

    fun checkVictory(posArr, i) =
	(case i < 15 of
	     false => (print "You win!"; true)
	   | true  => (Array.sub(posArr, i) = i) andalso checkVictory(posArr, (i + 1)))

    fun fillBoard(board as (itemArr, posArr), i, parent) =
	(case i < 15 of
	     false => (Array.update(itemArr, 15, NONE); Array.update(posArr, i, 15))
	   | true  =>
		 let
		     val x   = i mod 4
		     val y   = i div 4
		     val ItR = Real.fromInt

		     val X1 = ItR (x * pieceSize)
		     val Y1 = ItR (y * pieceSize)
		     val X2 = Real.+(X1, ItR pieceSize)
		     val Y2 = Real.+(Y1, ItR pieceSize)
		     val tX = Real.+(X1, 25.0)
		     val tY = Real.+(Y1, 25.0)

		     val group = Canvas.itemNew(parent, Canvas.groupGetType (),
						[va_string "x", va_float X1,
						 va_string "y", va_float Y1])

		     val box = Canvas.itemNew(group, Canvas.rectGetType (),
					      [va_string "x1", va_float 0.0,
					       va_string "y1", va_float 0.0,
					       va_string "x2", va_float (ItR pieceSize),
					       va_string "y2", va_float (ItR pieceSize),
					       va_string "fill_color_gdk",
					       va_object (getPieceColor i),
					       va_string "outline_color_gdk", va_object black,
					       va_string "width_pixels", va_int 0])

		     val text = Canvas.itemNew(group, Canvas.textGetType (),
					       [va_string "text",
						va_string (Int.toString (i + 1)),
						va_string "x", va_float 25.0,
						va_string "y", va_float 25.0,
						va_string "font", va_string font,
						va_string "anchor", va_int Gtk.ANCHOR_CENTER,
						va_string "fill_color_gdk", va_object black])
			 
		     fun pieceEvent event =
			 (case Gdk.getGdkEvent event of
			      GDK_ENTER_NOTIFY _ =>
				  Canvas.itemSet(text, "fill_color_gdk", white)
			    | GDK_LEAVE_NOTIFY _ =>
				  Canvas.itemSet(text, "fill_color_gdk", black)
			    | GDK_BUTTON_PRESS _ =>
				  let
				      val pos                    = Array.sub(posArr, i)
				      val y                      = pos div 4
				      val x                      = pos mod 4
				      val (dx, dy, nx, ny, move) = checkMove(itemArr, x, y)
				  in
				      (case move of
					   false => ()
					 | true  =>
					       let
						   val ItR    = Real.fromInt
						   val newpos = (ny * 4 + nx)
						   val mx     = Real.*(dx, (ItR pieceSize))
						   val my     = Real.*(dy, (ItR pieceSize))
					       in
						   (Array.update(posArr, i, newpos);
						    Array.update(itemArr, pos, NONE);
						    Array.update(itemArr, newpos, SOME group);
						    Canvas.itemMove(group, mx, my);
						    checkVictory(posArr, 0); ())
					       end)
				  end
			    | _ => () (* Ignore all other events *))
		 in
		     (Array.update(itemArr, i, SOME group);
		      Array.update(posArr, i, i);
		      Gtk.signalConnect(group, "event", pieceEvent);
		      fillBoard(board, (i + 1), parent))
		 end)

    fun createBoard canvas =
	let
	    val posArr  = Array.array(16, 0)
	    val itemArr = Array.array(16, NONE : object option)
	    val board   = (itemArr, posArr)
	in
	    (fillBoard(board, 0, Canvas.root canvas); board)
	end

    val board = Hole.hole ()

    fun findSpot (itemArr, i) =
	(case Array.sub(itemArr, i) of
	     NONE   => i
	   | SOME _ => findSpot(itemArr, (i + 1)))

    fun makeMove pos =
	let
	    val dir = rand () mod 4
	in
	    if      ((dir = 0) andalso (pos > 3))          then (0, ~1)
	    else if ((dir = 1) andalso (pos < 12))         then (0, 1)
	    else if ((dir = 2) andalso ((pos mod 4) <> 0)) then (~1, 0)
            else if ((dir = 3) andalso ((pos mod 4) <> 3)) then (1, 0)
	    else makeMove(pos)
	end

    fun translateIndex(posArr, pos, i) =
	(case i < 16 of
	     false => ~1
	   | true  => if Array.sub(posArr, i) = pos then i
		      else translateIndex(posArr, pos, (i + 1)))

    val initMoves = 256

    fun moveSpot (canvas, board as (itemArr, posArr), i, pos) =
	(case i < initMoves of
	     false => ()
	   | true  =>
		 let
		     val (x, y)      = makeMove pos
		     val dx          = Real.fromInt (pieceSize * ~x)
		     val dy          = Real.fromInt (pieceSize * ~y)
		     val posIndex    = translateIndex(posArr, pos, 0)
		     val oldpos      = (pos + y * 4 + x)
		     val oldposIndex = translateIndex(posArr, oldpos, 0)
		     val item        = Array.sub(itemArr, oldpos)
		 in
		     (Array.update(itemArr, pos, item);
		      Array.update(itemArr, oldpos, NONE);
		      Array.update(posArr, posIndex, oldpos);
		      Array.update(posArr, oldposIndex, pos);
		      Canvas.itemMove(valOf item, dx, dy);
		      Canvas.updateNow canvas;
		      moveSpot (canvas, board, (i + 1), oldpos))
		 end)

    fun scrambleEvent canvas (board as (itemArr, posArr)) _ =
	(srand 0; moveSpot(canvas, board, 0, findSpot(itemArr, 0))) 

    fun fifteen () =
	let
	    val vbox      = Gtk.vboxNew(false, 4)
 	    val alignment = Gtk.alignmentNew(0.5, 0.5, 0.0, 0.0)
	    val frame     = Gtk.frameNew "" 
	    val canvas    = createCanvas ()
	    val button    = Gtk.buttonNewWithLabel "Scramble"
	in
	    (Gtk.containerSetBorderWidth(vbox, 4);
	     Gtk.widgetShow vbox;
	     Gtk.boxPackStart(vbox, alignment, true, true, 0);
	     Gtk.widgetShow alignment;
	     Gtk.frameSetShadowType(frame, Gtk.SHADOW_IN);
	     Gtk.containerAdd(alignment, frame);
	     Gtk.widgetShow frame;
	     Gtk.containerAdd(frame, canvas);
	     Gtk.widgetShow canvas;
	     Hole.fill(board, createBoard canvas);
	     Gtk.boxPackStart(vbox, button, false, false, 0);
	     Gtk.signalConnect(button, "clicked", scrambleEvent canvas board);
	     Gtk.widgetShow button;
	     vbox)
	end

    fun main () =
	let
	    val window   = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
	    val notebook = Gtk.notebookNew ()
	    val f_page   = fifteen ()
	    val f_label  = Gtk.labelNew "Fifteen"
	in
	    (Gtk.containerSetBorderWidth(window, 4);
             Gtk.windowSetTitle(window, "Canvas Demo");
	     Gtk.containerAdd(window, notebook);
	     Gtk.notebookSetShowTabs(notebook, true);
	     Gtk.notebookAppendPage(notebook, f_page, f_label);
	     Gtk.widgetShowAll window)
	end
in
    val _ = main () handle ex => Inspector.inspect ("Got unexpected exception", ex)
end
