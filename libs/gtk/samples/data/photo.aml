(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2000
 *
 * Last Change:
 *   $Date: 2002-10-17 16:22:31 $ by $Author: grabow $
 *   $Revision: 1.1 $
 *
 *)

import structure Tools    from "x-alice:/lib/system/Tools"
import structure FD       from "x-alice:/lib/constraints/FD"
import structure Space    from "x-alice:/lib/constraints/Space"
import structure Search   from "x-alice:/lib/constraints/Search"
import structure Explorer from "x-alice:/lib/constraints/Explorer"

structure Photo =
    struct
	datatype person = ALICE | BERT | CHRIS | DEB | EVAN

	val nPersons = 5

	fun personIndex ALICE = 0
	  | personIndex BERT  = 1
	  | personIndex CHRIS = 2
	  | personIndex DEB   = 3
	  | personIndex EVAN  = 4

	val prefs = #[(ALICE, CHRIS), (BERT, EVAN), (CHRIS, DEB), (CHRIS, EVAN),
		      (DEB, ALICE), (DEB, EVAN), (EVAN, BERT)]

	fun photo() =
	    let
		val pos as #[alice, bert, chris, deb, evan]
		        = FD.rangeVec(nPersons, (1, nPersons))
		val sat = FD.range(0, Vector.length prefs)
		val ful = Vector.map
		    (fn (a, b) =>
		     let
			 val c1     = FD.bin()
			 val c2     = FD.bin()
			 val result = FD.bin()
			 val zero   = FD.fromInt 0
			 val one    = FD.fromInt 1
			 val posA   = Vector.sub(pos, personIndex a)
			 val posB   = Vector.sub(pos, personIndex b)
		     in
			 FD.Reified.sumC(#[(1, one), (1, posA), (~1, posB)], FD.EQUAL, zero, c1);
			 FD.Reified.sumC(#[(1, posA), (~1, posB)], FD.EQUAL, one, c2);
			 FD.Reified.sum(#[c1, c2], FD.EQUAL, one, result);
			 result
		     end) prefs
	    in
		FD.distinct pos;
		FD.sum(ful, FD.EQUAL, sat);
		FD.distribute(FD.NAIVE, pos);
		({alice, bert, chris, deb, evan}, ful, sat)
	    end

	fun pruner((_, _, a), (_, _, b)) = FD.lessEq(a, b);

	(* Inspect the Solution(s) *)
	(* val _ = Tools.inspect (Search.searchBest(photo, pruner)) *)
	(* This is for visual search *)
	val _ = Explorer.exploreBest(photo, pruner)
    end
