#include <pango/pango.h>
#include <atk/atk.h>
#include <atk/atk-enum-types.h>
#include <gdk/gdk.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gtk/gtk.h>
#include <gtk/gtkprivate.h>
#include <gtk/gtktree.h>
#include <libgnomecanvas/gnome-canvas.h>
#include <libgnomecanvas/gnome-canvas-bpath.h>
#include "NativeUtils.hh"
#include "NativeGLib.hh"
#include "NativePango.hh"
#include "NativeAtk.hh"
#include "NativeGdk.hh"
#include "NativeGtk.hh"
word GtkWidgetFlagstToWord(GtkWidgetFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_APP_PAINTABLE) == GTK_APP_PAINTABLE) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_CAN_DEFAULT) == GTK_CAN_DEFAULT) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_CAN_FOCUS) == GTK_CAN_FOCUS) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_COMPOSITE_CHILD) == GTK_COMPOSITE_CHILD) {
            w = alice_cons (Store::IntToWord (3), w);
        }
        if ((v & GTK_DOUBLE_BUFFERED) == GTK_DOUBLE_BUFFERED) {
            w = alice_cons (Store::IntToWord (4), w);
        }
        if ((v & GTK_HAS_DEFAULT) == GTK_HAS_DEFAULT) {
            w = alice_cons (Store::IntToWord (5), w);
        }
        if ((v & GTK_HAS_FOCUS) == GTK_HAS_FOCUS) {
            w = alice_cons (Store::IntToWord (6), w);
        }
        if ((v & GTK_HAS_GRAB) == GTK_HAS_GRAB) {
            w = alice_cons (Store::IntToWord (7), w);
        }
        if ((v & GTK_MAPPED) == GTK_MAPPED) {
            w = alice_cons (Store::IntToWord (8), w);
        }
        if ((v & GTK_NO_REPARENT) == GTK_NO_REPARENT) {
            w = alice_cons (Store::IntToWord (9), w);
        }
        if ((v & GTK_NO_SHOW_ALL) == GTK_NO_SHOW_ALL) {
            w = alice_cons (Store::IntToWord (10), w);
        }
        if ((v & GTK_NO_WINDOW) == GTK_NO_WINDOW) {
            w = alice_cons (Store::IntToWord (11), w);
        }
        if ((v & GTK_PARENT_SENSITIVE) == GTK_PARENT_SENSITIVE) {
            w = alice_cons (Store::IntToWord (12), w);
        }
        if ((v & GTK_RC_STYLE) == GTK_RC_STYLE) {
            w = alice_cons (Store::IntToWord (13), w);
        }
        if ((v & GTK_REALIZED) == GTK_REALIZED) {
            w = alice_cons (Store::IntToWord (14), w);
        }
        if ((v & GTK_RECEIVES_DEFAULT) == GTK_RECEIVES_DEFAULT) {
            w = alice_cons (Store::IntToWord (15), w);
        }
        if ((v & GTK_SENSITIVE) == GTK_SENSITIVE) {
            w = alice_cons (Store::IntToWord (16), w);
        }
        if ((v & GTK_TOPLEVEL) == GTK_TOPLEVEL) {
            w = alice_cons (Store::IntToWord (17), w);
        }
        if ((v & GTK_VISIBLE) == GTK_VISIBLE) {
            w = alice_cons (Store::IntToWord (18), w);
        }
    return w;
}
GtkWidgetFlags GtkWidgetFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_APP_PAINTABLE;
                break;
            case 1: r |= GTK_CAN_DEFAULT;
                break;
            case 2: r |= GTK_CAN_FOCUS;
                break;
            case 3: r |= GTK_COMPOSITE_CHILD;
                break;
            case 4: r |= GTK_DOUBLE_BUFFERED;
                break;
            case 5: r |= GTK_HAS_DEFAULT;
                break;
            case 6: r |= GTK_HAS_FOCUS;
                break;
            case 7: r |= GTK_HAS_GRAB;
                break;
            case 8: r |= GTK_MAPPED;
                break;
            case 9: r |= GTK_NO_REPARENT;
                break;
            case 10: r |= GTK_NO_SHOW_ALL;
                break;
            case 11: r |= GTK_NO_WINDOW;
                break;
            case 12: r |= GTK_PARENT_SENSITIVE;
                break;
            case 13: r |= GTK_RC_STYLE;
                break;
            case 14: r |= GTK_REALIZED;
                break;
            case 15: r |= GTK_RECEIVES_DEFAULT;
                break;
            case 16: r |= GTK_SENSITIVE;
                break;
            case 17: r |= GTK_TOPLEVEL;
                break;
            case 18: r |= GTK_VISIBLE;
                break;
            default:
                Error ("GtkWidgetFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkWidgetFlags)r;
}
DEFINE1(Gtk_WidgetFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkWidgetFlagstFromWord(x0));
} END
DEFINE1(Gtk_WidgetFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkWidgetFlagstToWord((GtkWidgetFlags)i));
} END
DEFINE0(Gtk_WidgetFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_WIDGET_FLAGS));
} END
word GtkUIManagerItemTypetToWord(GtkUIManagerItemType v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_UI_MANAGER_ACCELERATOR) == GTK_UI_MANAGER_ACCELERATOR) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_UI_MANAGER_AUTO) == GTK_UI_MANAGER_AUTO) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_UI_MANAGER_MENU) == GTK_UI_MANAGER_MENU) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_UI_MANAGER_MENUBAR) == GTK_UI_MANAGER_MENUBAR) {
            w = alice_cons (Store::IntToWord (3), w);
        }
        if ((v & GTK_UI_MANAGER_MENUITEM) == GTK_UI_MANAGER_MENUITEM) {
            w = alice_cons (Store::IntToWord (4), w);
        }
        if ((v & GTK_UI_MANAGER_PLACEHOLDER) == GTK_UI_MANAGER_PLACEHOLDER) {
            w = alice_cons (Store::IntToWord (5), w);
        }
        if ((v & GTK_UI_MANAGER_POPUP) == GTK_UI_MANAGER_POPUP) {
            w = alice_cons (Store::IntToWord (6), w);
        }
        if ((v & GTK_UI_MANAGER_SEPARATOR) == GTK_UI_MANAGER_SEPARATOR) {
            w = alice_cons (Store::IntToWord (7), w);
        }
        if ((v & GTK_UI_MANAGER_TOOLBAR) == GTK_UI_MANAGER_TOOLBAR) {
            w = alice_cons (Store::IntToWord (8), w);
        }
        if ((v & GTK_UI_MANAGER_TOOLITEM) == GTK_UI_MANAGER_TOOLITEM) {
            w = alice_cons (Store::IntToWord (9), w);
        }
    return w;
}
GtkUIManagerItemType GtkUIManagerItemTypetFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_UI_MANAGER_ACCELERATOR;
                break;
            case 1: r |= GTK_UI_MANAGER_AUTO;
                break;
            case 2: r |= GTK_UI_MANAGER_MENU;
                break;
            case 3: r |= GTK_UI_MANAGER_MENUBAR;
                break;
            case 4: r |= GTK_UI_MANAGER_MENUITEM;
                break;
            case 5: r |= GTK_UI_MANAGER_PLACEHOLDER;
                break;
            case 6: r |= GTK_UI_MANAGER_POPUP;
                break;
            case 7: r |= GTK_UI_MANAGER_SEPARATOR;
                break;
            case 8: r |= GTK_UI_MANAGER_TOOLBAR;
                break;
            case 9: r |= GTK_UI_MANAGER_TOOLITEM;
                break;
            default:
                Error ("GtkUIManagerItemTypetFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkUIManagerItemType)r;
}
DEFINE1(Gtk_UIManagerItemTypeToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkUIManagerItemTypetFromWord(x0));
} END
DEFINE1(Gtk_UIManagerItemTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkUIManagerItemTypetToWord((GtkUIManagerItemType)i));
} END
DEFINE0(Gtk_UIManagerItemTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_UI_MANAGER_ITEM_TYPE));
} END
word GtkTreeModelFlagstToWord(GtkTreeModelFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_TREE_MODEL_ITERS_PERSIST) == GTK_TREE_MODEL_ITERS_PERSIST) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_TREE_MODEL_LIST_ONLY) == GTK_TREE_MODEL_LIST_ONLY) {
            w = alice_cons (Store::IntToWord (1), w);
        }
    return w;
}
GtkTreeModelFlags GtkTreeModelFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_TREE_MODEL_ITERS_PERSIST;
                break;
            case 1: r |= GTK_TREE_MODEL_LIST_ONLY;
                break;
            default:
                Error ("GtkTreeModelFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkTreeModelFlags)r;
}
DEFINE1(Gtk_TreeModelFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkTreeModelFlagstFromWord(x0));
} END
DEFINE1(Gtk_TreeModelFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkTreeModelFlagstToWord((GtkTreeModelFlags)i));
} END
DEFINE0(Gtk_TreeModelFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TREE_MODEL_FLAGS));
} END
word GtkTextSearchFlagstToWord(GtkTextSearchFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_TEXT_SEARCH_TEXT_ONLY) == GTK_TEXT_SEARCH_TEXT_ONLY) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_TEXT_SEARCH_VISIBLE_ONLY) == GTK_TEXT_SEARCH_VISIBLE_ONLY) {
            w = alice_cons (Store::IntToWord (1), w);
        }
    return w;
}
GtkTextSearchFlags GtkTextSearchFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_TEXT_SEARCH_TEXT_ONLY;
                break;
            case 1: r |= GTK_TEXT_SEARCH_VISIBLE_ONLY;
                break;
            default:
                Error ("GtkTextSearchFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkTextSearchFlags)r;
}
DEFINE1(Gtk_TextSearchFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkTextSearchFlagstFromWord(x0));
} END
DEFINE1(Gtk_TextSearchFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkTextSearchFlagstToWord((GtkTextSearchFlags)i));
} END
DEFINE0(Gtk_TextSearchFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TEXT_SEARCH_FLAGS));
} END
word GtkTargetFlagstToWord(GtkTargetFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_TARGET_SAME_APP) == GTK_TARGET_SAME_APP) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_TARGET_SAME_WIDGET) == GTK_TARGET_SAME_WIDGET) {
            w = alice_cons (Store::IntToWord (1), w);
        }
    return w;
}
GtkTargetFlags GtkTargetFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_TARGET_SAME_APP;
                break;
            case 1: r |= GTK_TARGET_SAME_WIDGET;
                break;
            default:
                Error ("GtkTargetFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkTargetFlags)r;
}
DEFINE1(Gtk_TargetFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkTargetFlagstFromWord(x0));
} END
DEFINE1(Gtk_TargetFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkTargetFlagstToWord((GtkTargetFlags)i));
} END
DEFINE0(Gtk_TargetFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TARGET_FLAGS));
} END
word GtkRcFlagstToWord(GtkRcFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_RC_BASE) == GTK_RC_BASE) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_RC_BG) == GTK_RC_BG) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_RC_FG) == GTK_RC_FG) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_RC_TEXT) == GTK_RC_TEXT) {
            w = alice_cons (Store::IntToWord (3), w);
        }
    return w;
}
GtkRcFlags GtkRcFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_RC_BASE;
                break;
            case 1: r |= GTK_RC_BG;
                break;
            case 2: r |= GTK_RC_FG;
                break;
            case 3: r |= GTK_RC_TEXT;
                break;
            default:
                Error ("GtkRcFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkRcFlags)r;
}
DEFINE1(Gtk_RcFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkRcFlagstFromWord(x0));
} END
DEFINE1(Gtk_RcFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkRcFlagstToWord((GtkRcFlags)i));
} END
DEFINE0(Gtk_RcFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_RC_FLAGS));
} END
word GtkPrivateFlagstToWord(GtkPrivateFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & PRIVATE_GTK_ALLOC_NEEDED) == PRIVATE_GTK_ALLOC_NEEDED) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & PRIVATE_GTK_ANCHORED) == PRIVATE_GTK_ANCHORED) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & PRIVATE_GTK_CHILD_VISIBLE) == PRIVATE_GTK_CHILD_VISIBLE) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & PRIVATE_GTK_DIRECTION_LTR) == PRIVATE_GTK_DIRECTION_LTR) {
            w = alice_cons (Store::IntToWord (3), w);
        }
        if ((v & PRIVATE_GTK_DIRECTION_SET) == PRIVATE_GTK_DIRECTION_SET) {
            w = alice_cons (Store::IntToWord (4), w);
        }
        if ((v & PRIVATE_GTK_HAS_SHAPE_MASK) == PRIVATE_GTK_HAS_SHAPE_MASK) {
            w = alice_cons (Store::IntToWord (5), w);
        }
        if ((v & PRIVATE_GTK_IN_REPARENT) == PRIVATE_GTK_IN_REPARENT) {
            w = alice_cons (Store::IntToWord (6), w);
        }
        if ((v & PRIVATE_GTK_LEAVE_PENDING) == PRIVATE_GTK_LEAVE_PENDING) {
            w = alice_cons (Store::IntToWord (7), w);
        }
        if ((v & PRIVATE_GTK_REDRAW_ON_ALLOC) == PRIVATE_GTK_REDRAW_ON_ALLOC) {
            w = alice_cons (Store::IntToWord (8), w);
        }
        if ((v & PRIVATE_GTK_REQUEST_NEEDED) == PRIVATE_GTK_REQUEST_NEEDED) {
            w = alice_cons (Store::IntToWord (9), w);
        }
        if ((v & PRIVATE_GTK_RESIZE_PENDING) == PRIVATE_GTK_RESIZE_PENDING) {
            w = alice_cons (Store::IntToWord (10), w);
        }
        if ((v & PRIVATE_GTK_USER_STYLE) == PRIVATE_GTK_USER_STYLE) {
            w = alice_cons (Store::IntToWord (11), w);
        }
    return w;
}
GtkPrivateFlags GtkPrivateFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= PRIVATE_GTK_ALLOC_NEEDED;
                break;
            case 1: r |= PRIVATE_GTK_ANCHORED;
                break;
            case 2: r |= PRIVATE_GTK_CHILD_VISIBLE;
                break;
            case 3: r |= PRIVATE_GTK_DIRECTION_LTR;
                break;
            case 4: r |= PRIVATE_GTK_DIRECTION_SET;
                break;
            case 5: r |= PRIVATE_GTK_HAS_SHAPE_MASK;
                break;
            case 6: r |= PRIVATE_GTK_IN_REPARENT;
                break;
            case 7: r |= PRIVATE_GTK_LEAVE_PENDING;
                break;
            case 8: r |= PRIVATE_GTK_REDRAW_ON_ALLOC;
                break;
            case 9: r |= PRIVATE_GTK_REQUEST_NEEDED;
                break;
            case 10: r |= PRIVATE_GTK_RESIZE_PENDING;
                break;
            case 11: r |= PRIVATE_GTK_USER_STYLE;
                break;
            default:
                Error ("GtkPrivateFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkPrivateFlags)r;
}
DEFINE1(Gtk_PrivateFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkPrivateFlagstFromWord(x0));
} END
DEFINE1(Gtk_PrivateFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkPrivateFlagstToWord((GtkPrivateFlags)i));
} END
DEFINE0(Gtk_PrivateFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_PRIVATE_FLAGS));
} END
word GtkObjectFlagstToWord(GtkObjectFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_FLOATING) == GTK_FLOATING) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_IN_DESTRUCTION) == GTK_IN_DESTRUCTION) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_RESERVED_1) == GTK_RESERVED_1) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_RESERVED_2) == GTK_RESERVED_2) {
            w = alice_cons (Store::IntToWord (3), w);
        }
    return w;
}
GtkObjectFlags GtkObjectFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_FLOATING;
                break;
            case 1: r |= GTK_IN_DESTRUCTION;
                break;
            case 2: r |= GTK_RESERVED_1;
                break;
            case 3: r |= GTK_RESERVED_2;
                break;
            default:
                Error ("GtkObjectFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkObjectFlags)r;
}
DEFINE1(Gtk_ObjectFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkObjectFlagstFromWord(x0));
} END
DEFINE1(Gtk_ObjectFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkObjectFlagstToWord((GtkObjectFlags)i));
} END
DEFINE0(Gtk_ObjectFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_OBJECT_FLAGS));
} END
word GtkIconLookupFlagstToWord(GtkIconLookupFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_ICON_LOOKUP_FORCE_SVG) == GTK_ICON_LOOKUP_FORCE_SVG) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_ICON_LOOKUP_NO_SVG) == GTK_ICON_LOOKUP_NO_SVG) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_ICON_LOOKUP_USE_BUILTIN) == GTK_ICON_LOOKUP_USE_BUILTIN) {
            w = alice_cons (Store::IntToWord (2), w);
        }
    return w;
}
GtkIconLookupFlags GtkIconLookupFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_ICON_LOOKUP_FORCE_SVG;
                break;
            case 1: r |= GTK_ICON_LOOKUP_NO_SVG;
                break;
            case 2: r |= GTK_ICON_LOOKUP_USE_BUILTIN;
                break;
            default:
                Error ("GtkIconLookupFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkIconLookupFlags)r;
}
DEFINE1(Gtk_IconLookupFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkIconLookupFlagstFromWord(x0));
} END
DEFINE1(Gtk_IconLookupFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkIconLookupFlagstToWord((GtkIconLookupFlags)i));
} END
DEFINE0(Gtk_IconLookupFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ICON_LOOKUP_FLAGS));
} END
word GtkFileFilterFlagstToWord(GtkFileFilterFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_FILE_FILTER_DISPLAY_NAME) == GTK_FILE_FILTER_DISPLAY_NAME) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_FILE_FILTER_FILENAME) == GTK_FILE_FILTER_FILENAME) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_FILE_FILTER_MIME_TYPE) == GTK_FILE_FILTER_MIME_TYPE) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_FILE_FILTER_URI) == GTK_FILE_FILTER_URI) {
            w = alice_cons (Store::IntToWord (3), w);
        }
    return w;
}
GtkFileFilterFlags GtkFileFilterFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_FILE_FILTER_DISPLAY_NAME;
                break;
            case 1: r |= GTK_FILE_FILTER_FILENAME;
                break;
            case 2: r |= GTK_FILE_FILTER_MIME_TYPE;
                break;
            case 3: r |= GTK_FILE_FILTER_URI;
                break;
            default:
                Error ("GtkFileFilterFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkFileFilterFlags)r;
}
DEFINE1(Gtk_FileFilterFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkFileFilterFlagstFromWord(x0));
} END
DEFINE1(Gtk_FileFilterFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkFileFilterFlagstToWord((GtkFileFilterFlags)i));
} END
DEFINE0(Gtk_FileFilterFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_FILE_FILTER_FLAGS));
} END
word GtkDialogFlagstToWord(GtkDialogFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_DIALOG_DESTROY_WITH_PARENT) == GTK_DIALOG_DESTROY_WITH_PARENT) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_DIALOG_MODAL) == GTK_DIALOG_MODAL) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_DIALOG_NO_SEPARATOR) == GTK_DIALOG_NO_SEPARATOR) {
            w = alice_cons (Store::IntToWord (2), w);
        }
    return w;
}
GtkDialogFlags GtkDialogFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_DIALOG_DESTROY_WITH_PARENT;
                break;
            case 1: r |= GTK_DIALOG_MODAL;
                break;
            case 2: r |= GTK_DIALOG_NO_SEPARATOR;
                break;
            default:
                Error ("GtkDialogFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkDialogFlags)r;
}
DEFINE1(Gtk_DialogFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkDialogFlagstFromWord(x0));
} END
DEFINE1(Gtk_DialogFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkDialogFlagstToWord((GtkDialogFlags)i));
} END
DEFINE0(Gtk_DialogFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_DIALOG_FLAGS));
} END
word GtkDestDefaultstToWord(GtkDestDefaults v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_DEST_DEFAULT_ALL) == GTK_DEST_DEFAULT_ALL) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_DEST_DEFAULT_DROP) == GTK_DEST_DEFAULT_DROP) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_DEST_DEFAULT_HIGHLIGHT) == GTK_DEST_DEFAULT_HIGHLIGHT) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_DEST_DEFAULT_MOTION) == GTK_DEST_DEFAULT_MOTION) {
            w = alice_cons (Store::IntToWord (3), w);
        }
    return w;
}
GtkDestDefaults GtkDestDefaultstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_DEST_DEFAULT_ALL;
                break;
            case 1: r |= GTK_DEST_DEFAULT_DROP;
                break;
            case 2: r |= GTK_DEST_DEFAULT_HIGHLIGHT;
                break;
            case 3: r |= GTK_DEST_DEFAULT_MOTION;
                break;
            default:
                Error ("GtkDestDefaultstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkDestDefaults)r;
}
DEFINE1(Gtk_DestDefaultsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkDestDefaultstFromWord(x0));
} END
DEFINE1(Gtk_DestDefaultsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkDestDefaultstToWord((GtkDestDefaults)i));
} END
DEFINE0(Gtk_DestDefaultsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_DEST_DEFAULTS));
} END
word GtkDebugFlagtToWord(GtkDebugFlag v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_DEBUG_KEYBINDINGS) == GTK_DEBUG_KEYBINDINGS) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_DEBUG_MISC) == GTK_DEBUG_MISC) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_DEBUG_MULTIHEAD) == GTK_DEBUG_MULTIHEAD) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_DEBUG_PLUGSOCKET) == GTK_DEBUG_PLUGSOCKET) {
            w = alice_cons (Store::IntToWord (3), w);
        }
        if ((v & GTK_DEBUG_TEXT) == GTK_DEBUG_TEXT) {
            w = alice_cons (Store::IntToWord (4), w);
        }
        if ((v & GTK_DEBUG_TREE) == GTK_DEBUG_TREE) {
            w = alice_cons (Store::IntToWord (5), w);
        }
        if ((v & GTK_DEBUG_UPDATES) == GTK_DEBUG_UPDATES) {
            w = alice_cons (Store::IntToWord (6), w);
        }
    return w;
}
GtkDebugFlag GtkDebugFlagtFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_DEBUG_KEYBINDINGS;
                break;
            case 1: r |= GTK_DEBUG_MISC;
                break;
            case 2: r |= GTK_DEBUG_MULTIHEAD;
                break;
            case 3: r |= GTK_DEBUG_PLUGSOCKET;
                break;
            case 4: r |= GTK_DEBUG_TEXT;
                break;
            case 5: r |= GTK_DEBUG_TREE;
                break;
            case 6: r |= GTK_DEBUG_UPDATES;
                break;
            default:
                Error ("GtkDebugFlagtFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkDebugFlag)r;
}
DEFINE1(Gtk_DebugFlagToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkDebugFlagtFromWord(x0));
} END
DEFINE1(Gtk_DebugFlagFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkDebugFlagtToWord((GtkDebugFlag)i));
} END
DEFINE0(Gtk_DebugFlagGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_DEBUG_FLAG));
} END
word GtkCellRendererStatetToWord(GtkCellRendererState v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_CELL_RENDERER_FOCUSED) == GTK_CELL_RENDERER_FOCUSED) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_CELL_RENDERER_INSENSITIVE) == GTK_CELL_RENDERER_INSENSITIVE) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_CELL_RENDERER_PRELIT) == GTK_CELL_RENDERER_PRELIT) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_CELL_RENDERER_SELECTED) == GTK_CELL_RENDERER_SELECTED) {
            w = alice_cons (Store::IntToWord (3), w);
        }
        if ((v & GTK_CELL_RENDERER_SORTED) == GTK_CELL_RENDERER_SORTED) {
            w = alice_cons (Store::IntToWord (4), w);
        }
    return w;
}
GtkCellRendererState GtkCellRendererStatetFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_CELL_RENDERER_FOCUSED;
                break;
            case 1: r |= GTK_CELL_RENDERER_INSENSITIVE;
                break;
            case 2: r |= GTK_CELL_RENDERER_PRELIT;
                break;
            case 3: r |= GTK_CELL_RENDERER_SELECTED;
                break;
            case 4: r |= GTK_CELL_RENDERER_SORTED;
                break;
            default:
                Error ("GtkCellRendererStatetFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkCellRendererState)r;
}
DEFINE1(Gtk_CellRendererStateToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkCellRendererStatetFromWord(x0));
} END
DEFINE1(Gtk_CellRendererStateFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkCellRendererStatetToWord((GtkCellRendererState)i));
} END
DEFINE0(Gtk_CellRendererStateGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_CELL_RENDERER_STATE));
} END
word GtkCalendarDisplayOptionstToWord(GtkCalendarDisplayOptions v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_CALENDAR_NO_MONTH_CHANGE) == GTK_CALENDAR_NO_MONTH_CHANGE) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_CALENDAR_SHOW_DAY_NAMES) == GTK_CALENDAR_SHOW_DAY_NAMES) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_CALENDAR_SHOW_HEADING) == GTK_CALENDAR_SHOW_HEADING) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_CALENDAR_SHOW_WEEK_NUMBERS) == GTK_CALENDAR_SHOW_WEEK_NUMBERS) {
            w = alice_cons (Store::IntToWord (3), w);
        }
        if ((v & GTK_CALENDAR_WEEK_START_MONDAY) == GTK_CALENDAR_WEEK_START_MONDAY) {
            w = alice_cons (Store::IntToWord (4), w);
        }
    return w;
}
GtkCalendarDisplayOptions GtkCalendarDisplayOptionstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_CALENDAR_NO_MONTH_CHANGE;
                break;
            case 1: r |= GTK_CALENDAR_SHOW_DAY_NAMES;
                break;
            case 2: r |= GTK_CALENDAR_SHOW_HEADING;
                break;
            case 3: r |= GTK_CALENDAR_SHOW_WEEK_NUMBERS;
                break;
            case 4: r |= GTK_CALENDAR_WEEK_START_MONDAY;
                break;
            default:
                Error ("GtkCalendarDisplayOptionstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkCalendarDisplayOptions)r;
}
DEFINE1(Gtk_CalendarDisplayOptionsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkCalendarDisplayOptionstFromWord(x0));
} END
DEFINE1(Gtk_CalendarDisplayOptionsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkCalendarDisplayOptionstToWord((GtkCalendarDisplayOptions)i));
} END
DEFINE0(Gtk_CalendarDisplayOptionsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_CALENDAR_DISPLAY_OPTIONS));
} END
word GtkButtonActiontToWord(GtkButtonAction v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_BUTTON_DRAGS) == GTK_BUTTON_DRAGS) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_BUTTON_EXPANDS) == GTK_BUTTON_EXPANDS) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_BUTTON_IGNORED) == GTK_BUTTON_IGNORED) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_BUTTON_SELECTS) == GTK_BUTTON_SELECTS) {
            w = alice_cons (Store::IntToWord (3), w);
        }
    return w;
}
GtkButtonAction GtkButtonActiontFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_BUTTON_DRAGS;
                break;
            case 1: r |= GTK_BUTTON_EXPANDS;
                break;
            case 2: r |= GTK_BUTTON_IGNORED;
                break;
            case 3: r |= GTK_BUTTON_SELECTS;
                break;
            default:
                Error ("GtkButtonActiontFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkButtonAction)r;
}
DEFINE1(Gtk_ButtonActionToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkButtonActiontFromWord(x0));
} END
DEFINE1(Gtk_ButtonActionFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkButtonActiontToWord((GtkButtonAction)i));
} END
DEFINE0(Gtk_ButtonActionGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_BUTTON_ACTION));
} END
word GtkAttachOptionstToWord(GtkAttachOptions v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_EXPAND) == GTK_EXPAND) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_FILL) == GTK_FILL) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_SHRINK) == GTK_SHRINK) {
            w = alice_cons (Store::IntToWord (2), w);
        }
    return w;
}
GtkAttachOptions GtkAttachOptionstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_EXPAND;
                break;
            case 1: r |= GTK_FILL;
                break;
            case 2: r |= GTK_SHRINK;
                break;
            default:
                Error ("GtkAttachOptionstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkAttachOptions)r;
}
DEFINE1(Gtk_AttachOptionsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkAttachOptionstFromWord(x0));
} END
DEFINE1(Gtk_AttachOptionsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkAttachOptionstToWord((GtkAttachOptions)i));
} END
DEFINE0(Gtk_AttachOptionsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ATTACH_OPTIONS));
} END
word GtkArgFlagstToWord(GtkArgFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_ARG_CHILD_ARG) == GTK_ARG_CHILD_ARG) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_ARG_CONSTRUCT) == GTK_ARG_CONSTRUCT) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_ARG_CONSTRUCT_ONLY) == GTK_ARG_CONSTRUCT_ONLY) {
            w = alice_cons (Store::IntToWord (2), w);
        }
        if ((v & GTK_ARG_READABLE) == GTK_ARG_READABLE) {
            w = alice_cons (Store::IntToWord (3), w);
        }
        if ((v & GTK_ARG_WRITABLE) == GTK_ARG_WRITABLE) {
            w = alice_cons (Store::IntToWord (4), w);
        }
    return w;
}
GtkArgFlags GtkArgFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_ARG_CHILD_ARG;
                break;
            case 1: r |= GTK_ARG_CONSTRUCT;
                break;
            case 2: r |= GTK_ARG_CONSTRUCT_ONLY;
                break;
            case 3: r |= GTK_ARG_READABLE;
                break;
            case 4: r |= GTK_ARG_WRITABLE;
                break;
            default:
                Error ("GtkArgFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkArgFlags)r;
}
DEFINE1(Gtk_ArgFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkArgFlagstFromWord(x0));
} END
DEFINE1(Gtk_ArgFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkArgFlagstToWord((GtkArgFlags)i));
} END
DEFINE0(Gtk_ArgFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ARG_FLAGS));
} END
word GtkAccelFlagstToWord(GtkAccelFlags v) {
    word w = Store::IntToWord(Types::nil);
        if ((v & GTK_ACCEL_LOCKED) == GTK_ACCEL_LOCKED) {
            w = alice_cons (Store::IntToWord (0), w);
        }
        if ((v & GTK_ACCEL_MASK) == GTK_ACCEL_MASK) {
            w = alice_cons (Store::IntToWord (1), w);
        }
        if ((v & GTK_ACCEL_VISIBLE) == GTK_ACCEL_VISIBLE) {
            w = alice_cons (Store::IntToWord (2), w);
        }
    return w;
}
GtkAccelFlags GtkAccelFlagstFromWord(word w) {
    unsigned r = 0;
    TagVal *tv;
    while ((tv = TagVal::FromWord(w)) != INVALID_POINTER) {
        Assert(tv->GetTag () == Types::cons);
        switch (Store::WordToInt (tv->Sel (0))) {
            case 0: r |= GTK_ACCEL_LOCKED;
                break;
            case 1: r |= GTK_ACCEL_MASK;
                break;
            case 2: r |= GTK_ACCEL_VISIBLE;
                break;
            default:
                Error ("GtkAccelFlagstFromWord: invalid enum");
            break;
        }
        w = tv->Sel (1);
    }
    return (GtkAccelFlags)r;
}
DEFINE1(Gtk_AccelFlagsToInt) {
    DECLARE_LIST_ELEMS(l, len, x0, { if (Store::WordToInt (l->Sel(0)) == INVALID_INT) { REQUEST(x0); }});
    RETURN_INT(GtkAccelFlagstFromWord(x0));
} END
DEFINE1(Gtk_AccelFlagsFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkAccelFlagstToWord((GtkAccelFlags)i));
} END
DEFINE0(Gtk_AccelFlagsGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ACCEL_FLAGS));
} END
word GtkWrapModetToWord(GtkWrapMode v) {
    unsigned r = 0;
        if (v  == GTK_WRAP_CHAR) {
            r = 0;
        } else 
        if (v  == GTK_WRAP_NONE) {
            r = 1;
        } else 
        if (v  == GTK_WRAP_WORD) {
            r = 2;
        } else 
        if (v  == GTK_WRAP_WORD_CHAR) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkWrapMode GtkWrapModetFromWord(word w) {
    GtkWrapMode r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_WRAP_CHAR;
            break;
        case 1: r = GTK_WRAP_NONE;
            break;
        case 2: r = GTK_WRAP_WORD;
            break;
        case 3: r = GTK_WRAP_WORD_CHAR;
            break;
        default:
            Error ("GtkWrapModetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_WrapModeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkWrapModetFromWord(x0));
} END
DEFINE1(Gtk_WrapModeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkWrapModetToWord((GtkWrapMode)i));
} END
DEFINE0(Gtk_WrapModeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_WRAP_MODE));
} END
word GtkWindowTypetToWord(GtkWindowType v) {
    unsigned r = 0;
        if (v  == GTK_WINDOW_POPUP) {
            r = 0;
        } else 
        if (v  == GTK_WINDOW_TOPLEVEL) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkWindowType GtkWindowTypetFromWord(word w) {
    GtkWindowType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_WINDOW_POPUP;
            break;
        case 1: r = GTK_WINDOW_TOPLEVEL;
            break;
        default:
            Error ("GtkWindowTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_WindowTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkWindowTypetFromWord(x0));
} END
DEFINE1(Gtk_WindowTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkWindowTypetToWord((GtkWindowType)i));
} END
DEFINE0(Gtk_WindowTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_WINDOW_TYPE));
} END
word GtkWindowPositiontToWord(GtkWindowPosition v) {
    unsigned r = 0;
        if (v  == GTK_WIN_POS_CENTER) {
            r = 0;
        } else 
        if (v  == GTK_WIN_POS_CENTER_ALWAYS) {
            r = 1;
        } else 
        if (v  == GTK_WIN_POS_CENTER_ON_PARENT) {
            r = 2;
        } else 
        if (v  == GTK_WIN_POS_MOUSE) {
            r = 3;
        } else 
        if (v  == GTK_WIN_POS_NONE) {
            r = 4;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkWindowPosition GtkWindowPositiontFromWord(word w) {
    GtkWindowPosition r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_WIN_POS_CENTER;
            break;
        case 1: r = GTK_WIN_POS_CENTER_ALWAYS;
            break;
        case 2: r = GTK_WIN_POS_CENTER_ON_PARENT;
            break;
        case 3: r = GTK_WIN_POS_MOUSE;
            break;
        case 4: r = GTK_WIN_POS_NONE;
            break;
        default:
            Error ("GtkWindowPositiontFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_WindowPositionToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkWindowPositiontFromWord(x0));
} END
DEFINE1(Gtk_WindowPositionFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkWindowPositiontToWord((GtkWindowPosition)i));
} END
DEFINE0(Gtk_WindowPositionGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_WINDOW_POSITION));
} END
word GtkWidgetHelpTypetToWord(GtkWidgetHelpType v) {
    unsigned r = 0;
        if (v  == GTK_WIDGET_HELP_TOOLTIP) {
            r = 0;
        } else 
        if (v  == GTK_WIDGET_HELP_WHATS_THIS) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkWidgetHelpType GtkWidgetHelpTypetFromWord(word w) {
    GtkWidgetHelpType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_WIDGET_HELP_TOOLTIP;
            break;
        case 1: r = GTK_WIDGET_HELP_WHATS_THIS;
            break;
        default:
            Error ("GtkWidgetHelpTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_WidgetHelpTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkWidgetHelpTypetFromWord(x0));
} END
DEFINE1(Gtk_WidgetHelpTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkWidgetHelpTypetToWord((GtkWidgetHelpType)i));
} END
DEFINE0(Gtk_WidgetHelpTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_WIDGET_HELP_TYPE));
} END
word GtkVisibilitytToWord(GtkVisibility v) {
    unsigned r = 0;
        if (v  == GTK_VISIBILITY_FULL) {
            r = 0;
        } else 
        if (v  == GTK_VISIBILITY_NONE) {
            r = 1;
        } else 
        if (v  == GTK_VISIBILITY_PARTIAL) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkVisibility GtkVisibilitytFromWord(word w) {
    GtkVisibility r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_VISIBILITY_FULL;
            break;
        case 1: r = GTK_VISIBILITY_NONE;
            break;
        case 2: r = GTK_VISIBILITY_PARTIAL;
            break;
        default:
            Error ("GtkVisibilitytFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_VisibilityToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkVisibilitytFromWord(x0));
} END
DEFINE1(Gtk_VisibilityFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkVisibilitytToWord((GtkVisibility)i));
} END
DEFINE0(Gtk_VisibilityGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_VISIBILITY));
} END
word GtkUpdateTypetToWord(GtkUpdateType v) {
    unsigned r = 0;
        if (v  == GTK_UPDATE_CONTINUOUS) {
            r = 0;
        } else 
        if (v  == GTK_UPDATE_DELAYED) {
            r = 1;
        } else 
        if (v  == GTK_UPDATE_DISCONTINUOUS) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkUpdateType GtkUpdateTypetFromWord(word w) {
    GtkUpdateType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_UPDATE_CONTINUOUS;
            break;
        case 1: r = GTK_UPDATE_DELAYED;
            break;
        case 2: r = GTK_UPDATE_DISCONTINUOUS;
            break;
        default:
            Error ("GtkUpdateTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_UpdateTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkUpdateTypetFromWord(x0));
} END
DEFINE1(Gtk_UpdateTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkUpdateTypetToWord((GtkUpdateType)i));
} END
DEFINE0(Gtk_UpdateTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_UPDATE_TYPE));
} END
word GtkTreeViewDropPositiontToWord(GtkTreeViewDropPosition v) {
    unsigned r = 0;
        if (v  == GTK_TREE_VIEW_DROP_AFTER) {
            r = 0;
        } else 
        if (v  == GTK_TREE_VIEW_DROP_BEFORE) {
            r = 1;
        } else 
        if (v  == GTK_TREE_VIEW_DROP_INTO_OR_AFTER) {
            r = 2;
        } else 
        if (v  == GTK_TREE_VIEW_DROP_INTO_OR_BEFORE) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkTreeViewDropPosition GtkTreeViewDropPositiontFromWord(word w) {
    GtkTreeViewDropPosition r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_TREE_VIEW_DROP_AFTER;
            break;
        case 1: r = GTK_TREE_VIEW_DROP_BEFORE;
            break;
        case 2: r = GTK_TREE_VIEW_DROP_INTO_OR_AFTER;
            break;
        case 3: r = GTK_TREE_VIEW_DROP_INTO_OR_BEFORE;
            break;
        default:
            Error ("GtkTreeViewDropPositiontFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_TreeViewDropPositionToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkTreeViewDropPositiontFromWord(x0));
} END
DEFINE1(Gtk_TreeViewDropPositionFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkTreeViewDropPositiontToWord((GtkTreeViewDropPosition)i));
} END
DEFINE0(Gtk_TreeViewDropPositionGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TREE_VIEW_DROP_POSITION));
} END
word GtkTreeViewColumnSizingtToWord(GtkTreeViewColumnSizing v) {
    unsigned r = 0;
        if (v  == GTK_TREE_VIEW_COLUMN_AUTOSIZE) {
            r = 0;
        } else 
        if (v  == GTK_TREE_VIEW_COLUMN_FIXED) {
            r = 1;
        } else 
        if (v  == GTK_TREE_VIEW_COLUMN_GROW_ONLY) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkTreeViewColumnSizing GtkTreeViewColumnSizingtFromWord(word w) {
    GtkTreeViewColumnSizing r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_TREE_VIEW_COLUMN_AUTOSIZE;
            break;
        case 1: r = GTK_TREE_VIEW_COLUMN_FIXED;
            break;
        case 2: r = GTK_TREE_VIEW_COLUMN_GROW_ONLY;
            break;
        default:
            Error ("GtkTreeViewColumnSizingtFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_TreeViewColumnSizingToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkTreeViewColumnSizingtFromWord(x0));
} END
DEFINE1(Gtk_TreeViewColumnSizingFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkTreeViewColumnSizingtToWord((GtkTreeViewColumnSizing)i));
} END
DEFINE0(Gtk_TreeViewColumnSizingGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TREE_VIEW_COLUMN_SIZING));
} END
word GtkToolbarStyletToWord(GtkToolbarStyle v) {
    unsigned r = 0;
        if (v  == GTK_TOOLBAR_BOTH) {
            r = 0;
        } else 
        if (v  == GTK_TOOLBAR_BOTH_HORIZ) {
            r = 1;
        } else 
        if (v  == GTK_TOOLBAR_ICONS) {
            r = 2;
        } else 
        if (v  == GTK_TOOLBAR_TEXT) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkToolbarStyle GtkToolbarStyletFromWord(word w) {
    GtkToolbarStyle r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_TOOLBAR_BOTH;
            break;
        case 1: r = GTK_TOOLBAR_BOTH_HORIZ;
            break;
        case 2: r = GTK_TOOLBAR_ICONS;
            break;
        case 3: r = GTK_TOOLBAR_TEXT;
            break;
        default:
            Error ("GtkToolbarStyletFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ToolbarStyleToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkToolbarStyletFromWord(x0));
} END
DEFINE1(Gtk_ToolbarStyleFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkToolbarStyletToWord((GtkToolbarStyle)i));
} END
DEFINE0(Gtk_ToolbarStyleGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TOOLBAR_STYLE));
} END
word GtkToolbarSpaceStyletToWord(GtkToolbarSpaceStyle v) {
    unsigned r = 0;
        if (v  == GTK_TOOLBAR_SPACE_EMPTY) {
            r = 0;
        } else 
        if (v  == GTK_TOOLBAR_SPACE_LINE) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkToolbarSpaceStyle GtkToolbarSpaceStyletFromWord(word w) {
    GtkToolbarSpaceStyle r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_TOOLBAR_SPACE_EMPTY;
            break;
        case 1: r = GTK_TOOLBAR_SPACE_LINE;
            break;
        default:
            Error ("GtkToolbarSpaceStyletFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ToolbarSpaceStyleToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkToolbarSpaceStyletFromWord(x0));
} END
DEFINE1(Gtk_ToolbarSpaceStyleFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkToolbarSpaceStyletToWord((GtkToolbarSpaceStyle)i));
} END
DEFINE0(Gtk_ToolbarSpaceStyleGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TOOLBAR_SPACE_STYLE));
} END
word GtkToolbarChildTypetToWord(GtkToolbarChildType v) {
    unsigned r = 0;
        if (v  == GTK_TOOLBAR_CHILD_BUTTON) {
            r = 0;
        } else 
        if (v  == GTK_TOOLBAR_CHILD_RADIOBUTTON) {
            r = 1;
        } else 
        if (v  == GTK_TOOLBAR_CHILD_SPACE) {
            r = 2;
        } else 
        if (v  == GTK_TOOLBAR_CHILD_TOGGLEBUTTON) {
            r = 3;
        } else 
        if (v  == GTK_TOOLBAR_CHILD_WIDGET) {
            r = 4;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkToolbarChildType GtkToolbarChildTypetFromWord(word w) {
    GtkToolbarChildType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_TOOLBAR_CHILD_BUTTON;
            break;
        case 1: r = GTK_TOOLBAR_CHILD_RADIOBUTTON;
            break;
        case 2: r = GTK_TOOLBAR_CHILD_SPACE;
            break;
        case 3: r = GTK_TOOLBAR_CHILD_TOGGLEBUTTON;
            break;
        case 4: r = GTK_TOOLBAR_CHILD_WIDGET;
            break;
        default:
            Error ("GtkToolbarChildTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ToolbarChildTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkToolbarChildTypetFromWord(x0));
} END
DEFINE1(Gtk_ToolbarChildTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkToolbarChildTypetToWord((GtkToolbarChildType)i));
} END
DEFINE0(Gtk_ToolbarChildTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TOOLBAR_CHILD_TYPE));
} END
word GtkTextWindowTypetToWord(GtkTextWindowType v) {
    unsigned r = 0;
        if (v  == GTK_TEXT_WINDOW_BOTTOM) {
            r = 0;
        } else 
        if (v  == GTK_TEXT_WINDOW_LEFT) {
            r = 1;
        } else 
        if (v  == GTK_TEXT_WINDOW_PRIVATE) {
            r = 2;
        } else 
        if (v  == GTK_TEXT_WINDOW_RIGHT) {
            r = 3;
        } else 
        if (v  == GTK_TEXT_WINDOW_TEXT) {
            r = 4;
        } else 
        if (v  == GTK_TEXT_WINDOW_TOP) {
            r = 5;
        } else 
        if (v  == GTK_TEXT_WINDOW_WIDGET) {
            r = 6;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkTextWindowType GtkTextWindowTypetFromWord(word w) {
    GtkTextWindowType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_TEXT_WINDOW_BOTTOM;
            break;
        case 1: r = GTK_TEXT_WINDOW_LEFT;
            break;
        case 2: r = GTK_TEXT_WINDOW_PRIVATE;
            break;
        case 3: r = GTK_TEXT_WINDOW_RIGHT;
            break;
        case 4: r = GTK_TEXT_WINDOW_TEXT;
            break;
        case 5: r = GTK_TEXT_WINDOW_TOP;
            break;
        case 6: r = GTK_TEXT_WINDOW_WIDGET;
            break;
        default:
            Error ("GtkTextWindowTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_TextWindowTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkTextWindowTypetFromWord(x0));
} END
DEFINE1(Gtk_TextWindowTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkTextWindowTypetToWord((GtkTextWindowType)i));
} END
DEFINE0(Gtk_TextWindowTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TEXT_WINDOW_TYPE));
} END
word GtkTextDirectiontToWord(GtkTextDirection v) {
    unsigned r = 0;
        if (v  == GTK_TEXT_DIR_LTR) {
            r = 0;
        } else 
        if (v  == GTK_TEXT_DIR_NONE) {
            r = 1;
        } else 
        if (v  == GTK_TEXT_DIR_RTL) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkTextDirection GtkTextDirectiontFromWord(word w) {
    GtkTextDirection r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_TEXT_DIR_LTR;
            break;
        case 1: r = GTK_TEXT_DIR_NONE;
            break;
        case 2: r = GTK_TEXT_DIR_RTL;
            break;
        default:
            Error ("GtkTextDirectiontFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_TextDirectionToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkTextDirectiontFromWord(x0));
} END
DEFINE1(Gtk_TextDirectionFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkTextDirectiontToWord((GtkTextDirection)i));
} END
DEFINE0(Gtk_TextDirectionGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_TEXT_DIRECTION));
} END
word GtkSubmenuPlacementtToWord(GtkSubmenuPlacement v) {
    unsigned r = 0;
        if (v  == GTK_LEFT_RIGHT) {
            r = 0;
        } else 
        if (v  == GTK_TOP_BOTTOM) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkSubmenuPlacement GtkSubmenuPlacementtFromWord(word w) {
    GtkSubmenuPlacement r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_LEFT_RIGHT;
            break;
        case 1: r = GTK_TOP_BOTTOM;
            break;
        default:
            Error ("GtkSubmenuPlacementtFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_SubmenuPlacementToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkSubmenuPlacementtFromWord(x0));
} END
DEFINE1(Gtk_SubmenuPlacementFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkSubmenuPlacementtToWord((GtkSubmenuPlacement)i));
} END
DEFINE0(Gtk_SubmenuPlacementGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SUBMENU_PLACEMENT));
} END
word GtkSubmenuDirectiontToWord(GtkSubmenuDirection v) {
    unsigned r = 0;
        if (v  == GTK_DIRECTION_LEFT) {
            r = 0;
        } else 
        if (v  == GTK_DIRECTION_RIGHT) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkSubmenuDirection GtkSubmenuDirectiontFromWord(word w) {
    GtkSubmenuDirection r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_DIRECTION_LEFT;
            break;
        case 1: r = GTK_DIRECTION_RIGHT;
            break;
        default:
            Error ("GtkSubmenuDirectiontFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_SubmenuDirectionToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkSubmenuDirectiontFromWord(x0));
} END
DEFINE1(Gtk_SubmenuDirectionFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkSubmenuDirectiontToWord((GtkSubmenuDirection)i));
} END
DEFINE0(Gtk_SubmenuDirectionGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SUBMENU_DIRECTION));
} END
word GtkStateTypetToWord(GtkStateType v) {
    unsigned r = 0;
        if (v  == GTK_STATE_ACTIVE) {
            r = 0;
        } else 
        if (v  == GTK_STATE_INSENSITIVE) {
            r = 1;
        } else 
        if (v  == GTK_STATE_NORMAL) {
            r = 2;
        } else 
        if (v  == GTK_STATE_PRELIGHT) {
            r = 3;
        } else 
        if (v  == GTK_STATE_SELECTED) {
            r = 4;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkStateType GtkStateTypetFromWord(word w) {
    GtkStateType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_STATE_ACTIVE;
            break;
        case 1: r = GTK_STATE_INSENSITIVE;
            break;
        case 2: r = GTK_STATE_NORMAL;
            break;
        case 3: r = GTK_STATE_PRELIGHT;
            break;
        case 4: r = GTK_STATE_SELECTED;
            break;
        default:
            Error ("GtkStateTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_StateTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkStateTypetFromWord(x0));
} END
DEFINE1(Gtk_StateTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkStateTypetToWord((GtkStateType)i));
} END
DEFINE0(Gtk_StateTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_STATE_TYPE));
} END
word GtkSpinTypetToWord(GtkSpinType v) {
    unsigned r = 0;
        if (v  == GTK_SPIN_END) {
            r = 0;
        } else 
        if (v  == GTK_SPIN_HOME) {
            r = 1;
        } else 
        if (v  == GTK_SPIN_PAGE_BACKWARD) {
            r = 2;
        } else 
        if (v  == GTK_SPIN_PAGE_FORWARD) {
            r = 3;
        } else 
        if (v  == GTK_SPIN_STEP_BACKWARD) {
            r = 4;
        } else 
        if (v  == GTK_SPIN_STEP_FORWARD) {
            r = 5;
        } else 
        if (v  == GTK_SPIN_USER_DEFINED) {
            r = 6;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkSpinType GtkSpinTypetFromWord(word w) {
    GtkSpinType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_SPIN_END;
            break;
        case 1: r = GTK_SPIN_HOME;
            break;
        case 2: r = GTK_SPIN_PAGE_BACKWARD;
            break;
        case 3: r = GTK_SPIN_PAGE_FORWARD;
            break;
        case 4: r = GTK_SPIN_STEP_BACKWARD;
            break;
        case 5: r = GTK_SPIN_STEP_FORWARD;
            break;
        case 6: r = GTK_SPIN_USER_DEFINED;
            break;
        default:
            Error ("GtkSpinTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_SpinTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkSpinTypetFromWord(x0));
} END
DEFINE1(Gtk_SpinTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkSpinTypetToWord((GtkSpinType)i));
} END
DEFINE0(Gtk_SpinTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SPIN_TYPE));
} END
word GtkSpinButtonUpdatePolicytToWord(GtkSpinButtonUpdatePolicy v) {
    unsigned r = 0;
        if (v  == GTK_UPDATE_ALWAYS) {
            r = 0;
        } else 
        if (v  == GTK_UPDATE_IF_VALID) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkSpinButtonUpdatePolicy GtkSpinButtonUpdatePolicytFromWord(word w) {
    GtkSpinButtonUpdatePolicy r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_UPDATE_ALWAYS;
            break;
        case 1: r = GTK_UPDATE_IF_VALID;
            break;
        default:
            Error ("GtkSpinButtonUpdatePolicytFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_SpinButtonUpdatePolicyToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkSpinButtonUpdatePolicytFromWord(x0));
} END
DEFINE1(Gtk_SpinButtonUpdatePolicyFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkSpinButtonUpdatePolicytToWord((GtkSpinButtonUpdatePolicy)i));
} END
DEFINE0(Gtk_SpinButtonUpdatePolicyGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY));
} END
word GtkSortTypetToWord(GtkSortType v) {
    unsigned r = 0;
        if (v  == GTK_SORT_ASCENDING) {
            r = 0;
        } else 
        if (v  == GTK_SORT_DESCENDING) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkSortType GtkSortTypetFromWord(word w) {
    GtkSortType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_SORT_ASCENDING;
            break;
        case 1: r = GTK_SORT_DESCENDING;
            break;
        default:
            Error ("GtkSortTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_SortTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkSortTypetFromWord(x0));
} END
DEFINE1(Gtk_SortTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkSortTypetToWord((GtkSortType)i));
} END
DEFINE0(Gtk_SortTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SORT_TYPE));
} END
word GtkSizeGroupModetToWord(GtkSizeGroupMode v) {
    unsigned r = 0;
        if (v  == GTK_SIZE_GROUP_BOTH) {
            r = 0;
        } else 
        if (v  == GTK_SIZE_GROUP_HORIZONTAL) {
            r = 1;
        } else 
        if (v  == GTK_SIZE_GROUP_NONE) {
            r = 2;
        } else 
        if (v  == GTK_SIZE_GROUP_VERTICAL) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkSizeGroupMode GtkSizeGroupModetFromWord(word w) {
    GtkSizeGroupMode r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_SIZE_GROUP_BOTH;
            break;
        case 1: r = GTK_SIZE_GROUP_HORIZONTAL;
            break;
        case 2: r = GTK_SIZE_GROUP_NONE;
            break;
        case 3: r = GTK_SIZE_GROUP_VERTICAL;
            break;
        default:
            Error ("GtkSizeGroupModetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_SizeGroupModeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkSizeGroupModetFromWord(x0));
} END
DEFINE1(Gtk_SizeGroupModeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkSizeGroupModetToWord((GtkSizeGroupMode)i));
} END
DEFINE0(Gtk_SizeGroupModeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SIZE_GROUP_MODE));
} END
word GtkSideTypetToWord(GtkSideType v) {
    unsigned r = 0;
        if (v  == GTK_SIDE_BOTTOM) {
            r = 0;
        } else 
        if (v  == GTK_SIDE_LEFT) {
            r = 1;
        } else 
        if (v  == GTK_SIDE_RIGHT) {
            r = 2;
        } else 
        if (v  == GTK_SIDE_TOP) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkSideType GtkSideTypetFromWord(word w) {
    GtkSideType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_SIDE_BOTTOM;
            break;
        case 1: r = GTK_SIDE_LEFT;
            break;
        case 2: r = GTK_SIDE_RIGHT;
            break;
        case 3: r = GTK_SIDE_TOP;
            break;
        default:
            Error ("GtkSideTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_SideTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkSideTypetFromWord(x0));
} END
DEFINE1(Gtk_SideTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkSideTypetToWord((GtkSideType)i));
} END
DEFINE0(Gtk_SideTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SIDE_TYPE));
} END
word GtkShadowTypetToWord(GtkShadowType v) {
    unsigned r = 0;
        if (v  == GTK_SHADOW_ETCHED_IN) {
            r = 0;
        } else 
        if (v  == GTK_SHADOW_ETCHED_OUT) {
            r = 1;
        } else 
        if (v  == GTK_SHADOW_IN) {
            r = 2;
        } else 
        if (v  == GTK_SHADOW_NONE) {
            r = 3;
        } else 
        if (v  == GTK_SHADOW_OUT) {
            r = 4;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkShadowType GtkShadowTypetFromWord(word w) {
    GtkShadowType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_SHADOW_ETCHED_IN;
            break;
        case 1: r = GTK_SHADOW_ETCHED_OUT;
            break;
        case 2: r = GTK_SHADOW_IN;
            break;
        case 3: r = GTK_SHADOW_NONE;
            break;
        case 4: r = GTK_SHADOW_OUT;
            break;
        default:
            Error ("GtkShadowTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ShadowTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkShadowTypetFromWord(x0));
} END
DEFINE1(Gtk_ShadowTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkShadowTypetToWord((GtkShadowType)i));
} END
DEFINE0(Gtk_ShadowTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SHADOW_TYPE));
} END
word GtkSelectionModetToWord(GtkSelectionMode v) {
    unsigned r = 0;
        if (v  == GTK_SELECTION_BROWSE) {
            r = 0;
        } else 
        if (v  == GTK_SELECTION_EXTENDED) {
            r = 1;
        } else 
        if (v  == GTK_SELECTION_MULTIPLE) {
            r = 2;
        } else 
        if (v  == GTK_SELECTION_NONE) {
            r = 3;
        } else 
        if (v  == GTK_SELECTION_SINGLE) {
            r = 4;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkSelectionMode GtkSelectionModetFromWord(word w) {
    GtkSelectionMode r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_SELECTION_BROWSE;
            break;
        case 1: r = GTK_SELECTION_EXTENDED;
            break;
        case 2: r = GTK_SELECTION_MULTIPLE;
            break;
        case 3: r = GTK_SELECTION_NONE;
            break;
        case 4: r = GTK_SELECTION_SINGLE;
            break;
        default:
            Error ("GtkSelectionModetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_SelectionModeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkSelectionModetFromWord(x0));
} END
DEFINE1(Gtk_SelectionModeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkSelectionModetToWord((GtkSelectionMode)i));
} END
DEFINE0(Gtk_SelectionModeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SELECTION_MODE));
} END
word GtkScrollTypetToWord(GtkScrollType v) {
    unsigned r = 0;
        if (v  == GTK_SCROLL_END) {
            r = 0;
        } else 
        if (v  == GTK_SCROLL_JUMP) {
            r = 1;
        } else 
        if (v  == GTK_SCROLL_NONE) {
            r = 2;
        } else 
        if (v  == GTK_SCROLL_PAGE_BACKWARD) {
            r = 3;
        } else 
        if (v  == GTK_SCROLL_PAGE_DOWN) {
            r = 4;
        } else 
        if (v  == GTK_SCROLL_PAGE_FORWARD) {
            r = 5;
        } else 
        if (v  == GTK_SCROLL_PAGE_LEFT) {
            r = 6;
        } else 
        if (v  == GTK_SCROLL_PAGE_RIGHT) {
            r = 7;
        } else 
        if (v  == GTK_SCROLL_PAGE_UP) {
            r = 8;
        } else 
        if (v  == GTK_SCROLL_START) {
            r = 9;
        } else 
        if (v  == GTK_SCROLL_STEP_BACKWARD) {
            r = 10;
        } else 
        if (v  == GTK_SCROLL_STEP_DOWN) {
            r = 11;
        } else 
        if (v  == GTK_SCROLL_STEP_FORWARD) {
            r = 12;
        } else 
        if (v  == GTK_SCROLL_STEP_LEFT) {
            r = 13;
        } else 
        if (v  == GTK_SCROLL_STEP_RIGHT) {
            r = 14;
        } else 
        if (v  == GTK_SCROLL_STEP_UP) {
            r = 15;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkScrollType GtkScrollTypetFromWord(word w) {
    GtkScrollType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_SCROLL_END;
            break;
        case 1: r = GTK_SCROLL_JUMP;
            break;
        case 2: r = GTK_SCROLL_NONE;
            break;
        case 3: r = GTK_SCROLL_PAGE_BACKWARD;
            break;
        case 4: r = GTK_SCROLL_PAGE_DOWN;
            break;
        case 5: r = GTK_SCROLL_PAGE_FORWARD;
            break;
        case 6: r = GTK_SCROLL_PAGE_LEFT;
            break;
        case 7: r = GTK_SCROLL_PAGE_RIGHT;
            break;
        case 8: r = GTK_SCROLL_PAGE_UP;
            break;
        case 9: r = GTK_SCROLL_START;
            break;
        case 10: r = GTK_SCROLL_STEP_BACKWARD;
            break;
        case 11: r = GTK_SCROLL_STEP_DOWN;
            break;
        case 12: r = GTK_SCROLL_STEP_FORWARD;
            break;
        case 13: r = GTK_SCROLL_STEP_LEFT;
            break;
        case 14: r = GTK_SCROLL_STEP_RIGHT;
            break;
        case 15: r = GTK_SCROLL_STEP_UP;
            break;
        default:
            Error ("GtkScrollTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ScrollTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkScrollTypetFromWord(x0));
} END
DEFINE1(Gtk_ScrollTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkScrollTypetToWord((GtkScrollType)i));
} END
DEFINE0(Gtk_ScrollTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SCROLL_TYPE));
} END
word GtkScrollSteptToWord(GtkScrollStep v) {
    unsigned r = 0;
        if (v  == GTK_SCROLL_ENDS) {
            r = 0;
        } else 
        if (v  == GTK_SCROLL_HORIZONTAL_ENDS) {
            r = 1;
        } else 
        if (v  == GTK_SCROLL_HORIZONTAL_PAGES) {
            r = 2;
        } else 
        if (v  == GTK_SCROLL_HORIZONTAL_STEPS) {
            r = 3;
        } else 
        if (v  == GTK_SCROLL_PAGES) {
            r = 4;
        } else 
        if (v  == GTK_SCROLL_STEPS) {
            r = 5;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkScrollStep GtkScrollSteptFromWord(word w) {
    GtkScrollStep r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_SCROLL_ENDS;
            break;
        case 1: r = GTK_SCROLL_HORIZONTAL_ENDS;
            break;
        case 2: r = GTK_SCROLL_HORIZONTAL_PAGES;
            break;
        case 3: r = GTK_SCROLL_HORIZONTAL_STEPS;
            break;
        case 4: r = GTK_SCROLL_PAGES;
            break;
        case 5: r = GTK_SCROLL_STEPS;
            break;
        default:
            Error ("GtkScrollSteptFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ScrollStepToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkScrollSteptFromWord(x0));
} END
DEFINE1(Gtk_ScrollStepFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkScrollSteptToWord((GtkScrollStep)i));
} END
DEFINE0(Gtk_ScrollStepGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_SCROLL_STEP));
} END
word GtkResponseTypetToWord(GtkResponseType v) {
    unsigned r = 0;
        if (v  == GTK_RESPONSE_ACCEPT) {
            r = 0;
        } else 
        if (v  == GTK_RESPONSE_APPLY) {
            r = 1;
        } else 
        if (v  == GTK_RESPONSE_CANCEL) {
            r = 2;
        } else 
        if (v  == GTK_RESPONSE_CLOSE) {
            r = 3;
        } else 
        if (v  == GTK_RESPONSE_DELETE_EVENT) {
            r = 4;
        } else 
        if (v  == GTK_RESPONSE_HELP) {
            r = 5;
        } else 
        if (v  == GTK_RESPONSE_NO) {
            r = 6;
        } else 
        if (v  == GTK_RESPONSE_NONE) {
            r = 7;
        } else 
        if (v  == GTK_RESPONSE_OK) {
            r = 8;
        } else 
        if (v  == GTK_RESPONSE_REJECT) {
            r = 9;
        } else 
        if (v  == GTK_RESPONSE_YES) {
            r = 10;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkResponseType GtkResponseTypetFromWord(word w) {
    GtkResponseType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_RESPONSE_ACCEPT;
            break;
        case 1: r = GTK_RESPONSE_APPLY;
            break;
        case 2: r = GTK_RESPONSE_CANCEL;
            break;
        case 3: r = GTK_RESPONSE_CLOSE;
            break;
        case 4: r = GTK_RESPONSE_DELETE_EVENT;
            break;
        case 5: r = GTK_RESPONSE_HELP;
            break;
        case 6: r = GTK_RESPONSE_NO;
            break;
        case 7: r = GTK_RESPONSE_NONE;
            break;
        case 8: r = GTK_RESPONSE_OK;
            break;
        case 9: r = GTK_RESPONSE_REJECT;
            break;
        case 10: r = GTK_RESPONSE_YES;
            break;
        default:
            Error ("GtkResponseTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ResponseTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkResponseTypetFromWord(x0));
} END
DEFINE1(Gtk_ResponseTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkResponseTypetToWord((GtkResponseType)i));
} END
DEFINE0(Gtk_ResponseTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_RESPONSE_TYPE));
} END
word GtkResizeModetToWord(GtkResizeMode v) {
    unsigned r = 0;
        if (v  == GTK_RESIZE_IMMEDIATE) {
            r = 0;
        } else 
        if (v  == GTK_RESIZE_PARENT) {
            r = 1;
        } else 
        if (v  == GTK_RESIZE_QUEUE) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkResizeMode GtkResizeModetFromWord(word w) {
    GtkResizeMode r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_RESIZE_IMMEDIATE;
            break;
        case 1: r = GTK_RESIZE_PARENT;
            break;
        case 2: r = GTK_RESIZE_QUEUE;
            break;
        default:
            Error ("GtkResizeModetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ResizeModeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkResizeModetFromWord(x0));
} END
DEFINE1(Gtk_ResizeModeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkResizeModetToWord((GtkResizeMode)i));
} END
DEFINE0(Gtk_ResizeModeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_RESIZE_MODE));
} END
word GtkReliefStyletToWord(GtkReliefStyle v) {
    unsigned r = 0;
        if (v  == GTK_RELIEF_HALF) {
            r = 0;
        } else 
        if (v  == GTK_RELIEF_NONE) {
            r = 1;
        } else 
        if (v  == GTK_RELIEF_NORMAL) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkReliefStyle GtkReliefStyletFromWord(word w) {
    GtkReliefStyle r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_RELIEF_HALF;
            break;
        case 1: r = GTK_RELIEF_NONE;
            break;
        case 2: r = GTK_RELIEF_NORMAL;
            break;
        default:
            Error ("GtkReliefStyletFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ReliefStyleToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkReliefStyletFromWord(x0));
} END
DEFINE1(Gtk_ReliefStyleFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkReliefStyletToWord((GtkReliefStyle)i));
} END
DEFINE0(Gtk_ReliefStyleGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_RELIEF_STYLE));
} END
word GtkRcTokenTypetToWord(GtkRcTokenType v) {
    unsigned r = 0;
        if (v  == GTK_RC_TOKEN_ACTIVE) {
            r = 0;
        } else 
        if (v  == GTK_RC_TOKEN_APPLICATION) {
            r = 1;
        } else 
        if (v  == GTK_RC_TOKEN_BASE) {
            r = 2;
        } else 
        if (v  == GTK_RC_TOKEN_BG) {
            r = 3;
        } else 
        if (v  == GTK_RC_TOKEN_BG_PIXMAP) {
            r = 4;
        } else 
        if (v  == GTK_RC_TOKEN_BIND) {
            r = 5;
        } else 
        if (v  == GTK_RC_TOKEN_BINDING) {
            r = 6;
        } else 
        if (v  == GTK_RC_TOKEN_CLASS) {
            r = 7;
        } else 
        if (v  == GTK_RC_TOKEN_ENGINE) {
            r = 8;
        } else 
        if (v  == GTK_RC_TOKEN_FG) {
            r = 9;
        } else 
        if (v  == GTK_RC_TOKEN_FONT) {
            r = 10;
        } else 
        if (v  == GTK_RC_TOKEN_FONTSET) {
            r = 11;
        } else 
        if (v  == GTK_RC_TOKEN_FONT_NAME) {
            r = 12;
        } else 
        if (v  == GTK_RC_TOKEN_GTK) {
            r = 13;
        } else 
        if (v  == GTK_RC_TOKEN_HIGHEST) {
            r = 14;
        } else 
        if (v  == GTK_RC_TOKEN_IM_MODULE_FILE) {
            r = 15;
        } else 
        if (v  == GTK_RC_TOKEN_IM_MODULE_PATH) {
            r = 16;
        } else 
        if (v  == GTK_RC_TOKEN_INCLUDE) {
            r = 17;
        } else 
        if (v  == GTK_RC_TOKEN_INSENSITIVE) {
            r = 18;
        } else 
        if (v  == GTK_RC_TOKEN_INVALID) {
            r = 19;
        } else 
        if (v  == GTK_RC_TOKEN_LAST) {
            r = 20;
        } else 
        if (v  == GTK_RC_TOKEN_LOWEST) {
            r = 21;
        } else 
        if (v  == GTK_RC_TOKEN_LTR) {
            r = 22;
        } else 
        if (v  == GTK_RC_TOKEN_MODULE_PATH) {
            r = 23;
        } else 
        if (v  == GTK_RC_TOKEN_NORMAL) {
            r = 24;
        } else 
        if (v  == GTK_RC_TOKEN_PIXMAP_PATH) {
            r = 25;
        } else 
        if (v  == GTK_RC_TOKEN_PRELIGHT) {
            r = 26;
        } else 
        if (v  == GTK_RC_TOKEN_RC) {
            r = 27;
        } else 
        if (v  == GTK_RC_TOKEN_RTL) {
            r = 28;
        } else 
        if (v  == GTK_RC_TOKEN_SELECTED) {
            r = 29;
        } else 
        if (v  == GTK_RC_TOKEN_STOCK) {
            r = 30;
        } else 
        if (v  == GTK_RC_TOKEN_STYLE) {
            r = 31;
        } else 
        if (v  == GTK_RC_TOKEN_TEXT) {
            r = 32;
        } else 
        if (v  == GTK_RC_TOKEN_THEME) {
            r = 33;
        } else 
        if (v  == GTK_RC_TOKEN_WIDGET) {
            r = 34;
        } else 
        if (v  == GTK_RC_TOKEN_WIDGET_CLASS) {
            r = 35;
        } else 
        if (v  == GTK_RC_TOKEN_XTHICKNESS) {
            r = 36;
        } else 
        if (v  == GTK_RC_TOKEN_YTHICKNESS) {
            r = 37;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkRcTokenType GtkRcTokenTypetFromWord(word w) {
    GtkRcTokenType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_RC_TOKEN_ACTIVE;
            break;
        case 1: r = GTK_RC_TOKEN_APPLICATION;
            break;
        case 2: r = GTK_RC_TOKEN_BASE;
            break;
        case 3: r = GTK_RC_TOKEN_BG;
            break;
        case 4: r = GTK_RC_TOKEN_BG_PIXMAP;
            break;
        case 5: r = GTK_RC_TOKEN_BIND;
            break;
        case 6: r = GTK_RC_TOKEN_BINDING;
            break;
        case 7: r = GTK_RC_TOKEN_CLASS;
            break;
        case 8: r = GTK_RC_TOKEN_ENGINE;
            break;
        case 9: r = GTK_RC_TOKEN_FG;
            break;
        case 10: r = GTK_RC_TOKEN_FONT;
            break;
        case 11: r = GTK_RC_TOKEN_FONTSET;
            break;
        case 12: r = GTK_RC_TOKEN_FONT_NAME;
            break;
        case 13: r = GTK_RC_TOKEN_GTK;
            break;
        case 14: r = GTK_RC_TOKEN_HIGHEST;
            break;
        case 15: r = GTK_RC_TOKEN_IM_MODULE_FILE;
            break;
        case 16: r = GTK_RC_TOKEN_IM_MODULE_PATH;
            break;
        case 17: r = GTK_RC_TOKEN_INCLUDE;
            break;
        case 18: r = GTK_RC_TOKEN_INSENSITIVE;
            break;
        case 19: r = GTK_RC_TOKEN_INVALID;
            break;
        case 20: r = GTK_RC_TOKEN_LAST;
            break;
        case 21: r = GTK_RC_TOKEN_LOWEST;
            break;
        case 22: r = GTK_RC_TOKEN_LTR;
            break;
        case 23: r = GTK_RC_TOKEN_MODULE_PATH;
            break;
        case 24: r = GTK_RC_TOKEN_NORMAL;
            break;
        case 25: r = GTK_RC_TOKEN_PIXMAP_PATH;
            break;
        case 26: r = GTK_RC_TOKEN_PRELIGHT;
            break;
        case 27: r = GTK_RC_TOKEN_RC;
            break;
        case 28: r = GTK_RC_TOKEN_RTL;
            break;
        case 29: r = GTK_RC_TOKEN_SELECTED;
            break;
        case 30: r = GTK_RC_TOKEN_STOCK;
            break;
        case 31: r = GTK_RC_TOKEN_STYLE;
            break;
        case 32: r = GTK_RC_TOKEN_TEXT;
            break;
        case 33: r = GTK_RC_TOKEN_THEME;
            break;
        case 34: r = GTK_RC_TOKEN_WIDGET;
            break;
        case 35: r = GTK_RC_TOKEN_WIDGET_CLASS;
            break;
        case 36: r = GTK_RC_TOKEN_XTHICKNESS;
            break;
        case 37: r = GTK_RC_TOKEN_YTHICKNESS;
            break;
        default:
            Error ("GtkRcTokenTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_RcTokenTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkRcTokenTypetFromWord(x0));
} END
DEFINE1(Gtk_RcTokenTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkRcTokenTypetToWord((GtkRcTokenType)i));
} END
DEFINE0(Gtk_RcTokenTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_RC_TOKEN_TYPE));
} END
word GtkProgressBarStyletToWord(GtkProgressBarStyle v) {
    unsigned r = 0;
        if (v  == GTK_PROGRESS_CONTINUOUS) {
            r = 0;
        } else 
        if (v  == GTK_PROGRESS_DISCRETE) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkProgressBarStyle GtkProgressBarStyletFromWord(word w) {
    GtkProgressBarStyle r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_PROGRESS_CONTINUOUS;
            break;
        case 1: r = GTK_PROGRESS_DISCRETE;
            break;
        default:
            Error ("GtkProgressBarStyletFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ProgressBarStyleToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkProgressBarStyletFromWord(x0));
} END
DEFINE1(Gtk_ProgressBarStyleFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkProgressBarStyletToWord((GtkProgressBarStyle)i));
} END
DEFINE0(Gtk_ProgressBarStyleGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_PROGRESS_BAR_STYLE));
} END
word GtkProgressBarOrientationtToWord(GtkProgressBarOrientation v) {
    unsigned r = 0;
        if (v  == GTK_PROGRESS_BOTTOM_TO_TOP) {
            r = 0;
        } else 
        if (v  == GTK_PROGRESS_LEFT_TO_RIGHT) {
            r = 1;
        } else 
        if (v  == GTK_PROGRESS_RIGHT_TO_LEFT) {
            r = 2;
        } else 
        if (v  == GTK_PROGRESS_TOP_TO_BOTTOM) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkProgressBarOrientation GtkProgressBarOrientationtFromWord(word w) {
    GtkProgressBarOrientation r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_PROGRESS_BOTTOM_TO_TOP;
            break;
        case 1: r = GTK_PROGRESS_LEFT_TO_RIGHT;
            break;
        case 2: r = GTK_PROGRESS_RIGHT_TO_LEFT;
            break;
        case 3: r = GTK_PROGRESS_TOP_TO_BOTTOM;
            break;
        default:
            Error ("GtkProgressBarOrientationtFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ProgressBarOrientationToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkProgressBarOrientationtFromWord(x0));
} END
DEFINE1(Gtk_ProgressBarOrientationFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkProgressBarOrientationtToWord((GtkProgressBarOrientation)i));
} END
DEFINE0(Gtk_ProgressBarOrientationGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_PROGRESS_BAR_ORIENTATION));
} END
word GtkPreviewTypetToWord(GtkPreviewType v) {
    unsigned r = 0;
        if (v  == GTK_PREVIEW_COLOR) {
            r = 0;
        } else 
        if (v  == GTK_PREVIEW_GRAYSCALE) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkPreviewType GtkPreviewTypetFromWord(word w) {
    GtkPreviewType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_PREVIEW_COLOR;
            break;
        case 1: r = GTK_PREVIEW_GRAYSCALE;
            break;
        default:
            Error ("GtkPreviewTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_PreviewTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkPreviewTypetFromWord(x0));
} END
DEFINE1(Gtk_PreviewTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkPreviewTypetToWord((GtkPreviewType)i));
} END
DEFINE0(Gtk_PreviewTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_PREVIEW_TYPE));
} END
word GtkPositionTypetToWord(GtkPositionType v) {
    unsigned r = 0;
        if (v  == GTK_POS_BOTTOM) {
            r = 0;
        } else 
        if (v  == GTK_POS_LEFT) {
            r = 1;
        } else 
        if (v  == GTK_POS_RIGHT) {
            r = 2;
        } else 
        if (v  == GTK_POS_TOP) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkPositionType GtkPositionTypetFromWord(word w) {
    GtkPositionType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_POS_BOTTOM;
            break;
        case 1: r = GTK_POS_LEFT;
            break;
        case 2: r = GTK_POS_RIGHT;
            break;
        case 3: r = GTK_POS_TOP;
            break;
        default:
            Error ("GtkPositionTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_PositionTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkPositionTypetFromWord(x0));
} END
DEFINE1(Gtk_PositionTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkPositionTypetToWord((GtkPositionType)i));
} END
DEFINE0(Gtk_PositionTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_POSITION_TYPE));
} END
word GtkPolicyTypetToWord(GtkPolicyType v) {
    unsigned r = 0;
        if (v  == GTK_POLICY_ALWAYS) {
            r = 0;
        } else 
        if (v  == GTK_POLICY_AUTOMATIC) {
            r = 1;
        } else 
        if (v  == GTK_POLICY_NEVER) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkPolicyType GtkPolicyTypetFromWord(word w) {
    GtkPolicyType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_POLICY_ALWAYS;
            break;
        case 1: r = GTK_POLICY_AUTOMATIC;
            break;
        case 2: r = GTK_POLICY_NEVER;
            break;
        default:
            Error ("GtkPolicyTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_PolicyTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkPolicyTypetFromWord(x0));
} END
DEFINE1(Gtk_PolicyTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkPolicyTypetToWord((GtkPolicyType)i));
} END
DEFINE0(Gtk_PolicyTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_POLICY_TYPE));
} END
word GtkPathTypetToWord(GtkPathType v) {
    unsigned r = 0;
        if (v  == GTK_PATH_CLASS) {
            r = 0;
        } else 
        if (v  == GTK_PATH_WIDGET) {
            r = 1;
        } else 
        if (v  == GTK_PATH_WIDGET_CLASS) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkPathType GtkPathTypetFromWord(word w) {
    GtkPathType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_PATH_CLASS;
            break;
        case 1: r = GTK_PATH_WIDGET;
            break;
        case 2: r = GTK_PATH_WIDGET_CLASS;
            break;
        default:
            Error ("GtkPathTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_PathTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkPathTypetFromWord(x0));
} END
DEFINE1(Gtk_PathTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkPathTypetToWord((GtkPathType)i));
} END
DEFINE0(Gtk_PathTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_PATH_TYPE));
} END
word GtkPathPriorityTypetToWord(GtkPathPriorityType v) {
    unsigned r = 0;
        if (v  == GTK_PATH_PRIO_APPLICATION) {
            r = 0;
        } else 
        if (v  == GTK_PATH_PRIO_GTK) {
            r = 1;
        } else 
        if (v  == GTK_PATH_PRIO_HIGHEST) {
            r = 2;
        } else 
        if (v  == GTK_PATH_PRIO_LOWEST) {
            r = 3;
        } else 
        if (v  == GTK_PATH_PRIO_RC) {
            r = 4;
        } else 
        if (v  == GTK_PATH_PRIO_THEME) {
            r = 5;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkPathPriorityType GtkPathPriorityTypetFromWord(word w) {
    GtkPathPriorityType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_PATH_PRIO_APPLICATION;
            break;
        case 1: r = GTK_PATH_PRIO_GTK;
            break;
        case 2: r = GTK_PATH_PRIO_HIGHEST;
            break;
        case 3: r = GTK_PATH_PRIO_LOWEST;
            break;
        case 4: r = GTK_PATH_PRIO_RC;
            break;
        case 5: r = GTK_PATH_PRIO_THEME;
            break;
        default:
            Error ("GtkPathPriorityTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_PathPriorityTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkPathPriorityTypetFromWord(x0));
} END
DEFINE1(Gtk_PathPriorityTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkPathPriorityTypetToWord((GtkPathPriorityType)i));
} END
DEFINE0(Gtk_PathPriorityTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_PATH_PRIORITY_TYPE));
} END
word GtkPackTypetToWord(GtkPackType v) {
    unsigned r = 0;
        if (v  == GTK_PACK_END) {
            r = 0;
        } else 
        if (v  == GTK_PACK_START) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkPackType GtkPackTypetFromWord(word w) {
    GtkPackType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_PACK_END;
            break;
        case 1: r = GTK_PACK_START;
            break;
        default:
            Error ("GtkPackTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_PackTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkPackTypetFromWord(x0));
} END
DEFINE1(Gtk_PackTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkPackTypetToWord((GtkPackType)i));
} END
DEFINE0(Gtk_PackTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_PACK_TYPE));
} END
word GtkOrientationtToWord(GtkOrientation v) {
    unsigned r = 0;
        if (v  == GTK_ORIENTATION_HORIZONTAL) {
            r = 0;
        } else 
        if (v  == GTK_ORIENTATION_VERTICAL) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkOrientation GtkOrientationtFromWord(word w) {
    GtkOrientation r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_ORIENTATION_HORIZONTAL;
            break;
        case 1: r = GTK_ORIENTATION_VERTICAL;
            break;
        default:
            Error ("GtkOrientationtFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_OrientationToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkOrientationtFromWord(x0));
} END
DEFINE1(Gtk_OrientationFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkOrientationtToWord((GtkOrientation)i));
} END
DEFINE0(Gtk_OrientationGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ORIENTATION));
} END
word GtkNotebookTabtToWord(GtkNotebookTab v) {
    unsigned r = 0;
        if (v  == GTK_NOTEBOOK_TAB_FIRST) {
            r = 0;
        } else 
        if (v  == GTK_NOTEBOOK_TAB_LAST) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkNotebookTab GtkNotebookTabtFromWord(word w) {
    GtkNotebookTab r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_NOTEBOOK_TAB_FIRST;
            break;
        case 1: r = GTK_NOTEBOOK_TAB_LAST;
            break;
        default:
            Error ("GtkNotebookTabtFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_NotebookTabToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkNotebookTabtFromWord(x0));
} END
DEFINE1(Gtk_NotebookTabFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkNotebookTabtToWord((GtkNotebookTab)i));
} END
DEFINE0(Gtk_NotebookTabGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_NOTEBOOK_TAB));
} END
word GtkMovementSteptToWord(GtkMovementStep v) {
    unsigned r = 0;
        if (v  == GTK_MOVEMENT_BUFFER_ENDS) {
            r = 0;
        } else 
        if (v  == GTK_MOVEMENT_DISPLAY_LINES) {
            r = 1;
        } else 
        if (v  == GTK_MOVEMENT_DISPLAY_LINE_ENDS) {
            r = 2;
        } else 
        if (v  == GTK_MOVEMENT_HORIZONTAL_PAGES) {
            r = 3;
        } else 
        if (v  == GTK_MOVEMENT_LOGICAL_POSITIONS) {
            r = 4;
        } else 
        if (v  == GTK_MOVEMENT_PAGES) {
            r = 5;
        } else 
        if (v  == GTK_MOVEMENT_PARAGRAPHS) {
            r = 6;
        } else 
        if (v  == GTK_MOVEMENT_PARAGRAPH_ENDS) {
            r = 7;
        } else 
        if (v  == GTK_MOVEMENT_VISUAL_POSITIONS) {
            r = 8;
        } else 
        if (v  == GTK_MOVEMENT_WORDS) {
            r = 9;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkMovementStep GtkMovementSteptFromWord(word w) {
    GtkMovementStep r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_MOVEMENT_BUFFER_ENDS;
            break;
        case 1: r = GTK_MOVEMENT_DISPLAY_LINES;
            break;
        case 2: r = GTK_MOVEMENT_DISPLAY_LINE_ENDS;
            break;
        case 3: r = GTK_MOVEMENT_HORIZONTAL_PAGES;
            break;
        case 4: r = GTK_MOVEMENT_LOGICAL_POSITIONS;
            break;
        case 5: r = GTK_MOVEMENT_PAGES;
            break;
        case 6: r = GTK_MOVEMENT_PARAGRAPHS;
            break;
        case 7: r = GTK_MOVEMENT_PARAGRAPH_ENDS;
            break;
        case 8: r = GTK_MOVEMENT_VISUAL_POSITIONS;
            break;
        case 9: r = GTK_MOVEMENT_WORDS;
            break;
        default:
            Error ("GtkMovementSteptFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_MovementStepToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkMovementSteptFromWord(x0));
} END
DEFINE1(Gtk_MovementStepFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkMovementSteptToWord((GtkMovementStep)i));
} END
DEFINE0(Gtk_MovementStepGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_MOVEMENT_STEP));
} END
word GtkMetricTypetToWord(GtkMetricType v) {
    unsigned r = 0;
        if (v  == GTK_CENTIMETERS) {
            r = 0;
        } else 
        if (v  == GTK_INCHES) {
            r = 1;
        } else 
        if (v  == GTK_PIXELS) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkMetricType GtkMetricTypetFromWord(word w) {
    GtkMetricType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_CENTIMETERS;
            break;
        case 1: r = GTK_INCHES;
            break;
        case 2: r = GTK_PIXELS;
            break;
        default:
            Error ("GtkMetricTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_MetricTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkMetricTypetFromWord(x0));
} END
DEFINE1(Gtk_MetricTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkMetricTypetToWord((GtkMetricType)i));
} END
DEFINE0(Gtk_MetricTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_METRIC_TYPE));
} END
word GtkMessageTypetToWord(GtkMessageType v) {
    unsigned r = 0;
        if (v  == GTK_MESSAGE_ERROR) {
            r = 0;
        } else 
        if (v  == GTK_MESSAGE_INFO) {
            r = 1;
        } else 
        if (v  == GTK_MESSAGE_QUESTION) {
            r = 2;
        } else 
        if (v  == GTK_MESSAGE_WARNING) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkMessageType GtkMessageTypetFromWord(word w) {
    GtkMessageType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_MESSAGE_ERROR;
            break;
        case 1: r = GTK_MESSAGE_INFO;
            break;
        case 2: r = GTK_MESSAGE_QUESTION;
            break;
        case 3: r = GTK_MESSAGE_WARNING;
            break;
        default:
            Error ("GtkMessageTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_MessageTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkMessageTypetFromWord(x0));
} END
DEFINE1(Gtk_MessageTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkMessageTypetToWord((GtkMessageType)i));
} END
DEFINE0(Gtk_MessageTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_MESSAGE_TYPE));
} END
word GtkMenuDirectionTypetToWord(GtkMenuDirectionType v) {
    unsigned r = 0;
        if (v  == GTK_MENU_DIR_CHILD) {
            r = 0;
        } else 
        if (v  == GTK_MENU_DIR_NEXT) {
            r = 1;
        } else 
        if (v  == GTK_MENU_DIR_PARENT) {
            r = 2;
        } else 
        if (v  == GTK_MENU_DIR_PREV) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkMenuDirectionType GtkMenuDirectionTypetFromWord(word w) {
    GtkMenuDirectionType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_MENU_DIR_CHILD;
            break;
        case 1: r = GTK_MENU_DIR_NEXT;
            break;
        case 2: r = GTK_MENU_DIR_PARENT;
            break;
        case 3: r = GTK_MENU_DIR_PREV;
            break;
        default:
            Error ("GtkMenuDirectionTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_MenuDirectionTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkMenuDirectionTypetFromWord(x0));
} END
DEFINE1(Gtk_MenuDirectionTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkMenuDirectionTypetToWord((GtkMenuDirectionType)i));
} END
DEFINE0(Gtk_MenuDirectionTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_MENU_DIRECTION_TYPE));
} END
word GtkMatchTypetToWord(GtkMatchType v) {
    unsigned r = 0;
        if (v  == GTK_MATCH_ALL) {
            r = 0;
        } else 
        if (v  == GTK_MATCH_ALL_TAIL) {
            r = 1;
        } else 
        if (v  == GTK_MATCH_EXACT) {
            r = 2;
        } else 
        if (v  == GTK_MATCH_HEAD) {
            r = 3;
        } else 
        if (v  == GTK_MATCH_LAST) {
            r = 4;
        } else 
        if (v  == GTK_MATCH_TAIL) {
            r = 5;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkMatchType GtkMatchTypetFromWord(word w) {
    GtkMatchType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_MATCH_ALL;
            break;
        case 1: r = GTK_MATCH_ALL_TAIL;
            break;
        case 2: r = GTK_MATCH_EXACT;
            break;
        case 3: r = GTK_MATCH_HEAD;
            break;
        case 4: r = GTK_MATCH_LAST;
            break;
        case 5: r = GTK_MATCH_TAIL;
            break;
        default:
            Error ("GtkMatchTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_MatchTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkMatchTypetFromWord(x0));
} END
DEFINE1(Gtk_MatchTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkMatchTypetToWord((GtkMatchType)i));
} END
DEFINE0(Gtk_MatchTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_MATCH_TYPE));
} END
word GtkJustificationtToWord(GtkJustification v) {
    unsigned r = 0;
        if (v  == GTK_JUSTIFY_CENTER) {
            r = 0;
        } else 
        if (v  == GTK_JUSTIFY_FILL) {
            r = 1;
        } else 
        if (v  == GTK_JUSTIFY_LEFT) {
            r = 2;
        } else 
        if (v  == GTK_JUSTIFY_RIGHT) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkJustification GtkJustificationtFromWord(word w) {
    GtkJustification r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_JUSTIFY_CENTER;
            break;
        case 1: r = GTK_JUSTIFY_FILL;
            break;
        case 2: r = GTK_JUSTIFY_LEFT;
            break;
        case 3: r = GTK_JUSTIFY_RIGHT;
            break;
        default:
            Error ("GtkJustificationtFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_JustificationToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkJustificationtFromWord(x0));
} END
DEFINE1(Gtk_JustificationFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkJustificationtToWord((GtkJustification)i));
} END
DEFINE0(Gtk_JustificationGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_JUSTIFICATION));
} END
word GtkIMStatusStyletToWord(GtkIMStatusStyle v) {
    unsigned r = 0;
        if (v  == GTK_IM_STATUS_CALLBACK) {
            r = 0;
        } else 
        if (v  == GTK_IM_STATUS_NOTHING) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkIMStatusStyle GtkIMStatusStyletFromWord(word w) {
    GtkIMStatusStyle r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_IM_STATUS_CALLBACK;
            break;
        case 1: r = GTK_IM_STATUS_NOTHING;
            break;
        default:
            Error ("GtkIMStatusStyletFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_IMStatusStyleToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkIMStatusStyletFromWord(x0));
} END
DEFINE1(Gtk_IMStatusStyleFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkIMStatusStyletToWord((GtkIMStatusStyle)i));
} END
DEFINE0(Gtk_IMStatusStyleGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_IM_STATUS_STYLE));
} END
word GtkIMPreeditStyletToWord(GtkIMPreeditStyle v) {
    unsigned r = 0;
        if (v  == GTK_IM_PREEDIT_CALLBACK) {
            r = 0;
        } else 
        if (v  == GTK_IM_PREEDIT_NONE) {
            r = 1;
        } else 
        if (v  == GTK_IM_PREEDIT_NOTHING) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkIMPreeditStyle GtkIMPreeditStyletFromWord(word w) {
    GtkIMPreeditStyle r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_IM_PREEDIT_CALLBACK;
            break;
        case 1: r = GTK_IM_PREEDIT_NONE;
            break;
        case 2: r = GTK_IM_PREEDIT_NOTHING;
            break;
        default:
            Error ("GtkIMPreeditStyletFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_IMPreeditStyleToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkIMPreeditStyletFromWord(x0));
} END
DEFINE1(Gtk_IMPreeditStyleFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkIMPreeditStyletToWord((GtkIMPreeditStyle)i));
} END
DEFINE0(Gtk_IMPreeditStyleGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_IM_PREEDIT_STYLE));
} END
word GtkImageTypetToWord(GtkImageType v) {
    unsigned r = 0;
        if (v  == GTK_IMAGE_ANIMATION) {
            r = 0;
        } else 
        if (v  == GTK_IMAGE_EMPTY) {
            r = 1;
        } else 
        if (v  == GTK_IMAGE_ICON_SET) {
            r = 2;
        } else 
        if (v  == GTK_IMAGE_IMAGE) {
            r = 3;
        } else 
        if (v  == GTK_IMAGE_PIXBUF) {
            r = 4;
        } else 
        if (v  == GTK_IMAGE_PIXMAP) {
            r = 5;
        } else 
        if (v  == GTK_IMAGE_STOCK) {
            r = 6;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkImageType GtkImageTypetFromWord(word w) {
    GtkImageType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_IMAGE_ANIMATION;
            break;
        case 1: r = GTK_IMAGE_EMPTY;
            break;
        case 2: r = GTK_IMAGE_ICON_SET;
            break;
        case 3: r = GTK_IMAGE_IMAGE;
            break;
        case 4: r = GTK_IMAGE_PIXBUF;
            break;
        case 5: r = GTK_IMAGE_PIXMAP;
            break;
        case 6: r = GTK_IMAGE_STOCK;
            break;
        default:
            Error ("GtkImageTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ImageTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkImageTypetFromWord(x0));
} END
DEFINE1(Gtk_ImageTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkImageTypetToWord((GtkImageType)i));
} END
DEFINE0(Gtk_ImageTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_IMAGE_TYPE));
} END
word GtkIconThemeErrortToWord(GtkIconThemeError v) {
    unsigned r = 0;
        if (v  == GTK_ICON_THEME_FAILED) {
            r = 0;
        } else 
        if (v  == GTK_ICON_THEME_NOT_FOUND) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkIconThemeError GtkIconThemeErrortFromWord(word w) {
    GtkIconThemeError r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_ICON_THEME_FAILED;
            break;
        case 1: r = GTK_ICON_THEME_NOT_FOUND;
            break;
        default:
            Error ("GtkIconThemeErrortFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_IconThemeErrorToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkIconThemeErrortFromWord(x0));
} END
DEFINE1(Gtk_IconThemeErrorFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkIconThemeErrortToWord((GtkIconThemeError)i));
} END
DEFINE0(Gtk_IconThemeErrorGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ICON_THEME_ERROR));
} END
word GtkIconSizetToWord(GtkIconSize v) {
    unsigned r = 0;
        if (v  == GTK_ICON_SIZE_BUTTON) {
            r = 0;
        } else 
        if (v  == GTK_ICON_SIZE_DIALOG) {
            r = 1;
        } else 
        if (v  == GTK_ICON_SIZE_DND) {
            r = 2;
        } else 
        if (v  == GTK_ICON_SIZE_INVALID) {
            r = 3;
        } else 
        if (v  == GTK_ICON_SIZE_LARGE_TOOLBAR) {
            r = 4;
        } else 
        if (v  == GTK_ICON_SIZE_MENU) {
            r = 5;
        } else 
        if (v  == GTK_ICON_SIZE_SMALL_TOOLBAR) {
            r = 6;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkIconSize GtkIconSizetFromWord(word w) {
    GtkIconSize r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_ICON_SIZE_BUTTON;
            break;
        case 1: r = GTK_ICON_SIZE_DIALOG;
            break;
        case 2: r = GTK_ICON_SIZE_DND;
            break;
        case 3: r = GTK_ICON_SIZE_INVALID;
            break;
        case 4: r = GTK_ICON_SIZE_LARGE_TOOLBAR;
            break;
        case 5: r = GTK_ICON_SIZE_MENU;
            break;
        case 6: r = GTK_ICON_SIZE_SMALL_TOOLBAR;
            break;
        default:
            Error ("GtkIconSizetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_IconSizeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkIconSizetFromWord(x0));
} END
DEFINE1(Gtk_IconSizeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkIconSizetToWord((GtkIconSize)i));
} END
DEFINE0(Gtk_IconSizeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ICON_SIZE));
} END
word GtkFileChooserErrortToWord(GtkFileChooserError v) {
    unsigned r = 0;
        if (v  == GTK_FILE_CHOOSER_ERROR_BAD_FILENAME) {
            r = 0;
        } else 
        if (v  == GTK_FILE_CHOOSER_ERROR_NONEXISTENT) {
            r = 1;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkFileChooserError GtkFileChooserErrortFromWord(word w) {
    GtkFileChooserError r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_FILE_CHOOSER_ERROR_BAD_FILENAME;
            break;
        case 1: r = GTK_FILE_CHOOSER_ERROR_NONEXISTENT;
            break;
        default:
            Error ("GtkFileChooserErrortFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_FileChooserErrorToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkFileChooserErrortFromWord(x0));
} END
DEFINE1(Gtk_FileChooserErrorFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkFileChooserErrortToWord((GtkFileChooserError)i));
} END
DEFINE0(Gtk_FileChooserErrorGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_FILE_CHOOSER_ERROR));
} END
word GtkFileChooserActiontToWord(GtkFileChooserAction v) {
    unsigned r = 0;
        if (v  == GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER) {
            r = 0;
        } else 
        if (v  == GTK_FILE_CHOOSER_ACTION_OPEN) {
            r = 1;
        } else 
        if (v  == GTK_FILE_CHOOSER_ACTION_SAVE) {
            r = 2;
        } else 
        if (v  == GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkFileChooserAction GtkFileChooserActiontFromWord(word w) {
    GtkFileChooserAction r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER;
            break;
        case 1: r = GTK_FILE_CHOOSER_ACTION_OPEN;
            break;
        case 2: r = GTK_FILE_CHOOSER_ACTION_SAVE;
            break;
        case 3: r = GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER;
            break;
        default:
            Error ("GtkFileChooserActiontFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_FileChooserActionToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkFileChooserActiontFromWord(x0));
} END
DEFINE1(Gtk_FileChooserActionFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkFileChooserActiontToWord((GtkFileChooserAction)i));
} END
DEFINE0(Gtk_FileChooserActionGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_FILE_CHOOSER_ACTION));
} END
word GtkExpanderStyletToWord(GtkExpanderStyle v) {
    unsigned r = 0;
        if (v  == GTK_EXPANDER_COLLAPSED) {
            r = 0;
        } else 
        if (v  == GTK_EXPANDER_EXPANDED) {
            r = 1;
        } else 
        if (v  == GTK_EXPANDER_SEMI_COLLAPSED) {
            r = 2;
        } else 
        if (v  == GTK_EXPANDER_SEMI_EXPANDED) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkExpanderStyle GtkExpanderStyletFromWord(word w) {
    GtkExpanderStyle r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_EXPANDER_COLLAPSED;
            break;
        case 1: r = GTK_EXPANDER_EXPANDED;
            break;
        case 2: r = GTK_EXPANDER_SEMI_COLLAPSED;
            break;
        case 3: r = GTK_EXPANDER_SEMI_EXPANDED;
            break;
        default:
            Error ("GtkExpanderStyletFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ExpanderStyleToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkExpanderStyletFromWord(x0));
} END
DEFINE1(Gtk_ExpanderStyleFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkExpanderStyletToWord((GtkExpanderStyle)i));
} END
DEFINE0(Gtk_ExpanderStyleGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_EXPANDER_STYLE));
} END
word GtkDirectionTypetToWord(GtkDirectionType v) {
    unsigned r = 0;
        if (v  == GTK_DIR_DOWN) {
            r = 0;
        } else 
        if (v  == GTK_DIR_LEFT) {
            r = 1;
        } else 
        if (v  == GTK_DIR_RIGHT) {
            r = 2;
        } else 
        if (v  == GTK_DIR_TAB_BACKWARD) {
            r = 3;
        } else 
        if (v  == GTK_DIR_TAB_FORWARD) {
            r = 4;
        } else 
        if (v  == GTK_DIR_UP) {
            r = 5;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkDirectionType GtkDirectionTypetFromWord(word w) {
    GtkDirectionType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_DIR_DOWN;
            break;
        case 1: r = GTK_DIR_LEFT;
            break;
        case 2: r = GTK_DIR_RIGHT;
            break;
        case 3: r = GTK_DIR_TAB_BACKWARD;
            break;
        case 4: r = GTK_DIR_TAB_FORWARD;
            break;
        case 5: r = GTK_DIR_UP;
            break;
        default:
            Error ("GtkDirectionTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_DirectionTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkDirectionTypetFromWord(x0));
} END
DEFINE1(Gtk_DirectionTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkDirectionTypetToWord((GtkDirectionType)i));
} END
DEFINE0(Gtk_DirectionTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_DIRECTION_TYPE));
} END
word GtkDeleteTypetToWord(GtkDeleteType v) {
    unsigned r = 0;
        if (v  == GTK_DELETE_CHARS) {
            r = 0;
        } else 
        if (v  == GTK_DELETE_DISPLAY_LINES) {
            r = 1;
        } else 
        if (v  == GTK_DELETE_DISPLAY_LINE_ENDS) {
            r = 2;
        } else 
        if (v  == GTK_DELETE_PARAGRAPHS) {
            r = 3;
        } else 
        if (v  == GTK_DELETE_PARAGRAPH_ENDS) {
            r = 4;
        } else 
        if (v  == GTK_DELETE_WHITESPACE) {
            r = 5;
        } else 
        if (v  == GTK_DELETE_WORDS) {
            r = 6;
        } else 
        if (v  == GTK_DELETE_WORD_ENDS) {
            r = 7;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkDeleteType GtkDeleteTypetFromWord(word w) {
    GtkDeleteType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_DELETE_CHARS;
            break;
        case 1: r = GTK_DELETE_DISPLAY_LINES;
            break;
        case 2: r = GTK_DELETE_DISPLAY_LINE_ENDS;
            break;
        case 3: r = GTK_DELETE_PARAGRAPHS;
            break;
        case 4: r = GTK_DELETE_PARAGRAPH_ENDS;
            break;
        case 5: r = GTK_DELETE_WHITESPACE;
            break;
        case 6: r = GTK_DELETE_WORDS;
            break;
        case 7: r = GTK_DELETE_WORD_ENDS;
            break;
        default:
            Error ("GtkDeleteTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_DeleteTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkDeleteTypetFromWord(x0));
} END
DEFINE1(Gtk_DeleteTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkDeleteTypetToWord((GtkDeleteType)i));
} END
DEFINE0(Gtk_DeleteTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_DELETE_TYPE));
} END
word GtkCurveTypetToWord(GtkCurveType v) {
    unsigned r = 0;
        if (v  == GTK_CURVE_TYPE_FREE) {
            r = 0;
        } else 
        if (v  == GTK_CURVE_TYPE_LINEAR) {
            r = 1;
        } else 
        if (v  == GTK_CURVE_TYPE_SPLINE) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkCurveType GtkCurveTypetFromWord(word w) {
    GtkCurveType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_CURVE_TYPE_FREE;
            break;
        case 1: r = GTK_CURVE_TYPE_LINEAR;
            break;
        case 2: r = GTK_CURVE_TYPE_SPLINE;
            break;
        default:
            Error ("GtkCurveTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_CurveTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkCurveTypetFromWord(x0));
} END
DEFINE1(Gtk_CurveTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkCurveTypetToWord((GtkCurveType)i));
} END
DEFINE0(Gtk_CurveTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_CURVE_TYPE));
} END
word GtkCornerTypetToWord(GtkCornerType v) {
    unsigned r = 0;
        if (v  == GTK_CORNER_BOTTOM_LEFT) {
            r = 0;
        } else 
        if (v  == GTK_CORNER_BOTTOM_RIGHT) {
            r = 1;
        } else 
        if (v  == GTK_CORNER_TOP_LEFT) {
            r = 2;
        } else 
        if (v  == GTK_CORNER_TOP_RIGHT) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkCornerType GtkCornerTypetFromWord(word w) {
    GtkCornerType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_CORNER_BOTTOM_LEFT;
            break;
        case 1: r = GTK_CORNER_BOTTOM_RIGHT;
            break;
        case 2: r = GTK_CORNER_TOP_LEFT;
            break;
        case 3: r = GTK_CORNER_TOP_RIGHT;
            break;
        default:
            Error ("GtkCornerTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_CornerTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkCornerTypetFromWord(x0));
} END
DEFINE1(Gtk_CornerTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkCornerTypetToWord((GtkCornerType)i));
} END
DEFINE0(Gtk_CornerTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_CORNER_TYPE));
} END
word GtkCellTypetToWord(GtkCellType v) {
    unsigned r = 0;
        if (v  == GTK_CELL_EMPTY) {
            r = 0;
        } else 
        if (v  == GTK_CELL_PIXMAP) {
            r = 1;
        } else 
        if (v  == GTK_CELL_PIXTEXT) {
            r = 2;
        } else 
        if (v  == GTK_CELL_TEXT) {
            r = 3;
        } else 
        if (v  == GTK_CELL_WIDGET) {
            r = 4;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkCellType GtkCellTypetFromWord(word w) {
    GtkCellType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_CELL_EMPTY;
            break;
        case 1: r = GTK_CELL_PIXMAP;
            break;
        case 2: r = GTK_CELL_PIXTEXT;
            break;
        case 3: r = GTK_CELL_TEXT;
            break;
        case 4: r = GTK_CELL_WIDGET;
            break;
        default:
            Error ("GtkCellTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_CellTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkCellTypetFromWord(x0));
} END
DEFINE1(Gtk_CellTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkCellTypetToWord((GtkCellType)i));
} END
DEFINE0(Gtk_CellTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_CELL_TYPE));
} END
word GtkCellRendererModetToWord(GtkCellRendererMode v) {
    unsigned r = 0;
        if (v  == GTK_CELL_RENDERER_MODE_ACTIVATABLE) {
            r = 0;
        } else 
        if (v  == GTK_CELL_RENDERER_MODE_EDITABLE) {
            r = 1;
        } else 
        if (v  == GTK_CELL_RENDERER_MODE_INERT) {
            r = 2;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkCellRendererMode GtkCellRendererModetFromWord(word w) {
    GtkCellRendererMode r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_CELL_RENDERER_MODE_ACTIVATABLE;
            break;
        case 1: r = GTK_CELL_RENDERER_MODE_EDITABLE;
            break;
        case 2: r = GTK_CELL_RENDERER_MODE_INERT;
            break;
        default:
            Error ("GtkCellRendererModetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_CellRendererModeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkCellRendererModetFromWord(x0));
} END
DEFINE1(Gtk_CellRendererModeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkCellRendererModetToWord((GtkCellRendererMode)i));
} END
DEFINE0(Gtk_CellRendererModeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_CELL_RENDERER_MODE));
} END
word GtkButtonsTypetToWord(GtkButtonsType v) {
    unsigned r = 0;
        if (v  == GTK_BUTTONS_CANCEL) {
            r = 0;
        } else 
        if (v  == GTK_BUTTONS_CLOSE) {
            r = 1;
        } else 
        if (v  == GTK_BUTTONS_NONE) {
            r = 2;
        } else 
        if (v  == GTK_BUTTONS_OK) {
            r = 3;
        } else 
        if (v  == GTK_BUTTONS_OK_CANCEL) {
            r = 4;
        } else 
        if (v  == GTK_BUTTONS_YES_NO) {
            r = 5;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkButtonsType GtkButtonsTypetFromWord(word w) {
    GtkButtonsType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_BUTTONS_CANCEL;
            break;
        case 1: r = GTK_BUTTONS_CLOSE;
            break;
        case 2: r = GTK_BUTTONS_NONE;
            break;
        case 3: r = GTK_BUTTONS_OK;
            break;
        case 4: r = GTK_BUTTONS_OK_CANCEL;
            break;
        case 5: r = GTK_BUTTONS_YES_NO;
            break;
        default:
            Error ("GtkButtonsTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ButtonsTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkButtonsTypetFromWord(x0));
} END
DEFINE1(Gtk_ButtonsTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkButtonsTypetToWord((GtkButtonsType)i));
} END
DEFINE0(Gtk_ButtonsTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_BUTTONS_TYPE));
} END
word GtkButtonBoxStyletToWord(GtkButtonBoxStyle v) {
    unsigned r = 0;
        if (v  == GTK_BUTTONBOX_DEFAULT_STYLE) {
            r = 0;
        } else 
        if (v  == GTK_BUTTONBOX_EDGE) {
            r = 1;
        } else 
        if (v  == GTK_BUTTONBOX_END) {
            r = 2;
        } else 
        if (v  == GTK_BUTTONBOX_SPREAD) {
            r = 3;
        } else 
        if (v  == GTK_BUTTONBOX_START) {
            r = 4;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkButtonBoxStyle GtkButtonBoxStyletFromWord(word w) {
    GtkButtonBoxStyle r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_BUTTONBOX_DEFAULT_STYLE;
            break;
        case 1: r = GTK_BUTTONBOX_EDGE;
            break;
        case 2: r = GTK_BUTTONBOX_END;
            break;
        case 3: r = GTK_BUTTONBOX_SPREAD;
            break;
        case 4: r = GTK_BUTTONBOX_START;
            break;
        default:
            Error ("GtkButtonBoxStyletFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ButtonBoxStyleToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkButtonBoxStyletFromWord(x0));
} END
DEFINE1(Gtk_ButtonBoxStyleFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkButtonBoxStyletToWord((GtkButtonBoxStyle)i));
} END
DEFINE0(Gtk_ButtonBoxStyleGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_BUTTON_BOX_STYLE));
} END
word GtkArrowTypetToWord(GtkArrowType v) {
    unsigned r = 0;
        if (v  == GTK_ARROW_DOWN) {
            r = 0;
        } else 
        if (v  == GTK_ARROW_LEFT) {
            r = 1;
        } else 
        if (v  == GTK_ARROW_RIGHT) {
            r = 2;
        } else 
        if (v  == GTK_ARROW_UP) {
            r = 3;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkArrowType GtkArrowTypetFromWord(word w) {
    GtkArrowType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_ARROW_DOWN;
            break;
        case 1: r = GTK_ARROW_LEFT;
            break;
        case 2: r = GTK_ARROW_RIGHT;
            break;
        case 3: r = GTK_ARROW_UP;
            break;
        default:
            Error ("GtkArrowTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_ArrowTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkArrowTypetFromWord(x0));
} END
DEFINE1(Gtk_ArrowTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkArrowTypetToWord((GtkArrowType)i));
} END
DEFINE0(Gtk_ArrowTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ARROW_TYPE));
} END
word GtkAnchorTypetToWord(GtkAnchorType v) {
    unsigned r = 0;
        if (v  == GTK_ANCHOR_CENTER) {
            r = 0;
        } else 
        if (v  == GTK_ANCHOR_E) {
            r = 1;
        } else 
        if (v  == GTK_ANCHOR_EAST) {
            r = 2;
        } else 
        if (v  == GTK_ANCHOR_N) {
            r = 3;
        } else 
        if (v  == GTK_ANCHOR_NE) {
            r = 4;
        } else 
        if (v  == GTK_ANCHOR_NORTH) {
            r = 5;
        } else 
        if (v  == GTK_ANCHOR_NORTH_EAST) {
            r = 6;
        } else 
        if (v  == GTK_ANCHOR_NORTH_WEST) {
            r = 7;
        } else 
        if (v  == GTK_ANCHOR_NW) {
            r = 8;
        } else 
        if (v  == GTK_ANCHOR_S) {
            r = 9;
        } else 
        if (v  == GTK_ANCHOR_SE) {
            r = 10;
        } else 
        if (v  == GTK_ANCHOR_SOUTH) {
            r = 11;
        } else 
        if (v  == GTK_ANCHOR_SOUTH_EAST) {
            r = 12;
        } else 
        if (v  == GTK_ANCHOR_SOUTH_WEST) {
            r = 13;
        } else 
        if (v  == GTK_ANCHOR_SW) {
            r = 14;
        } else 
        if (v  == GTK_ANCHOR_W) {
            r = 15;
        } else 
        if (v  == GTK_ANCHOR_WEST) {
            r = 16;
        } else 
        { Error (""); }
    return Store::IntToWord (r);
}
GtkAnchorType GtkAnchorTypetFromWord(word w) {
    GtkAnchorType r;
    s_int wi = Store::WordToInt(w);
    switch (wi) {
        case 0: r = GTK_ANCHOR_CENTER;
            break;
        case 1: r = GTK_ANCHOR_E;
            break;
        case 2: r = GTK_ANCHOR_EAST;
            break;
        case 3: r = GTK_ANCHOR_N;
            break;
        case 4: r = GTK_ANCHOR_NE;
            break;
        case 5: r = GTK_ANCHOR_NORTH;
            break;
        case 6: r = GTK_ANCHOR_NORTH_EAST;
            break;
        case 7: r = GTK_ANCHOR_NORTH_WEST;
            break;
        case 8: r = GTK_ANCHOR_NW;
            break;
        case 9: r = GTK_ANCHOR_S;
            break;
        case 10: r = GTK_ANCHOR_SE;
            break;
        case 11: r = GTK_ANCHOR_SOUTH;
            break;
        case 12: r = GTK_ANCHOR_SOUTH_EAST;
            break;
        case 13: r = GTK_ANCHOR_SOUTH_WEST;
            break;
        case 14: r = GTK_ANCHOR_SW;
            break;
        case 15: r = GTK_ANCHOR_W;
            break;
        case 16: r = GTK_ANCHOR_WEST;
            break;
        default:
            Error ("GtkAnchorTypetFromWord: invalid enum");
            break;
    }
    return r;
}
DEFINE1(Gtk_AnchorTypeToInt) {
    if (Store::WordToInt (x0) == INVALID_INT) { REQUEST(x0); }
    RETURN_INT(GtkAnchorTypetFromWord(x0));
} END
DEFINE1(Gtk_AnchorTypeFromInt) {
    DECLARE_INT(i, x0);
    RETURN(GtkAnchorTypetToWord((GtkAnchorType)i));
} END
DEFINE0(Gtk_AnchorTypeGetType) {
    RETURN1(Store::IntToWord(GTK_TYPE_ANCHOR_TYPE));
} END
DEFINE3(Gtk_TreeRowReferencenewProxy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, G_TYPE_OBJECT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_PATH);
    GtkTreeRowReference* cres = (GtkTreeRowReference*)gtk_tree_row_reference_new_proxy(
        (GObject*)a0
        ,(GtkTreeModel*)a1
        ,(GtkTreePath*)a2
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_ROW_REFERENCE);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeRowReferencenew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    GtkTreeRowReference* cres = (GtkTreeRowReference*)gtk_tree_row_reference_new(
        (GtkTreeModel*)a0
        ,(GtkTreePath*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_ROW_REFERENCE);
    RETURN1(res);
} END
DEFINE4(Gtk_TreeRowReferencereordered) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, G_TYPE_OBJECT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    gtk_tree_row_reference_reordered(
        (GObject*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeIter*)a2
        ,(gint*)a3
        );
    word r3 = Store::IntToWord(*a3);
    RETURN1(r3);
} END
DEFINE2(Gtk_TreeRowReferencedeleted) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, G_TYPE_OBJECT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_tree_row_reference_deleted(
        (GObject*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeRowReferenceinserted) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, G_TYPE_OBJECT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_tree_row_reference_inserted(
        (GObject*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeRowReferencefree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_ROW_REFERENCE);
    gtk_tree_row_reference_free(
        (GtkTreeRowReference*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeRowReferencecopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_ROW_REFERENCE);
    GtkTreeRowReference* cres = (GtkTreeRowReference*)gtk_tree_row_reference_copy(
        (GtkTreeRowReference*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_ROW_REFERENCE);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeRowReferencevalid) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_ROW_REFERENCE);
    gboolean cres = (gboolean)gtk_tree_row_reference_valid(
        (GtkTreeRowReference*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeRowReferencegetPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_ROW_REFERENCE);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_row_reference_get_path(
        (GtkTreeRowReference*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeRowReferencegetType) {
    GType cres = (GType)gtk_tree_row_reference_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeIternew) {
    GtkTreeIter *cres = new GtkTreeIter;
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_ITER);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeItergetType) {
    GType cres = (GType)gtk_tree_iter_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeIterfree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_ITER);
    gtk_tree_iter_free(
        (GtkTreeIter*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeItercopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_ITER);
    GtkTreeIter* cres = (GtkTreeIter*)gtk_tree_iter_copy(
        (GtkTreeIter*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_ITER);
    RETURN1(res);
} END
DEFINE0(Gtk_TextIternew) {
    GtkTextIter *cres = new GtkTextIter;
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TEXT_ITER);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterorder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gtk_text_iter_order(
        (GtkTextIter*)a0
        ,(GtkTextIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextIterinRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_in_range(
        (GtkTextIter*)a0
        ,(const GtkTextIter*)a1
        ,(const GtkTextIter*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextItercompare) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_compare(
        (GtkTextIter*)a0
        ,(const GtkTextIter*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterequal) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_equal(
        (GtkTextIter*)a0
        ,(const GtkTextIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE6(Gtk_TextIterbackwardSearch) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GtkTextSearchFlags a2 = GtkTextSearchFlagstFromWord(x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_search(
        (GtkTextIter*)a0
        ,(const gchar*)a1
        ,(GtkTextSearchFlags)a2
        ,(GtkTextIter*)a3
        ,(GtkTextIter*)a4
        ,(const GtkTextIter*)a5
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE6(Gtk_TextIterforwardSearch) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GtkTextSearchFlags a2 = GtkTextSearchFlagstFromWord(x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_search(
        (GtkTextIter*)a0
        ,(const gchar*)a1
        ,(GtkTextSearchFlags)a2
        ,(GtkTextIter*)a3
        ,(GtkTextIter*)a4
        ,(const GtkTextIter*)a5
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_TextIterbackwardFindChar) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT (a1, x1);
    DECLARE_OBJECT(a2, x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_find_char(
        (GtkTextIter*)a0
        ,(GtkTextCharPredicate)a1
        ,(gpointer)a2
        ,(const GtkTextIter*)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_TextIterforwardFindChar) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT (a1, x1);
    DECLARE_OBJECT(a2, x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_find_char(
        (GtkTextIter*)a0
        ,(GtkTextCharPredicate)a1
        ,(gpointer)a2
        ,(const GtkTextIter*)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterbackwardToTagToggle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    gboolean cres = (gboolean)gtk_text_iter_backward_to_tag_toggle(
        (GtkTextIter*)a0
        ,(GtkTextTag*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterforwardToTagToggle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    gboolean cres = (gboolean)gtk_text_iter_forward_to_tag_toggle(
        (GtkTextIter*)a0
        ,(GtkTextTag*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextItersetVisibleLineIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gtk_text_iter_set_visible_line_index(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextItersetVisibleLineOffset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gtk_text_iter_set_visible_line_offset(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextIterforwardToLineEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_to_line_end(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterforwardToEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gtk_text_iter_forward_to_end(
        (GtkTextIter*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextItersetLineIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gtk_text_iter_set_line_index(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextItersetLineOffset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gtk_text_iter_set_line_offset(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextItersetLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gtk_text_iter_set_line(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextItersetOffset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gtk_text_iter_set_offset(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextIterbackwardVisibleCursorPositions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_backward_visible_cursor_positions(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterforwardVisibleCursorPositions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_forward_visible_cursor_positions(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterbackwardVisibleCursorPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_visible_cursor_position(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterforwardVisibleCursorPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_visible_cursor_position(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterbackwardCursorPositions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_backward_cursor_positions(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterforwardCursorPositions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_forward_cursor_positions(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterbackwardCursorPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_cursor_position(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterforwardCursorPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_cursor_position(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterbackwardSentenceStarts) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_backward_sentence_starts(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterforwardSentenceEnds) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_forward_sentence_ends(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterbackwardSentenceStart) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_sentence_start(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterforwardSentenceEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_sentence_end(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterbackwardVisibleWordStarts) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_backward_visible_word_starts(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterforwardVisibleWordEnds) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_forward_visible_word_ends(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterbackwardVisibleWordStart) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_visible_word_start(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterforwardVisibleWordEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_visible_word_end(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterbackwardWordStarts) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_backward_word_starts(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterforwardWordEnds) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_forward_word_ends(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterbackwardWordStart) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_word_start(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterforwardWordEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_word_end(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterbackwardLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_backward_lines(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterforwardLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_forward_lines(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterbackwardLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_line(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterforwardLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_line(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterbackwardChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_backward_chars(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterforwardChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_forward_chars(
        (GtkTextIter*)a0
        ,(gint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterbackwardChar) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_backward_char(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterforwardChar) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_forward_char(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterisStart) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_is_start(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterisEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_is_end(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetLanguage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    PangoLanguage* cres = (PangoLanguage*)gtk_text_iter_get_language(
        (GtkTextIter*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, PANGO_TYPE_LANGUAGE);
    RETURN1(res);
} END
DEFINE2(Gtk_TextItergetAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ATTRIBUTES);
    gboolean cres = (gboolean)gtk_text_iter_get_attributes(
        (GtkTextIter*)a0
        ,(GtkTextAttributes*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetBytesInLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_get_bytes_in_line(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetCharsInLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_get_chars_in_line(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterisCursorPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_is_cursor_position(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterendsLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_ends_line(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterstartsLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_starts_line(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterinsideSentence) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_inside_sentence(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterendsSentence) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_ends_sentence(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterstartsSentence) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_starts_sentence(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterinsideWord) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_inside_word(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterendsWord) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_ends_word(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterstartsWord) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_iter_starts_word(
        (GtkTextIter*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextItercanInsert) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_can_insert(
        (GtkTextIter*)a0
        ,(gboolean)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextItereditable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a1, x1);
    gboolean cres = (gboolean)gtk_text_iter_editable(
        (GtkTextIter*)a0
        ,(gboolean)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetTags) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    GSList* cres = (GSList*)gtk_text_iter_get_tags(
        (GtkTextIter*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterhasTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    gboolean cres = (gboolean)gtk_text_iter_has_tag(
        (GtkTextIter*)a0
        ,(GtkTextTag*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextItertogglesTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    gboolean cres = (gboolean)gtk_text_iter_toggles_tag(
        (GtkTextIter*)a0
        ,(GtkTextTag*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterendsTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    gboolean cres = (gboolean)gtk_text_iter_ends_tag(
        (GtkTextIter*)a0
        ,(GtkTextTag*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextIterbeginsTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    gboolean cres = (gboolean)gtk_text_iter_begins_tag(
        (GtkTextIter*)a0
        ,(GtkTextTag*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextItergetToggledTags) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a1, x1);
    GSList* cres = (GSList*)gtk_text_iter_get_toggled_tags(
        (GtkTextIter*)a0
        ,(gboolean)a1
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetChildAnchor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    GtkTextChildAnchor* cres = (GtkTextChildAnchor*)gtk_text_iter_get_child_anchor(
        (GtkTextIter*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetMarks) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    GSList* cres = (GSList*)gtk_text_iter_get_marks(
        (GtkTextIter*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_text_iter_get_pixbuf(
        (GtkTextIter*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextItergetVisibleText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gchar* cres = (gchar*)gtk_text_iter_get_visible_text(
        (GtkTextIter*)a0
        ,(const GtkTextIter*)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_TextItergetVisibleSlice) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gchar* cres = (gchar*)gtk_text_iter_get_visible_slice(
        (GtkTextIter*)a0
        ,(const GtkTextIter*)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_TextItergetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gchar* cres = (gchar*)gtk_text_iter_get_text(
        (GtkTextIter*)a0
        ,(const GtkTextIter*)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_TextItergetSlice) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gchar* cres = (gchar*)gtk_text_iter_get_slice(
        (GtkTextIter*)a0
        ,(const GtkTextIter*)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetChar) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gunichar cres = (gunichar)gtk_text_iter_get_char(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetVisibleLineIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_get_visible_line_index(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetVisibleLineOffset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_get_visible_line_offset(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetLineIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_get_line_index(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetLineOffset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_get_line_offset(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_get_line(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetOffset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gint cres = (gint)gtk_text_iter_get_offset(
        (GtkTextIter*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TextItergetType) {
    GType cres = (GType)gtk_text_iter_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextIterfree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    gtk_text_iter_free(
        (GtkTextIter*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextItercopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    GtkTextIter* cres = (GtkTextIter*)gtk_text_iter_copy(
        (GtkTextIter*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TEXT_ITER);
    RETURN1(res);
} END
DEFINE1(Gtk_TextItergetBuffer) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ITER);
    GtkTextBuffer* cres = (GtkTextBuffer*)gtk_text_iter_get_buffer(
        (GtkTextIter*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_TextAttributesnew) {
    GtkTextAttributes* cres = (GtkTextAttributes*)gtk_text_attributes_new(
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TEXT_ATTRIBUTES);
    RETURN1(res);
} END
#define DOgetFieldAppearance(O) ((O)->appearance)
#define DOsetFieldAppearance(O, V) ((O)->appearance = (V))
#define DOgetFieldBgFullHeight(O) ((O)->bg_full_height)
#define DOsetFieldBgFullHeight(O, V) ((O)->bg_full_height = (V))
#define DOgetFieldDirection(O) ((O)->direction)
#define DOsetFieldDirection(O, V) ((O)->direction = (V))
#define DOgetFieldEditable(O) ((O)->editable)
#define DOsetFieldEditable(O, V) ((O)->editable = (V))
#define DOgetFieldFont(O) ((O)->font)
#define DOsetFieldFont(O, V) ((O)->font = (V))
#define DOgetFieldFontScale(O) ((O)->font_scale)
#define DOsetFieldFontScale(O, V) ((O)->font_scale = (V))
#define DOgetFieldIndent(O) ((O)->indent)
#define DOsetFieldIndent(O, V) ((O)->indent = (V))
#define DOgetFieldInvisible(O) ((O)->invisible)
#define DOsetFieldInvisible(O, V) ((O)->invisible = (V))
#define DOgetFieldJustification(O) ((O)->justification)
#define DOsetFieldJustification(O, V) ((O)->justification = (V))
#define DOgetFieldLanguage(O) ((O)->language)
#define DOsetFieldLanguage(O, V) ((O)->language = (V))
#define DOgetFieldLeftMargin(O) ((O)->left_margin)
#define DOsetFieldLeftMargin(O, V) ((O)->left_margin = (V))
#define DOgetFieldPixelsAboveLines(O) ((O)->pixels_above_lines)
#define DOsetFieldPixelsAboveLines(O, V) ((O)->pixels_above_lines = (V))
#define DOgetFieldPixelsBelowLines(O) ((O)->pixels_below_lines)
#define DOsetFieldPixelsBelowLines(O, V) ((O)->pixels_below_lines = (V))
#define DOgetFieldPixelsInsideWrap(O) ((O)->pixels_inside_wrap)
#define DOsetFieldPixelsInsideWrap(O, V) ((O)->pixels_inside_wrap = (V))
#define DOgetFieldRealized(O) ((O)->realized)
#define DOsetFieldRealized(O, V) ((O)->realized = (V))
#define DOgetFieldRightMargin(O) ((O)->right_margin)
#define DOsetFieldRightMargin(O, V) ((O)->right_margin = (V))
#define DOgetFieldTabs(O) ((O)->tabs)
#define DOsetFieldTabs(O, V) ((O)->tabs = (V))
#define DOgetFieldWrapMode(O) ((O)->wrap_mode)
#define DOsetFieldWrapMode(O, V) ((O)->wrap_mode = (V))
DEFINE0(Gtk_TextAttributesgetType) {
    GType cres = (GType)gtk_text_attributes_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextAttributesreference) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gtk_text_attributes_ref(
        (GtkTextAttributes*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesunref) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gtk_text_attributes_unref(
        (GtkTextAttributes*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextAttributescopyValues) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ATTRIBUTES);
    gtk_text_attributes_copy_values(
        (GtkTextAttributes*)a0
        ,(GtkTextAttributes*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributescopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    GtkTextAttributes* cres = (GtkTextAttributes*)gtk_text_attributes_copy(
        (GtkTextAttributes*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TEXT_ATTRIBUTES);
    RETURN1(res);
} END
DEFINE1(Gtk_TextAttributesgetFieldWrapMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    GtkWrapMode cres = (GtkWrapMode)DOgetFieldWrapMode(
        (GtkTextAttributes*)a0
        );
    word res = GtkWrapModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldWrapMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkWrapMode a1 = GtkWrapModetFromWord(x1);
    DOsetFieldWrapMode(
        (GtkTextAttributes*)a0
        ,(GtkWrapMode)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldTabs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    PangoTabArray* cres = (PangoTabArray*)DOgetFieldTabs(
        (GtkTextAttributes*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, PANGO_TYPE_TAB_ARRAY);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldTabs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_OBJECT_OF_TYPE(a1, x1, PANGO_TYPE_TAB_ARRAY);
    DOsetFieldTabs(
        (GtkTextAttributes*)a0
        ,(PangoTabArray*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldRightMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gint cres = (gint)DOgetFieldRightMargin(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldRightMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldRightMargin(
        (GtkTextAttributes*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldRealized) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    guint cres = (guint)DOgetFieldRealized(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldRealized) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldRealized(
        (GtkTextAttributes*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldPixelsInsideWrap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gint cres = (gint)DOgetFieldPixelsInsideWrap(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldPixelsInsideWrap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldPixelsInsideWrap(
        (GtkTextAttributes*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldPixelsBelowLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gint cres = (gint)DOgetFieldPixelsBelowLines(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldPixelsBelowLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldPixelsBelowLines(
        (GtkTextAttributes*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldPixelsAboveLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gint cres = (gint)DOgetFieldPixelsAboveLines(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldPixelsAboveLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldPixelsAboveLines(
        (GtkTextAttributes*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldLeftMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gint cres = (gint)DOgetFieldLeftMargin(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldLeftMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldLeftMargin(
        (GtkTextAttributes*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldLanguage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    PangoLanguage* cres = (PangoLanguage*)DOgetFieldLanguage(
        (GtkTextAttributes*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, PANGO_TYPE_LANGUAGE);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldLanguage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_OBJECT_OF_TYPE(a1, x1, PANGO_TYPE_LANGUAGE);
    DOsetFieldLanguage(
        (GtkTextAttributes*)a0
        ,(PangoLanguage*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldJustification) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    GtkJustification cres = (GtkJustification)DOgetFieldJustification(
        (GtkTextAttributes*)a0
        );
    word res = GtkJustificationtToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldJustification) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkJustification a1 = GtkJustificationtFromWord(x1);
    DOsetFieldJustification(
        (GtkTextAttributes*)a0
        ,(GtkJustification)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldInvisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    guint cres = (guint)DOgetFieldInvisible(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldInvisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldInvisible(
        (GtkTextAttributes*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldIndent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gint cres = (gint)DOgetFieldIndent(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldIndent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldIndent(
        (GtkTextAttributes*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldFontScale) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    gdouble cres = (gdouble)DOgetFieldFontScale(
        (GtkTextAttributes*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldFontScale) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_CDOUBLE(a1, x1);
    DOsetFieldFontScale(
        (GtkTextAttributes*)a0
        ,(gdouble)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldFont) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    PangoFontDescription* cres = (PangoFontDescription*)DOgetFieldFont(
        (GtkTextAttributes*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, PANGO_TYPE_FONT_DESCRIPTION);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldFont) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_OBJECT_OF_TYPE(a1, x1, PANGO_TYPE_FONT_DESCRIPTION);
    DOsetFieldFont(
        (GtkTextAttributes*)a0
        ,(PangoFontDescription*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldEditable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    guint cres = (guint)DOgetFieldEditable(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldEditable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldEditable(
        (GtkTextAttributes*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldDirection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    GtkTextDirection cres = (GtkTextDirection)DOgetFieldDirection(
        (GtkTextAttributes*)a0
        );
    word res = GtkTextDirectiontToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldDirection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTextDirection a1 = GtkTextDirectiontFromWord(x1);
    DOsetFieldDirection(
        (GtkTextAttributes*)a0
        ,(GtkTextDirection)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldBgFullHeight) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    guint cres = (guint)DOgetFieldBgFullHeight(
        (GtkTextAttributes*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldBgFullHeight) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_INT(a1, x1);
    DOsetFieldBgFullHeight(
        (GtkTextAttributes*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAttributesgetFieldAppearance) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    GtkTextAppearance cres = (GtkTextAppearance)DOgetFieldAppearance(
        (GtkTextAttributes*)a0
        );
    GtkTextAppearance* tmp0 = (GtkTextAppearance*)g_malloc(sizeof(GtkTextAppearance));
memcpy (tmp0, &cres, sizeof(GtkTextAppearance));
word res = OBJECT_TO_WORD (tmp0, TYPE_BOXED);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAttributessetFieldAppearance) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_ATTRIBUTES);
    DECLARE_OBJECT(tmp0, x1);
GtkTextAppearance a1 = *(GtkTextAppearance*)tmp0;
    DOsetFieldAppearance(
        (GtkTextAttributes*)a0
        ,(GtkTextAppearance)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldAppearance
#undef DOsetFieldAppearance
#undef DOgetFieldBgFullHeight
#undef DOsetFieldBgFullHeight
#undef DOgetFieldDirection
#undef DOsetFieldDirection
#undef DOgetFieldEditable
#undef DOsetFieldEditable
#undef DOgetFieldFont
#undef DOsetFieldFont
#undef DOgetFieldFontScale
#undef DOsetFieldFontScale
#undef DOgetFieldIndent
#undef DOsetFieldIndent
#undef DOgetFieldInvisible
#undef DOsetFieldInvisible
#undef DOgetFieldJustification
#undef DOsetFieldJustification
#undef DOgetFieldLanguage
#undef DOsetFieldLanguage
#undef DOgetFieldLeftMargin
#undef DOsetFieldLeftMargin
#undef DOgetFieldPixelsAboveLines
#undef DOsetFieldPixelsAboveLines
#undef DOgetFieldPixelsBelowLines
#undef DOsetFieldPixelsBelowLines
#undef DOgetFieldPixelsInsideWrap
#undef DOsetFieldPixelsInsideWrap
#undef DOgetFieldRealized
#undef DOsetFieldRealized
#undef DOgetFieldRightMargin
#undef DOsetFieldRightMargin
#undef DOgetFieldTabs
#undef DOsetFieldTabs
#undef DOgetFieldWrapMode
#undef DOsetFieldWrapMode
GtkTextAppearance* MK_GtkTextAppearanceNew (
        GdkColor bg_color
        , GdkDrawable* bg_stipple
        , guint draw_bg
        , GdkColor fg_color
        , GdkDrawable* fg_stipple
        , gint rise
        , guint strikethrough
        , guint underline
        ) {
    GtkTextAppearance* res_ = new GtkTextAppearance;
    res_->bg_color = bg_color;
    res_->bg_stipple = bg_stipple;
    res_->draw_bg = draw_bg;
    res_->fg_color = fg_color;
    res_->fg_stipple = fg_stipple;
    res_->rise = rise;
    res_->strikethrough = strikethrough;
    res_->underline = underline;
    return res_;
}
DEFINE8(Gtk_TextAppearancenew) {
    DECLARE_OBJECT(tmp0, x0);
GdkColor a0 = *(GdkColor*)tmp0;
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_DRAWABLE);
    DECLARE_INT(a2, x2);
    DECLARE_OBJECT(tmp1, x3);
GdkColor a3 = *(GdkColor*)tmp1;
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_DRAWABLE);
    DECLARE_INT(a5, x5);
    DECLARE_INT(a6, x6);
    DECLARE_INT(a7, x7);
    GtkTextAppearance* cres = (GtkTextAppearance*)MK_GtkTextAppearanceNew(
        (GdkColor)a0
        ,(GdkDrawable*)a1
        ,(guint)a2
        ,(GdkColor)a3
        ,(GdkDrawable*)a4
        ,(gint)a5
        ,(guint)a6
        ,(guint)a7
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED);
    RETURN1(res);
} END
#define DOgetFieldBgColor(O) ((O)->bg_color)
#define DOsetFieldBgColor(O, V) ((O)->bg_color = (V))
#define DOgetFieldBgStipple(O) ((O)->bg_stipple)
#define DOsetFieldBgStipple(O, V) ((O)->bg_stipple = (V))
#define DOgetFieldDrawBg(O) ((O)->draw_bg)
#define DOsetFieldDrawBg(O, V) ((O)->draw_bg = (V))
#define DOgetFieldFgColor(O) ((O)->fg_color)
#define DOsetFieldFgColor(O, V) ((O)->fg_color = (V))
#define DOgetFieldFgStipple(O) ((O)->fg_stipple)
#define DOsetFieldFgStipple(O, V) ((O)->fg_stipple = (V))
#define DOgetFieldRise(O) ((O)->rise)
#define DOsetFieldRise(O, V) ((O)->rise = (V))
#define DOgetFieldStrikethrough(O) ((O)->strikethrough)
#define DOsetFieldStrikethrough(O, V) ((O)->strikethrough = (V))
#define DOgetFieldUnderline(O) ((O)->underline)
#define DOsetFieldUnderline(O, V) ((O)->underline = (V))
DEFINE1(Gtk_TextAppearancegetFieldUnderline) {
    DECLARE_OBJECT(a0, x0);
    guint cres = (guint)DOgetFieldUnderline(
        (GtkTextAppearance*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAppearancesetFieldUnderline) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DOsetFieldUnderline(
        (GtkTextAppearance*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAppearancegetFieldStrikethrough) {
    DECLARE_OBJECT(a0, x0);
    guint cres = (guint)DOgetFieldStrikethrough(
        (GtkTextAppearance*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAppearancesetFieldStrikethrough) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DOsetFieldStrikethrough(
        (GtkTextAppearance*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAppearancegetFieldRise) {
    DECLARE_OBJECT(a0, x0);
    gint cres = (gint)DOgetFieldRise(
        (GtkTextAppearance*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAppearancesetFieldRise) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DOsetFieldRise(
        (GtkTextAppearance*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAppearancegetFieldFgStipple) {
    DECLARE_OBJECT(a0, x0);
    GdkDrawable* cres = (GdkDrawable*)DOgetFieldFgStipple(
        (GtkTextAppearance*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAppearancesetFieldFgStipple) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_DRAWABLE);
    DOsetFieldFgStipple(
        (GtkTextAppearance*)a0
        ,(GdkDrawable*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAppearancegetFieldFgColor) {
    DECLARE_OBJECT(a0, x0);
    GdkColor cres = (GdkColor)DOgetFieldFgColor(
        (GtkTextAppearance*)a0
        );
    GdkColor* tmp0 = (GdkColor*)g_malloc(sizeof(GdkColor));
memcpy (tmp0, &cres, sizeof(GdkColor));
word res = OBJECT_TO_WORD (tmp0, TYPE_BOXED, GDK_TYPE_COLOR);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAppearancesetFieldFgColor) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_OBJECT(tmp0, x1);
GdkColor a1 = *(GdkColor*)tmp0;
    DOsetFieldFgColor(
        (GtkTextAppearance*)a0
        ,(GdkColor)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAppearancegetFieldDrawBg) {
    DECLARE_OBJECT(a0, x0);
    guint cres = (guint)DOgetFieldDrawBg(
        (GtkTextAppearance*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAppearancesetFieldDrawBg) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DOsetFieldDrawBg(
        (GtkTextAppearance*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAppearancegetFieldBgStipple) {
    DECLARE_OBJECT(a0, x0);
    GdkDrawable* cres = (GdkDrawable*)DOgetFieldBgStipple(
        (GtkTextAppearance*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAppearancesetFieldBgStipple) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_DRAWABLE);
    DOsetFieldBgStipple(
        (GtkTextAppearance*)a0
        ,(GdkDrawable*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextAppearancegetFieldBgColor) {
    DECLARE_OBJECT(a0, x0);
    GdkColor cres = (GdkColor)DOgetFieldBgColor(
        (GtkTextAppearance*)a0
        );
    GdkColor* tmp0 = (GdkColor*)g_malloc(sizeof(GdkColor));
memcpy (tmp0, &cres, sizeof(GdkColor));
word res = OBJECT_TO_WORD (tmp0, TYPE_BOXED, GDK_TYPE_COLOR);
    RETURN1(res);
} END
DEFINE2(Gtk_TextAppearancesetFieldBgColor) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_OBJECT(tmp0, x1);
GdkColor a1 = *(GdkColor*)tmp0;
    DOsetFieldBgColor(
        (GtkTextAppearance*)a0
        ,(GdkColor)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldBgColor
#undef DOsetFieldBgColor
#undef DOgetFieldBgStipple
#undef DOsetFieldBgStipple
#undef DOgetFieldDrawBg
#undef DOsetFieldDrawBg
#undef DOgetFieldFgColor
#undef DOsetFieldFgColor
#undef DOgetFieldFgStipple
#undef DOsetFieldFgStipple
#undef DOgetFieldRise
#undef DOsetFieldRise
#undef DOgetFieldStrikethrough
#undef DOsetFieldStrikethrough
#undef DOgetFieldUnderline
#undef DOsetFieldUnderline
GtkSelectionData* MK_GtkSelectionDataNew (
        guchar* data
        , gint format
        , GdkAtom selection
        , GdkAtom target
        , GdkAtom type
        ) {
    GtkSelectionData* res_ = new GtkSelectionData;
    res_->data = data;
    res_->format = format;
    res_->selection = selection;
    res_->target = target;
    res_->type = type;
    return res_;
}
DEFINE5(Gtk_SelectionDatanew) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_WORD32(tmp0, x2); GdkAtom a2 = (GdkAtom)tmp0;
    DECLARE_WORD32(tmp1, x3); GdkAtom a3 = (GdkAtom)tmp1;
    DECLARE_WORD32(tmp2, x4); GdkAtom a4 = (GdkAtom)tmp2;
    GtkSelectionData* cres = (GtkSelectionData*)MK_GtkSelectionDataNew(
        (guchar*)a0
        ,(gint)a1
        ,(GdkAtom)a2
        ,(GdkAtom)a3
        ,(GdkAtom)a4
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_SELECTION_DATA);
    RETURN1(res);
} END
#define DOgetFieldData(O) ((O)->data)
#define DOsetFieldData(O, V) ((O)->data = (V))
#define DOgetFieldFormat(O) ((O)->format)
#define DOsetFieldFormat(O, V) ((O)->format = (V))
#define DOgetFieldSelection(O) ((O)->selection)
#define DOsetFieldSelection(O, V) ((O)->selection = (V))
#define DOgetFieldTarget(O) ((O)->target)
#define DOsetFieldTarget(O, V) ((O)->target = (V))
#define DOgetFieldType(O) ((O)->type)
#define DOsetFieldType(O, V) ((O)->type = (V))
DEFINE1(Gtk_SelectionDatatreeGetRowDragData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    GtkTreeModel* tmp0 = 0; GtkTreeModel** a1 = &tmp0;
    GtkTreePath* tmp1 = 0; GtkTreePath** a2 = &tmp1;
    gboolean cres = (gboolean)gtk_tree_get_row_drag_data(
        (GtkSelectionData*)a0
        ,(GtkTreeModel**)a1
        ,(GtkTreePath**)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r1 = OBJECT_TO_WORD(*a1,TYPE_GTK_OBJECT);
    word r2 = OBJECT_TO_WORD(*a2, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN3(res,r1,r2);
} END
DEFINE3(Gtk_SelectionDatatreeSetRowDragData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_tree_set_row_drag_data(
        (GtkSelectionData*)a0
        ,(GtkTreeModel*)a1
        ,(GtkTreePath*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SelectionDatatargetsIncludeImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_BOOL(a1, x1);
    gboolean cres = (gboolean)gtk_selection_data_targets_include_image(
        (GtkSelectionData*)a0
        ,(gboolean)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_SelectionDatagetUris) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    gchar** cres = (gchar**)gtk_selection_data_get_uris(
        (GtkSelectionData*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SelectionDatasetUris) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_ZERO_TERMINATED_ARRAY(a1, x1, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    gboolean cres = (gboolean)gtk_selection_data_set_uris(
        (GtkSelectionData*)a0
        ,(gchar**)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_SelectionDatagetPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_selection_data_get_pixbuf(
        (GtkSelectionData*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_SelectionDatasetPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_PIXBUF);
    gboolean cres = (gboolean)gtk_selection_data_set_pixbuf(
        (GtkSelectionData*)a0
        ,(GdkPixbuf*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_SelectionDatafree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    gtk_selection_data_free(
        (GtkSelectionData*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SelectionDatacopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    GtkSelectionData* cres = (GtkSelectionData*)gtk_selection_data_copy(
        (GtkSelectionData*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_SELECTION_DATA);
    RETURN1(res);
} END
DEFINE0(Gtk_SelectionDatagetType) {
    GType cres = (GType)gtk_selection_data_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_SelectionDatatargetsIncludeText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    gboolean cres = (gboolean)gtk_selection_data_targets_include_text(
        (GtkSelectionData*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_SelectionDatagetTargets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_OBJECT (a1, x1);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    gboolean cres = (gboolean)gtk_selection_data_get_targets(
        (GtkSelectionData*)a0
        ,(GdkAtom**)a1
        ,(gint*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r2 = Store::IntToWord(*a2);
    RETURN2(res,r2);
} END
DEFINE1(Gtk_SelectionDatagetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    guchar* cres = (guchar*)gtk_selection_data_get_text(
        (GtkSelectionData*)a0
        );
    word res = String::New (cres != 0 ? ((const char*)cres) : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE3(Gtk_SelectionDatasetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    gboolean cres = (gboolean)gtk_selection_data_set_text(
        (GtkSelectionData*)a0
        ,(const gchar*)a1
        ,(gint)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE5(Gtk_SelectionDataset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    DECLARE_INT(a2, x2);
    DECLARE_CSTRING(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_selection_data_set(
        (GtkSelectionData*)a0
        ,(GdkAtom)a1
        ,(gint)a2
        ,(const guchar*)a3
        ,(gint)a4
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SelectionDatagetFieldType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    GdkAtom cres = (GdkAtom)DOgetFieldType(
        (GtkSelectionData*)a0
        );
    word res = Word32ToWord ((u_int)cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SelectionDatasetFieldType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    DOsetFieldType(
        (GtkSelectionData*)a0
        ,(GdkAtom)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SelectionDatagetFieldTarget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    GdkAtom cres = (GdkAtom)DOgetFieldTarget(
        (GtkSelectionData*)a0
        );
    word res = Word32ToWord ((u_int)cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SelectionDatasetFieldTarget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    DOsetFieldTarget(
        (GtkSelectionData*)a0
        ,(GdkAtom)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SelectionDatagetFieldSelection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    GdkAtom cres = (GdkAtom)DOgetFieldSelection(
        (GtkSelectionData*)a0
        );
    word res = Word32ToWord ((u_int)cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SelectionDatasetFieldSelection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    DOsetFieldSelection(
        (GtkSelectionData*)a0
        ,(GdkAtom)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SelectionDatagetFieldFormat) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    gint cres = (gint)DOgetFieldFormat(
        (GtkSelectionData*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SelectionDatasetFieldFormat) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_INT(a1, x1);
    DOsetFieldFormat(
        (GtkSelectionData*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SelectionDatagetFieldData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    guchar* cres = (guchar*)DOgetFieldData(
        (GtkSelectionData*)a0
        );
    word res = String::New (cres != 0 ? ((const char*)cres) : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_SelectionDatasetFieldData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SELECTION_DATA);
    DECLARE_CSTRING(a1, x1);
    DOsetFieldData(
        (GtkSelectionData*)a0
        ,(guchar*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldData
#undef DOsetFieldData
#undef DOgetFieldFormat
#undef DOsetFieldFormat
#undef DOgetFieldSelection
#undef DOsetFieldSelection
#undef DOgetFieldTarget
#undef DOsetFieldTarget
#undef DOgetFieldType
#undef DOsetFieldType
GtkRequisition* MK_GtkRequisitionNew (
        gint height
        , gint width
        ) {
    GtkRequisition* res_ = new GtkRequisition;
    res_->height = height;
    res_->width = width;
    return res_;
}
DEFINE2(Gtk_Requisitionnew) {
    DECLARE_INT(a0, x0);
    DECLARE_INT(a1, x1);
    GtkRequisition* cres = (GtkRequisition*)MK_GtkRequisitionNew(
        (gint)a0
        ,(gint)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_REQUISITION);
    RETURN1(res);
} END
#define DOgetFieldHeight(O) ((O)->height)
#define DOsetFieldHeight(O, V) ((O)->height = (V))
#define DOgetFieldWidth(O) ((O)->width)
#define DOsetFieldWidth(O, V) ((O)->width = (V))
DEFINE1(Gtk_Requisitionfree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_REQUISITION);
    gtk_requisition_free(
        (GtkRequisition*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Requisitioncopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_REQUISITION);
    GtkRequisition* cres = (GtkRequisition*)gtk_requisition_copy(
        (GtkRequisition*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_REQUISITION);
    RETURN1(res);
} END
DEFINE0(Gtk_RequisitiongetType) {
    GType cres = (GType)gtk_requisition_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_RequisitiongetFieldWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_REQUISITION);
    gint cres = (gint)DOgetFieldWidth(
        (GtkRequisition*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RequisitionsetFieldWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_REQUISITION);
    DECLARE_INT(a1, x1);
    DOsetFieldWidth(
        (GtkRequisition*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RequisitiongetFieldHeight) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_REQUISITION);
    gint cres = (gint)DOgetFieldHeight(
        (GtkRequisition*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RequisitionsetFieldHeight) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_REQUISITION);
    DECLARE_INT(a1, x1);
    DOsetFieldHeight(
        (GtkRequisition*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldHeight
#undef DOsetFieldHeight
#undef DOgetFieldWidth
#undef DOsetFieldWidth
DEFINE0(Gtk_IconSourcenew) {
    GtkIconSource* cres = (GtkIconSource*)gtk_icon_source_new(
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SOURCE);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSourcegetSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    GtkIconSize cres = (GtkIconSize)gtk_icon_source_get_size(
        (GtkIconSource*)a0
        );
    word res = GtkIconSizetToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSourcegetState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    GtkStateType cres = (GtkStateType)gtk_icon_source_get_state(
        (GtkIconSource*)a0
        );
    word res = GtkStateTypetToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSourcegetDirection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    GtkTextDirection cres = (GtkTextDirection)gtk_icon_source_get_direction(
        (GtkIconSource*)a0
        );
    word res = GtkTextDirectiontToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconSourcesetSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkIconSize a1 = GtkIconSizetFromWord(x1);
    gtk_icon_source_set_size(
        (GtkIconSource*)a0
        ,(GtkIconSize)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconSourcesetState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkStateType a1 = GtkStateTypetFromWord(x1);
    gtk_icon_source_set_state(
        (GtkIconSource*)a0
        ,(GtkStateType)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconSourcesetDirection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTextDirection a1 = GtkTextDirectiontFromWord(x1);
    gtk_icon_source_set_direction(
        (GtkIconSource*)a0
        ,(GtkTextDirection)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconSourcegetDirectionWildcarded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    gboolean cres = (gboolean)gtk_icon_source_get_direction_wildcarded(
        (GtkIconSource*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSourcegetStateWildcarded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    gboolean cres = (gboolean)gtk_icon_source_get_state_wildcarded(
        (GtkIconSource*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSourcegetSizeWildcarded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    gboolean cres = (gboolean)gtk_icon_source_get_size_wildcarded(
        (GtkIconSource*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconSourcesetSizeWildcarded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    DECLARE_BOOL(a1, x1);
    gtk_icon_source_set_size_wildcarded(
        (GtkIconSource*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconSourcesetStateWildcarded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    DECLARE_BOOL(a1, x1);
    gtk_icon_source_set_state_wildcarded(
        (GtkIconSource*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconSourcesetDirectionWildcarded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    DECLARE_BOOL(a1, x1);
    gtk_icon_source_set_direction_wildcarded(
        (GtkIconSource*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconSourcegetPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_icon_source_get_pixbuf(
        (GtkIconSource*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSourcegetIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    const gchar* cres = (const gchar*)gtk_icon_source_get_icon_name(
        (GtkIconSource*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_IconSourcegetFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    const gchar* cres = (const gchar*)gtk_icon_source_get_filename(
        (GtkIconSource*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_IconSourcesetPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_PIXBUF);
    gtk_icon_source_set_pixbuf(
        (GtkIconSource*)a0
        ,(GdkPixbuf*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconSourcesetIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    DECLARE_CSTRING(a1, x1);
    gtk_icon_source_set_icon_name(
        (GtkIconSource*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconSourcesetFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    DECLARE_CSTRING(a1, x1);
    gtk_icon_source_set_filename(
        (GtkIconSource*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconSourcefree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    gtk_icon_source_free(
        (GtkIconSource*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconSourcecopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SOURCE);
    GtkIconSource* cres = (GtkIconSource*)gtk_icon_source_copy(
        (GtkIconSource*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SOURCE);
    RETURN1(res);
} END
DEFINE0(Gtk_IconSourcegetType) {
    GType cres = (GType)gtk_icon_source_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSetnewFromPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_PIXBUF);
    GtkIconSet* cres = (GtkIconSet*)gtk_icon_set_new_from_pixbuf(
        (GdkPixbuf*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SET);
    RETURN1(res);
} END
DEFINE3(Gtk_IconSetgetSizes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SET);
    DECLARE_OBJECT (a1, x1);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    gtk_icon_set_get_sizes(
        (GtkIconSet*)a0
        ,(GtkIconSize**)a1
        ,(gint*)a2
        );
    word r2 = Store::IntToWord(*a2);
    RETURN1(r2);
} END
DEFINE2(Gtk_IconSetaddSource) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ICON_SOURCE);
    gtk_icon_set_add_source(
        (GtkIconSet*)a0
        ,(const GtkIconSource*)a1
        );
    RETURN_UNIT;
} END
DEFINE7(Gtk_IconSetrenderIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_STYLE);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkTextDirection a2 = GtkTextDirectiontFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkStateType a3 = GtkStateTypetFromWord(x3);
    if (Store::WordToInt(x4) == INVALID_INT) {REQUEST(x4);}
GtkIconSize a4 = GtkIconSizetFromWord(x4);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_icon_set_render_icon(
        (GtkIconSet*)a0
        ,(GtkStyle*)a1
        ,(GtkTextDirection)a2
        ,(GtkStateType)a3
        ,(GtkIconSize)a4
        ,(GtkWidget*)a5
        ,(const char*)a6
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSetcopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SET);
    GtkIconSet* cres = (GtkIconSet*)gtk_icon_set_copy(
        (GtkIconSet*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SET);
    RETURN1(res);
} END
DEFINE1(Gtk_IconSetunref) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SET);
    gtk_icon_set_unref(
        (GtkIconSet*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconSetreference) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SET);
    GtkIconSet* cres = (GtkIconSet*)gtk_icon_set_ref(
        (GtkIconSet*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SET);
    RETURN1(res);
} END
DEFINE0(Gtk_IconSetnew) {
    GtkIconSet* cres = (GtkIconSet*)gtk_icon_set_new(
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SET);
    RETURN1(res);
} END
DEFINE0(Gtk_IconSetgetType) {
    GType cres = (GType)gtk_icon_set_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_IconInfogetDisplayName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    const gchar* cres = (const gchar*)gtk_icon_info_get_display_name(
        (GtkIconInfo*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_IconInfogetAttachPoints) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    GdkPoint* tmp0 = 0; GdkPoint** a1 = &tmp0;
    DECLARE_INT_AS(gint, tmp1, x1);
               gint* a2 = (gint*)&tmp1;
    gboolean cres = (gboolean)gtk_icon_info_get_attach_points(
        (GtkIconInfo*)a0
        ,(GdkPoint**)a1
        ,(gint*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r1 = OBJECT_TO_WORD(*a1, TYPE_BOXED);
    word r2 = Store::IntToWord(*a2);
    RETURN3(res,r1,r2);
} END
DEFINE2(Gtk_IconInfogetEmbeddedRect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_RECTANGLE);
    gboolean cres = (gboolean)gtk_icon_info_get_embedded_rect(
        (GtkIconInfo*)a0
        ,(GdkRectangle*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconInfosetRawCoordinates) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    DECLARE_BOOL(a1, x1);
    gtk_icon_info_set_raw_coordinates(
        (GtkIconInfo*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconInfoloadIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    GError *tmp0 = 0; GError **a1 = &tmp0;
    GdkPixbuf* cres = (GdkPixbuf*)gtk_icon_info_load_icon(
        (GtkIconInfo*)a0
        ,a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    if ((*a1) != NULL) {char message[strlen((*a1)->message)];g_error_free(*a1);RAISE_CORE_ERROR(message);}
    RETURN1(res);
} END
DEFINE1(Gtk_IconInfogetBuiltinPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_icon_info_get_builtin_pixbuf(
        (GtkIconInfo*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_IconInfogetFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    const gchar* cres = (const gchar*)gtk_icon_info_get_filename(
        (GtkIconInfo*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_IconInfogetBaseSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    gint cres = (gint)gtk_icon_info_get_base_size(
        (GtkIconInfo*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_IconInfofree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    gtk_icon_info_free(
        (GtkIconInfo*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconInfocopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_INFO);
    GtkIconInfo* cres = (GtkIconInfo*)gtk_icon_info_copy(
        (GtkIconInfo*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_INFO);
    RETURN1(res);
} END
DEFINE0(Gtk_IconInfogetType) {
    GType cres = (GType)gtk_icon_info_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_Borderfree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BORDER);
    gtk_border_free(
        (GtkBorder*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Bordercopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BORDER);
    GtkBorder* cres = (GtkBorder*)gtk_border_copy(
        (GtkBorder*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_BORDER);
    RETURN1(res);
} END
DEFINE0(Gtk_BordergetType) {
    GType cres = (GType)gtk_border_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
GtkTargetEntry* MK_GtkTargetEntryNew (
        guint flags
        , guint info
        , gchar* target
        ) {
    GtkTargetEntry* res_ = new GtkTargetEntry;
    res_->flags = flags;
    res_->info = info;
    res_->target = target;
    return res_;
}
DEFINE3(Gtk_TargetEntrynew) {
    DECLARE_INT(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_CSTRING(a2, x2);
    GtkTargetEntry* cres = (GtkTargetEntry*)MK_GtkTargetEntryNew(
        (guint)a0
        ,(guint)a1
        ,(gchar*)a2
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED);
    RETURN1(res);
} END
#define DOgetFieldFlags(O) ((O)->flags)
#define DOsetFieldFlags(O, V) ((O)->flags = (V))
#define DOgetFieldInfo(O) ((O)->info)
#define DOsetFieldInfo(O, V) ((O)->info = (V))
#define DOgetFieldTarget(O) ((O)->target)
#define DOsetFieldTarget(O, V) ((O)->target = (V))
DEFINE1(Gtk_TargetEntrygetFieldTarget) {
    DECLARE_OBJECT(a0, x0);
    gchar* cres = (gchar*)DOgetFieldTarget(
        (GtkTargetEntry*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_TargetEntrysetFieldTarget) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_CSTRING(a1, x1);
    DOsetFieldTarget(
        (GtkTargetEntry*)a0
        ,(gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TargetEntrygetFieldInfo) {
    DECLARE_OBJECT(a0, x0);
    guint cres = (guint)DOgetFieldInfo(
        (GtkTargetEntry*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TargetEntrysetFieldInfo) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DOsetFieldInfo(
        (GtkTargetEntry*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TargetEntrygetFieldFlags) {
    DECLARE_OBJECT(a0, x0);
    guint cres = (guint)DOgetFieldFlags(
        (GtkTargetEntry*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TargetEntrysetFieldFlags) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DOsetFieldFlags(
        (GtkTargetEntry*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldFlags
#undef DOsetFieldFlags
#undef DOgetFieldInfo
#undef DOsetFieldInfo
#undef DOgetFieldTarget
#undef DOsetFieldTarget
DEFINE0(Gtk_TreePathnew) {
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_path_new(
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE2(Gtk_TreePathisDescendant) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_tree_path_is_descendant(
        (GtkTreePath*)a0
        ,(GtkTreePath*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreePathisAncestor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_tree_path_is_ancestor(
        (GtkTreePath*)a0
        ,(GtkTreePath*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreePathdown) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    gtk_tree_path_down(
        (GtkTreePath*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreePathup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    gint cres = (gint)gtk_tree_path_up(
        (GtkTreePath*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreePathprev) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    gint cres = (gint)gtk_tree_path_prev(
        (GtkTreePath*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreePathnext) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    gtk_tree_path_next(
        (GtkTreePath*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreePathcompare) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gint cres = (gint)gtk_tree_path_compare(
        (GtkTreePath*)a0
        ,(const GtkTreePath*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreePathcopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_path_copy(
        (GtkTreePath*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE1(Gtk_TreePathfree) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    gtk_tree_path_free(
        (GtkTreePath*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreePathgetDepth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    gint cres = (gint)gtk_tree_path_get_depth(
        (GtkTreePath*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreePathprependIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    DECLARE_INT(a1, x1);
    gtk_tree_path_prepend_index(
        (GtkTreePath*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreePathappendIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    DECLARE_INT(a1, x1);
    gtk_tree_path_append_index(
        (GtkTreePath*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TreePathnewFirst) {
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_path_new_first(
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE1(Gtk_TreePathtoString) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_PATH);
    gchar* cres = (gchar*)gtk_tree_path_to_string(
        (GtkTreePath*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_TreePathnewFromIndices) {
    DECLARE_INT(a0, x0);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_path_new_from_indices(
        (gint)a0
        , NULL
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE1(Gtk_TreePathnewFromString) {
    DECLARE_CSTRING(a0, x0);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_path_new_from_string(
        (gchar*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE1(Gtk_BindingSetfind) {
    DECLARE_CSTRING(a0, x0);
    GtkBindingSet* cres = (GtkBindingSet*)gtk_binding_set_find(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED);
    RETURN1(res);
} END
DEFINE1(Gtk_BindingSetnew) {
    DECLARE_CSTRING(a0, x0);
    GtkBindingSet* cres = (GtkBindingSet*)gtk_binding_set_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED);
    RETURN1(res);
} END
DEFINE4(Gtk_BindingSetaddPath) {
    DECLARE_OBJECT(a0, x0);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPathType a1 = GtkPathTypetFromWord(x1);
    DECLARE_CSTRING(a2, x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkPathPriorityType a3 = GtkPathPriorityTypetFromWord(x3);
    gtk_binding_set_add_path(
        (GtkBindingSet*)a0
        ,(GtkPathType)a1
        ,(const gchar*)a2
        ,(GtkPathPriorityType)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_BindingSetactivate) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_OBJECT);
    gboolean cres = (gboolean)gtk_binding_set_activate(
        (GtkBindingSet*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        ,(GtkObject*)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_BindingSetbyClass) {
    DECLARE_OBJECT(a0, x0);
    GtkBindingSet* cres = (GtkBindingSet*)gtk_binding_set_by_class(
        (gpointer)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED);
    RETURN1(res);
} END
DEFINE0(Gtk_WindowGroupnew) {
    GtkWindowGroup* cres = (GtkWindowGroup*)gtk_window_group_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowGroupremoveWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW_GROUP);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WINDOW);
    gtk_window_group_remove_window(
        (GtkWindowGroup*)a0
        ,(GtkWindow*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowGroupaddWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW_GROUP);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WINDOW);
    gtk_window_group_add_window(
        (GtkWindowGroup*)a0
        ,(GtkWindow*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WindowGroupgetType) {
    GType cres = (GType)gtk_window_group_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_Windownew) {
    if (Store::WordToInt(x0) == INVALID_INT) {REQUEST(x0);}
GtkWindowType a0 = GtkWindowTypetFromWord(x0);
    GtkWidget* cres = (GtkWidget*)gtk_window_new(
        (GtkWindowType)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldAllowGrow(O) ((O)->allow_grow)
#define DOsetFieldAllowGrow(O, V) ((O)->allow_grow = (V))
#define DOgetFieldAllowShrink(O) ((O)->allow_shrink)
#define DOsetFieldAllowShrink(O, V) ((O)->allow_shrink = (V))
#define DOgetFieldConfigureNotifyReceived(O) ((O)->configure_notify_received)
#define DOsetFieldConfigureNotifyReceived(O, V) ((O)->configure_notify_received = (V))
#define DOgetFieldConfigureRequestCount(O) ((O)->configure_request_count)
#define DOsetFieldConfigureRequestCount(O, V) ((O)->configure_request_count = (V))
#define DOgetFieldDecorated(O) ((O)->decorated)
#define DOsetFieldDecorated(O, V) ((O)->decorated = (V))
#define DOgetFieldDefaultWidget(O) ((O)->default_widget)
#define DOsetFieldDefaultWidget(O, V) ((O)->default_widget = (V))
#define DOgetFieldDestroyWithParent(O) ((O)->destroy_with_parent)
#define DOsetFieldDestroyWithParent(O, V) ((O)->destroy_with_parent = (V))
#define DOgetFieldFocusWidget(O) ((O)->focus_widget)
#define DOsetFieldFocusWidget(O, V) ((O)->focus_widget = (V))
#define DOgetFieldFrame(O) ((O)->frame)
#define DOsetFieldFrame(O, V) ((O)->frame = (V))
#define DOgetFieldFrameBottom(O) ((O)->frame_bottom)
#define DOsetFieldFrameBottom(O, V) ((O)->frame_bottom = (V))
#define DOgetFieldFrameLeft(O) ((O)->frame_left)
#define DOsetFieldFrameLeft(O, V) ((O)->frame_left = (V))
#define DOgetFieldFrameRight(O) ((O)->frame_right)
#define DOsetFieldFrameRight(O, V) ((O)->frame_right = (V))
#define DOgetFieldFrameTop(O) ((O)->frame_top)
#define DOsetFieldFrameTop(O, V) ((O)->frame_top = (V))
#define DOgetFieldGravity(O) ((O)->gravity)
#define DOsetFieldGravity(O, V) ((O)->gravity = (V))
#define DOgetFieldGroup(O) ((O)->group)
#define DOsetFieldGroup(O, V) ((O)->group = (V))
#define DOgetFieldHasFocus(O) ((O)->has_focus)
#define DOsetFieldHasFocus(O, V) ((O)->has_focus = (V))
#define DOgetFieldHasFrame(O) ((O)->has_frame)
#define DOsetFieldHasFrame(O, V) ((O)->has_frame = (V))
#define DOgetFieldHasUserRefCount(O) ((O)->has_user_ref_count)
#define DOsetFieldHasUserRefCount(O, V) ((O)->has_user_ref_count = (V))
#define DOgetFieldIconifyInitially(O) ((O)->iconify_initially)
#define DOsetFieldIconifyInitially(O, V) ((O)->iconify_initially = (V))
#define DOgetFieldKeysChangedHandler(O) ((O)->keys_changed_handler)
#define DOsetFieldKeysChangedHandler(O, V) ((O)->keys_changed_handler = (V))
#define DOgetFieldMaximizeInitially(O) ((O)->maximize_initially)
#define DOsetFieldMaximizeInitially(O, V) ((O)->maximize_initially = (V))
#define DOgetFieldMnemonicModifier(O) ((O)->mnemonic_modifier)
#define DOsetFieldMnemonicModifier(O, V) ((O)->mnemonic_modifier = (V))
#define DOgetFieldModal(O) ((O)->modal)
#define DOsetFieldModal(O, V) ((O)->modal = (V))
#define DOgetFieldNeedDefaultPosition(O) ((O)->need_default_position)
#define DOsetFieldNeedDefaultPosition(O, V) ((O)->need_default_position = (V))
#define DOgetFieldNeedDefaultSize(O) ((O)->need_default_size)
#define DOsetFieldNeedDefaultSize(O, V) ((O)->need_default_size = (V))
#define DOgetFieldPosition(O) ((O)->position)
#define DOsetFieldPosition(O, V) ((O)->position = (V))
#define DOgetFieldStickInitially(O) ((O)->stick_initially)
#define DOsetFieldStickInitially(O, V) ((O)->stick_initially = (V))
#define DOgetFieldTitle(O) ((O)->title)
#define DOsetFieldTitle(O, V) ((O)->title = (V))
#define DOgetFieldTransientParent(O) ((O)->transient_parent)
#define DOsetFieldTransientParent(O, V) ((O)->transient_parent = (V))
#define DOgetFieldType(O) ((O)->type)
#define DOsetFieldType(O, V) ((O)->type = (V))
#define DOgetFieldTypeHint(O) ((O)->type_hint)
#define DOsetFieldTypeHint(O, V) ((O)->type_hint = (V))
#define DOgetFieldWmRole(O) ((O)->wm_role)
#define DOsetFieldWmRole(O, V) ((O)->wm_role = (V))
#define DOgetFieldWmclassClass(O) ((O)->wmclass_class)
#define DOsetFieldWmclassClass(O, V) ((O)->wmclass_class = (V))
#define DOgetFieldWmclassName(O) ((O)->wmclass_name)
#define DOsetFieldWmclassName(O, V) ((O)->wmclass_name = (V))
DEFINE1(Gtk_WindowsetDefaultIconName) {
    DECLARE_CSTRING(a0, x0);
    gtk_window_set_default_icon_name(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    const gchar* cres = (const gchar*)gtk_window_get_icon_name(
        (GtkWindow*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    gtk_window_set_icon_name(
        (GtkWindow*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFocusOnMap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_focus_on_map(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFocusOnMap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_focus_on_map(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowaddEmbeddedXid) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    gtk_window_add_embedded_xid(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowremoveEmbeddedXid) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    gtk_window_remove_embedded_xid(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowreshowWithInitialSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_reshow_with_initial_size(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowparseGeometry) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_window_parse_geometry(
        (GtkWindow*)a0
        ,(const gchar*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_WindowgetPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_window_get_position(
        (GtkWindow*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_Windowmove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_window_move(
        (GtkWindow*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WindowgetSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_window_get_size(
        (GtkWindow*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_Windowresize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_window_resize(
        (GtkWindow*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WindowgetDefaultSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_window_get_default_size(
        (GtkWindow*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_WindowsetDefaultSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_window_set_default_size(
        (GtkWindow*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_WindowbeginMoveDrag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_window_begin_move_drag(
        (GtkWindow*)a0
        ,(gint)a1
        ,(gint)a2
        ,(gint)a3
        ,(guint32)a4
        );
    RETURN_UNIT;
} END
DEFINE6(Gtk_WindowbeginResizeDrag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GdkWindowEdge a1 = GdkWindowEdgetFromWord(x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    DECLARE_INT(a5, x5);
    gtk_window_begin_resize_drag(
        (GtkWindow*)a0
        ,(GdkWindowEdge)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint)a4
        ,(guint32)a5
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowsetKeepBelow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_keep_below(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowsetKeepAbove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_keep_above(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowunfullscreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_unfullscreen(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowfullscreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_fullscreen(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowunmaximize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_unmaximize(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowmaximize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_maximize(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowunstick) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_unstick(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowstick) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_stick(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowdeiconify) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_deiconify(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowiconify) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_iconify(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Windowpresent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gtk_window_present(
        (GtkWindow*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowpropagateKeyEvent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_window_propagate_key_event(
        (GtkWindow*)a0
        ,(GdkEventKey*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowactivateKey) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_window_activate_key(
        (GtkWindow*)a0
        ,(GdkEventKey*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WindowgetMnemonicModifier) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GdkModifierType cres = (GdkModifierType)gtk_window_get_mnemonic_modifier(
        (GtkWindow*)a0
        );
    word res = GdkModifierTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetMnemonicModifier) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GdkModifierType a1 = GdkModifierTypetFromWord(x1);
    gtk_window_set_mnemonic_modifier(
        (GtkWindow*)a0
        ,(GdkModifierType)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WindowmnemonicActivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    gboolean cres = (gboolean)gtk_window_mnemonic_activate(
        (GtkWindow*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_WindowremoveMnemonic) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    gtk_window_remove_mnemonic(
        (GtkWindow*)a0
        ,(guint)a1
        ,(GtkWidget*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WindowaddMnemonic) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    gtk_window_add_mnemonic(
        (GtkWindow*)a0
        ,(guint)a1
        ,(GtkWidget*)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WindowlistToplevels) {
    GList* cres = (GList*)gtk_window_list_toplevels(
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WindowgetModal) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_modal(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetModal) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_modal(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowsetAutoStartupNotification) {
    DECLARE_BOOL(a0, x0);
    gtk_window_set_auto_startup_notification(
        (gboolean)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowsetDefaultIconFromFile) {
    DECLARE_CSTRING(a0, x0);
    GError *tmp0 = 0; GError **a1 = &tmp0;
    gtk_window_set_default_icon_from_file(
        (const gchar*)a0
        ,a1
        );
    if ((*a1) != NULL) {char message[strlen((*a1)->message)];g_error_free(*a1);RAISE_CORE_ERROR(message);}
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowsetDefaultIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_PIXBUF);
    gtk_window_set_default_icon(
        (GdkPixbuf*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WindowgetDefaultIconList) {
    GList* cres = (GList*)gtk_window_get_default_icon_list(
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WindowsetDefaultIconList) {
    DECLARE_GLIST(a0, x0, DECLARE_OBJECT);
    gtk_window_set_default_icon_list(
        (GList*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_window_get_icon(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetIconFromFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    GError *tmp0 = 0; GError **a2 = &tmp0;
    gtk_window_set_icon_from_file(
        (GtkWindow*)a0
        ,(const gchar*)a1
        ,a2
        );
    if ((*a2) != NULL) {char message[strlen((*a2)->message)];g_error_free(*a2);RAISE_CORE_ERROR(message);}
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowsetIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_PIXBUF);
    gtk_window_set_icon(
        (GtkWindow*)a0
        ,(GdkPixbuf*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetIconList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GList* cres = (GList*)gtk_window_get_icon_list(
        (GtkWindow*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetIconList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_GLIST(a1, x1, DECLARE_OBJECT);
    gtk_window_set_icon_list(
        (GtkWindow*)a0
        ,(GList*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetDecorated) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_decorated(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetDecorated) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_decorated(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_WindowgetFrameDimensions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    DECLARE_INT_AS(gint, tmp2, x3);
               gint* a3 = (gint*)&tmp2;
    DECLARE_INT_AS(gint, tmp3, x4);
               gint* a4 = (gint*)&tmp3;
    gtk_window_get_frame_dimensions(
        (GtkWindow*)a0
        ,(gint*)a1
        ,(gint*)a2
        ,(gint*)a3
        ,(gint*)a4
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    word r3 = Store::IntToWord(*a3);
    word r4 = Store::IntToWord(*a4);
    RETURN4(r1,r2,r3,r4);
} END
DEFINE5(Gtk_WindowsetFrameDimensions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_window_set_frame_dimensions(
        (GtkWindow*)a0
        ,(gint)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint)a4
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetHasFrame) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_has_frame(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetHasFrame) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_has_frame(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowhasToplevelFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_has_toplevel_focus(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WindowisActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_is_active(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WindowgetScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GdkScreen* cres = (GdkScreen*)gtk_window_get_screen(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_SCREEN);
    gtk_window_set_screen(
        (GtkWindow*)a0
        ,(GdkScreen*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetGravity) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GdkGravity cres = (GdkGravity)gtk_window_get_gravity(
        (GtkWindow*)a0
        );
    word res = GdkGravitytToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetGravity) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GdkGravity a1 = GdkGravitytFromWord(x1);
    gtk_window_set_gravity(
        (GtkWindow*)a0
        ,(GdkGravity)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetResizable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_resizable(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetResizable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_resizable(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetDestroyWithParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_destroy_with_parent(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetDestroyWithParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_destroy_with_parent(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetAcceptFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_accept_focus(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetAcceptFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_accept_focus(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetSkipPagerHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_skip_pager_hint(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetSkipPagerHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_skip_pager_hint(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetSkipTaskbarHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_get_skip_taskbar_hint(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetSkipTaskbarHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_BOOL(a1, x1);
    gtk_window_set_skip_taskbar_hint(
        (GtkWindow*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetTypeHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GdkWindowTypeHint cres = (GdkWindowTypeHint)gtk_window_get_type_hint(
        (GtkWindow*)a0
        );
    word res = GdkWindowTypeHinttToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetTypeHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GdkWindowTypeHint a1 = GdkWindowTypeHinttFromWord(x1);
    gtk_window_set_type_hint(
        (GtkWindow*)a0
        ,(GdkWindowTypeHint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetTransientFor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GtkWindow* cres = (GtkWindow*)gtk_window_get_transient_for(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetTransientFor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WINDOW);
    gtk_window_set_transient_for(
        (GtkWindow*)a0
        ,(GtkWindow*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowactivateDefault) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_activate_default(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetDefault) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_window_set_default(
        (GtkWindow*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GtkWidget* cres = (GtkWidget*)gtk_window_get_focus(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_window_set_focus(
        (GtkWindow*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowactivateFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gboolean cres = (gboolean)gtk_window_activate_focus(
        (GtkWindow*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkWindowPosition a1 = GtkWindowPositiontFromWord(x1);
    gtk_window_set_position(
        (GtkWindow*)a0
        ,(GtkWindowPosition)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowremoveAccelGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACCEL_GROUP);
    gtk_window_remove_accel_group(
        (GtkWindow*)a0
        ,(GtkAccelGroup*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WindowaddAccelGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACCEL_GROUP);
    gtk_window_add_accel_group(
        (GtkWindow*)a0
        ,(GtkAccelGroup*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetRole) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    const gchar* cres = (const gchar*)gtk_window_get_role(
        (GtkWindow*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetRole) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    gtk_window_set_role(
        (GtkWindow*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WindowsetWmclass) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    DECLARE_CSTRING(a2, x2);
    gtk_window_set_wmclass(
        (GtkWindow*)a0
        ,(const gchar*)a1
        ,(const gchar*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    const gchar* cres = (const gchar*)gtk_window_get_title(
        (GtkWindow*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    gtk_window_set_title(
        (GtkWindow*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WindowgetType) {
    GType cres = (GType)gtk_window_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WindowtooltipsGetInfoFromTipWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GtkTooltips* tmp0 = 0; GtkTooltips** a1 = &tmp0;
    GtkWidget* tmp1 = 0; GtkWidget** a2 = &tmp1;
    gboolean cres = (gboolean)gtk_tooltips_get_info_from_tip_window(
        (GtkWindow*)a0
        ,(GtkTooltips**)a1
        ,(GtkWidget**)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r1 = OBJECT_TO_WORD(*a1,TYPE_GTK_OBJECT);
    word r2 = OBJECT_TO_WORD(*a2,TYPE_GTK_OBJECT);
    RETURN3(res,r1,r2);
} END
DEFINE1(Gtk_WindowgetFieldWmclassName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gchar* cres = (gchar*)DOgetFieldWmclassName(
        (GtkWindow*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldWmclassName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    DOsetFieldWmclassName(
        (GtkWindow*)a0
        ,(gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldWmclassClass) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gchar* cres = (gchar*)DOgetFieldWmclassClass(
        (GtkWindow*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldWmclassClass) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    DOsetFieldWmclassClass(
        (GtkWindow*)a0
        ,(gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldWmRole) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gchar* cres = (gchar*)DOgetFieldWmRole(
        (GtkWindow*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldWmRole) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    DOsetFieldWmRole(
        (GtkWindow*)a0
        ,(gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldTypeHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldTypeHint(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldTypeHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldTypeHint(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldType(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldType(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldTransientParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GtkWindow* cres = (GtkWindow*)DOgetFieldTransientParent(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldTransientParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WINDOW);
    DOsetFieldTransientParent(
        (GtkWindow*)a0
        ,(GtkWindow*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    gchar* cres = (gchar*)DOgetFieldTitle(
        (GtkWindow*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    DOsetFieldTitle(
        (GtkWindow*)a0
        ,(gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldStickInitially) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldStickInitially(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldStickInitially) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldStickInitially(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldPosition(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldPosition(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldNeedDefaultSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldNeedDefaultSize(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldNeedDefaultSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldNeedDefaultSize(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldNeedDefaultPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldNeedDefaultPosition(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldNeedDefaultPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldNeedDefaultPosition(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldModal) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldModal(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldModal) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldModal(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldMnemonicModifier) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GdkModifierType cres = (GdkModifierType)DOgetFieldMnemonicModifier(
        (GtkWindow*)a0
        );
    word res = GdkModifierTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldMnemonicModifier) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GdkModifierType a1 = GdkModifierTypetFromWord(x1);
    DOsetFieldMnemonicModifier(
        (GtkWindow*)a0
        ,(GdkModifierType)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldMaximizeInitially) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldMaximizeInitially(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldMaximizeInitially) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldMaximizeInitially(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldKeysChangedHandler) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldKeysChangedHandler(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldKeysChangedHandler) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldKeysChangedHandler(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldIconifyInitially) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldIconifyInitially(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldIconifyInitially) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldIconifyInitially(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldHasUserRefCount) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldHasUserRefCount(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldHasUserRefCount) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldHasUserRefCount(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldHasFrame) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldHasFrame(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldHasFrame) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldHasFrame(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldHasFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldHasFocus(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldHasFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldHasFocus(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GtkWindowGroup* cres = (GtkWindowGroup*)DOgetFieldGroup(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WINDOW_GROUP);
    DOsetFieldGroup(
        (GtkWindow*)a0
        ,(GtkWindowGroup*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldGravity) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldGravity(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldGravity) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldGravity(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldFrameTop) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldFrameTop(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldFrameTop) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldFrameTop(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldFrameRight) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldFrameRight(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldFrameRight) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldFrameRight(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldFrameLeft) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldFrameLeft(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldFrameLeft) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldFrameLeft(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldFrameBottom) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldFrameBottom(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldFrameBottom) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldFrameBottom(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldFrame) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GdkWindow* cres = (GdkWindow*)DOgetFieldFrame(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldFrame) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    DOsetFieldFrame(
        (GtkWindow*)a0
        ,(GdkWindow*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldFocusWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFocusWidget(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldFocusWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFocusWidget(
        (GtkWindow*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldDestroyWithParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldDestroyWithParent(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldDestroyWithParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldDestroyWithParent(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldDefaultWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    GtkWidget* cres = (GtkWidget*)DOgetFieldDefaultWidget(
        (GtkWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldDefaultWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldDefaultWidget(
        (GtkWindow*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldDecorated) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldDecorated(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldDecorated) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldDecorated(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldConfigureRequestCount) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint16 cres = (guint16)DOgetFieldConfigureRequestCount(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldConfigureRequestCount) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldConfigureRequestCount(
        (GtkWindow*)a0
        ,(guint16)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldConfigureNotifyReceived) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldConfigureNotifyReceived(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldConfigureNotifyReceived) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldConfigureNotifyReceived(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldAllowShrink) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldAllowShrink(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldAllowShrink) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldAllowShrink(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WindowgetFieldAllowGrow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    guint cres = (guint)DOgetFieldAllowGrow(
        (GtkWindow*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WindowsetFieldAllowGrow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_INT(a1, x1);
    DOsetFieldAllowGrow(
        (GtkWindow*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldAllowGrow
#undef DOsetFieldAllowGrow
#undef DOgetFieldAllowShrink
#undef DOsetFieldAllowShrink
#undef DOgetFieldConfigureNotifyReceived
#undef DOsetFieldConfigureNotifyReceived
#undef DOgetFieldConfigureRequestCount
#undef DOsetFieldConfigureRequestCount
#undef DOgetFieldDecorated
#undef DOsetFieldDecorated
#undef DOgetFieldDefaultWidget
#undef DOsetFieldDefaultWidget
#undef DOgetFieldDestroyWithParent
#undef DOsetFieldDestroyWithParent
#undef DOgetFieldFocusWidget
#undef DOsetFieldFocusWidget
#undef DOgetFieldFrame
#undef DOsetFieldFrame
#undef DOgetFieldFrameBottom
#undef DOsetFieldFrameBottom
#undef DOgetFieldFrameLeft
#undef DOsetFieldFrameLeft
#undef DOgetFieldFrameRight
#undef DOsetFieldFrameRight
#undef DOgetFieldFrameTop
#undef DOsetFieldFrameTop
#undef DOgetFieldGravity
#undef DOsetFieldGravity
#undef DOgetFieldGroup
#undef DOsetFieldGroup
#undef DOgetFieldHasFocus
#undef DOsetFieldHasFocus
#undef DOgetFieldHasFrame
#undef DOsetFieldHasFrame
#undef DOgetFieldHasUserRefCount
#undef DOsetFieldHasUserRefCount
#undef DOgetFieldIconifyInitially
#undef DOsetFieldIconifyInitially
#undef DOgetFieldKeysChangedHandler
#undef DOsetFieldKeysChangedHandler
#undef DOgetFieldMaximizeInitially
#undef DOsetFieldMaximizeInitially
#undef DOgetFieldMnemonicModifier
#undef DOsetFieldMnemonicModifier
#undef DOgetFieldModal
#undef DOsetFieldModal
#undef DOgetFieldNeedDefaultPosition
#undef DOsetFieldNeedDefaultPosition
#undef DOgetFieldNeedDefaultSize
#undef DOsetFieldNeedDefaultSize
#undef DOgetFieldPosition
#undef DOsetFieldPosition
#undef DOgetFieldStickInitially
#undef DOsetFieldStickInitially
#undef DOgetFieldTitle
#undef DOsetFieldTitle
#undef DOgetFieldTransientParent
#undef DOsetFieldTransientParent
#undef DOgetFieldType
#undef DOsetFieldType
#undef DOgetFieldTypeHint
#undef DOsetFieldTypeHint
#undef DOgetFieldWmRole
#undef DOsetFieldWmRole
#undef DOgetFieldWmclassClass
#undef DOsetFieldWmclassClass
#undef DOgetFieldWmclassName
#undef DOsetFieldWmclassName
DEFINE2(Gtk_Widgetnew) {
    DECLARE_INT(a0, x0);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_widget_new(
        (GType)a0
        ,(const gchar*)a1
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldAllocation(O) ((O)->allocation)
#define DOsetFieldAllocation(O, V) ((O)->allocation = (V))
#define DOgetFieldName(O) ((O)->name)
#define DOsetFieldName(O, V) ((O)->name = (V))
#define DOgetFieldParent(O) ((O)->parent)
#define DOsetFieldParent(O, V) ((O)->parent = (V))
#define DOgetFieldSavedState(O) ((O)->saved_state)
#define DOsetFieldSavedState(O, V) ((O)->saved_state = (V))
#define DOgetFieldState(O) ((O)->state)
#define DOsetFieldState(O, V) ((O)->state = (V))
#define DOgetFieldStyle(O) ((O)->style)
#define DOsetFieldStyle(O, V) ((O)->style = (V))
#define DOgetFieldWindow(O) ((O)->window)
#define DOsetFieldWindow(O, V) ((O)->window = (V))
DEFINE2(Gtk_WidgetremoveMnemonicLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_widget_remove_mnemonic_label(
        (GtkWidget*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetaddMnemonicLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_widget_add_mnemonic_label(
        (GtkWidget*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetlistMnemonicLabels) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GList* cres = (GList*)gtk_widget_list_mnemonic_labels(
        (GtkWidget*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_WidgetclassPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT_AS(guint, tmp0, x1);
               int* a1 = (int*)&tmp0;
    DECLARE_ZERO_TERMINATED_ARRAY(a2, x2, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    DECLARE_ZERO_TERMINATED_ARRAY(a3, x3, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    gtk_widget_class_path(
        (GtkWidget*)a0
        ,(guint*)a1
        ,(gchar**)a2
        ,(gchar**)a3
        );
    word r1 = Store::IntToWord(*a1);
    RETURN1(r1);
} END
DEFINE4(Gtk_Widgetpath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT_AS(guint, tmp0, x1);
               int* a1 = (int*)&tmp0;
    DECLARE_ZERO_TERMINATED_ARRAY(a2, x2, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    DECLARE_ZERO_TERMINATED_ARRAY(a3, x3, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    gtk_widget_path(
        (GtkWidget*)a0
        ,(guint*)a1
        ,(gchar**)a2
        ,(gchar**)a3
        );
    word r1 = Store::IntToWord(*a1);
    RETURN1(r1);
} END
DEFINE1(Gtk_WidgetresetShapes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_reset_shapes(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetshapeCombineMask) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_widget_shape_combine_mask(
        (GtkWidget*)a0
        ,(GdkBitmap*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WidgetgetDefaultDirection) {
    GtkTextDirection cres = (GtkTextDirection)gtk_widget_get_default_direction(
        );
    word res = GtkTextDirectiontToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetsetDefaultDirection) {
    if (Store::WordToInt(x0) == INVALID_INT) {REQUEST(x0);}
GtkTextDirection a0 = GtkTextDirectiontFromWord(x0);
    gtk_widget_set_default_direction(
        (GtkTextDirection)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetDirection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkTextDirection cres = (GtkTextDirection)gtk_widget_get_direction(
        (GtkWidget*)a0
        );
    word res = GtkTextDirectiontToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetDirection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTextDirection a1 = GtkTextDirectiontFromWord(x1);
    gtk_widget_set_direction(
        (GtkWidget*)a0
        ,(GtkTextDirection)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WidgetgetDefaultVisual) {
    GdkVisual* cres = (GdkVisual*)gtk_widget_get_default_visual(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_WidgetgetDefaultColormap) {
    GdkColormap* cres = (GdkColormap*)gtk_widget_get_default_colormap(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetsetDefaultColormap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_COLORMAP);
    gtk_widget_set_default_colormap(
        (GdkColormap*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WidgetgetDefaultStyle) {
    GtkStyle* cres = (GtkStyle*)gtk_widget_get_default_style(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetstyleGet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    gtk_widget_style_get(
        (GtkWidget*)a0
        ,(const gchar*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetstyleGetProperty) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    GValue* a2 = new GValue; memset(a2, 0, sizeof(GValue));
    gtk_widget_style_get_property(
        (GtkWidget*)a0
        ,(const gchar*)a1
        ,(GValue*)a2
        );
    word r2 = OBJECT_TO_WORD (a2, TYPE_BOXED | FLAG_OWN, G_TYPE_VALUE);
    RETURN1(r2);
} END
DEFINE2(Gtk_WidgetclassFindStyleProperty) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_CSTRING(a1, x1);
    GParamSpec* cres = (GParamSpec*)gtk_widget_class_find_style_property(
        (GtkWidgetClass*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE3(Gtk_WidgetclassInstallStylePropertyParser) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT (a1, x1);
    DECLARE_OBJECT (a2, x2);
    gtk_widget_class_install_style_property_parser(
        (GtkWidgetClass*)a0
        ,(GParamSpec*)a1
        ,(GtkRcPropertyParser)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetclassInstallStyleProperty) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT (a1, x1);
    gtk_widget_class_install_style_property(
        (GtkWidgetClass*)a0
        ,(GParamSpec*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WidgetpopColormap) {
    gtk_widget_pop_colormap(
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WidgetpopCompositeChild) {
    gtk_widget_pop_composite_child(
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_WidgetpushCompositeChild) {
    gtk_widget_push_composite_child(
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetpushColormap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_COLORMAP);
    gtk_widget_push_colormap(
        (GdkColormap*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetresetRcStyles) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_reset_rc_styles(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetCompositeName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gchar* cres = (gchar*)gtk_widget_get_composite_name(
        (GtkWidget*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetCompositeName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    gtk_widget_set_composite_name(
        (GtkWidget*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetrenderIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkIconSize a2 = GtkIconSizetFromWord(x2);
    DECLARE_CSTRING(a3, x3);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_widget_render_icon(
        (GtkWidget*)a0
        ,(const gchar*)a1
        ,(GtkIconSize)a2
        ,(const gchar*)a3
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetcreatePangoLayout) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    PangoLayout* cres = (PangoLayout*)gtk_widget_create_pango_layout(
        (GtkWidget*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetPangoContext) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    PangoContext* cres = (PangoContext*)gtk_widget_get_pango_context(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetcreatePangoContext) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    PangoContext* cres = (PangoContext*)gtk_widget_create_pango_context(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetmodifyFont) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, PANGO_TYPE_FONT_DESCRIPTION);
    gtk_widget_modify_font(
        (GtkWidget*)a0
        ,(PangoFontDescription*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WidgetmodifyBase) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkStateType a1 = GtkStateTypetFromWord(x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_COLOR);
    gtk_widget_modify_base(
        (GtkWidget*)a0
        ,(GtkStateType)a1
        ,(GdkColor*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WidgetmodifyText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkStateType a1 = GtkStateTypetFromWord(x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_COLOR);
    gtk_widget_modify_text(
        (GtkWidget*)a0
        ,(GtkStateType)a1
        ,(GdkColor*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WidgetmodifyBg) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkStateType a1 = GtkStateTypetFromWord(x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_COLOR);
    gtk_widget_modify_bg(
        (GtkWidget*)a0
        ,(GtkStateType)a1
        ,(GdkColor*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WidgetmodifyFg) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkStateType a1 = GtkStateTypetFromWord(x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_COLOR);
    gtk_widget_modify_fg(
        (GtkWidget*)a0
        ,(GtkStateType)a1
        ,(GdkColor*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetModifierStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkRcStyle* cres = (GtkRcStyle*)gtk_widget_get_modifier_style(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetmodifyStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_RC_STYLE);
    gtk_widget_modify_style(
        (GtkWidget*)a0
        ,(GtkRcStyle*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkStyle* cres = (GtkStyle*)gtk_widget_get_style(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetensureStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_ensure_style(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_STYLE);
    gtk_widget_set_style(
        (GtkWidget*)a0
        ,(GtkStyle*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgethideOnDelete) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gboolean cres = (gboolean)gtk_widget_hide_on_delete(
        (GtkWidget*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE6(Gtk_WidgettranslateCoordinates) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT_AS(gint, tmp0, x4);
               gint* a4 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x5);
               gint* a5 = (gint*)&tmp1;
    gboolean cres = (gboolean)gtk_widget_translate_coordinates(
        (GtkWidget*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint*)a4
        ,(gint*)a5
        );
    word res = BOOL_TO_WORD(cres);
    word r4 = Store::IntToWord(*a4);
    word r5 = Store::IntToWord(*a5);
    RETURN3(res,r4,r5);
} END
DEFINE2(Gtk_WidgetisAncestor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gboolean cres = (gboolean)gtk_widget_is_ancestor(
        (GtkWidget*)a0
        ,(GtkWidget*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_WidgetgetPointer) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_widget_get_pointer(
        (GtkWidget*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE1(Gtk_WidgetgetEvents) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gint cres = (gint)gtk_widget_get_events(
        (GtkWidget*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetColormap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLORMAP);
    gtk_widget_set_colormap(
        (GtkWidget*)a0
        ,(GdkColormap*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetAccessible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    AtkObject* cres = (AtkObject*)gtk_widget_get_accessible(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetgetClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    GtkClipboard* cres = (GtkClipboard*)gtk_widget_get_clipboard(
        (GtkWidget*)a0
        ,(GdkAtom)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetSettings) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkSettings* cres = (GtkSettings*)gtk_widget_get_settings(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetRootWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkWindow* cres = (GdkWindow*)gtk_widget_get_root_window(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetDisplay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkDisplay* cres = (GdkDisplay*)gtk_widget_get_display(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgethasScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gboolean cres = (gboolean)gtk_widget_has_screen(
        (GtkWidget*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkScreen* cres = (GdkScreen*)gtk_widget_get_screen(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetVisual) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkVisual* cres = (GdkVisual*)gtk_widget_get_visual(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetColormap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkColormap* cres = (GdkColormap*)gtk_widget_get_colormap(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetgetAncestor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_widget_get_ancestor(
        (GtkWidget*)a0
        ,(GType)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetToplevel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkWidget* cres = (GtkWidget*)gtk_widget_get_toplevel(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetExtensionEvents) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkExtensionMode cres = (GdkExtensionMode)gtk_widget_get_extension_events(
        (GtkWidget*)a0
        );
    word res = GdkExtensionModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetExtensionEvents) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GdkExtensionMode a1 = GdkExtensionModetFromWord(x1);
    gtk_widget_set_extension_events(
        (GtkWidget*)a0
        ,(GdkExtensionMode)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetaddEvents) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    gtk_widget_add_events(
        (GtkWidget*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetEvents) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    gtk_widget_set_events(
        (GtkWidget*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WidgetgetSizeRequest) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_widget_get_size_request(
        (GtkWidget*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_WidgetsetSizeRequest) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_widget_set_size_request(
        (GtkWidget*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetchildFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkDirectionType a1 = GtkDirectionTypetFromWord(x1);
    gboolean cres = (gboolean)gtk_widget_child_focus(
        (GtkWidget*)a0
        ,(GtkDirectionType)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetParentWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkWindow* cres = (GdkWindow*)gtk_widget_get_parent_window(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkWidget* cres = (GtkWidget*)gtk_widget_get_parent(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetChildVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gboolean cres = (gboolean)gtk_widget_get_child_visible(
        (GtkWidget*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetChildVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a1, x1);
    gtk_widget_set_child_visible(
        (GtkWidget*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetParentWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    gtk_widget_set_parent_window(
        (GtkWidget*)a0
        ,(GdkWindow*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_widget_set_parent(
        (GtkWidget*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetRedrawOnAllocate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a1, x1);
    gtk_widget_set_redraw_on_allocate(
        (GtkWidget*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetDoubleBuffered) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a1, x1);
    gtk_widget_set_double_buffered(
        (GtkWidget*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetAppPaintable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a1, x1);
    gtk_widget_set_app_paintable(
        (GtkWidget*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetSensitive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a1, x1);
    gtk_widget_set_sensitive(
        (GtkWidget*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsetState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkStateType a1 = GtkStateTypetFromWord(x1);
    gtk_widget_set_state(
        (GtkWidget*)a0
        ,(GtkStateType)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    const gchar* cres = (const gchar*)gtk_widget_get_name(
        (GtkWidget*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    gtk_widget_set_name(
        (GtkWidget*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgrabDefault) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_grab_default(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgrabFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_grab_focus(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetisFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gboolean cres = (gboolean)gtk_widget_is_focus(
        (GtkWidget*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetthawChildNotify) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_thaw_child_notify(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetchildNotify) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    gtk_widget_child_notify(
        (GtkWidget*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetfreezeChildNotify) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_freeze_child_notify(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetregionIntersect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT(a1, x1);
    GdkRegion* cres = (GdkRegion*)gtk_widget_region_intersect(
        (GtkWidget*)a0
        ,(GdkRegion*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED);
    RETURN1(res);
} END
DEFINE3(Gtk_Widgetintersect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_RECTANGLE);
    gboolean cres = (gboolean)gtk_widget_intersect(
        (GtkWidget*)a0
        ,(GdkRectangle*)a1
        ,(GdkRectangle*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_Widgetreparent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_widget_reparent(
        (GtkWidget*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WidgetsetScrollAdjustments) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_ADJUSTMENT);
    gboolean cres = (gboolean)gtk_widget_set_scroll_adjustments(
        (GtkWidget*)a0
        ,(GtkAdjustment*)a1
        ,(GtkAdjustment*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_Widgetactivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gboolean cres = (gboolean)gtk_widget_activate(
        (GtkWidget*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsendExpose) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_EVENT);
    gint cres = (gint)gtk_widget_send_expose(
        (GtkWidget*)a0
        ,(GdkEvent*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_Widgetevent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_EVENT);
    gboolean cres = (gboolean)gtk_widget_event(
        (GtkWidget*)a0
        ,(GdkEvent*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetmnemonicActivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a1, x1);
    gboolean cres = (gboolean)gtk_widget_mnemonic_activate(
        (GtkWidget*)a0
        ,(gboolean)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetcanActivateAccel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_widget_can_activate_accel(
        (GtkWidget*)a0
        ,(guint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetlistAccelClosures) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GList* cres = (GList*)gtk_widget_list_accel_closures(
        (GtkWidget*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_WidgetsetAccelPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_ACCEL_GROUP);
    gtk_widget_set_accel_path(
        (GtkWidget*)a0
        ,(const gchar*)a1
        ,(GtkAccelGroup*)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetremoveAccelerator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACCEL_GROUP);
    DECLARE_INT(a2, x2);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x3, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x3);}
});
GdkModifierType a3 = GdkModifierTypetFromWord(x3);
    gboolean cres = (gboolean)gtk_widget_remove_accelerator(
        (GtkWidget*)a0
        ,(GtkAccelGroup*)a1
        ,(guint)a2
        ,(GdkModifierType)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE6(Gtk_WidgetaddAccelerator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_ACCEL_GROUP);
    DECLARE_INT(a3, x3);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x4, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x4);}
});
GdkModifierType a4 = GdkModifierTypetFromWord(x4);
    DECLARE_LIST_ELEMS(tmp2, tmp3, x5, 
{ if (Store::WordToInt(tmp2->Sel(0)) == INVALID_INT)
{REQUEST(x5);}
});
GtkAccelFlags a5 = GtkAccelFlagstFromWord(x5);
    gtk_widget_add_accelerator(
        (GtkWidget*)a0
        ,(const gchar*)a1
        ,(GtkAccelGroup*)a2
        ,(guint)a3
        ,(GdkModifierType)a4
        ,(GtkAccelFlags)a5
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetgetChildRequisition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_REQUISITION);
    gtk_widget_get_child_requisition(
        (GtkWidget*)a0
        ,(GtkRequisition*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsizeAllocate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT (a1, x1);
    gtk_widget_size_allocate(
        (GtkWidget*)a0
        ,(GtkAllocation*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetsizeRequest) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_REQUISITION);
    gtk_widget_size_request(
        (GtkWidget*)a0
        ,(GtkRequisition*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Widgetdraw) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_RECTANGLE);
    gtk_widget_draw(
        (GtkWidget*)a0
        ,(GdkRectangle*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetqueueResizeNoRedraw) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_queue_resize_no_redraw(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetqueueResize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_queue_resize(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_WidgetqueueClearArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_widget_queue_clear_area(
        (GtkWidget*)a0
        ,(gint)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint)a4
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetqueueClear) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_queue_clear(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_WidgetqueueDrawArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_widget_queue_draw_area(
        (GtkWidget*)a0
        ,(gint)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint)a4
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetqueueDraw) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_queue_draw(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetunrealize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_unrealize(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetrealize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_realize(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetunmap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_unmap(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetmap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_map(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetNoShowAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gboolean cres = (gboolean)gtk_widget_get_no_show_all(
        (GtkWidget*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetNoShowAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a1, x1);
    gtk_widget_set_no_show_all(
        (GtkWidget*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgethideAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_hide_all(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetshowAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_show_all(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgethide) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_hide(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetshowNow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_show_now(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetshow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_show(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetunparent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_unparent(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Widgetset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    gtk_widget_set(
        (GtkWidget*)a0
        ,(const gchar*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetdestroyed) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkWidget* tmp0 = 0; GtkWidget** a1 = &tmp0;
    gtk_widget_destroyed(
        (GtkWidget*)a0
        ,(GtkWidget**)a1
        );
    word r1 = OBJECT_TO_WORD(*a1,TYPE_GTK_OBJECT);
    RETURN1(r1);
} END
DEFINE1(Gtk_Widgetdestroy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_destroy(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetunref) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_widget_unref(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Widgetreference) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkWidget* cres = (GtkWidget*)gtk_widget_ref(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_WidgetgetType) {
    GType cres = (GType)gtk_widget_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetselectionClear) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_selection_clear(
        (GtkWidget*)a0
        ,(GdkEventSelection*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetselectionRemoveAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_selection_remove_all(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetselectionConvert) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    DECLARE_WORD32(tmp1, x2); GdkAtom a2 = (GdkAtom)tmp1;
    DECLARE_INT(a3, x3);
    gboolean cres = (gboolean)gtk_selection_convert(
        (GtkWidget*)a0
        ,(GdkAtom)a1
        ,(GdkAtom)a2
        ,(guint32)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetselectionClearTargets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    gtk_selection_clear_targets(
        (GtkWidget*)a0
        ,(GdkAtom)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetselectionAddTargets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    DECLARE_OBJECT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_selection_add_targets(
        (GtkWidget*)a0
        ,(GdkAtom)a1
        ,(const GtkTargetEntry*)a2
        ,(guint)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetselectionAddTarget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    DECLARE_WORD32(tmp1, x2); GdkAtom a2 = (GdkAtom)tmp1;
    DECLARE_INT(a3, x3);
    gtk_selection_add_target(
        (GtkWidget*)a0
        ,(GdkAtom)a1
        ,(GdkAtom)a2
        ,(guint)a3
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_WidgetselectionOwnerSet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    DECLARE_INT(a2, x2);
    gboolean cres = (gboolean)gtk_selection_owner_set(
        (GtkWidget*)a0
        ,(GdkAtom)a1
        ,(guint32)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetrcGetStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkStyle* cres = (GtkStyle*)gtk_rc_get_style(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetmenuGetForAttachWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GList* cres = (GList*)gtk_menu_get_for_attach_widget(
        (GtkWidget*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetpropagateEvent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_EVENT);
    gtk_propagate_event(
        (GtkWidget*)a0
        ,(GdkEvent*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgrabRemove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_grab_remove(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgrabAdd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_grab_add(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragSourceAddTextTargets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_drag_source_add_text_targets(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragDestAddUriTargets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_drag_dest_add_uri_targets(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragDestAddImageTargets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_drag_dest_add_image_targets(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragDestAddTextTargets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_drag_dest_add_text_targets(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_WidgetdragBegin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT (a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkDragAction a2 = GdkDragActiontFromWord(x2);
    DECLARE_INT(a3, x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_EVENT);
    GdkDragContext* cres = (GdkDragContext*)gtk_drag_begin(
        (GtkWidget*)a0
        ,(GtkTargetList*)a1
        ,(GdkDragAction)a2
        ,(gint)a3
        ,(GdkEvent*)a4
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetdragSourceSetTargetList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT (a1, x1);
    gtk_drag_source_set_target_list(
        (GtkWidget*)a0
        ,(GtkTargetList*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragSourceGetTargetList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkTargetList* cres = (GtkTargetList*)gtk_drag_source_get_target_list(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetdragSourceSetIconStock) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    gtk_drag_source_set_icon_stock(
        (GtkWidget*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetdragSourceSetIconPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_PIXBUF);
    gtk_drag_source_set_icon_pixbuf(
        (GtkWidget*)a0
        ,(GdkPixbuf*)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetdragSourceSetIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLORMAP);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_PIXMAP);
    DECLARE_OBJECT(a3, x3);
    gtk_drag_source_set_icon(
        (GtkWidget*)a0
        ,(GdkColormap*)a1
        ,(GdkPixmap*)a2
        ,(GdkBitmap*)a3
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragSourceUnset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_drag_source_unset(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetdragSourceSet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GdkModifierType a1 = GdkModifierTypetFromWord(x1);
    DECLARE_C_ARG_ARRAY(a2, a2size, x2, gint, GtkTargetEntry, DECLARE_OBJECT(tmp0, elem_alice);
GtkTargetEntry elem_c = *(GtkTargetEntry*)tmp0;);
    DECLARE_LIST_ELEMS(tmp2, tmp3, x3, 
{ if (Store::WordToInt(tmp2->Sel(0)) == INVALID_INT)
{REQUEST(x3);}
});
GdkDragAction a3 = GdkDragActiontFromWord(x3);
    gtk_drag_source_set(
        (GtkWidget*)a0
        ,(GdkModifierType)a1
        ,(GtkTargetEntry*)a2, (gint)a2size
        ,(GdkDragAction)a3
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_WidgetdragDestSetTargetList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT (a1, x1);
    gtk_drag_dest_set_target_list(
        (GtkWidget*)a0
        ,(GtkTargetList*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragDestGetTargetList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkTargetList* cres = (GtkTargetList*)gtk_drag_dest_get_target_list(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE3(Gtk_WidgetdragDestFindTarget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_DRAG_CONTEXT);
    DECLARE_OBJECT (a2, x2);
    GdkAtom cres = (GdkAtom)gtk_drag_dest_find_target(
        (GtkWidget*)a0
        ,(GdkDragContext*)a1
        ,(GtkTargetList*)a2
        );
    word res = Word32ToWord ((u_int)cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetdragDestUnset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_drag_dest_unset(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetdragDestSetProxy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GdkDragProtocol a2 = GdkDragProtocoltFromWord(x2);
    DECLARE_BOOL(a3, x3);
    gtk_drag_dest_set_proxy(
        (GtkWidget*)a0
        ,(GdkWindow*)a1
        ,(GdkDragProtocol)a2
        ,(gboolean)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetdragDestSet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GtkDestDefaults a1 = GtkDestDefaultstFromWord(x1);
    DECLARE_C_ARG_ARRAY(a2, a2size, x2, gint, GtkTargetEntry, DECLARE_OBJECT(tmp0, elem_alice);
GtkTargetEntry elem_c = *(GtkTargetEntry*)tmp0;);
    DECLARE_LIST_ELEMS(tmp2, tmp3, x3, 
{ if (Store::WordToInt(tmp2->Sel(0)) == INVALID_INT)
{REQUEST(x3);}
});
GdkDragAction a3 = GdkDragActiontFromWord(x3);
    gtk_drag_dest_set(
        (GtkWidget*)a0
        ,(GtkDestDefaults)a1
        ,(GtkTargetEntry*)a2, (gint)a2size
        ,(GdkDragAction)a3
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragUnhighlight) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_drag_unhighlight(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetdragHighlight) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gtk_drag_highlight(
        (GtkWidget*)a0
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_WidgetdragGetData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_DRAG_CONTEXT);
    DECLARE_WORD32(tmp0, x2); GdkAtom a2 = (GdkAtom)tmp0;
    DECLARE_INT(a3, x3);
    gtk_drag_get_data(
        (GtkWidget*)a0
        ,(GdkDragContext*)a1
        ,(GdkAtom)a2
        ,(guint32)a3
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_WidgetdragCheckThreshold) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gboolean cres = (gboolean)gtk_drag_check_threshold(
        (GtkWidget*)a0
        ,(gint)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint)a4
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_WidgetgetFieldWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkWindow* cres = (GdkWindow*)DOgetFieldWindow(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetFieldWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    DOsetFieldWindow(
        (GtkWidget*)a0
        ,(GdkWindow*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetFieldStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkStyle* cres = (GtkStyle*)DOgetFieldStyle(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetFieldStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_STYLE);
    DOsetFieldStyle(
        (GtkWidget*)a0
        ,(GtkStyle*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetFieldState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    guint8 cres = (guint8)DOgetFieldState(
        (GtkWidget*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetFieldState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    DOsetFieldState(
        (GtkWidget*)a0
        ,(guint8)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetFieldSavedState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    guint8 cres = (guint8)DOgetFieldSavedState(
        (GtkWidget*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetFieldSavedState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_INT(a1, x1);
    DOsetFieldSavedState(
        (GtkWidget*)a0
        ,(guint8)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetFieldParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkWidget* cres = (GtkWidget*)DOgetFieldParent(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetFieldParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldParent(
        (GtkWidget*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetFieldName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    gchar* cres = (gchar*)DOgetFieldName(
        (GtkWidget*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetFieldName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    DOsetFieldName(
        (GtkWidget*)a0
        ,(gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_WidgetgetFieldAllocation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GdkRectangle cres = (GdkRectangle)DOgetFieldAllocation(
        (GtkWidget*)a0
        );
    GdkRectangle* tmp0 = (GdkRectangle*)g_malloc(sizeof(GdkRectangle));
memcpy (tmp0, &cres, sizeof(GdkRectangle));
word res = OBJECT_TO_WORD (tmp0, TYPE_BOXED, GDK_TYPE_RECTANGLE);
    RETURN1(res);
} END
DEFINE2(Gtk_WidgetsetFieldAllocation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT(tmp0, x1);
GdkRectangle a1 = *(GdkRectangle*)tmp0;
    DOsetFieldAllocation(
        (GtkWidget*)a0
        ,(GdkRectangle)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldAllocation
#undef DOsetFieldAllocation
#undef DOgetFieldName
#undef DOsetFieldName
#undef DOgetFieldParent
#undef DOsetFieldParent
#undef DOgetFieldSavedState
#undef DOsetFieldSavedState
#undef DOgetFieldState
#undef DOsetFieldState
#undef DOgetFieldStyle
#undef DOsetFieldStyle
#undef DOgetFieldWindow
#undef DOsetFieldWindow
DEFINE0(Gtk_VSeparatornew) {
    GtkWidget* cres = (GtkWidget*)gtk_vseparator_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_VSeparatorgetType) {
    GType cres = (GType)gtk_vseparator_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_VScrollbarnew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    GtkWidget* cres = (GtkWidget*)gtk_vscrollbar_new(
        (GtkAdjustment*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_VScrollbargetType) {
    GType cres = (GType)gtk_vscrollbar_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_VScalenewWithRange) {
    DECLARE_CDOUBLE(a0, x0);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    GtkWidget* cres = (GtkWidget*)gtk_vscale_new_with_range(
        (gdouble)a0
        ,(gdouble)a1
        ,(gdouble)a2
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_VScalenew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    GtkWidget* cres = (GtkWidget*)gtk_vscale_new(
        (GtkAdjustment*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_VScalegetType) {
    GType cres = (GType)gtk_vscale_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_VRulernew) {
    GtkWidget* cres = (GtkWidget*)gtk_vruler_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_VRulergetType) {
    GType cres = (GType)gtk_vruler_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_VPanednew) {
    GtkWidget* cres = (GtkWidget*)gtk_vpaned_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_VPanedgetType) {
    GType cres = (GType)gtk_vpaned_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_Viewportnew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    GtkWidget* cres = (GtkWidget*)gtk_viewport_new(
        (GtkAdjustment*)a0
        ,(GtkAdjustment*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ViewportgetShadowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_VIEWPORT);
    GtkShadowType cres = (GtkShadowType)gtk_viewport_get_shadow_type(
        (GtkViewport*)a0
        );
    word res = GtkShadowTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ViewportsetShadowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_VIEWPORT);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkShadowType a1 = GtkShadowTypetFromWord(x1);
    gtk_viewport_set_shadow_type(
        (GtkViewport*)a0
        ,(GtkShadowType)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ViewportsetVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_VIEWPORT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_viewport_set_vadjustment(
        (GtkViewport*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ViewportsetHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_VIEWPORT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_viewport_set_hadjustment(
        (GtkViewport*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ViewportgetVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_VIEWPORT);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_viewport_get_vadjustment(
        (GtkViewport*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ViewportgetHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_VIEWPORT);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_viewport_get_hadjustment(
        (GtkViewport*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ViewportgetType) {
    GType cres = (GType)gtk_viewport_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_VButtonBoxnew) {
    GtkWidget* cres = (GtkWidget*)gtk_vbutton_box_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_VButtonBoxsetLayoutDefault) {
    if (Store::WordToInt(x0) == INVALID_INT) {REQUEST(x0);}
GtkButtonBoxStyle a0 = GtkButtonBoxStyletFromWord(x0);
    gtk_vbutton_box_set_layout_default(
        (GtkButtonBoxStyle)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_VButtonBoxgetLayoutDefault) {
    GtkButtonBoxStyle cres = (GtkButtonBoxStyle)gtk_vbutton_box_get_layout_default(
        );
    word res = GtkButtonBoxStyletToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_VButtonBoxsetSpacingDefault) {
    DECLARE_INT(a0, x0);
    gtk_vbutton_box_set_spacing_default(
        (gint)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_VButtonBoxgetSpacingDefault) {
    gint cres = (gint)gtk_vbutton_box_get_spacing_default(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_VButtonBoxgetType) {
    GType cres = (GType)gtk_vbutton_box_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_VBoxnew) {
    DECLARE_BOOL(a0, x0);
    DECLARE_INT(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_vbox_new(
        (gboolean)a0
        ,(gint)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_VBoxgetType) {
    GType cres = (GType)gtk_vbox_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_UIManagernew) {
    GtkUIManager* cres = (GtkUIManager*)gtk_ui_manager_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_UIManagernewMergeId) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    guint cres = (guint)gtk_ui_manager_new_merge_id(
        (GtkUIManager*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_UIManagerensureUpdate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    gtk_ui_manager_ensure_update(
        (GtkUIManager*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_UIManagergetUI) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    gchar* cres = (gchar*)gtk_ui_manager_get_ui(
        (GtkUIManager*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_UIManagerremoveUI) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_INT(a1, x1);
    gtk_ui_manager_remove_ui(
        (GtkUIManager*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE7(Gtk_UIManageraddUI) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_INT(a1, x1);
    DECLARE_CSTRING(a2, x2);
    DECLARE_CSTRING(a3, x3);
    DECLARE_CSTRING(a4, x4);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x5, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x5);}
});
GtkUIManagerItemType a5 = GtkUIManagerItemTypetFromWord(x5);
    DECLARE_BOOL(a6, x6);
    gtk_ui_manager_add_ui(
        (GtkUIManager*)a0
        ,(guint)a1
        ,(const gchar*)a2
        ,(const gchar*)a3
        ,(const gchar*)a4
        ,(GtkUIManagerItemType)a5
        ,(gboolean)a6
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_UIManageraddUIFromFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_CSTRING(a1, x1);
    GError *tmp0 = 0; GError **a2 = &tmp0;
    guint cres = (guint)gtk_ui_manager_add_ui_from_file(
        (GtkUIManager*)a0
        ,(const gchar*)a1
        ,a2
        );
    word res = Store::IntToWord(cres);
    if ((*a2) != NULL) {char message[strlen((*a2)->message)];g_error_free(*a2);RAISE_CORE_ERROR(message);}
    RETURN1(res);
} END
DEFINE3(Gtk_UIManageraddUIFromString) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT (a2, x2);
    GError *tmp0 = 0; GError **a3 = &tmp0;
    guint cres = (guint)gtk_ui_manager_add_ui_from_string(
        (GtkUIManager*)a0
        ,(const gchar*)a1
        ,(gssize)a2
        ,a3
        );
    word res = Store::IntToWord(cres);
    if ((*a3) != NULL) {char message[strlen((*a3)->message)];g_error_free(*a3);RAISE_CORE_ERROR(message);}
    RETURN1(res);
} END
DEFINE2(Gtk_UIManagergetAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_CSTRING(a1, x1);
    GtkAction* cres = (GtkAction*)gtk_ui_manager_get_action(
        (GtkUIManager*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_UIManagergetToplevels) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GtkUIManagerItemType a1 = GtkUIManagerItemTypetFromWord(x1);
    GSList* cres = (GSList*)gtk_ui_manager_get_toplevels(
        (GtkUIManager*)a0
        ,(GtkUIManagerItemType)a1
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_UIManagergetWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_ui_manager_get_widget(
        (GtkUIManager*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_UIManagergetAccelGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    GtkAccelGroup* cres = (GtkAccelGroup*)gtk_ui_manager_get_accel_group(
        (GtkUIManager*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_UIManagergetActionGroups) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    GList* cres = (GList*)gtk_ui_manager_get_action_groups(
        (GtkUIManager*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_UIManagerremoveActionGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACTION_GROUP);
    gtk_ui_manager_remove_action_group(
        (GtkUIManager*)a0
        ,(GtkActionGroup*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_UIManagerinsertActionGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACTION_GROUP);
    DECLARE_INT(a2, x2);
    gtk_ui_manager_insert_action_group(
        (GtkUIManager*)a0
        ,(GtkActionGroup*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_UIManagergetAddTearoffs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    gboolean cres = (gboolean)gtk_ui_manager_get_add_tearoffs(
        (GtkUIManager*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_UIManagersetAddTearoffs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_UI_MANAGER);
    DECLARE_BOOL(a1, x1);
    gtk_ui_manager_set_add_tearoffs(
        (GtkUIManager*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_UIManagergetType) {
    GType cres = (GType)gtk_ui_manager_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnnewWithAttributes) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    GtkObject* cres = (GtkObject*)gtk_tree_view_column_new_with_attributes(
        (gchar*)a0
        ,(GtkCellRenderer*)a1
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeViewColumnnew) {
    GtkObject* cres = (GtkObject*)gtk_tree_view_column_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE4(Gtk_TreeViewColumncellGetPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x3);
               gint* a3 = (gint*)&tmp1;
    gtk_tree_view_column_cell_get_position(
        (GtkTreeViewColumn*)a0
        ,(GtkCellRenderer*)a1
        ,(gint*)a2
        ,(gint*)a3
        );
    word r2 = Store::IntToWord(*a2);
    word r3 = Store::IntToWord(*a3);
    RETURN2(r2,r3);
} END
DEFINE2(Gtk_TreeViewColumnfocusCell) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    gtk_tree_view_column_focus_cell(
        (GtkTreeViewColumn*)a0
        ,(GtkCellRenderer*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumncellIsVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gboolean cres = (gboolean)gtk_tree_view_column_cell_is_visible(
        (GtkTreeViewColumn*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE6(Gtk_TreeViewColumncellGetSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_RECTANGLE);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x3);
               gint* a3 = (gint*)&tmp1;
    DECLARE_INT_AS(gint, tmp2, x4);
               gint* a4 = (gint*)&tmp2;
    DECLARE_INT_AS(gint, tmp3, x5);
               gint* a5 = (gint*)&tmp3;
    gtk_tree_view_column_cell_get_size(
        (GtkTreeViewColumn*)a0
        ,(GdkRectangle*)a1
        ,(gint*)a2
        ,(gint*)a3
        ,(gint*)a4
        ,(gint*)a5
        );
    word r2 = Store::IntToWord(*a2);
    word r3 = Store::IntToWord(*a3);
    word r4 = Store::IntToWord(*a4);
    word r5 = Store::IntToWord(*a5);
    RETURN4(r2,r3,r4,r5);
} END
DEFINE5(Gtk_TreeViewColumncellSetCellData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    DECLARE_BOOL(a3, x3);
    DECLARE_BOOL(a4, x4);
    gtk_tree_view_column_cell_set_cell_data(
        (GtkTreeViewColumn*)a0
        ,(GtkTreeModel*)a1
        ,(GtkTreeIter*)a2
        ,(gboolean)a3
        ,(gboolean)a4
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetSortOrder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    GtkSortType cres = (GtkSortType)gtk_tree_view_column_get_sort_order(
        (GtkTreeViewColumn*)a0
        );
    word res = GtkSortTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetSortOrder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkSortType a1 = GtkSortTypetFromWord(x1);
    gtk_tree_view_column_set_sort_order(
        (GtkTreeViewColumn*)a0
        ,(GtkSortType)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetSortIndicator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gboolean cres = (gboolean)gtk_tree_view_column_get_sort_indicator(
        (GtkTreeViewColumn*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetSortIndicator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_column_set_sort_indicator(
        (GtkTreeViewColumn*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetSortColumnId) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_column_get_sort_column_id(
        (GtkTreeViewColumn*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetSortColumnId) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_INT(a1, x1);
    gtk_tree_view_column_set_sort_column_id(
        (GtkTreeViewColumn*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetReorderable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gboolean cres = (gboolean)gtk_tree_view_column_get_reorderable(
        (GtkTreeViewColumn*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetReorderable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_column_set_reorderable(
        (GtkTreeViewColumn*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetAlignment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gfloat cres = (gfloat)gtk_tree_view_column_get_alignment(
        (GtkTreeViewColumn*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetAlignment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_CFLOAT(a1, x1);
    gtk_tree_view_column_set_alignment(
        (GtkTreeViewColumn*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    GtkWidget* cres = (GtkWidget*)gtk_tree_view_column_get_widget(
        (GtkTreeViewColumn*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_tree_view_column_set_widget(
        (GtkTreeViewColumn*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetClickable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gboolean cres = (gboolean)gtk_tree_view_column_get_clickable(
        (GtkTreeViewColumn*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetClickable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_column_set_clickable(
        (GtkTreeViewColumn*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetExpand) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gboolean cres = (gboolean)gtk_tree_view_column_get_expand(
        (GtkTreeViewColumn*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetExpand) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_column_set_expand(
        (GtkTreeViewColumn*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    const gchar* cres = (const gchar*)gtk_tree_view_column_get_title(
        (GtkTreeViewColumn*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_CSTRING(a1, x1);
    gtk_tree_view_column_set_title(
        (GtkTreeViewColumn*)a0
        ,(gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumnclicked) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gtk_tree_view_column_clicked(
        (GtkTreeViewColumn*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetMaxWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_column_get_max_width(
        (GtkTreeViewColumn*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetMaxWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_INT(a1, x1);
    gtk_tree_view_column_set_max_width(
        (GtkTreeViewColumn*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetMinWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_column_get_min_width(
        (GtkTreeViewColumn*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetMinWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_INT(a1, x1);
    gtk_tree_view_column_set_min_width(
        (GtkTreeViewColumn*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeViewColumnsetFixedWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_INT(a1, x1);
    gtk_tree_view_column_set_fixed_width(
        (GtkTreeViewColumn*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetFixedWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_column_get_fixed_width(
        (GtkTreeViewColumn*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewColumngetWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_column_get_width(
        (GtkTreeViewColumn*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewColumngetSizing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_column_get_sizing(
        (GtkTreeViewColumn*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetSizing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTreeViewColumnSizing a1 = GtkTreeViewColumnSizingtFromWord(x1);
    gtk_tree_view_column_set_sizing(
        (GtkTreeViewColumn*)a0
        ,(GtkTreeViewColumnSizing)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetResizable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gboolean cres = (gboolean)gtk_tree_view_column_get_resizable(
        (GtkTreeViewColumn*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetResizable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_column_set_resizable(
        (GtkTreeViewColumn*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gboolean cres = (gboolean)gtk_tree_view_column_get_visible(
        (GtkTreeViewColumn*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_column_set_visible(
        (GtkTreeViewColumn*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_column_get_spacing(
        (GtkTreeViewColumn*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewColumnsetSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_INT(a1, x1);
    gtk_tree_view_column_set_spacing(
        (GtkTreeViewColumn*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeViewColumnclearAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    gtk_tree_view_column_clear_attributes(
        (GtkTreeViewColumn*)a0
        ,(GtkCellRenderer*)a1
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_TreeViewColumnsetCellDataFunc) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    GtkTreeCellDataFunc a2 = 0; /* FIXME: can't be done with current seam*/
    DECLARE_OBJECT(a3, x3);
    DECLARE_OBJECT (a4, x4);
    gtk_tree_view_column_set_cell_data_func(
        (GtkTreeViewColumn*)a0
        ,(GtkCellRenderer*)a1
        ,(GtkTreeCellDataFunc)a2
        ,(gpointer)a3
        ,(GtkDestroyNotify)a4
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeViewColumnsetAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    gtk_tree_view_column_set_attributes(
        (GtkTreeViewColumn*)a0
        ,(GtkCellRenderer*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeViewColumnaddAttribute) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    DECLARE_CSTRING(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_tree_view_column_add_attribute(
        (GtkTreeViewColumn*)a0
        ,(GtkCellRenderer*)a1
        ,(gchar*)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewColumngetCellRenderers) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    GList* cres = (GList*)gtk_tree_view_column_get_cell_renderers(
        (GtkTreeViewColumn*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewColumnclear) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    gtk_tree_view_column_clear(
        (GtkTreeViewColumn*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeViewColumnpackEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    DECLARE_BOOL(a2, x2);
    gtk_tree_view_column_pack_end(
        (GtkTreeViewColumn*)a0
        ,(GtkCellRenderer*)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeViewColumnpackStart) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    DECLARE_BOOL(a2, x2);
    gtk_tree_view_column_pack_start(
        (GtkTreeViewColumn*)a0
        ,(GtkCellRenderer*)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TreeViewColumngetType) {
    GType cres = (GType)gtk_tree_view_column_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewnewWithModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    GtkWidget* cres = (GtkWidget*)gtk_tree_view_new_with_model(
        (GtkTreeModel*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeViewnew) {
    GtkWidget* cres = (GtkWidget*)gtk_tree_view_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewgetHoverExpand) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gboolean cres = (gboolean)gtk_tree_view_get_hover_expand(
        (GtkTreeView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetHoverExpand) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_set_hover_expand(
        (GtkTreeView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetHoverSelection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gboolean cres = (gboolean)gtk_tree_view_get_hover_selection(
        (GtkTreeView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetHoverSelection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_set_hover_selection(
        (GtkTreeView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetFixedHeightMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gboolean cres = (gboolean)gtk_tree_view_get_fixed_height_mode(
        (GtkTreeView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetFixedHeightMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_set_fixed_height_mode(
        (GtkTreeView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeViewsetSearchColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_INT(a1, x1);
    gtk_tree_view_set_search_column(
        (GtkTreeView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetSearchColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gint cres = (gint)gtk_tree_view_get_search_column(
        (GtkTreeView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewgetEnableSearch) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gboolean cres = (gboolean)gtk_tree_view_get_enable_search(
        (GtkTreeView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetEnableSearch) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_set_enable_search(
        (GtkTreeView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeViewcreateRowDragIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    GdkPixmap* cres = (GdkPixmap*)gtk_tree_view_create_row_drag_icon(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE4(Gtk_TreeViewgetDestRowAtPos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    GtkTreePath* tmp0 = 0; GtkTreePath** a3 = &tmp0;
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkTreeViewDropPosition tmp1 = GtkTreeViewDropPositiontFromWord(x3);GtkTreeViewDropPosition *a4 = &tmp1;
    gboolean cres = (gboolean)gtk_tree_view_get_dest_row_at_pos(
        (GtkTreeView*)a0
        ,(gint)a1
        ,(gint)a2
        ,(GtkTreePath**)a3
        ,(GtkTreeViewDropPosition*)a4
        );
    word res = BOOL_TO_WORD(cres);
    word r3 = OBJECT_TO_WORD(*a3, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    word r4 = GtkTreeViewDropPositiontToWord(*a4);
    RETURN3(res,r3,r4);
} END
DEFINE2(Gtk_TreeViewgetDragDestRow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GtkTreePath* tmp0 = 0; GtkTreePath** a1 = &tmp0;
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTreeViewDropPosition tmp1 = GtkTreeViewDropPositiontFromWord(x1);GtkTreeViewDropPosition *a2 = &tmp1;
    gtk_tree_view_get_drag_dest_row(
        (GtkTreeView*)a0
        ,(GtkTreePath**)a1
        ,(GtkTreeViewDropPosition*)a2
        );
    word r1 = OBJECT_TO_WORD(*a1, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    word r2 = GtkTreeViewDropPositiontToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_TreeViewsetDragDestRow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkTreeViewDropPosition a2 = GtkTreeViewDropPositiontFromWord(x2);
    gtk_tree_view_set_drag_dest_row(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeViewDropPosition)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewunsetRowsDragDest) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gtk_tree_view_unset_rows_drag_dest(
        (GtkTreeView*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewunsetRowsDragSource) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gtk_tree_view_unset_rows_drag_source(
        (GtkTreeView*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeViewenableModelDragDest) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_C_ARG_ARRAY(a1, a1size, x1, gint, GtkTargetEntry, DECLARE_OBJECT(tmp0, elem_alice);
GtkTargetEntry elem_c = *(GtkTargetEntry*)tmp0;);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkDragAction a2 = GdkDragActiontFromWord(x2);
    gtk_tree_view_enable_model_drag_dest(
        (GtkTreeView*)a0
        ,(GtkTargetEntry*)a1, (gint)a1size
        ,(GdkDragAction)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeViewenableModelDragSource) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GdkModifierType a1 = GdkModifierTypetFromWord(x1);
    DECLARE_C_ARG_ARRAY(a2, a2size, x2, gint, GtkTargetEntry, DECLARE_OBJECT(tmp0, elem_alice);
GtkTargetEntry elem_c = *(GtkTargetEntry*)tmp0;);
    DECLARE_LIST_ELEMS(tmp2, tmp3, x3, 
{ if (Store::WordToInt(tmp2->Sel(0)) == INVALID_INT)
{REQUEST(x3);}
});
GdkDragAction a3 = GdkDragActiontFromWord(x3);
    gtk_tree_view_enable_model_drag_source(
        (GtkTreeView*)a0
        ,(GdkModifierType)a1
        ,(GtkTargetEntry*)a2, (gint)a2size
        ,(GdkDragAction)a3
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_TreeViewtreeToWidgetCoords) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x4);
               gint* a4 = (gint*)&tmp1;
    gtk_tree_view_tree_to_widget_coords(
        (GtkTreeView*)a0
        ,(gint)a1
        ,(gint)a2
        ,(gint*)a3
        ,(gint*)a4
        );
    word r3 = Store::IntToWord(*a3);
    word r4 = Store::IntToWord(*a4);
    RETURN2(r3,r4);
} END
DEFINE5(Gtk_TreeViewwidgetToTreeCoords) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x4);
               gint* a4 = (gint*)&tmp1;
    gtk_tree_view_widget_to_tree_coords(
        (GtkTreeView*)a0
        ,(gint)a1
        ,(gint)a2
        ,(gint*)a3
        ,(gint*)a4
        );
    word r3 = Store::IntToWord(*a3);
    word r4 = Store::IntToWord(*a4);
    RETURN2(r3,r4);
} END
DEFINE2(Gtk_TreeViewgetVisibleRect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_RECTANGLE);
    gtk_tree_view_get_visible_rect(
        (GtkTreeView*)a0
        ,(GdkRectangle*)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeViewgetBackgroundArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    gtk_tree_view_get_background_area(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeViewColumn*)a2
        ,(GdkRectangle*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeViewgetCellArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    gtk_tree_view_get_cell_area(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeViewColumn*)a2
        ,(GdkRectangle*)a3
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_TreeViewgetPathAtPos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    GtkTreePath* tmp0 = 0; GtkTreePath** a3 = &tmp0;
    GtkTreeViewColumn* tmp1 = 0; GtkTreeViewColumn** a4 = &tmp1;
    DECLARE_INT_AS(gint, tmp2, x3);
               gint* a5 = (gint*)&tmp2;
    DECLARE_INT_AS(gint, tmp3, x4);
               gint* a6 = (gint*)&tmp3;
    gboolean cres = (gboolean)gtk_tree_view_get_path_at_pos(
        (GtkTreeView*)a0
        ,(gint)a1
        ,(gint)a2
        ,(GtkTreePath**)a3
        ,(GtkTreeViewColumn**)a4
        ,(gint*)a5
        ,(gint*)a6
        );
    word res = BOOL_TO_WORD(cres);
    word r3 = OBJECT_TO_WORD(*a3, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    word r4 = OBJECT_TO_WORD(*a4,TYPE_GTK_OBJECT);
    word r5 = Store::IntToWord(*a5);
    word r6 = Store::IntToWord(*a6);
    RETURN5(res,r3,r4,r5,r6);
} END
DEFINE1(Gtk_TreeViewgetBinWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GdkWindow* cres = (GdkWindow*)gtk_tree_view_get_bin_window(
        (GtkTreeView*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewgetCursor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GtkTreePath* tmp0 = 0; GtkTreePath** a1 = &tmp0;
    GtkTreeViewColumn* tmp1 = 0; GtkTreeViewColumn** a2 = &tmp1;
    gtk_tree_view_get_cursor(
        (GtkTreeView*)a0
        ,(GtkTreePath**)a1
        ,(GtkTreeViewColumn**)a2
        );
    word r1 = OBJECT_TO_WORD(*a1, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    word r2 = OBJECT_TO_WORD(*a2,TYPE_GTK_OBJECT);
    RETURN2(r1,r2);
} END
DEFINE5(Gtk_TreeViewsetCursorOnCell) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_CELL_RENDERER);
    DECLARE_BOOL(a4, x4);
    gtk_tree_view_set_cursor_on_cell(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeViewColumn*)a2
        ,(GtkCellRenderer*)a3
        ,(gboolean)a4
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeViewsetCursor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_BOOL(a3, x3);
    gtk_tree_view_set_cursor(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeViewColumn*)a2
        ,(gboolean)a3
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetReorderable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gboolean cres = (gboolean)gtk_tree_view_get_reorderable(
        (GtkTreeView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetReorderable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_set_reorderable(
        (GtkTreeView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeViewrowExpanded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_tree_view_row_expanded(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewcollapseRow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_tree_view_collapse_row(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeViewexpandRow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_BOOL(a2, x2);
    gboolean cres = (gboolean)gtk_tree_view_expand_row(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        ,(gboolean)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewexpandToPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_tree_view_expand_to_path(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewcollapseAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gtk_tree_view_collapse_all(
        (GtkTreeView*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewexpandAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gtk_tree_view_expand_all(
        (GtkTreeView*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeViewrowActivated) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_VIEW_COLUMN);
    gtk_tree_view_row_activated(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeViewColumn*)a2
        );
    RETURN_UNIT;
} END
DEFINE6(Gtk_TreeViewscrollToCell) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_BOOL(a3, x3);
    DECLARE_CFLOAT(a4, x4);
    DECLARE_CFLOAT(a5, x5);
    gtk_tree_view_scroll_to_cell(
        (GtkTreeView*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeViewColumn*)a2
        ,(gboolean)a3
        ,(gfloat)a4
        ,(gfloat)a5
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeViewscrollToPoint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_tree_view_scroll_to_point(
        (GtkTreeView*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetExpanderColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GtkTreeViewColumn* cres = (GtkTreeViewColumn*)gtk_tree_view_get_expander_column(
        (GtkTreeView*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetExpanderColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_VIEW_COLUMN);
    gtk_tree_view_set_expander_column(
        (GtkTreeView*)a0
        ,(GtkTreeViewColumn*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeViewmoveColumnAfter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_VIEW_COLUMN);
    gtk_tree_view_move_column_after(
        (GtkTreeView*)a0
        ,(GtkTreeViewColumn*)a1
        ,(GtkTreeViewColumn*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetColumns) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GList* cres = (GList*)gtk_tree_view_get_columns(
        (GtkTreeView*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewgetColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_INT(a1, x1);
    GtkTreeViewColumn* cres = (GtkTreeViewColumn*)gtk_tree_view_get_column(
        (GtkTreeView*)a0
        ,(gint)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE4(Gtk_TreeViewinsertColumnWithAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_INT(a1, x1);
    DECLARE_CSTRING(a2, x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_CELL_RENDERER);
    gint cres = (gint)gtk_tree_view_insert_column_with_attributes(
        (GtkTreeView*)a0
        ,(gint)a1
        ,(const gchar*)a2
        ,(GtkCellRenderer*)a3
        , NULL
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeViewinsertColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_VIEW_COLUMN);
    DECLARE_INT(a2, x2);
    gint cres = (gint)gtk_tree_view_insert_column(
        (GtkTreeView*)a0
        ,(GtkTreeViewColumn*)a1
        ,(gint)a2
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewremoveColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_remove_column(
        (GtkTreeView*)a0
        ,(GtkTreeViewColumn*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewappendColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_VIEW_COLUMN);
    gint cres = (gint)gtk_tree_view_append_column(
        (GtkTreeView*)a0
        ,(GtkTreeViewColumn*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewgetRulesHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gboolean cres = (gboolean)gtk_tree_view_get_rules_hint(
        (GtkTreeView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetRulesHint) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_set_rules_hint(
        (GtkTreeView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeViewsetHeadersClickable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_set_headers_clickable(
        (GtkTreeView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewcolumnsAutosize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gtk_tree_view_columns_autosize(
        (GtkTreeView*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeViewsetHeadersVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_tree_view_set_headers_visible(
        (GtkTreeView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetHeadersVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    gboolean cres = (gboolean)gtk_tree_view_get_headers_visible(
        (GtkTreeView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_tree_view_set_vadjustment(
        (GtkTreeView*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_tree_view_get_vadjustment(
        (GtkTreeView*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_tree_view_set_hadjustment(
        (GtkTreeView*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_tree_view_get_hadjustment(
        (GtkTreeView*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeViewgetSelection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GtkTreeSelection* cres = (GtkTreeSelection*)gtk_tree_view_get_selection(
        (GtkTreeView*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeViewsetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_MODEL);
    gtk_tree_view_set_model(
        (GtkTreeView*)a0
        ,(GtkTreeModel*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeViewgetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_VIEW);
    GtkTreeModel* cres = (GtkTreeModel*)gtk_tree_view_get_model(
        (GtkTreeView*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeViewgetType) {
    GType cres = (GType)gtk_tree_view_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeStorenewv) {
    DECLARE_C_ARG_ARRAY(a0, a0size, x0, gint, GType, DECLARE_INT(elem_c, elem_alice););
    GtkTreeStore* cres = (GtkTreeStore*)gtk_tree_store_newv(
        (gint)a0size, (GType*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeStoremoveBefore) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_store_move_before(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeStoremoveAfter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_store_move_after(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeStoreswap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_store_swap(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeStorereorder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    gtk_tree_store_reorder(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(gint*)a2
        );
    word r2 = Store::IntToWord(*a2);
    RETURN1(r2);
} END
DEFINE2(Gtk_TreeStoreiterIsValid) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_store_iter_is_valid(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeStoreclear) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    gtk_tree_store_clear(
        (GtkTreeStore*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeStoreiterDepth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gint cres = (gint)gtk_tree_store_iter_depth(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeStoreisAncestor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_store_is_ancestor(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeStoreappend) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_store_append(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeStoreprepend) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_store_prepend(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeStoreinsertAfter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TREE_ITER);
    gtk_tree_store_insert_after(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        ,(GtkTreeIter*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeStoreinsertBefore) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TREE_ITER);
    gtk_tree_store_insert_before(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        ,(GtkTreeIter*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeStoreinsert) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    DECLARE_INT(a3, x3);
    gtk_tree_store_insert(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeStoreremove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_store_remove(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeStoreset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_tree_store_set(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TreeStoresetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_INT(a2, x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, G_TYPE_VALUE);
    gtk_tree_store_set_value(
        (GtkTreeStore*)a0
        ,(GtkTreeIter*)a1
        ,(gint)a2
        ,(GValue*)a3
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeStoresetColumnTypes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_STORE);
    DECLARE_C_ARG_ARRAY(a1, a1size, x1, gint, GType, DECLARE_INT(elem_c, elem_alice););
    gtk_tree_store_set_column_types(
        (GtkTreeStore*)a0
        ,(gint)a1size, (GType*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TreeStoregetType) {
    GType cres = (GType)gtk_tree_store_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeSelectionunselectRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_PATH);
    gtk_tree_selection_unselect_range(
        (GtkTreeSelection*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreePath*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeSelectionselectRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_PATH);
    gtk_tree_selection_select_range(
        (GtkTreeSelection*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreePath*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeSelectionunselectAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    gtk_tree_selection_unselect_all(
        (GtkTreeSelection*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeSelectionselectAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    gtk_tree_selection_select_all(
        (GtkTreeSelection*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeSelectioniterIsSelected) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_selection_iter_is_selected(
        (GtkTreeSelection*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeSelectionpathIsSelected) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_tree_selection_path_is_selected(
        (GtkTreeSelection*)a0
        ,(GtkTreePath*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeSelectionunselectIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_tree_selection_unselect_iter(
        (GtkTreeSelection*)a0
        ,(GtkTreeIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeSelectionselectIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_tree_selection_select_iter(
        (GtkTreeSelection*)a0
        ,(GtkTreeIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeSelectionunselectPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_tree_selection_unselect_path(
        (GtkTreeSelection*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeSelectionselectPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_tree_selection_select_path(
        (GtkTreeSelection*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeSelectioncountSelectedRows) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    gint cres = (gint)gtk_tree_selection_count_selected_rows(
        (GtkTreeSelection*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeSelectiongetSelectedRows) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    GtkTreeModel* tmp0 = 0; GtkTreeModel** a1 = &tmp0;
    GList* cres = (GList*)gtk_tree_selection_get_selected_rows(
        (GtkTreeSelection*)a0
        ,(GtkTreeModel**)a1
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    word r1 = OBJECT_TO_WORD(*a1,TYPE_GTK_OBJECT);
    RETURN2(res,r1);
} END
DEFINE2(Gtk_TreeSelectiongetSelected) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    GtkTreeModel* tmp0 = 0; GtkTreeModel** a1 = &tmp0;
    DECLARE_OBJECT_OF_TYPE(a2, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_selection_get_selected(
        (GtkTreeSelection*)a0
        ,(GtkTreeModel**)a1
        ,(GtkTreeIter*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r1 = OBJECT_TO_WORD(*a1,TYPE_GTK_OBJECT);
    RETURN2(res,r1);
} END
DEFINE1(Gtk_TreeSelectiongetTreeView) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    GtkTreeView* cres = (GtkTreeView*)gtk_tree_selection_get_tree_view(
        (GtkTreeSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeSelectiongetUserData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    gpointer cres = (gpointer)gtk_tree_selection_get_user_data(
        (GtkTreeSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres, TYPE_POINTER);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeSelectiongetMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    GtkSelectionMode cres = (GtkSelectionMode)gtk_tree_selection_get_mode(
        (GtkTreeSelection*)a0
        );
    word res = GtkSelectionModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeSelectionsetMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SELECTION);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkSelectionMode a1 = GtkSelectionModetFromWord(x1);
    gtk_tree_selection_set_mode(
        (GtkTreeSelection*)a0
        ,(GtkSelectionMode)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TreeSelectiongetType) {
    GType cres = (GType)gtk_tree_selection_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeModelSortnewWithModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    GtkTreeModel* cres = (GtkTreeModel*)gtk_tree_model_sort_new_with_model(
        (GtkTreeModel*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModelSortiterIsValid) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_SORT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_model_sort_iter_is_valid(
        (GtkTreeModelSort*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeModelSortclearCache) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_SORT);
    gtk_tree_model_sort_clear_cache(
        (GtkTreeModelSort*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeModelSortresetDefaultSortFunc) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_SORT);
    gtk_tree_model_sort_reset_default_sort_func(
        (GtkTreeModelSort*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeModelSortconvertIterToChildIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_SORT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_model_sort_convert_iter_to_child_iter(
        (GtkTreeModelSort*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeModelSortconvertPathToChildPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_SORT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_model_sort_convert_path_to_child_path(
        (GtkTreeModelSort*)a0
        ,(GtkTreePath*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeModelSortconvertChildIterToIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_SORT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_model_sort_convert_child_iter_to_iter(
        (GtkTreeModelSort*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeModelSortconvertChildPathToPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_SORT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_model_sort_convert_child_path_to_path(
        (GtkTreeModelSort*)a0
        ,(GtkTreePath*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeModelSortgetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_SORT);
    GtkTreeModel* cres = (GtkTreeModel*)gtk_tree_model_sort_get_model(
        (GtkTreeModelSort*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeModelSortgetType) {
    GType cres = (GType)gtk_tree_model_sort_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeModelFilterclearCache) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    gtk_tree_model_filter_clear_cache(
        (GtkTreeModelFilter*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeModelFilterrefilter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    gtk_tree_model_filter_refilter(
        (GtkTreeModelFilter*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeModelFilterconvertPathToChildPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_model_filter_convert_path_to_child_path(
        (GtkTreeModelFilter*)a0
        ,(GtkTreePath*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModelFilterconvertChildPathToPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_model_filter_convert_child_path_to_path(
        (GtkTreeModelFilter*)a0
        ,(GtkTreePath*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeModelFilterconvertIterToChildIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_model_filter_convert_iter_to_child_iter(
        (GtkTreeModelFilter*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeModelFilterconvertChildIterToIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_model_filter_convert_child_iter_to_iter(
        (GtkTreeModelFilter*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TreeModelFiltergetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    GtkTreeModel* cres = (GtkTreeModel*)gtk_tree_model_filter_get_model(
        (GtkTreeModelFilter*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModelFiltersetVisibleColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    DECLARE_INT(a1, x1);
    gtk_tree_model_filter_set_visible_column(
        (GtkTreeModelFilter*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE6(Gtk_TreeModelFiltersetModifyFunc) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL_FILTER);
    DECLARE_INT(a1, x1);
    DECLARE_OBJECT (a2, x2);
    GtkTreeModelFilterModifyFunc a3 = 0; /* FIXME: can't be done with current seam*/
    DECLARE_OBJECT(a4, x4);
    DECLARE_OBJECT (a5, x5);
    gtk_tree_model_filter_set_modify_func(
        (GtkTreeModelFilter*)a0
        ,(gint)a1
        ,(GType*)a2
        ,(GtkTreeModelFilterModifyFunc)a3
        ,(gpointer)a4
        ,(GtkDestroyNotify)a5
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TreeModelFiltergetType) {
    GType cres = (GType)gtk_tree_model_filter_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Tooltipsnew) {
    GtkTooltips* cres = (GtkTooltips*)gtk_tooltips_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldActiveTipsData(O) ((O)->active_tips_data)
#define DOsetFieldActiveTipsData(O, V) ((O)->active_tips_data = (V))
#define DOgetFieldDelay(O) ((O)->delay)
#define DOsetFieldDelay(O, V) ((O)->delay = (V))
#define DOgetFieldEnabled(O) ((O)->enabled)
#define DOsetFieldEnabled(O, V) ((O)->enabled = (V))
#define DOgetFieldTimerTag(O) ((O)->timer_tag)
#define DOsetFieldTimerTag(O, V) ((O)->timer_tag = (V))
#define DOgetFieldTipLabel(O) ((O)->tip_label)
#define DOsetFieldTipLabel(O, V) ((O)->tip_label = (V))
#define DOgetFieldTipWindow(O) ((O)->tip_window)
#define DOsetFieldTipWindow(O, V) ((O)->tip_window = (V))
#define DOgetFieldTipsDataList(O) ((O)->tips_data_list)
#define DOsetFieldTipsDataList(O, V) ((O)->tips_data_list = (V))
#define DOgetFieldUseStickyDelay(O) ((O)->use_sticky_delay)
#define DOsetFieldUseStickyDelay(O, V) ((O)->use_sticky_delay = (V))
DEFINE1(Gtk_TooltipsforceWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    gtk_tooltips_force_window(
        (GtkTooltips*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TooltipsdataGet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkTooltipsData* cres = (GtkTooltipsData*)gtk_tooltips_data_get(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE4(Gtk_TooltipssetTip) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a2, x2);
    DECLARE_CSTRING(a3, x3);
    gtk_tooltips_set_tip(
        (GtkTooltips*)a0
        ,(GtkWidget*)a1
        ,(const gchar*)a2
        ,(const gchar*)a3
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Tooltipsdisable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    gtk_tooltips_disable(
        (GtkTooltips*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Tooltipsenable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    gtk_tooltips_enable(
        (GtkTooltips*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TooltipsgetType) {
    GType cres = (GType)gtk_tooltips_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TooltipsgetFieldUseStickyDelay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    guint cres = (guint)DOgetFieldUseStickyDelay(
        (GtkTooltips*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TooltipssetFieldUseStickyDelay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_INT(a1, x1);
    DOsetFieldUseStickyDelay(
        (GtkTooltips*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TooltipsgetFieldTipsDataList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    GList* cres = (GList*)DOgetFieldTipsDataList(
        (GtkTooltips*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TooltipssetFieldTipsDataList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_GLIST(a1, x1, DECLARE_OBJECT);
    DOsetFieldTipsDataList(
        (GtkTooltips*)a0
        ,(GList*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TooltipsgetFieldTipWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    GtkWidget* cres = (GtkWidget*)DOgetFieldTipWindow(
        (GtkTooltips*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TooltipssetFieldTipWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldTipWindow(
        (GtkTooltips*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TooltipsgetFieldTipLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    GtkWidget* cres = (GtkWidget*)DOgetFieldTipLabel(
        (GtkTooltips*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TooltipssetFieldTipLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldTipLabel(
        (GtkTooltips*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TooltipsgetFieldTimerTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    gint cres = (gint)DOgetFieldTimerTag(
        (GtkTooltips*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TooltipssetFieldTimerTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_INT(a1, x1);
    DOsetFieldTimerTag(
        (GtkTooltips*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TooltipsgetFieldEnabled) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    guint cres = (guint)DOgetFieldEnabled(
        (GtkTooltips*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TooltipssetFieldEnabled) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_INT(a1, x1);
    DOsetFieldEnabled(
        (GtkTooltips*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TooltipsgetFieldDelay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    guint cres = (guint)DOgetFieldDelay(
        (GtkTooltips*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TooltipssetFieldDelay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_INT(a1, x1);
    DOsetFieldDelay(
        (GtkTooltips*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TooltipsgetFieldActiveTipsData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    GtkTooltipsData* cres = (GtkTooltipsData*)DOgetFieldActiveTipsData(
        (GtkTooltips*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TooltipssetFieldActiveTipsData) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLTIPS);
    DECLARE_OBJECT (a1, x1);
    DOsetFieldActiveTipsData(
        (GtkTooltips*)a0
        ,(GtkTooltipsData*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldActiveTipsData
#undef DOsetFieldActiveTipsData
#undef DOgetFieldDelay
#undef DOsetFieldDelay
#undef DOgetFieldEnabled
#undef DOsetFieldEnabled
#undef DOgetFieldTimerTag
#undef DOsetFieldTimerTag
#undef DOgetFieldTipLabel
#undef DOsetFieldTipLabel
#undef DOgetFieldTipWindow
#undef DOsetFieldTipWindow
#undef DOgetFieldTipsDataList
#undef DOsetFieldTipsDataList
#undef DOgetFieldUseStickyDelay
#undef DOsetFieldUseStickyDelay
DEFINE0(Gtk_ToolItemnew) {
    GtkToolItem* cres = (GtkToolItem*)gtk_tool_item_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolItemrebuildMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    gtk_tool_item_rebuild_menu(
        (GtkToolItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ToolItemgetProxyMenuItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_tool_item_get_proxy_menu_item(
        (GtkToolItem*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_ToolItemsetProxyMenuItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    gtk_tool_item_set_proxy_menu_item(
        (GtkToolItem*)a0
        ,(const gchar*)a1
        ,(GtkWidget*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolItemretrieveProxyMenuItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    GtkWidget* cres = (GtkWidget*)gtk_tool_item_retrieve_proxy_menu_item(
        (GtkToolItem*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolItemgetReliefStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    GtkReliefStyle cres = (GtkReliefStyle)gtk_tool_item_get_relief_style(
        (GtkToolItem*)a0
        );
    word res = GtkReliefStyletToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolItemgetToolbarStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    GtkToolbarStyle cres = (GtkToolbarStyle)gtk_tool_item_get_toolbar_style(
        (GtkToolItem*)a0
        );
    word res = GtkToolbarStyletToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolItemgetOrientation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    GtkOrientation cres = (GtkOrientation)gtk_tool_item_get_orientation(
        (GtkToolItem*)a0
        );
    word res = GtkOrientationtToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolItemgetIconSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    GtkIconSize cres = (GtkIconSize)gtk_tool_item_get_icon_size(
        (GtkToolItem*)a0
        );
    word res = GtkIconSizetToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolItemgetIsImportant) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    gboolean cres = (gboolean)gtk_tool_item_get_is_important(
        (GtkToolItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolItemsetIsImportant) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_tool_item_set_is_important(
        (GtkToolItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolItemgetVisibleVertical) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    gboolean cres = (gboolean)gtk_tool_item_get_visible_vertical(
        (GtkToolItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolItemsetVisibleVertical) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_tool_item_set_visible_vertical(
        (GtkToolItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolItemgetVisibleHorizontal) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    gboolean cres = (gboolean)gtk_tool_item_get_visible_horizontal(
        (GtkToolItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolItemsetVisibleHorizontal) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_tool_item_set_visible_horizontal(
        (GtkToolItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolItemgetUseDragWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    gboolean cres = (gboolean)gtk_tool_item_get_use_drag_window(
        (GtkToolItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolItemsetUseDragWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_tool_item_set_use_drag_window(
        (GtkToolItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_ToolItemsetTooltip) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TOOLTIPS);
    DECLARE_CSTRING(a2, x2);
    DECLARE_CSTRING(a3, x3);
    gtk_tool_item_set_tooltip(
        (GtkToolItem*)a0
        ,(GtkTooltips*)a1
        ,(const gchar*)a2
        ,(const gchar*)a3
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolItemgetExpand) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    gboolean cres = (gboolean)gtk_tool_item_get_expand(
        (GtkToolItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolItemsetExpand) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_tool_item_set_expand(
        (GtkToolItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolItemgetHomogeneous) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    gboolean cres = (gboolean)gtk_tool_item_get_homogeneous(
        (GtkToolItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolItemsetHomogeneous) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_tool_item_set_homogeneous(
        (GtkToolItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ToolItemgetType) {
    GType cres = (GType)gtk_tool_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolButtonnew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    GtkToolItem* cres = (GtkToolItem*)gtk_tool_button_new(
        (GtkWidget*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolButtongetLabelWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    GtkWidget* cres = (GtkWidget*)gtk_tool_button_get_label_widget(
        (GtkToolButton*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolButtonsetLabelWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_tool_button_set_label_widget(
        (GtkToolButton*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolButtongetIconWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    GtkWidget* cres = (GtkWidget*)gtk_tool_button_get_icon_widget(
        (GtkToolButton*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolButtonsetIconWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_tool_button_set_icon_widget(
        (GtkToolButton*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolButtongetStockId) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    const gchar* cres = (const gchar*)gtk_tool_button_get_stock_id(
        (GtkToolButton*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ToolButtonsetStockId) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    DECLARE_CSTRING(a1, x1);
    gtk_tool_button_set_stock_id(
        (GtkToolButton*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolButtongetUseUnderline) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    gboolean cres = (gboolean)gtk_tool_button_get_use_underline(
        (GtkToolButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolButtonsetUseUnderline) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_tool_button_set_use_underline(
        (GtkToolButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolButtongetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    const gchar* cres = (const gchar*)gtk_tool_button_get_label(
        (GtkToolButton*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ToolButtonsetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOL_BUTTON);
    DECLARE_CSTRING(a1, x1);
    gtk_tool_button_set_label(
        (GtkToolButton*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolButtonnewFromStock) {
    DECLARE_CSTRING(a0, x0);
    GtkToolItem* cres = (GtkToolItem*)gtk_tool_button_new_from_stock(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ToolButtongetType) {
    GType cres = (GType)gtk_tool_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Toolbarnew) {
    GtkWidget* cres = (GtkWidget*)gtk_toolbar_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolbargetTooltips) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    gboolean cres = (gboolean)gtk_toolbar_get_tooltips(
        (GtkToolbar*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolbargetIconSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    GtkIconSize cres = (GtkIconSize)gtk_toolbar_get_icon_size(
        (GtkToolbar*)a0
        );
    word res = GtkIconSizetToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolbargetStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    GtkToolbarStyle cres = (GtkToolbarStyle)gtk_toolbar_get_style(
        (GtkToolbar*)a0
        );
    word res = GtkToolbarStyletToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolbargetOrientation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    GtkOrientation cres = (GtkOrientation)gtk_toolbar_get_orientation(
        (GtkToolbar*)a0
        );
    word res = GtkOrientationtToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolbarunsetStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    gtk_toolbar_unset_style(
        (GtkToolbar*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ToolbarsetTooltips) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    DECLARE_BOOL(a1, x1);
    gtk_toolbar_set_tooltips(
        (GtkToolbar*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ToolbarsetStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkToolbarStyle a1 = GtkToolbarStyletFromWord(x1);
    gtk_toolbar_set_style(
        (GtkToolbar*)a0
        ,(GtkToolbarStyle)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ToolbarsetOrientation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkOrientation a1 = GtkOrientationtFromWord(x1);
    gtk_toolbar_set_orientation(
        (GtkToolbar*)a0
        ,(GtkOrientation)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToolbargetReliefStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    GtkReliefStyle cres = (GtkReliefStyle)gtk_toolbar_get_relief_style(
        (GtkToolbar*)a0
        );
    word res = GtkReliefStyletToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolbargetShowArrow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    gboolean cres = (gboolean)gtk_toolbar_get_show_arrow(
        (GtkToolbar*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolbarsetShowArrow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    DECLARE_BOOL(a1, x1);
    gtk_toolbar_set_show_arrow(
        (GtkToolbar*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ToolbarsetDropHighlightItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TOOL_ITEM);
    DECLARE_INT(a2, x2);
    gtk_toolbar_set_drop_highlight_item(
        (GtkToolbar*)a0
        ,(GtkToolItem*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ToolbargetDropIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gint cres = (gint)gtk_toolbar_get_drop_index(
        (GtkToolbar*)a0
        ,(gint)a1
        ,(gint)a2
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolbargetNthItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    DECLARE_INT(a1, x1);
    GtkToolItem* cres = (GtkToolItem*)gtk_toolbar_get_nth_item(
        (GtkToolbar*)a0
        ,(gint)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ToolbargetNItems) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    gint cres = (gint)gtk_toolbar_get_n_items(
        (GtkToolbar*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToolbargetItemIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TOOL_ITEM);
    gint cres = (gint)gtk_toolbar_get_item_index(
        (GtkToolbar*)a0
        ,(GtkToolItem*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_Toolbarinsert) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOOLBAR);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TOOL_ITEM);
    DECLARE_INT(a2, x2);
    gtk_toolbar_insert(
        (GtkToolbar*)a0
        ,(GtkToolItem*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ToolbargetType) {
    GType cres = (GType)gtk_toolbar_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_ToggleToolButtonnew) {
    GtkToolItem* cres = (GtkToolItem*)gtk_toggle_tool_button_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ToggleToolButtongetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_TOOL_BUTTON);
    gboolean cres = (gboolean)gtk_toggle_tool_button_get_active(
        (GtkToggleToolButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToggleToolButtonsetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_TOOL_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_toggle_tool_button_set_active(
        (GtkToggleToolButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToggleToolButtonnewFromStock) {
    DECLARE_CSTRING(a0, x0);
    GtkToolItem* cres = (GtkToolItem*)gtk_toggle_tool_button_new_from_stock(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ToggleToolButtongetType) {
    GType cres = (GType)gtk_toggle_tool_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToggleButtonnewWithMnemonic) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_toggle_button_new_with_mnemonic(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ToggleButtonnewWithLabel) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_toggle_button_new_with_label(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ToggleButtonnew) {
    GtkWidget* cres = (GtkWidget*)gtk_toggle_button_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldDrawIndicator(O) ((O)->draw_indicator)
#define DOsetFieldDrawIndicator(O, V) ((O)->draw_indicator = (V))
DEFINE1(Gtk_ToggleButtongetInconsistent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    gboolean cres = (gboolean)gtk_toggle_button_get_inconsistent(
        (GtkToggleButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToggleButtonsetInconsistent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_toggle_button_set_inconsistent(
        (GtkToggleButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToggleButtontoggled) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    gtk_toggle_button_toggled(
        (GtkToggleButton*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToggleButtongetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    gboolean cres = (gboolean)gtk_toggle_button_get_active(
        (GtkToggleButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToggleButtonsetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_toggle_button_set_active(
        (GtkToggleButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToggleButtongetMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    gboolean cres = (gboolean)gtk_toggle_button_get_mode(
        (GtkToggleButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToggleButtonsetMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_toggle_button_set_mode(
        (GtkToggleButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ToggleButtongetType) {
    GType cres = (GType)gtk_toggle_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ToggleButtongetFieldDrawIndicator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    gboolean cres = (gboolean)DOgetFieldDrawIndicator(
        (GtkToggleButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToggleButtonsetFieldDrawIndicator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_BUTTON);
    DECLARE_BOOL(a1, x1);
    DOsetFieldDrawIndicator(
        (GtkToggleButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldDrawIndicator
#undef DOsetFieldDrawIndicator
DEFINE4(Gtk_ToggleActionnew) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_CSTRING(a1, x1);
    DECLARE_CSTRING(a2, x2);
    DECLARE_CSTRING(a3, x3);
    GtkToggleAction* cres = (GtkToggleAction*)gtk_toggle_action_new(
        (const gchar*)a0
        ,(const gchar*)a1
        ,(const gchar*)a2
        ,(const gchar*)a3
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ToggleActiongetDrawAsRadio) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_ACTION);
    gboolean cres = (gboolean)gtk_toggle_action_get_draw_as_radio(
        (GtkToggleAction*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToggleActionsetDrawAsRadio) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_ACTION);
    DECLARE_BOOL(a1, x1);
    gtk_toggle_action_set_draw_as_radio(
        (GtkToggleAction*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToggleActiongetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_ACTION);
    gboolean cres = (gboolean)gtk_toggle_action_get_active(
        (GtkToggleAction*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ToggleActionsetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_ACTION);
    DECLARE_BOOL(a1, x1);
    gtk_toggle_action_set_active(
        (GtkToggleAction*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ToggleActiontoggled) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TOGGLE_ACTION);
    gtk_toggle_action_toggled(
        (GtkToggleAction*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ToggleActiongetType) {
    GType cres = (GType)gtk_toggle_action_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextViewnewWithBuffer) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    GtkWidget* cres = (GtkWidget*)gtk_text_view_new_with_buffer(
        (GtkTextBuffer*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_TextViewnew) {
    GtkWidget* cres = (GtkWidget*)gtk_text_view_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TextViewgetDefaultAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    GtkTextAttributes* cres = (GtkTextAttributes*)gtk_text_view_get_default_attributes(
        (GtkTextView*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TEXT_ATTRIBUTES);
    RETURN1(res);
} END
DEFINE1(Gtk_TextViewgetTabs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    PangoTabArray* cres = (PangoTabArray*)gtk_text_view_get_tabs(
        (GtkTextView*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, PANGO_TYPE_TAB_ARRAY);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetTabs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, PANGO_TYPE_TAB_ARRAY);
    gtk_text_view_set_tabs(
        (GtkTextView*)a0
        ,(PangoTabArray*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetIndent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gint cres = (gint)gtk_text_view_get_indent(
        (GtkTextView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetIndent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_INT(a1, x1);
    gtk_text_view_set_indent(
        (GtkTextView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetRightMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gint cres = (gint)gtk_text_view_get_right_margin(
        (GtkTextView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetRightMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_INT(a1, x1);
    gtk_text_view_set_right_margin(
        (GtkTextView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetLeftMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gint cres = (gint)gtk_text_view_get_left_margin(
        (GtkTextView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetLeftMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_INT(a1, x1);
    gtk_text_view_set_left_margin(
        (GtkTextView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetJustification) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    GtkJustification cres = (GtkJustification)gtk_text_view_get_justification(
        (GtkTextView*)a0
        );
    word res = GtkJustificationtToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetJustification) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkJustification a1 = GtkJustificationtFromWord(x1);
    gtk_text_view_set_justification(
        (GtkTextView*)a0
        ,(GtkJustification)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetPixelsInsideWrap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gint cres = (gint)gtk_text_view_get_pixels_inside_wrap(
        (GtkTextView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetPixelsInsideWrap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_INT(a1, x1);
    gtk_text_view_set_pixels_inside_wrap(
        (GtkTextView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetPixelsBelowLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gint cres = (gint)gtk_text_view_get_pixels_below_lines(
        (GtkTextView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetPixelsBelowLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_INT(a1, x1);
    gtk_text_view_set_pixels_below_lines(
        (GtkTextView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetPixelsAboveLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gint cres = (gint)gtk_text_view_get_pixels_above_lines(
        (GtkTextView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetPixelsAboveLines) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_INT(a1, x1);
    gtk_text_view_set_pixels_above_lines(
        (GtkTextView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetAcceptsTab) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gboolean cres = (gboolean)gtk_text_view_get_accepts_tab(
        (GtkTextView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetAcceptsTab) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_text_view_set_accepts_tab(
        (GtkTextView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetOverwrite) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gboolean cres = (gboolean)gtk_text_view_get_overwrite(
        (GtkTextView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetOverwrite) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_text_view_set_overwrite(
        (GtkTextView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetEditable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gboolean cres = (gboolean)gtk_text_view_get_editable(
        (GtkTextView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetEditable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_text_view_set_editable(
        (GtkTextView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetWrapMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    GtkWrapMode cres = (GtkWrapMode)gtk_text_view_get_wrap_mode(
        (GtkTextView*)a0
        );
    word res = GtkWrapModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetWrapMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkWrapMode a1 = GtkWrapModetFromWord(x1);
    gtk_text_view_set_wrap_mode(
        (GtkTextView*)a0
        ,(GtkWrapMode)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextViewmoveChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_text_view_move_child(
        (GtkTextView*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_TextViewaddChildInWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkTextWindowType a2 = GtkTextWindowTypetFromWord(x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_text_view_add_child_in_window(
        (GtkTextView*)a0
        ,(GtkWidget*)a1
        ,(GtkTextWindowType)a2
        ,(gint)a3
        ,(gint)a4
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextViewaddChildAtAnchor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_CHILD_ANCHOR);
    gtk_text_view_add_child_at_anchor(
        (GtkTextView*)a0
        ,(GtkWidget*)a1
        ,(GtkTextChildAnchor*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextViewmoveVisually) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a2, x2);
    gboolean cres = (gboolean)gtk_text_view_move_visually(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        ,(gint)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewstartsDisplayLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_view_starts_display_line(
        (GtkTextView*)a0
        ,(const GtkTextIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewbackwardDisplayLineStart) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_view_backward_display_line_start(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewforwardDisplayLineEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_view_forward_display_line_end(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewbackwardDisplayLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_view_backward_display_line(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewforwardDisplayLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_view_forward_display_line(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewgetBorderWindowSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTextWindowType a1 = GtkTextWindowTypetFromWord(x1);
    gint cres = (gint)gtk_text_view_get_border_window_size(
        (GtkTextView*)a0
        ,(GtkTextWindowType)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TextViewsetBorderWindowSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTextWindowType a1 = GtkTextWindowTypetFromWord(x1);
    DECLARE_INT(a2, x2);
    gtk_text_view_set_border_window_size(
        (GtkTextView*)a0
        ,(GtkTextWindowType)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextViewgetWindowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    GtkTextWindowType cres = (GtkTextWindowType)gtk_text_view_get_window_type(
        (GtkTextView*)a0
        ,(GdkWindow*)a1
        );
    word res = GtkTextWindowTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewgetWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTextWindowType a1 = GtkTextWindowTypetFromWord(x1);
    GdkWindow* cres = (GdkWindow*)gtk_text_view_get_window(
        (GtkTextView*)a0
        ,(GtkTextWindowType)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE6(Gtk_TextViewwindowToBufferCoords) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTextWindowType a1 = GtkTextWindowTypetFromWord(x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT_AS(gint, tmp0, x4);
               gint* a4 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x5);
               gint* a5 = (gint*)&tmp1;
    gtk_text_view_window_to_buffer_coords(
        (GtkTextView*)a0
        ,(GtkTextWindowType)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint*)a4
        ,(gint*)a5
        );
    word r4 = Store::IntToWord(*a4);
    word r5 = Store::IntToWord(*a5);
    RETURN2(r4,r5);
} END
DEFINE6(Gtk_TextViewbufferToWindowCoords) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkTextWindowType a1 = GtkTextWindowTypetFromWord(x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT_AS(gint, tmp0, x4);
               gint* a4 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x5);
               gint* a5 = (gint*)&tmp1;
    gtk_text_view_buffer_to_window_coords(
        (GtkTextView*)a0
        ,(GtkTextWindowType)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint*)a4
        ,(gint*)a5
        );
    word r4 = Store::IntToWord(*a4);
    word r5 = Store::IntToWord(*a5);
    RETURN2(r4,r5);
} END
DEFINE4(Gtk_TextViewgetLineAtY) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a2, x2);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    gtk_text_view_get_line_at_y(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        ,(gint)a2
        ,(gint*)a3
        );
    word r3 = Store::IntToWord(*a3);
    RETURN1(r3);
} END
DEFINE4(Gtk_TextViewgetLineYrange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x3);
               gint* a3 = (gint*)&tmp1;
    gtk_text_view_get_line_yrange(
        (GtkTextView*)a0
        ,(const GtkTextIter*)a1
        ,(gint*)a2
        ,(gint*)a3
        );
    word r2 = Store::IntToWord(*a2);
    word r3 = Store::IntToWord(*a3);
    RETURN2(r2,r3);
} END
DEFINE5(Gtk_TextViewgetIterAtPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_text_view_get_iter_at_position(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        ,(gint*)a2
        ,(gint)a3
        ,(gint)a4
        );
    word r2 = Store::IntToWord(*a2);
    RETURN1(r2);
} END
DEFINE4(Gtk_TextViewgetIterAtLocation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_text_view_get_iter_at_location(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextViewgetIterLocation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_RECTANGLE);
    gtk_text_view_get_iter_location(
        (GtkTextView*)a0
        ,(const GtkTextIter*)a1
        ,(GdkRectangle*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewgetCursorVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gboolean cres = (gboolean)gtk_text_view_get_cursor_visible(
        (GtkTextView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetCursorVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_BOOL(a1, x1);
    gtk_text_view_set_cursor_visible(
        (GtkTextView*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextViewgetVisibleRect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_RECTANGLE);
    gtk_text_view_get_visible_rect(
        (GtkTextView*)a0
        ,(GdkRectangle*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextViewplaceCursorOnscreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    gboolean cres = (gboolean)gtk_text_view_place_cursor_onscreen(
        (GtkTextView*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewmoveMarkOnscreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_MARK);
    gboolean cres = (gboolean)gtk_text_view_move_mark_onscreen(
        (GtkTextView*)a0
        ,(GtkTextMark*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewscrollMarkOnscreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_MARK);
    gtk_text_view_scroll_mark_onscreen(
        (GtkTextView*)a0
        ,(GtkTextMark*)a1
        );
    RETURN_UNIT;
} END
DEFINE6(Gtk_TextViewscrollToMark) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_MARK);
    DECLARE_CDOUBLE(a2, x2);
    DECLARE_BOOL(a3, x3);
    DECLARE_CDOUBLE(a4, x4);
    DECLARE_CDOUBLE(a5, x5);
    gtk_text_view_scroll_to_mark(
        (GtkTextView*)a0
        ,(GtkTextMark*)a1
        ,(gdouble)a2
        ,(gboolean)a3
        ,(gdouble)a4
        ,(gdouble)a5
        );
    RETURN_UNIT;
} END
DEFINE6(Gtk_TextViewscrollToIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_CDOUBLE(a2, x2);
    DECLARE_BOOL(a3, x3);
    DECLARE_CDOUBLE(a4, x4);
    DECLARE_CDOUBLE(a5, x5);
    gboolean cres = (gboolean)gtk_text_view_scroll_to_iter(
        (GtkTextView*)a0
        ,(GtkTextIter*)a1
        ,(gdouble)a2
        ,(gboolean)a3
        ,(gdouble)a4
        ,(gdouble)a5
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextViewgetBuffer) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    GtkTextBuffer* cres = (GtkTextBuffer*)gtk_text_view_get_buffer(
        (GtkTextView*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextViewsetBuffer) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_BUFFER);
    gtk_text_view_set_buffer(
        (GtkTextView*)a0
        ,(GtkTextBuffer*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TextViewgetType) {
    GType cres = (GType)gtk_text_view_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TextTagTablenew) {
    GtkTextTagTable* cres = (GtkTextTagTable*)gtk_text_tag_table_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TextTagTablegetSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG_TABLE);
    gint cres = (gint)gtk_text_tag_table_get_size(
        (GtkTextTagTable*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TextTagTableforeach) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG_TABLE);
    DECLARE_OBJECT (a1, x1);
    DECLARE_OBJECT(a2, x2);
    gtk_text_tag_table_foreach(
        (GtkTextTagTable*)a0
        ,(GtkTextTagTableForeach)a1
        ,(gpointer)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextTagTablelookup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG_TABLE);
    DECLARE_CSTRING(a1, x1);
    GtkTextTag* cres = (GtkTextTag*)gtk_text_tag_table_lookup(
        (GtkTextTagTable*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextTagTableremove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG_TABLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    gtk_text_tag_table_remove(
        (GtkTextTagTable*)a0
        ,(GtkTextTag*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextTagTableadd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG_TABLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    gtk_text_tag_table_add(
        (GtkTextTagTable*)a0
        ,(GtkTextTag*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TextTagTablegetType) {
    GType cres = (GType)gtk_text_tag_table_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextTagnew) {
    DECLARE_CSTRING(a0, x0);
    GtkTextTag* cres = (GtkTextTag*)gtk_text_tag_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE4(Gtk_TextTagevent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, G_TYPE_OBJECT);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_EVENT);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_tag_event(
        (GtkTextTag*)a0
        ,(GObject*)a1
        ,(GdkEvent*)a2
        ,(const GtkTextIter*)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextTagsetPriority) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG);
    DECLARE_INT(a1, x1);
    gtk_text_tag_set_priority(
        (GtkTextTag*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextTaggetPriority) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG);
    gint cres = (gint)gtk_text_tag_get_priority(
        (GtkTextTag*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TextTaggetType) {
    GType cres = (GType)gtk_text_tag_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextMarkgetLeftGravity) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_MARK);
    gboolean cres = (gboolean)gtk_text_mark_get_left_gravity(
        (GtkTextMark*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextMarkgetBuffer) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_MARK);
    GtkTextBuffer* cres = (GtkTextBuffer*)gtk_text_mark_get_buffer(
        (GtkTextMark*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TextMarkgetDeleted) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_MARK);
    gboolean cres = (gboolean)gtk_text_mark_get_deleted(
        (GtkTextMark*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextMarkgetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_MARK);
    const gchar* cres = (const gchar*)gtk_text_mark_get_name(
        (GtkTextMark*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_TextMarkgetVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_MARK);
    gboolean cres = (gboolean)gtk_text_mark_get_visible(
        (GtkTextMark*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TextMarksetVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_MARK);
    DECLARE_BOOL(a1, x1);
    gtk_text_mark_set_visible(
        (GtkTextMark*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TextMarkgetType) {
    GType cres = (GType)gtk_text_mark_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TextChildAnchornew) {
    GtkTextChildAnchor* cres = (GtkTextChildAnchor*)gtk_text_child_anchor_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TextChildAnchorgetDeleted) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_CHILD_ANCHOR);
    gboolean cres = (gboolean)gtk_text_child_anchor_get_deleted(
        (GtkTextChildAnchor*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextChildAnchorgetWidgets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_CHILD_ANCHOR);
    GList* cres = (GList*)gtk_text_child_anchor_get_widgets(
        (GtkTextChildAnchor*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TextChildAnchorgetType) {
    GType cres = (GType)gtk_text_child_anchor_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextBuffernew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_TAG_TABLE);
    GtkTextBuffer* cres = (GtkTextBuffer*)gtk_text_buffer_new(
        (GtkTextTagTable*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldTagTable(O) ((O)->tag_table)
#define DOsetFieldTagTable(O, V) ((O)->tag_table = (V))
DEFINE1(Gtk_TextBufferconnectSpecialSignals) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    g_signal_connect ((GtkTextBuffer*)a0, "delete_range", 
            (GCallback)specialDeleteRangeEvent, NULL);
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBufferbackspace) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a2, x2);
    DECLARE_BOOL(a3, x3);
    gboolean cres = (gboolean)gtk_text_buffer_backspace(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(gboolean)a2
        ,(gboolean)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextBufferendUserAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    gtk_text_buffer_end_user_action(
        (GtkTextBuffer*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextBufferbeginUserAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    gtk_text_buffer_begin_user_action(
        (GtkTextBuffer*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBufferdeleteSelection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_BOOL(a1, x1);
    DECLARE_BOOL(a2, x2);
    gboolean cres = (gboolean)gtk_text_buffer_delete_selection(
        (GtkTextBuffer*)a0
        ,(gboolean)a1
        ,(gboolean)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TextBuffergetSelectionBounds) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    gboolean cres = (gboolean)gtk_text_buffer_get_selection_bounds(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(GtkTextIter*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_TextBufferpasteClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CLIPBOARD);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a3, x3);
    gtk_text_buffer_paste_clipboard(
        (GtkTextBuffer*)a0
        ,(GtkClipboard*)a1
        ,(GtkTextIter*)a2
        ,(gboolean)a3
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextBuffercopyClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CLIPBOARD);
    gtk_text_buffer_copy_clipboard(
        (GtkTextBuffer*)a0
        ,(GtkClipboard*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffercutClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CLIPBOARD);
    DECLARE_BOOL(a2, x2);
    gtk_text_buffer_cut_clipboard(
        (GtkTextBuffer*)a0
        ,(GtkClipboard*)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextBufferremoveSelectionClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CLIPBOARD);
    gtk_text_buffer_remove_selection_clipboard(
        (GtkTextBuffer*)a0
        ,(GtkClipboard*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextBufferaddSelectionClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CLIPBOARD);
    gtk_text_buffer_add_selection_clipboard(
        (GtkTextBuffer*)a0
        ,(GtkClipboard*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextBuffersetModified) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_BOOL(a1, x1);
    gtk_text_buffer_set_modified(
        (GtkTextBuffer*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextBuffergetModified) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    gboolean cres = (gboolean)gtk_text_buffer_get_modified(
        (GtkTextBuffer*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TextBuffergetIterAtChildAnchor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_CHILD_ANCHOR);
    gtk_text_buffer_get_iter_at_child_anchor(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(GtkTextChildAnchor*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffergetIterAtMark) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_MARK);
    gtk_text_buffer_get_iter_at_mark(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(GtkTextMark*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffergetBounds) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_get_bounds(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(GtkTextIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextBuffergetEndIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_get_end_iter(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextBuffergetStartIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_get_start_iter(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffergetIterAtLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a2, x2);
    gtk_text_buffer_get_iter_at_line(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffergetIterAtOffset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a2, x2);
    gtk_text_buffer_get_iter_at_offset(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBuffergetIterAtLineIndex) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_text_buffer_get_iter_at_line_index(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBuffergetIterAtLineOffset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_text_buffer_get_iter_at_line_offset(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffercreateTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_CSTRING(a2, x2);
    GtkTextTag* cres = (GtkTextTag*)gtk_text_buffer_create_tag(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        ,(const gchar*)a2
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_TextBufferremoveAllTags) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_remove_all_tags(
        (GtkTextBuffer*)a0
        ,(const GtkTextIter*)a1
        ,(const GtkTextIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBufferremoveTagByName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_remove_tag_by_name(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        ,(const GtkTextIter*)a2
        ,(const GtkTextIter*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBufferapplyTagByName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_apply_tag_by_name(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        ,(const GtkTextIter*)a2
        ,(const GtkTextIter*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBufferremoveTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_remove_tag(
        (GtkTextBuffer*)a0
        ,(GtkTextTag*)a1
        ,(const GtkTextIter*)a2
        ,(const GtkTextIter*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBufferapplyTag) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_apply_tag(
        (GtkTextBuffer*)a0
        ,(GtkTextTag*)a1
        ,(const GtkTextIter*)a2
        ,(const GtkTextIter*)a3
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBufferselectRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_select_range(
        (GtkTextBuffer*)a0
        ,(const GtkTextIter*)a1
        ,(const GtkTextIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextBufferplaceCursor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_place_cursor(
        (GtkTextBuffer*)a0
        ,(const GtkTextIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextBuffergetSelectionBound) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    GtkTextMark* cres = (GtkTextMark*)gtk_text_buffer_get_selection_bound(
        (GtkTextBuffer*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TextBuffergetInsert) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    GtkTextMark* cres = (GtkTextMark*)gtk_text_buffer_get_insert(
        (GtkTextBuffer*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextBufferdeleteMarkByName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    gtk_text_buffer_delete_mark_by_name(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffermoveMarkByName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_move_mark_by_name(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        ,(const GtkTextIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TextBuffergetMark) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    GtkTextMark* cres = (GtkTextMark*)gtk_text_buffer_get_mark(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextBufferdeleteMark) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_MARK);
    gtk_text_buffer_delete_mark(
        (GtkTextBuffer*)a0
        ,(GtkTextMark*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffermoveMark) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_MARK);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_move_mark(
        (GtkTextBuffer*)a0
        ,(GtkTextMark*)a1
        ,(const GtkTextIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBuffercreateMark) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a3, x3);
    GtkTextMark* cres = (GtkTextMark*)gtk_text_buffer_create_mark(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        ,(const GtkTextIter*)a2
        ,(gboolean)a3
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextBuffercreateChildAnchor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    GtkTextChildAnchor* cres = (GtkTextChildAnchor*)gtk_text_buffer_create_child_anchor(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_TextBufferinsertChildAnchor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_CHILD_ANCHOR);
    gtk_text_buffer_insert_child_anchor(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(GtkTextChildAnchor*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBufferinsertPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_PIXBUF);
    gtk_text_buffer_insert_pixbuf(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(GdkPixbuf*)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBuffergetSlice) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a3, x3);
    gchar* cres = (gchar*)gtk_text_buffer_get_slice(
        (GtkTextBuffer*)a0
        ,(const GtkTextIter*)a1
        ,(const GtkTextIter*)a2
        ,(gboolean)a3
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE4(Gtk_TextBuffergetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a3, x3);
    gchar* cres = (gchar*)gtk_text_buffer_get_text(
        (GtkTextBuffer*)a0
        ,(const GtkTextIter*)a1
        ,(const GtkTextIter*)a2
        ,(gboolean)a3
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE4(Gtk_TextBufferdeleteInteractive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a3, x3);
    gboolean cres = (gboolean)gtk_text_buffer_delete_interactive(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(GtkTextIter*)a2
        ,(gboolean)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TextBufferdelete) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_delete(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(GtkTextIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_TextBufferinsertWithTagsByName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_CSTRING(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_CSTRING(a4, x4);
    gtk_text_buffer_insert_with_tags_by_name(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(const gchar*)a2
        ,(gint)a3
        ,(const gchar*)a4
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_TextBufferinsertWithTags) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_CSTRING(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GTK_TYPE_TEXT_TAG);
    gtk_text_buffer_insert_with_tags(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(const gchar*)a2
        ,(gint)a3
        ,(GtkTextTag*)a4
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_TextBufferinsertRangeInteractive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    DECLARE_BOOL(a4, x4);
    gboolean cres = (gboolean)gtk_text_buffer_insert_range_interactive(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(const GtkTextIter*)a2
        ,(const GtkTextIter*)a3
        ,(gboolean)a4
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_TextBufferinsertRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TEXT_ITER);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_TEXT_ITER);
    gtk_text_buffer_insert_range(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(const GtkTextIter*)a2
        ,(const GtkTextIter*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBufferinsertInteractiveAtCursor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_BOOL(a3, x3);
    gboolean cres = (gboolean)gtk_text_buffer_insert_interactive_at_cursor(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        ,(gint)a2
        ,(gboolean)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE5(Gtk_TextBufferinsertInteractive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_CSTRING(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_BOOL(a4, x4);
    gboolean cres = (gboolean)gtk_text_buffer_insert_interactive(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(const gchar*)a2
        ,(gint)a3
        ,(gboolean)a4
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TextBufferinsertAtCursor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_text_buffer_insert_at_cursor(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_TextBufferinsert) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_ITER);
    DECLARE_CSTRING(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_text_buffer_insert(
        (GtkTextBuffer*)a0
        ,(GtkTextIter*)a1
        ,(const gchar*)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TextBuffersetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_text_buffer_set_text(
        (GtkTextBuffer*)a0
        ,(const gchar*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TextBuffergetTagTable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    GtkTextTagTable* cres = (GtkTextTagTable*)gtk_text_buffer_get_tag_table(
        (GtkTextBuffer*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TextBuffergetCharCount) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    gint cres = (gint)gtk_text_buffer_get_char_count(
        (GtkTextBuffer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextBuffergetLineCount) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    gint cres = (gint)gtk_text_buffer_get_line_count(
        (GtkTextBuffer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TextBuffergetType) {
    GType cres = (GType)gtk_text_buffer_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TextBuffergetFieldTagTable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    GtkTextTagTable* cres = (GtkTextTagTable*)DOgetFieldTagTable(
        (GtkTextBuffer*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_TextBuffersetFieldTagTable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TEXT_BUFFER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TEXT_TAG_TABLE);
    DOsetFieldTagTable(
        (GtkTextBuffer*)a0
        ,(GtkTextTagTable*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldTagTable
#undef DOsetFieldTagTable
DEFINE0(Gtk_TearoffMenuItemnew) {
    GtkWidget* cres = (GtkWidget*)gtk_tearoff_menu_item_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_TearoffMenuItemgetType) {
    GType cres = (GType)gtk_tearoff_menu_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_Tablenew) {
    DECLARE_INT(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_BOOL(a2, x2);
    GtkWidget* cres = (GtkWidget*)gtk_table_new(
        (gint)a0
        ,(gint)a1
        ,(gboolean)a2
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_TablegetHomogeneous) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    gboolean cres = (gboolean)gtk_table_get_homogeneous(
        (GtkTable*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TablesetHomogeneous) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_BOOL(a1, x1);
    gtk_table_set_homogeneous(
        (GtkTable*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TablegetDefaultColSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    guint cres = (guint)gtk_table_get_default_col_spacing(
        (GtkTable*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TablesetColSpacings) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_INT(a1, x1);
    gtk_table_set_col_spacings(
        (GtkTable*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_TablegetDefaultRowSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    guint cres = (guint)gtk_table_get_default_row_spacing(
        (GtkTable*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TablesetRowSpacings) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_INT(a1, x1);
    gtk_table_set_row_spacings(
        (GtkTable*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TablegetColSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_INT(a1, x1);
    guint cres = (guint)gtk_table_get_col_spacing(
        (GtkTable*)a0
        ,(guint)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TablesetColSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_table_set_col_spacing(
        (GtkTable*)a0
        ,(guint)a1
        ,(guint)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TablegetRowSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_INT(a1, x1);
    guint cres = (guint)gtk_table_get_row_spacing(
        (GtkTable*)a0
        ,(guint)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TablesetRowSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_table_set_row_spacing(
        (GtkTable*)a0
        ,(guint)a1
        ,(guint)a2
        );
    RETURN_UNIT;
} END
DEFINE6(Gtk_TableattachDefaults) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    DECLARE_INT(a5, x5);
    gtk_table_attach_defaults(
        (GtkTable*)a0
        ,(GtkWidget*)a1
        ,(guint)a2
        ,(guint)a3
        ,(guint)a4
        ,(guint)a5
        );
    RETURN_UNIT;
} END
DEFINE10(Gtk_Tableattach) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    DECLARE_INT(a5, x5);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x6, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x6);}
});
GtkAttachOptions a6 = GtkAttachOptionstFromWord(x6);
    DECLARE_LIST_ELEMS(tmp2, tmp3, x7, 
{ if (Store::WordToInt(tmp2->Sel(0)) == INVALID_INT)
{REQUEST(x7);}
});
GtkAttachOptions a7 = GtkAttachOptionstFromWord(x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    gtk_table_attach(
        (GtkTable*)a0
        ,(GtkWidget*)a1
        ,(guint)a2
        ,(guint)a3
        ,(guint)a4
        ,(guint)a5
        ,(GtkAttachOptions)a6
        ,(GtkAttachOptions)a7
        ,(guint)a8
        ,(guint)a9
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_Tableresize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TABLE);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_table_resize(
        (GtkTable*)a0
        ,(guint)a1
        ,(guint)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TablegetType) {
    GType cres = (GType)gtk_table_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Stylenew) {
    GtkStyle* cres = (GtkStyle*)gtk_style_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE11(Gtk_StylepaintResizeGrip) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a5, x5);
    if (Store::WordToInt(x6) == INVALID_INT) {REQUEST(x6);}
GdkWindowEdge a6 = GdkWindowEdgetFromWord(x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    gtk_paint_resize_grip(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GdkRectangle*)a3
        ,(GtkWidget*)a4
        ,(const gchar*)a5
        ,(GdkWindowEdge)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        );
    RETURN_UNIT;
} END
DEFINE10(Gtk_StylepaintLayout) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    DECLARE_BOOL(a3, x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_OBJECT_OF_TYPE(a9, x9, PANGO_TYPE_LAYOUT);
    gtk_paint_layout(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(gboolean)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(PangoLayout*)a9
        );
    RETURN_UNIT;
} END
DEFINE9(Gtk_StylepaintExpander) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a5, x5);
    DECLARE_INT(a6, x6);
    DECLARE_INT(a7, x7);
    if (Store::WordToInt(x8) == INVALID_INT) {REQUEST(x8);}
GtkExpanderStyle a8 = GtkExpanderStyletFromWord(x8);
    gtk_paint_expander(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GdkRectangle*)a3
        ,(GtkWidget*)a4
        ,(const gchar*)a5
        ,(gint)a6
        ,(gint)a7
        ,(GtkExpanderStyle)a8
        );
    RETURN_UNIT;
} END
DEFINE12(Gtk_StylepaintHandle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    if (Store::WordToInt(x11) == INVALID_INT) {REQUEST(x11);}
GtkOrientation a11 = GtkOrientationtFromWord(x11);
    gtk_paint_handle(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        ,(GtkOrientation)a11
        );
    RETURN_UNIT;
} END
DEFINE12(Gtk_StylepaintSlider) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    if (Store::WordToInt(x11) == INVALID_INT) {REQUEST(x11);}
GtkOrientation a11 = GtkOrientationtFromWord(x11);
    gtk_paint_slider(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        ,(GtkOrientation)a11
        );
    RETURN_UNIT;
} END
DEFINE10(Gtk_StylepaintFocus) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a5, x5);
    DECLARE_INT(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    gtk_paint_focus(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GdkRectangle*)a3
        ,(GtkWidget*)a4
        ,(const gchar*)a5
        ,(gint)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        );
    RETURN_UNIT;
} END
DEFINE12(Gtk_StylepaintExtension) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    if (Store::WordToInt(x11) == INVALID_INT) {REQUEST(x11);}
GtkPositionType a11 = GtkPositionTypetFromWord(x11);
    gtk_paint_extension(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        ,(GtkPositionType)a11
        );
    RETURN_UNIT;
} END
DEFINE14(Gtk_StylepaintBoxGap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    if (Store::WordToInt(x11) == INVALID_INT) {REQUEST(x11);}
GtkPositionType a11 = GtkPositionTypetFromWord(x11);
    DECLARE_INT(a12, x12);
    DECLARE_INT(a13, x13);
    gtk_paint_box_gap(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        ,(GtkPositionType)a11
        ,(gint)a12
        ,(gint)a13
        );
    RETURN_UNIT;
} END
DEFINE14(Gtk_StylepaintShadowGap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    if (Store::WordToInt(x11) == INVALID_INT) {REQUEST(x11);}
GtkPositionType a11 = GtkPositionTypetFromWord(x11);
    DECLARE_INT(a12, x12);
    DECLARE_INT(a13, x13);
    gtk_paint_shadow_gap(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        ,(GtkPositionType)a11
        ,(gint)a12
        ,(gint)a13
        );
    RETURN_UNIT;
} END
DEFINE11(Gtk_StylepaintTab) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    gtk_paint_tab(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        );
    RETURN_UNIT;
} END
DEFINE11(Gtk_StylepaintOption) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    gtk_paint_option(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        );
    RETURN_UNIT;
} END
DEFINE11(Gtk_StylepaintCheck) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    gtk_paint_check(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        );
    RETURN_UNIT;
} END
DEFINE11(Gtk_StylepaintFlatBox) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    gtk_paint_flat_box(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        );
    RETURN_UNIT;
} END
DEFINE11(Gtk_StylepaintBox) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    gtk_paint_box(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        );
    RETURN_UNIT;
} END
DEFINE11(Gtk_StylepaintDiamond) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    gtk_paint_diamond(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        );
    RETURN_UNIT;
} END
DEFINE13(Gtk_StylepaintArrow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    if (Store::WordToInt(x7) == INVALID_INT) {REQUEST(x7);}
GtkArrowType a7 = GtkArrowTypetFromWord(x7);
    DECLARE_BOOL(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    DECLARE_INT(a11, x11);
    DECLARE_INT(a12, x12);
    gtk_paint_arrow(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(GtkArrowType)a7
        ,(gboolean)a8
        ,(gint)a9
        ,(gint)a10
        ,(gint)a11
        ,(gint)a12
        );
    RETURN_UNIT;
} END
DEFINE10(Gtk_StylepaintPolygon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_OBJECT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_BOOL(a9, x9);
    gtk_paint_polygon(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(GdkPoint*)a7
        ,(gint)a8
        ,(gboolean)a9
        );
    RETURN_UNIT;
} END
DEFINE11(Gtk_StylepaintShadow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    DECLARE_INT(a9, x9);
    DECLARE_INT(a10, x10);
    gtk_paint_shadow(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(GdkRectangle*)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        ,(gint)a7
        ,(gint)a8
        ,(gint)a9
        ,(gint)a10
        );
    RETURN_UNIT;
} END
DEFINE9(Gtk_StylepaintVLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a5, x5);
    DECLARE_INT(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    gtk_paint_vline(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GdkRectangle*)a3
        ,(GtkWidget*)a4
        ,(const gchar*)a5
        ,(gint)a6
        ,(gint)a7
        ,(gint)a8
        );
    RETURN_UNIT;
} END
DEFINE9(Gtk_StylepaintHLine) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a5, x5);
    DECLARE_INT(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    gtk_paint_hline(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GdkRectangle*)a3
        ,(GtkWidget*)a4
        ,(const gchar*)a5
        ,(gint)a6
        ,(gint)a7
        ,(gint)a8
        );
    RETURN_UNIT;
} END
DEFINE8(Gtk_StyledrawCheck) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkShadowType a3 = GtkShadowTypetFromWord(x3);
    DECLARE_INT(a4, x4);
    DECLARE_INT(a5, x5);
    DECLARE_INT(a6, x6);
    DECLARE_INT(a7, x7);
    gtk_draw_check(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        ,(GtkShadowType)a3
        ,(gint)a4
        ,(gint)a5
        ,(gint)a6
        ,(gint)a7
        );
    RETURN_UNIT;
} END
DEFINE7(Gtk_StylerenderIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ICON_SOURCE);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkTextDirection a2 = GtkTextDirectiontFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkStateType a3 = GtkStateTypetFromWord(x3);
    if (Store::WordToInt(x4) == INVALID_INT) {REQUEST(x4);}
GtkIconSize a4 = GtkIconSizetFromWord(x4);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a6, x6);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_style_render_icon(
        (GtkStyle*)a0
        ,(const GtkIconSource*)a1
        ,(GtkTextDirection)a2
        ,(GtkStateType)a3
        ,(GtkIconSize)a4
        ,(GtkWidget*)a5
        ,(const gchar*)a6
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_StylelookupIconSet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_CSTRING(a1, x1);
    GtkIconSet* cres = (GtkIconSet*)gtk_style_lookup_icon_set(
        (GtkStyle*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SET);
    RETURN1(res);
} END
DEFINE9(Gtk_StyleapplyDefaultBackground) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    DECLARE_BOOL(a2, x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkStateType a3 = GtkStateTypetFromWord(x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_INT(a5, x5);
    DECLARE_INT(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    gtk_style_apply_default_background(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(gboolean)a2
        ,(GtkStateType)a3
        ,(GdkRectangle*)a4
        ,(gint)a5
        ,(gint)a6
        ,(gint)a7
        ,(gint)a8
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_StylesetBackground) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkStateType a2 = GtkStateTypetFromWord(x2);
    gtk_style_set_background(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        ,(GtkStateType)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Styledetach) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    gtk_style_detach(
        (GtkStyle*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Styleattach) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    GtkStyle* cres = (GtkStyle*)gtk_style_attach(
        (GtkStyle*)a0
        ,(GdkWindow*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_Stylecopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STYLE);
    GtkStyle* cres = (GtkStyle*)gtk_style_copy(
        (GtkStyle*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_StylegetType) {
    GType cres = (GType)gtk_style_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Statusbarnew) {
    GtkWidget* cres = (GtkWidget*)gtk_statusbar_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_StatusbargetHasResizeGrip) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STATUSBAR);
    gboolean cres = (gboolean)gtk_statusbar_get_has_resize_grip(
        (GtkStatusbar*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_StatusbarsetHasResizeGrip) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STATUSBAR);
    DECLARE_BOOL(a1, x1);
    gtk_statusbar_set_has_resize_grip(
        (GtkStatusbar*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_Statusbarremove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STATUSBAR);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_statusbar_remove(
        (GtkStatusbar*)a0
        ,(guint)a1
        ,(guint)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Statusbarpop) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STATUSBAR);
    DECLARE_INT(a1, x1);
    gtk_statusbar_pop(
        (GtkStatusbar*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_Statusbarpush) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STATUSBAR);
    DECLARE_INT(a1, x1);
    DECLARE_CSTRING(a2, x2);
    guint cres = (guint)gtk_statusbar_push(
        (GtkStatusbar*)a0
        ,(guint)a1
        ,(const gchar*)a2
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_StatusbargetContextId) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_STATUSBAR);
    DECLARE_CSTRING(a1, x1);
    guint cres = (guint)gtk_statusbar_get_context_id(
        (GtkStatusbar*)a0
        ,(const gchar*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_StatusbargetType) {
    GType cres = (GType)gtk_statusbar_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_SpinButtonnewWithRange) {
    DECLARE_CDOUBLE(a0, x0);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    GtkWidget* cres = (GtkWidget*)gtk_spin_button_new_with_range(
        (gdouble)a0
        ,(gdouble)a1
        ,(gdouble)a2
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_SpinButtonnew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_INT(a2, x2);
    GtkWidget* cres = (GtkWidget*)gtk_spin_button_new(
        (GtkAdjustment*)a0
        ,(double)a1
        ,(gint)a2
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_SpinButtonupdate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    gtk_spin_button_update(
        (GtkSpinButton*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SpinButtongetSnapToTicks) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    gboolean cres = (gboolean)gtk_spin_button_get_snap_to_ticks(
        (GtkSpinButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SpinButtonsetSnapToTicks) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_spin_button_set_snap_to_ticks(
        (GtkSpinButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SpinButtongetWrap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    gboolean cres = (gboolean)gtk_spin_button_get_wrap(
        (GtkSpinButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SpinButtonsetWrap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_spin_button_set_wrap(
        (GtkSpinButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_SpinButtonspin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkSpinType a1 = GtkSpinTypetFromWord(x1);
    DECLARE_CDOUBLE(a2, x2);
    gtk_spin_button_spin(
        (GtkSpinButton*)a0
        ,(GtkSpinType)a1
        ,(gdouble)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SpinButtongetNumeric) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    gboolean cres = (gboolean)gtk_spin_button_get_numeric(
        (GtkSpinButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SpinButtonsetNumeric) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_spin_button_set_numeric(
        (GtkSpinButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SpinButtongetUpdatePolicy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    guint cres = (guint)gtk_spin_button_get_update_policy(
        (GtkSpinButton*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SpinButtonsetUpdatePolicy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkSpinButtonUpdatePolicy a1 = GtkSpinButtonUpdatePolicytFromWord(x1);
    gtk_spin_button_set_update_policy(
        (GtkSpinButton*)a0
        ,(GtkSpinButtonUpdatePolicy)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_SpinButtonsetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_CDOUBLE(a1, x1);
    gtk_spin_button_set_value(
        (GtkSpinButton*)a0
        ,(gdouble)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SpinButtongetValueAsInt) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    gint cres = (gint)gtk_spin_button_get_value_as_int(
        (GtkSpinButton*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_SpinButtongetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    gdouble cres = (gdouble)gtk_spin_button_get_value(
        (GtkSpinButton*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE3(Gtk_SpinButtongetRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_DOUBLE_AS(gdouble, tmp0, x1);
               gdouble* a1 = (gdouble*)&tmp0;
    DECLARE_DOUBLE_AS(gdouble, tmp1, x2);
               gdouble* a2 = (gdouble*)&tmp1;
    gtk_spin_button_get_range(
        (GtkSpinButton*)a0
        ,(gdouble*)a1
        ,(gdouble*)a2
        );
    word r1 = Real::New(*a1)->ToWord ();
    word r2 = Real::New(*a2)->ToWord ();
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_SpinButtonsetRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    gtk_spin_button_set_range(
        (GtkSpinButton*)a0
        ,(gdouble)a1
        ,(gdouble)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_SpinButtongetIncrements) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_DOUBLE_AS(gdouble, tmp0, x1);
               gdouble* a1 = (gdouble*)&tmp0;
    DECLARE_DOUBLE_AS(gdouble, tmp1, x2);
               gdouble* a2 = (gdouble*)&tmp1;
    gtk_spin_button_get_increments(
        (GtkSpinButton*)a0
        ,(gdouble*)a1
        ,(gdouble*)a2
        );
    word r1 = Real::New(*a1)->ToWord ();
    word r2 = Real::New(*a2)->ToWord ();
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_SpinButtonsetIncrements) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    gtk_spin_button_set_increments(
        (GtkSpinButton*)a0
        ,(gdouble)a1
        ,(gdouble)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SpinButtongetDigits) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    guint cres = (guint)gtk_spin_button_get_digits(
        (GtkSpinButton*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SpinButtonsetDigits) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_INT(a1, x1);
    gtk_spin_button_set_digits(
        (GtkSpinButton*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SpinButtongetAdjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_spin_button_get_adjustment(
        (GtkSpinButton*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_SpinButtonsetAdjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_spin_button_set_adjustment(
        (GtkSpinButton*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_SpinButtonconfigure) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SPIN_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    DECLARE_CDOUBLE(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_spin_button_configure(
        (GtkSpinButton*)a0
        ,(GtkAdjustment*)a1
        ,(gdouble)a2
        ,(guint)a3
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_SpinButtongetType) {
    GType cres = (GType)gtk_spin_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_SizeGroupnew) {
    if (Store::WordToInt(x0) == INVALID_INT) {REQUEST(x0);}
GtkSizeGroupMode a0 = GtkSizeGroupModetFromWord(x0);
    GtkSizeGroup* cres = (GtkSizeGroup*)gtk_size_group_new(
        (GtkSizeGroupMode)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_SizeGroupremoveWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SIZE_GROUP);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_size_group_remove_widget(
        (GtkSizeGroup*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_SizeGroupaddWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SIZE_GROUP);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_size_group_add_widget(
        (GtkSizeGroup*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SizeGroupgetMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SIZE_GROUP);
    GtkSizeGroupMode cres = (GtkSizeGroupMode)gtk_size_group_get_mode(
        (GtkSizeGroup*)a0
        );
    word res = GtkSizeGroupModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_SizeGroupsetMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SIZE_GROUP);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkSizeGroupMode a1 = GtkSizeGroupModetFromWord(x1);
    gtk_size_group_set_mode(
        (GtkSizeGroup*)a0
        ,(GtkSizeGroupMode)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_SizeGroupgetType) {
    GType cres = (GType)gtk_size_group_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_SettingssetDoubleProperty) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SETTINGS);
    DECLARE_CSTRING(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    DECLARE_CSTRING(a3, x3);
    gtk_settings_set_double_property(
        (GtkSettings*)a0
        ,(const gchar*)a1
        ,(gdouble)a2
        ,(const gchar*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_SettingssetLongProperty) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SETTINGS);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_CSTRING(a3, x3);
    gtk_settings_set_long_property(
        (GtkSettings*)a0
        ,(const gchar*)a1
        ,(glong)a2
        ,(const gchar*)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_SettingssetStringProperty) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SETTINGS);
    DECLARE_CSTRING(a1, x1);
    DECLARE_CSTRING(a2, x2);
    DECLARE_CSTRING(a3, x3);
    gtk_settings_set_string_property(
        (GtkSettings*)a0
        ,(const gchar*)a1
        ,(const gchar*)a2
        ,(const gchar*)a3
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_SettingssetPropertyValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SETTINGS);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT (a2, x2);
    gtk_settings_set_property_value(
        (GtkSettings*)a0
        ,(const gchar*)a1
        ,(const GtkSettingsValue*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_SettingsinstallPropertyParser) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT (a1, x1);
    gtk_settings_install_property_parser(
        (GParamSpec*)a0
        ,(GtkRcPropertyParser)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SettingsinstallProperty) {
    DECLARE_OBJECT (a0, x0);
    gtk_settings_install_property(
        (GParamSpec*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SettingsgetForScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_SCREEN);
    GtkSettings* cres = (GtkSettings*)gtk_settings_get_for_screen(
        (GdkScreen*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_SettingsgetDefault) {
    GtkSettings* cres = (GtkSettings*)gtk_settings_get_default(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_SettingsgetType) {
    GType cres = (GType)gtk_settings_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_SeparatorToolItemnew) {
    GtkToolItem* cres = (GtkToolItem*)gtk_separator_tool_item_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_SeparatorToolItemsetDraw) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SEPARATOR_TOOL_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_separator_tool_item_set_draw(
        (GtkSeparatorToolItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_SeparatorToolItemgetDraw) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SEPARATOR_TOOL_ITEM);
    gboolean cres = (gboolean)gtk_separator_tool_item_get_draw(
        (GtkSeparatorToolItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_SeparatorToolItemgetType) {
    GType cres = (GType)gtk_separator_tool_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_SeparatorMenuItemnew) {
    GtkWidget* cres = (GtkWidget*)gtk_separator_menu_item_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_SeparatorMenuItemgetType) {
    GType cres = (GType)gtk_separator_menu_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_SeparatorgetType) {
    GType cres = (GType)gtk_separator_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ScrolledWindownew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    GtkWidget* cres = (GtkWidget*)gtk_scrolled_window_new(
        (GtkAdjustment*)a0
        ,(GtkAdjustment*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ScrolledWindowaddWithViewport) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_scrolled_window_add_with_viewport(
        (GtkScrolledWindow*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ScrolledWindowgetShadowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    GtkShadowType cres = (GtkShadowType)gtk_scrolled_window_get_shadow_type(
        (GtkScrolledWindow*)a0
        );
    word res = GtkShadowTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ScrolledWindowsetShadowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkShadowType a1 = GtkShadowTypetFromWord(x1);
    gtk_scrolled_window_set_shadow_type(
        (GtkScrolledWindow*)a0
        ,(GtkShadowType)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ScrolledWindowgetPlacement) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    GtkCornerType cres = (GtkCornerType)gtk_scrolled_window_get_placement(
        (GtkScrolledWindow*)a0
        );
    word res = GtkCornerTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ScrolledWindowsetPlacement) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkCornerType a1 = GtkCornerTypetFromWord(x1);
    gtk_scrolled_window_set_placement(
        (GtkScrolledWindow*)a0
        ,(GtkCornerType)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ScrolledWindowgetPolicy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPolicyType tmp0 = GtkPolicyTypetFromWord(x1);GtkPolicyType *a1 = &tmp0;
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkPolicyType tmp1 = GtkPolicyTypetFromWord(x2);GtkPolicyType *a2 = &tmp1;
    gtk_scrolled_window_get_policy(
        (GtkScrolledWindow*)a0
        ,(GtkPolicyType*)a1
        ,(GtkPolicyType*)a2
        );
    word r1 = GtkPolicyTypetToWord(*a1);
    word r2 = GtkPolicyTypetToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_ScrolledWindowsetPolicy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPolicyType a1 = GtkPolicyTypetFromWord(x1);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkPolicyType a2 = GtkPolicyTypetFromWord(x2);
    gtk_scrolled_window_set_policy(
        (GtkScrolledWindow*)a0
        ,(GtkPolicyType)a1
        ,(GtkPolicyType)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ScrolledWindowgetVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_scrolled_window_get_vadjustment(
        (GtkScrolledWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ScrolledWindowgetHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_scrolled_window_get_hadjustment(
        (GtkScrolledWindow*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ScrolledWindowsetVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_scrolled_window_set_vadjustment(
        (GtkScrolledWindow*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ScrolledWindowsetHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCROLLED_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_scrolled_window_set_hadjustment(
        (GtkScrolledWindow*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ScrolledWindowgetType) {
    GType cres = (GType)gtk_scrolled_window_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_ScrollbargetType) {
    GType cres = (GType)gtk_scrollbar_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_ScalegetLayoutOffsets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCALE);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_scale_get_layout_offsets(
        (GtkScale*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE1(Gtk_ScalegetLayout) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCALE);
    PangoLayout* cres = (PangoLayout*)gtk_scale_get_layout(
        (GtkScale*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ScalegetValuePos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCALE);
    GtkPositionType cres = (GtkPositionType)gtk_scale_get_value_pos(
        (GtkScale*)a0
        );
    word res = GtkPositionTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ScalesetValuePos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCALE);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPositionType a1 = GtkPositionTypetFromWord(x1);
    gtk_scale_set_value_pos(
        (GtkScale*)a0
        ,(GtkPositionType)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ScalegetDrawValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCALE);
    gboolean cres = (gboolean)gtk_scale_get_draw_value(
        (GtkScale*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ScalesetDrawValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCALE);
    DECLARE_BOOL(a1, x1);
    gtk_scale_set_draw_value(
        (GtkScale*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ScalegetDigits) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCALE);
    gint cres = (gint)gtk_scale_get_digits(
        (GtkScale*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ScalesetDigits) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SCALE);
    DECLARE_INT(a1, x1);
    gtk_scale_set_digits(
        (GtkScale*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ScalegetType) {
    GType cres = (GType)gtk_scale_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE5(Gtk_RulergetRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RULER);
    DECLARE_DOUBLE_AS(gdouble, tmp0, x1);
               gdouble* a1 = (gdouble*)&tmp0;
    DECLARE_DOUBLE_AS(gdouble, tmp1, x2);
               gdouble* a2 = (gdouble*)&tmp1;
    DECLARE_DOUBLE_AS(gdouble, tmp2, x3);
               gdouble* a3 = (gdouble*)&tmp2;
    DECLARE_DOUBLE_AS(gdouble, tmp3, x4);
               gdouble* a4 = (gdouble*)&tmp3;
    gtk_ruler_get_range(
        (GtkRuler*)a0
        ,(gdouble*)a1
        ,(gdouble*)a2
        ,(gdouble*)a3
        ,(gdouble*)a4
        );
    word r1 = Real::New(*a1)->ToWord ();
    word r2 = Real::New(*a2)->ToWord ();
    word r3 = Real::New(*a3)->ToWord ();
    word r4 = Real::New(*a4)->ToWord ();
    RETURN4(r1,r2,r3,r4);
} END
DEFINE1(Gtk_RulergetMetric) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RULER);
    GtkMetricType cres = (GtkMetricType)gtk_ruler_get_metric(
        (GtkRuler*)a0
        );
    word res = GtkMetricTypetToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_RulerdrawPos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RULER);
    gtk_ruler_draw_pos(
        (GtkRuler*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RulerdrawTicks) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RULER);
    gtk_ruler_draw_ticks(
        (GtkRuler*)a0
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_RulersetRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RULER);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    DECLARE_CDOUBLE(a3, x3);
    DECLARE_CDOUBLE(a4, x4);
    gtk_ruler_set_range(
        (GtkRuler*)a0
        ,(gdouble)a1
        ,(gdouble)a2
        ,(gdouble)a3
        ,(gdouble)a4
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_RulersetMetric) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RULER);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkMetricType a1 = GtkMetricTypetFromWord(x1);
    gtk_ruler_set_metric(
        (GtkRuler*)a0
        ,(GtkMetricType)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_RulergetType) {
    GType cres = (GType)gtk_ruler_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_RcStyleunref) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RC_STYLE);
    gtk_rc_style_unref(
        (GtkRcStyle*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RcStylereference) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RC_STYLE);
    gtk_rc_style_ref(
        (GtkRcStyle*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RcStylecopy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RC_STYLE);
    GtkRcStyle* cres = (GtkRcStyle*)gtk_rc_style_copy(
        (GtkRcStyle*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_RcStylegetType) {
    GType cres = (GType)gtk_rc_style_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_RangegetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    gdouble cres = (gdouble)gtk_range_get_value(
        (GtkRange*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_RangesetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    DECLARE_CDOUBLE(a1, x1);
    gtk_range_set_value(
        (GtkRange*)a0
        ,(gdouble)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_RangesetRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    gtk_range_set_range(
        (GtkRange*)a0
        ,(gdouble)a1
        ,(gdouble)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_RangesetIncrements) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    gtk_range_set_increments(
        (GtkRange*)a0
        ,(gdouble)a1
        ,(gdouble)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RangegetInverted) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    gboolean cres = (gboolean)gtk_range_get_inverted(
        (GtkRange*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RangesetInverted) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    DECLARE_BOOL(a1, x1);
    gtk_range_set_inverted(
        (GtkRange*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RangegetAdjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_range_get_adjustment(
        (GtkRange*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RangesetAdjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_range_set_adjustment(
        (GtkRange*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RangegetUpdatePolicy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    GtkUpdateType cres = (GtkUpdateType)gtk_range_get_update_policy(
        (GtkRange*)a0
        );
    word res = GtkUpdateTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RangesetUpdatePolicy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RANGE);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkUpdateType a1 = GtkUpdateTypetFromWord(x1);
    gtk_range_set_update_policy(
        (GtkRange*)a0
        ,(GtkUpdateType)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_RangegetType) {
    GType cres = (GType)gtk_range_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioToolButtonnewWithStockFromWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_TOOL_BUTTON);
    DECLARE_CSTRING(a1, x1);
    GtkToolItem* cres = (GtkToolItem*)gtk_radio_tool_button_new_with_stock_from_widget(
        (GtkRadioToolButton*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_RadioToolButtonnewFromWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_TOOL_BUTTON);
    GtkToolItem* cres = (GtkToolItem*)gtk_radio_tool_button_new_from_widget(
        (GtkRadioToolButton*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_RadioToolButtongetGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_TOOL_BUTTON);
    GSList* cres = (GSList*)gtk_radio_tool_button_get_group(
        (GtkRadioToolButton*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioToolButtonsetGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_TOOL_BUTTON);
    DECLARE_GSLIST(a1, x1, DECLARE_OBJECT);
    gtk_radio_tool_button_set_group(
        (GtkRadioToolButton*)a0
        ,(GSList*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_RadioToolButtongetType) {
    GType cres = (GType)gtk_radio_tool_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioMenuItemnewWithMnemonic) {
    DECLARE_GSLIST(a0, x0, DECLARE_OBJECT);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_radio_menu_item_new_with_mnemonic(
        (GSList*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioMenuItemnewWithLabel) {
    DECLARE_GSLIST(a0, x0, DECLARE_OBJECT);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_radio_menu_item_new_with_label(
        (GSList*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_RadioMenuItemnew) {
    DECLARE_GSLIST(a0, x0, DECLARE_OBJECT);
    GtkWidget* cres = (GtkWidget*)gtk_radio_menu_item_new(
        (GSList*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioMenuItemsetGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_MENU_ITEM);
    DECLARE_GSLIST(a1, x1, DECLARE_OBJECT);
    gtk_radio_menu_item_set_group(
        (GtkRadioMenuItem*)a0
        ,(GSList*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RadioMenuItemgetGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_MENU_ITEM);
    GSList* cres = (GSList*)gtk_radio_menu_item_get_group(
        (GtkRadioMenuItem*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioMenuItemnewWithLabelFromWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_MENU_ITEM);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_radio_menu_item_new_with_label_from_widget(
        (GtkRadioMenuItem*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioMenuItemnewWithMnemonicFromWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_MENU_ITEM);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_radio_menu_item_new_with_mnemonic_from_widget(
        (GtkRadioMenuItem*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_RadioMenuItemnewFromWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_MENU_ITEM);
    GtkWidget* cres = (GtkWidget*)gtk_radio_menu_item_new_from_widget(
        (GtkRadioMenuItem*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_RadioMenuItemgetType) {
    GType cres = (GType)gtk_radio_menu_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioButtonnewWithMnemonicFromWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_BUTTON);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_radio_button_new_with_mnemonic_from_widget(
        (GtkRadioButton*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioButtonnewWithMnemonic) {
    DECLARE_GSLIST(a0, x0, DECLARE_OBJECT);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_radio_button_new_with_mnemonic(
        (GSList*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioButtonnewWithLabelFromWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_BUTTON);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_radio_button_new_with_label_from_widget(
        (GtkRadioButton*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioButtonnewWithLabel) {
    DECLARE_GSLIST(a0, x0, DECLARE_OBJECT);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_radio_button_new_with_label(
        (GSList*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_RadioButtonnewFromWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_BUTTON);
    GtkWidget* cres = (GtkWidget*)gtk_radio_button_new_from_widget(
        (GtkRadioButton*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_RadioButtonnew) {
    DECLARE_GSLIST(a0, x0, DECLARE_OBJECT);
    GtkWidget* cres = (GtkWidget*)gtk_radio_button_new(
        (GSList*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RadioButtonsetGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_BUTTON);
    DECLARE_GSLIST(a1, x1, DECLARE_OBJECT);
    gtk_radio_button_set_group(
        (GtkRadioButton*)a0
        ,(GSList*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RadioButtongetGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_RADIO_BUTTON);
    GSList* cres = (GSList*)gtk_radio_button_get_group(
        (GtkRadioButton*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_RadioButtongetType) {
    GType cres = (GType)gtk_radio_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_ProgressBarnew) {
    GtkWidget* cres = (GtkWidget*)gtk_progress_bar_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ProgressBargetEllipsize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    PangoEllipsizeMode cres = (PangoEllipsizeMode)gtk_progress_bar_get_ellipsize(
        (GtkProgressBar*)a0
        );
    word res = PangoEllipsizeModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ProgressBarsetEllipsize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
PangoEllipsizeMode a1 = PangoEllipsizeModetFromWord(x1);
    gtk_progress_bar_set_ellipsize(
        (GtkProgressBar*)a0
        ,(PangoEllipsizeMode)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ProgressBargetOrientation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    GtkProgressBarOrientation cres = (GtkProgressBarOrientation)gtk_progress_bar_get_orientation(
        (GtkProgressBar*)a0
        );
    word res = GtkProgressBarOrientationtToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ProgressBargetPulseStep) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    gdouble cres = (gdouble)gtk_progress_bar_get_pulse_step(
        (GtkProgressBar*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_ProgressBargetFraction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    gdouble cres = (gdouble)gtk_progress_bar_get_fraction(
        (GtkProgressBar*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_ProgressBargetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    const gchar* cres = (const gchar*)gtk_progress_bar_get_text(
        (GtkProgressBar*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ProgressBarsetOrientation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkProgressBarOrientation a1 = GtkProgressBarOrientationtFromWord(x1);
    gtk_progress_bar_set_orientation(
        (GtkProgressBar*)a0
        ,(GtkProgressBarOrientation)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ProgressBarsetPulseStep) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    DECLARE_CDOUBLE(a1, x1);
    gtk_progress_bar_set_pulse_step(
        (GtkProgressBar*)a0
        ,(gdouble)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ProgressBarsetFraction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    DECLARE_CDOUBLE(a1, x1);
    gtk_progress_bar_set_fraction(
        (GtkProgressBar*)a0
        ,(gdouble)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ProgressBarsetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    DECLARE_CSTRING(a1, x1);
    gtk_progress_bar_set_text(
        (GtkProgressBar*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ProgressBarpulse) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PROGRESS_BAR);
    gtk_progress_bar_pulse(
        (GtkProgressBar*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ProgressBargetType) {
    GType cres = (GType)gtk_progress_bar_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_ProgressgetType) {
    GType cres = (GType)gtk_progress_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_PreviewsetExpand) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PREVIEW);
    DECLARE_BOOL(a1, x1);
    gtk_preview_set_expand(
        (GtkPreview*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_PreviewdrawRow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PREVIEW);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_preview_draw_row(
        (GtkPreview*)a0
        ,(guchar*)a1
        ,(gint)a2
        ,(gint)a3
        ,(gint)a4
        );
    RETURN_UNIT;
} END
DEFINE9(Gtk_Previewput) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PREVIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_GC);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    DECLARE_INT(a5, x5);
    DECLARE_INT(a6, x6);
    DECLARE_INT(a7, x7);
    DECLARE_INT(a8, x8);
    gtk_preview_put(
        (GtkPreview*)a0
        ,(GdkWindow*)a1
        ,(GdkGC*)a2
        ,(gint)a3
        ,(gint)a4
        ,(gint)a5
        ,(gint)a6
        ,(gint)a7
        ,(gint)a8
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_Previewsize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PREVIEW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_preview_size(
        (GtkPreview*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_PreviewgetType) {
    GType cres = (GType)gtk_preview_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_PanedcomputePosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_paned_compute_position(
        (GtkPaned*)a0
        ,(gint)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_PanedgetChild2) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    GtkWidget* cres = (GtkWidget*)gtk_paned_get_child2(
        (GtkPaned*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_PanedgetChild1) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    GtkWidget* cres = (GtkWidget*)gtk_paned_get_child1(
        (GtkPaned*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_PanedsetPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    DECLARE_INT(a1, x1);
    gtk_paned_set_position(
        (GtkPaned*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_PanedgetPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    gint cres = (gint)gtk_paned_get_position(
        (GtkPaned*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_Panedpack2) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a2, x2);
    DECLARE_BOOL(a3, x3);
    gtk_paned_pack2(
        (GtkPaned*)a0
        ,(GtkWidget*)a1
        ,(gboolean)a2
        ,(gboolean)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_Panedpack1) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a2, x2);
    DECLARE_BOOL(a3, x3);
    gtk_paned_pack1(
        (GtkPaned*)a0
        ,(GtkWidget*)a1
        ,(gboolean)a2
        ,(gboolean)a3
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Panedadd2) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_paned_add2(
        (GtkPaned*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Panedadd1) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_PANED);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_paned_add1(
        (GtkPaned*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_PanedgetType) {
    GType cres = (GType)gtk_paned_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_OptionMenusetHistory) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OPTION_MENU);
    DECLARE_INT(a1, x1);
    gtk_option_menu_set_history(
        (GtkOptionMenu*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_OptionMenugetHistory) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OPTION_MENU);
    gint cres = (gint)gtk_option_menu_get_history(
        (GtkOptionMenu*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_OptionMenuremoveMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OPTION_MENU);
    gtk_option_menu_remove_menu(
        (GtkOptionMenu*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_OptionMenusetMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OPTION_MENU);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_option_menu_set_menu(
        (GtkOptionMenu*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_OptionMenugetMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OPTION_MENU);
    GtkWidget* cres = (GtkWidget*)gtk_option_menu_get_menu(
        (GtkOptionMenu*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_OptionMenugetType) {
    GType cres = (GType)gtk_option_menu_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_OldEditablechanged) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OLD_EDITABLE);
    gtk_old_editable_changed(
        (GtkOldEditable*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_OldEditableclaimSelection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OLD_EDITABLE);
    DECLARE_BOOL(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_old_editable_claim_selection(
        (GtkOldEditable*)a0
        ,(gboolean)a1
        ,(guint32)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_OldEditablegetType) {
    GType cres = (GType)gtk_old_editable_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_Objectdestroy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OBJECT);
    gtk_object_destroy(
        (GtkObject*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Objectsink) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OBJECT);
    gtk_object_sink(
        (GtkObject*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Objectnew) {
    DECLARE_INT(a0, x0);
    DECLARE_CSTRING(a1, x1);
    GtkObject* cres = (GtkObject*)gtk_object_new(
        (GType)a0
        ,(const gchar*)a1
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ObjectgetType) {
    GType cres = (GType)gtk_object_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Notebooknew) {
    GtkWidget* cres = (GtkWidget*)gtk_notebook_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldTabPos(O) ((O)->tab_pos)
#define DOsetFieldTabPos(O, V) ((O)->tab_pos = (V))
DEFINE3(Gtk_NotebookreorderChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    gtk_notebook_reorder_child(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_NotebooksetTabLabelPacking) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a2, x2);
    DECLARE_BOOL(a3, x3);
    if (Store::WordToInt(x4) == INVALID_INT) {REQUEST(x4);}
GtkPackType a4 = GtkPackTypetFromWord(x4);
    gtk_notebook_set_tab_label_packing(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(gboolean)a2
        ,(gboolean)a3
        ,(GtkPackType)a4
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_NotebookqueryTabLabelPacking) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT (a2, x2);
    DECLARE_OBJECT (a3, x3);
    if (Store::WordToInt(x4) == INVALID_INT) {REQUEST(x4);}
GtkPackType tmp0 = GtkPackTypetFromWord(x4);GtkPackType *a4 = &tmp0;
    gtk_notebook_query_tab_label_packing(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(gboolean*)a2
        ,(gboolean*)a3
        ,(GtkPackType*)a4
        );
    word r4 = GtkPackTypetToWord(*a4);
    RETURN1(r4);
} END
DEFINE2(Gtk_NotebookgetMenuLabelText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    const gchar* cres = (const gchar*)gtk_notebook_get_menu_label_text(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE3(Gtk_NotebooksetMenuLabelText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a2, x2);
    gtk_notebook_set_menu_label_text(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(const gchar*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_NotebooksetMenuLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    gtk_notebook_set_menu_label(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_NotebookgetMenuLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    GtkWidget* cres = (GtkWidget*)gtk_notebook_get_menu_label(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_NotebookgetTabLabelText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    const gchar* cres = (const gchar*)gtk_notebook_get_tab_label_text(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE3(Gtk_NotebooksetTabLabelText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a2, x2);
    gtk_notebook_set_tab_label_text(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(const gchar*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_NotebooksetTabLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    gtk_notebook_set_tab_label(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_NotebookgetTabLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    GtkWidget* cres = (GtkWidget*)gtk_notebook_get_tab_label(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_NotebookpopupDisable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gtk_notebook_popup_disable(
        (GtkNotebook*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_NotebookpopupEnable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gtk_notebook_popup_enable(
        (GtkNotebook*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_NotebookgetScrollable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gboolean cres = (gboolean)gtk_notebook_get_scrollable(
        (GtkNotebook*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_NotebooksetScrollable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_BOOL(a1, x1);
    gtk_notebook_set_scrollable(
        (GtkNotebook*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_NotebookgetTabPos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    GtkPositionType cres = (GtkPositionType)gtk_notebook_get_tab_pos(
        (GtkNotebook*)a0
        );
    word res = GtkPositionTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_NotebooksetTabPos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPositionType a1 = GtkPositionTypetFromWord(x1);
    gtk_notebook_set_tab_pos(
        (GtkNotebook*)a0
        ,(GtkPositionType)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_NotebookgetShowTabs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gboolean cres = (gboolean)gtk_notebook_get_show_tabs(
        (GtkNotebook*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_NotebooksetShowTabs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_BOOL(a1, x1);
    gtk_notebook_set_show_tabs(
        (GtkNotebook*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_NotebookgetShowBorder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gboolean cres = (gboolean)gtk_notebook_get_show_border(
        (GtkNotebook*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_NotebooksetShowBorder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_BOOL(a1, x1);
    gtk_notebook_set_show_border(
        (GtkNotebook*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_NotebookprevPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gtk_notebook_prev_page(
        (GtkNotebook*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_NotebooknextPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gtk_notebook_next_page(
        (GtkNotebook*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_NotebooksetCurrentPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_INT(a1, x1);
    gtk_notebook_set_current_page(
        (GtkNotebook*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_NotebookpageNum) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gint cres = (gint)gtk_notebook_page_num(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_NotebookgetNPages) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gint cres = (gint)gtk_notebook_get_n_pages(
        (GtkNotebook*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_NotebookgetNthPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_INT(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_notebook_get_nth_page(
        (GtkNotebook*)a0
        ,(gint)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_NotebookgetCurrentPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    gint cres = (gint)gtk_notebook_get_current_page(
        (GtkNotebook*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_NotebookremovePage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_INT(a1, x1);
    gtk_notebook_remove_page(
        (GtkNotebook*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_NotebookinsertPageMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_WIDGET);
    DECLARE_INT(a4, x4);
    gint cres = (gint)gtk_notebook_insert_page_menu(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        ,(GtkWidget*)a3
        ,(gint)a4
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_NotebookinsertPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    DECLARE_INT(a3, x3);
    gint cres = (gint)gtk_notebook_insert_page(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        ,(gint)a3
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_NotebookprependPageMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_WIDGET);
    gint cres = (gint)gtk_notebook_prepend_page_menu(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        ,(GtkWidget*)a3
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_NotebookprependPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    gint cres = (gint)gtk_notebook_prepend_page(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_NotebookappendPageMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GTK_TYPE_WIDGET);
    gint cres = (gint)gtk_notebook_append_page_menu(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        ,(GtkWidget*)a3
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_NotebookappendPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    gint cres = (gint)gtk_notebook_append_page(
        (GtkNotebook*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_NotebookgetType) {
    GType cres = (GType)gtk_notebook_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_NotebookgetFieldTabPos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    GtkPositionType cres = (GtkPositionType)DOgetFieldTabPos(
        (GtkNotebook*)a0
        );
    word res = GtkPositionTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_NotebooksetFieldTabPos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_NOTEBOOK);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPositionType a1 = GtkPositionTypetFromWord(x1);
    DOsetFieldTabPos(
        (GtkNotebook*)a0
        ,(GtkPositionType)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldTabPos
#undef DOsetFieldTabPos
DEFINE3(Gtk_MiscgetPadding) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MISC);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_misc_get_padding(
        (GtkMisc*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_MiscsetPadding) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MISC);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_misc_set_padding(
        (GtkMisc*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_MiscgetAlignment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MISC);
    DECLARE_DOUBLE_AS(gfloat, tmp0, x1);
               gfloat* a1 = (gfloat*)&tmp0;
    DECLARE_DOUBLE_AS(gfloat, tmp1, x2);
               gfloat* a2 = (gfloat*)&tmp1;
    gtk_misc_get_alignment(
        (GtkMisc*)a0
        ,(gfloat*)a1
        ,(gfloat*)a2
        );
    word r1 = Real::New(*a1)->ToWord ();
    word r2 = Real::New(*a2)->ToWord ();
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_MiscsetAlignment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MISC);
    DECLARE_CFLOAT(a1, x1);
    DECLARE_CFLOAT(a2, x2);
    gtk_misc_set_alignment(
        (GtkMisc*)a0
        ,(gfloat)a1
        ,(gfloat)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_MiscgetType) {
    GType cres = (GType)gtk_misc_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE5(Gtk_MessageDialognewWithMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GtkDialogFlags a1 = GtkDialogFlagstFromWord(x1);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkMessageType a2 = GtkMessageTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkButtonsType a3 = GtkButtonsTypetFromWord(x3);
    DECLARE_CSTRING(a4, x4);
    GtkWidget* cres = (GtkWidget*)gtk_message_dialog_new_with_markup(
        (GtkWindow*)a0
        ,(GtkDialogFlags)a1
        ,(GtkMessageType)a2
        ,(GtkButtonsType)a3
        ,(const gchar*)a4
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE5(Gtk_MessageDialognew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GtkDialogFlags a1 = GtkDialogFlagstFromWord(x1);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkMessageType a2 = GtkMessageTypetFromWord(x2);
    if (Store::WordToInt(x3) == INVALID_INT) {REQUEST(x3);}
GtkButtonsType a3 = GtkButtonsTypetFromWord(x3);
    DECLARE_CSTRING(a4, x4);
    GtkWidget* cres = (GtkWidget*)gtk_message_dialog_new(
        (GtkWindow*)a0
        ,(GtkDialogFlags)a1
        ,(GtkMessageType)a2
        ,(GtkButtonsType)a3
        ,(const gchar*)a4
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldImage(O) ((O)->image)
#define DOsetFieldImage(O, V) ((O)->image = (V))
#define DOgetFieldLabel(O) ((O)->label)
#define DOsetFieldLabel(O, V) ((O)->label = (V))
DEFINE2(Gtk_MessageDialogformatSecondaryMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MESSAGE_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_message_dialog_format_secondary_markup(
        (GtkMessageDialog*)a0
        ,(const gchar*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MessageDialogformatSecondaryText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MESSAGE_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_message_dialog_format_secondary_text(
        (GtkMessageDialog*)a0
        ,(const gchar*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MessageDialogsetMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MESSAGE_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_message_dialog_set_markup(
        (GtkMessageDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_MessageDialoggetType) {
    GType cres = (GType)gtk_message_dialog_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_MessageDialoggetFieldLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MESSAGE_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldLabel(
        (GtkMessageDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_MessageDialogsetFieldLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MESSAGE_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldLabel(
        (GtkMessageDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MessageDialoggetFieldImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MESSAGE_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldImage(
        (GtkMessageDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_MessageDialogsetFieldImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MESSAGE_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldImage(
        (GtkMessageDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldImage
#undef DOsetFieldImage
#undef DOgetFieldLabel
#undef DOsetFieldLabel
DEFINE2(Gtk_MenuToolButtonnew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a1, x1);
    GtkToolItem* cres = (GtkToolItem*)gtk_menu_tool_button_new(
        (GtkWidget*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE4(Gtk_MenuToolButtonsetArrowTooltip) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_TOOL_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TOOLTIPS);
    DECLARE_CSTRING(a2, x2);
    DECLARE_CSTRING(a3, x3);
    gtk_menu_tool_button_set_arrow_tooltip(
        (GtkMenuToolButton*)a0
        ,(GtkTooltips*)a1
        ,(const gchar*)a2
        ,(const gchar*)a3
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuToolButtongetMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_TOOL_BUTTON);
    GtkWidget* cres = (GtkWidget*)gtk_menu_tool_button_get_menu(
        (GtkMenuToolButton*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_MenuToolButtonsetMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_TOOL_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_menu_tool_button_set_menu(
        (GtkMenuToolButton*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuToolButtonnewFromStock) {
    DECLARE_CSTRING(a0, x0);
    GtkToolItem* cres = (GtkToolItem*)gtk_menu_tool_button_new_from_stock(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_MenuToolButtongetType) {
    GType cres = (GType)gtk_menu_tool_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_MenuShellcancel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    gtk_menu_shell_cancel(
        (GtkMenuShell*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenuShellselectFirst) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    DECLARE_BOOL(a1, x1);
    gtk_menu_shell_select_first(
        (GtkMenuShell*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_MenuShellactivateItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a2, x2);
    gtk_menu_shell_activate_item(
        (GtkMenuShell*)a0
        ,(GtkWidget*)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuShelldeselect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    gtk_menu_shell_deselect(
        (GtkMenuShell*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenuShellselectItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_menu_shell_select_item(
        (GtkMenuShell*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuShelldeactivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    gtk_menu_shell_deactivate(
        (GtkMenuShell*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_MenuShellinsert) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    gtk_menu_shell_insert(
        (GtkMenuShell*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenuShellprepend) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_menu_shell_prepend(
        (GtkMenuShell*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenuShellappend) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_SHELL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_menu_shell_append(
        (GtkMenuShell*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_MenuShellgetType) {
    GType cres = (GType)gtk_menu_shell_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_MenuItemnewWithMnemonic) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_menu_item_new_with_mnemonic(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_MenuItemnewWithLabel) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_menu_item_new_with_label(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_MenuItemnew) {
    GtkWidget* cres = (GtkWidget*)gtk_menu_item_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_MenuItemsetAccelPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    DECLARE_CSTRING(a1, x1);
    gtk_menu_item_set_accel_path(
        (GtkMenuItem*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuItemgetRightJustified) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    gboolean cres = (gboolean)gtk_menu_item_get_right_justified(
        (GtkMenuItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_MenuItemsetRightJustified) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_menu_item_set_right_justified(
        (GtkMenuItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenuItemtoggleSizeAllocate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    DECLARE_INT(a1, x1);
    gtk_menu_item_toggle_size_allocate(
        (GtkMenuItem*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenuItemtoggleSizeRequest) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    gtk_menu_item_toggle_size_request(
        (GtkMenuItem*)a0
        ,(gint*)a1
        );
    word r1 = Store::IntToWord(*a1);
    RETURN1(r1);
} END
DEFINE1(Gtk_MenuItemactivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    gtk_menu_item_activate(
        (GtkMenuItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuItemdeselect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    gtk_menu_item_deselect(
        (GtkMenuItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuItemselect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    gtk_menu_item_select(
        (GtkMenuItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuItemremoveSubmenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    gtk_menu_item_remove_submenu(
        (GtkMenuItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenuItemgetSubmenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    GtkWidget* cres = (GtkWidget*)gtk_menu_item_get_submenu(
        (GtkMenuItem*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_MenuItemsetSubmenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU_ITEM);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_menu_item_set_submenu(
        (GtkMenuItem*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_MenuItemgetType) {
    GType cres = (GType)gtk_menu_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_MenuBarnew) {
    GtkWidget* cres = (GtkWidget*)gtk_menu_bar_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_MenuBargetType) {
    GType cres = (GType)gtk_menu_bar_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Menunew) {
    GtkWidget* cres = (GtkWidget*)gtk_menu_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_MenusetMonitor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_INT(a1, x1);
    gtk_menu_set_monitor(
        (GtkMenu*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE6(Gtk_Menuattach) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    DECLARE_INT(a5, x5);
    gtk_menu_attach(
        (GtkMenu*)a0
        ,(GtkWidget*)a1
        ,(guint)a2
        ,(guint)a3
        ,(guint)a4
        ,(guint)a5
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenusetScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_SCREEN);
    gtk_menu_set_screen(
        (GtkMenu*)a0
        ,(GdkScreen*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_MenureorderChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    gtk_menu_reorder_child(
        (GtkMenu*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenugetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    const gchar* cres = (const gchar*)gtk_menu_get_title(
        (GtkMenu*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_MenusetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_CSTRING(a1, x1);
    gtk_menu_set_title(
        (GtkMenu*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenugetTearoffState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    gboolean cres = (gboolean)gtk_menu_get_tearoff_state(
        (GtkMenu*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_MenusetTearoffState) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_BOOL(a1, x1);
    gtk_menu_set_tearoff_state(
        (GtkMenu*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenugetAttachWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    GtkWidget* cres = (GtkWidget*)gtk_menu_get_attach_widget(
        (GtkMenu*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_Menudetach) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    gtk_menu_detach(
        (GtkMenu*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_MenuattachToWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    GtkMenuDetachFunc a2 = 0; /* FIXME: can't be done with current seam*/
    gtk_menu_attach_to_widget(
        (GtkMenu*)a0
        ,(GtkWidget*)a1
        ,(GtkMenuDetachFunc)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenusetAccelPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_CSTRING(a1, x1);
    gtk_menu_set_accel_path(
        (GtkMenu*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenugetAccelGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    GtkAccelGroup* cres = (GtkAccelGroup*)gtk_menu_get_accel_group(
        (GtkMenu*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_MenusetAccelGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACCEL_GROUP);
    gtk_menu_set_accel_group(
        (GtkMenu*)a0
        ,(GtkAccelGroup*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_MenusetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_INT(a1, x1);
    gtk_menu_set_active(
        (GtkMenu*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MenugetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    GtkWidget* cres = (GtkWidget*)gtk_menu_get_active(
        (GtkMenu*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_Menupopdown) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    gtk_menu_popdown(
        (GtkMenu*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Menureposition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    gtk_menu_reposition(
        (GtkMenu*)a0
        );
    RETURN_UNIT;
} END
DEFINE7(Gtk_Menupopup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_MENU);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    GtkMenuPositionFunc a3 = 0; /* FIXME: can't be done with current seam*/
    DECLARE_OBJECT(a4, x4);
    DECLARE_INT(a5, x5);
    DECLARE_INT(a6, x6);
    gtk_menu_popup(
        (GtkMenu*)a0
        ,(GtkWidget*)a1
        ,(GtkWidget*)a2
        ,(GtkMenuPositionFunc)a3
        ,(gpointer)a4
        ,(guint)a5
        ,(guint32)a6
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_MenugetType) {
    GType cres = (GType)gtk_menu_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ListStorenewv) {
    DECLARE_C_ARG_ARRAY(a0, a0size, x0, gint, GType, DECLARE_INT(elem_c, elem_alice););
    GtkListStore* cres = (GtkListStore*)gtk_list_store_newv(
        (gint)a0size, (GType*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_ListStoremoveBefore) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_list_store_move_before(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ListStoremoveAfter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_list_store_move_after(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ListStoreswap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_list_store_swap(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ListStorereorder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    gtk_list_store_reorder(
        (GtkListStore*)a0
        ,(gint*)a1
        );
    word r1 = Store::IntToWord(*a1);
    RETURN1(r1);
} END
DEFINE2(Gtk_ListStoreiterIsValid) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_list_store_iter_is_valid(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ListStoreclear) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    gtk_list_store_clear(
        (GtkListStore*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ListStoreappend) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_list_store_append(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ListStoreprepend) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_list_store_prepend(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_ListStoreinsertWithValuesv) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_INT(a2, x2);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    DECLARE_C_ARG_ARRAY(a4, a4size, x4, gint, GValue, GValue elem_c; { DECLARE_OBJECT_OF_TYPE(tmp0, elem_alice, G_TYPE_VALUE); g_value_copy ((GValue*)tmp0, &elem_c); });
    gtk_list_store_insert_with_valuesv(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(gint)a2
        ,(gint*)a3
        ,(GValue*)a4, (gint)a4size
        );
    word r3 = Store::IntToWord(*a3);
    RETURN1(r3);
} END
DEFINE3(Gtk_ListStoreinsertWithValues) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_INT(a2, x2);
    gtk_list_store_insert_with_values(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(gint)a2
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ListStoreinsertAfter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_list_store_insert_after(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ListStoreinsertBefore) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_list_store_insert_before(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ListStoreinsert) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_INT(a2, x2);
    gtk_list_store_insert(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ListStoreremove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_list_store_remove(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ListStoreset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_list_store_set(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_ListStoresetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_INT(a2, x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, G_TYPE_VALUE);
    gtk_list_store_set_value(
        (GtkListStore*)a0
        ,(GtkTreeIter*)a1
        ,(gint)a2
        ,(GValue*)a3
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ListStoresetColumnTypes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LIST_STORE);
    DECLARE_C_ARG_ARRAY(a1, a1size, x1, gint, GType, DECLARE_INT(elem_c, elem_alice););
    gtk_list_store_set_column_types(
        (GtkListStore*)a0
        ,(gint)a1size, (GType*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ListStoregetType) {
    GType cres = (GType)gtk_list_store_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_Layoutnew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    GtkWidget* cres = (GtkWidget*)gtk_layout_new(
        (GtkAdjustment*)a0
        ,(GtkAdjustment*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldBinWindow(O) ((O)->bin_window)
#define DOsetFieldBinWindow(O, V) ((O)->bin_window = (V))
DEFINE1(Gtk_Layoutthaw) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    gtk_layout_thaw(
        (GtkLayout*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Layoutfreeze) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    gtk_layout_freeze(
        (GtkLayout*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_LayoutsetVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_layout_set_vadjustment(
        (GtkLayout*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_LayoutsetHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_layout_set_hadjustment(
        (GtkLayout*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LayoutgetVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_layout_get_vadjustment(
        (GtkLayout*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_LayoutgetHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_layout_get_hadjustment(
        (GtkLayout*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_LayoutgetSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    DECLARE_INT_AS(guint, tmp0, x1);
               int* a1 = (int*)&tmp0;
    DECLARE_INT_AS(guint, tmp1, x2);
               int* a2 = (int*)&tmp1;
    gtk_layout_get_size(
        (GtkLayout*)a0
        ,(guint*)a1
        ,(guint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_LayoutsetSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_layout_set_size(
        (GtkLayout*)a0
        ,(guint)a1
        ,(guint)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_Layoutmove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_layout_move(
        (GtkLayout*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_Layoutput) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_layout_put(
        (GtkLayout*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_LayoutgetType) {
    GType cres = (GType)gtk_layout_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_LayoutgetFieldBinWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    GdkWindow* cres = (GdkWindow*)DOgetFieldBinWindow(
        (GtkLayout*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_LayoutsetFieldBinWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    DOsetFieldBinWindow(
        (GtkLayout*)a0
        ,(GdkWindow*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldBinWindow
#undef DOsetFieldBinWindow
DEFINE1(Gtk_LabelnewWithMnemonic) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_label_new_with_mnemonic(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_Labelnew) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_label_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_LabelgetSingleLineMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    gboolean cres = (gboolean)gtk_label_get_single_line_mode(
        (GtkLabel*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetSingleLineMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_BOOL(a1, x1);
    gtk_label_set_single_line_mode(
        (GtkLabel*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetMaxWidthChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    gint cres = (gint)gtk_label_get_max_width_chars(
        (GtkLabel*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetMaxWidthChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_INT(a1, x1);
    gtk_label_set_max_width_chars(
        (GtkLabel*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetWidthChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    gint cres = (gint)gtk_label_get_width_chars(
        (GtkLabel*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetWidthChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_INT(a1, x1);
    gtk_label_set_width_chars(
        (GtkLabel*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetAngle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    gint cres = (gint)gtk_label_get_angle(
        (GtkLabel*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetAngle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_INT(a1, x1);
    gtk_label_set_angle(
        (GtkLabel*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetEllipsize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    PangoEllipsizeMode cres = (PangoEllipsizeMode)gtk_label_get_ellipsize(
        (GtkLabel*)a0
        );
    word res = PangoEllipsizeModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetEllipsize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
PangoEllipsizeMode a1 = PangoEllipsizeModetFromWord(x1);
    gtk_label_set_ellipsize(
        (GtkLabel*)a0
        ,(PangoEllipsizeMode)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_LabelgetLayoutOffsets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_label_get_layout_offsets(
        (GtkLabel*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE1(Gtk_LabelgetLayout) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    PangoLayout* cres = (PangoLayout*)gtk_label_get_layout(
        (GtkLabel*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_LabelgetSelectionBounds) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gboolean cres = (gboolean)gtk_label_get_selection_bounds(
        (GtkLabel*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN3(res,r1,r2);
} END
DEFINE3(Gtk_LabelselectRegion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_label_select_region(
        (GtkLabel*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetSelectable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    gboolean cres = (gboolean)gtk_label_get_selectable(
        (GtkLabel*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetSelectable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_BOOL(a1, x1);
    gtk_label_set_selectable(
        (GtkLabel*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetLineWrap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    gboolean cres = (gboolean)gtk_label_get_line_wrap(
        (GtkLabel*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetLineWrap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_BOOL(a1, x1);
    gtk_label_set_line_wrap(
        (GtkLabel*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_LabelsetPattern) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_CSTRING(a1, x1);
    gtk_label_set_pattern(
        (GtkLabel*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetJustify) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    GtkJustification cres = (GtkJustification)gtk_label_get_justify(
        (GtkLabel*)a0
        );
    word res = GtkJustificationtToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetJustify) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkJustification a1 = GtkJustificationtFromWord(x1);
    gtk_label_set_justify(
        (GtkLabel*)a0
        ,(GtkJustification)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_LabelsetTextWithMnemonic) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_CSTRING(a1, x1);
    gtk_label_set_text_with_mnemonic(
        (GtkLabel*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetMnemonicWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    GtkWidget* cres = (GtkWidget*)gtk_label_get_mnemonic_widget(
        (GtkLabel*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetMnemonicWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_label_set_mnemonic_widget(
        (GtkLabel*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetMnemonicKeyval) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    guint cres = (guint)gtk_label_get_mnemonic_keyval(
        (GtkLabel*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetMarkupWithMnemonic) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_CSTRING(a1, x1);
    gtk_label_set_markup_with_mnemonic(
        (GtkLabel*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetUseUnderline) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    gboolean cres = (gboolean)gtk_label_get_use_underline(
        (GtkLabel*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetUseUnderline) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_BOOL(a1, x1);
    gtk_label_set_use_underline(
        (GtkLabel*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetUseMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    gboolean cres = (gboolean)gtk_label_get_use_markup(
        (GtkLabel*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetUseMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_BOOL(a1, x1);
    gtk_label_set_use_markup(
        (GtkLabel*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_LabelsetMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_CSTRING(a1, x1);
    gtk_label_set_markup(
        (GtkLabel*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    const gchar* cres = (const gchar*)gtk_label_get_label(
        (GtkLabel*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_CSTRING(a1, x1);
    gtk_label_set_label(
        (GtkLabel*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    PangoAttrList* cres = (PangoAttrList*)gtk_label_get_attributes(
        (GtkLabel*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_OBJECT (a1, x1);
    gtk_label_set_attributes(
        (GtkLabel*)a0
        ,(PangoAttrList*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_LabelgetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    const gchar* cres = (const gchar*)gtk_label_get_text(
        (GtkLabel*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_LabelsetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_LABEL);
    DECLARE_CSTRING(a1, x1);
    gtk_label_set_text(
        (GtkLabel*)a0
        ,(const char*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_LabelgetType) {
    GType cres = (GType)gtk_label_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_Itemtoggle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ITEM);
    gtk_item_toggle(
        (GtkItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Itemdeselect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ITEM);
    gtk_item_deselect(
        (GtkItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Itemselect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ITEM);
    gtk_item_select(
        (GtkItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ItemgetType) {
    GType cres = (GType)gtk_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_InvisiblenewForScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_SCREEN);
    GtkWidget* cres = (GtkWidget*)gtk_invisible_new_for_screen(
        (GdkScreen*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_Invisiblenew) {
    GtkWidget* cres = (GtkWidget*)gtk_invisible_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_InvisiblegetScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_INVISIBLE);
    GdkScreen* cres = (GdkScreen*)gtk_invisible_get_screen(
        (GtkInvisible*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_InvisiblesetScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_INVISIBLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_SCREEN);
    gtk_invisible_set_screen(
        (GtkInvisible*)a0
        ,(GdkScreen*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_InvisiblegetType) {
    GType cres = (GType)gtk_invisible_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_InputDialognew) {
    GtkWidget* cres = (GtkWidget*)gtk_input_dialog_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_InputDialoggetType) {
    GType cres = (GType)gtk_input_dialog_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_IMMulticontextnew) {
    GtkIMContext* cres = (GtkIMContext*)gtk_im_multicontext_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_IMMulticontextappendMenuitems) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_MULTICONTEXT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_MENU_SHELL);
    gtk_im_multicontext_append_menuitems(
        (GtkIMMulticontext*)a0
        ,(GtkMenuShell*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_IMMulticontextgetType) {
    GType cres = (GType)gtk_im_multicontext_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_IMContextSimplenew) {
    GtkIMContext* cres = (GtkIMContext*)gtk_im_context_simple_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE4(Gtk_IMContextSimpleaddTable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT_SIMPLE);
    DECLARE_OBJECT (a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_im_context_simple_add_table(
        (GtkIMContextSimple*)a0
        ,(guint16*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_IMContextSimplegetType) {
    GType cres = (GType)gtk_im_context_simple_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_IMContextdeleteSurrounding) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gboolean cres = (gboolean)gtk_im_context_delete_surrounding(
        (GtkIMContext*)a0
        ,(gint)a1
        ,(gint)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_IMContextgetSurrounding) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    DECLARE_ZERO_TERMINATED_ARRAY(a1, x1, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    gboolean cres = (gboolean)gtk_im_context_get_surrounding(
        (GtkIMContext*)a0
        ,(gchar**)a1
        ,(gint*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r2 = Store::IntToWord(*a2);
    RETURN2(res,r2);
} END
DEFINE4(Gtk_IMContextsetSurrounding) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_im_context_set_surrounding(
        (GtkIMContext*)a0
        ,(const gchar*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IMContextsetUsePreedit) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    DECLARE_BOOL(a1, x1);
    gtk_im_context_set_use_preedit(
        (GtkIMContext*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IMContextsetCursorLocation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_RECTANGLE);
    gtk_im_context_set_cursor_location(
        (GtkIMContext*)a0
        ,(GdkRectangle*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IMContextreset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    gtk_im_context_reset(
        (GtkIMContext*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IMContextfocusOut) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    gtk_im_context_focus_out(
        (GtkIMContext*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IMContextfocusIn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    gtk_im_context_focus_in(
        (GtkIMContext*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IMContextfilterKeypress) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_im_context_filter_keypress(
        (GtkIMContext*)a0
        ,(GdkEventKey*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_IMContextgetPreeditString) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    DECLARE_ZERO_TERMINATED_ARRAY(a1, x1, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    DECLARE_OBJECT (a2, x2);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    gtk_im_context_get_preedit_string(
        (GtkIMContext*)a0
        ,(gchar**)a1
        ,(PangoAttrList**)a2
        ,(gint*)a3
        );
    word r3 = Store::IntToWord(*a3);
    RETURN1(r3);
} END
DEFINE2(Gtk_IMContextsetClientWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IM_CONTEXT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    gtk_im_context_set_client_window(
        (GtkIMContext*)a0
        ,(GdkWindow*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_IMContextgetType) {
    GType cres = (GType)gtk_im_context_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ImageMenuItemnewFromStock) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACCEL_GROUP);
    GtkWidget* cres = (GtkWidget*)gtk_image_menu_item_new_from_stock(
        (const gchar*)a0
        ,(GtkAccelGroup*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ImageMenuItemnewWithMnemonic) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_image_menu_item_new_with_mnemonic(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ImageMenuItemnewWithLabel) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_image_menu_item_new_with_label(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ImageMenuItemnew) {
    GtkWidget* cres = (GtkWidget*)gtk_image_menu_item_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ImageMenuItemgetImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE_MENU_ITEM);
    GtkWidget* cres = (GtkWidget*)gtk_image_menu_item_get_image(
        (GtkImageMenuItem*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ImageMenuItemsetImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE_MENU_ITEM);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_image_menu_item_set_image(
        (GtkImageMenuItem*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ImageMenuItemgetType) {
    GType cres = (GType)gtk_image_menu_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ImagenewFromStock) {
    DECLARE_CSTRING(a0, x0);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkIconSize a1 = GtkIconSizetFromWord(x1);
    GtkWidget* cres = (GtkWidget*)gtk_image_new_from_stock(
        (const gchar*)a0
        ,(GtkIconSize)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ImagenewFromPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_PIXBUF);
    GtkWidget* cres = (GtkWidget*)gtk_image_new_from_pixbuf(
        (GdkPixbuf*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ImagenewFromFile) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_image_new_from_file(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ImagenewFromImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_IMAGE);
    DECLARE_OBJECT(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_image_new_from_image(
        (GdkImage*)a0
        ,(GdkBitmap*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ImagenewFromPixmap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_PIXMAP);
    DECLARE_OBJECT(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_image_new_from_pixmap(
        (GdkPixmap*)a0
        ,(GdkBitmap*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_Imagenew) {
    GtkWidget* cres = (GtkWidget*)gtk_image_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ImagegetPixelSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    gint cres = (gint)gtk_image_get_pixel_size(
        (GtkImage*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_ImagegetIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_ZERO_TERMINATED_ARRAY(a1, x1, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkIconSize tmp0 = GtkIconSizetFromWord(x2);GtkIconSize *a2 = &tmp0;
    gtk_image_get_icon_name(
        (GtkImage*)a0
        ,(const gchar**)a1
        ,(GtkIconSize*)a2
        );
    word r2 = GtkIconSizetToWord(*a2);
    RETURN1(r2);
} END
DEFINE2(Gtk_ImagesetPixelSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_INT(a1, x1);
    gtk_image_set_pixel_size(
        (GtkImage*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ImagesetFromIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_CSTRING(a1, x1);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkIconSize a2 = GtkIconSizetFromWord(x2);
    gtk_image_set_from_icon_name(
        (GtkImage*)a0
        ,(const gchar*)a1
        ,(GtkIconSize)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ImagenewFromIconName) {
    DECLARE_CSTRING(a0, x0);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkIconSize a1 = GtkIconSizetFromWord(x1);
    GtkWidget* cres = (GtkWidget*)gtk_image_new_from_icon_name(
        (const gchar*)a0
        ,(GtkIconSize)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ImagegetAnimation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    GdkPixbufAnimation* cres = (GdkPixbufAnimation*)gtk_image_get_animation(
        (GtkImage*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ImagegetIconSet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    GtkIconSet* tmp0 = 0; GtkIconSet** a1 = &tmp0;
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkIconSize tmp1 = GtkIconSizetFromWord(x1);GtkIconSize *a2 = &tmp1;
    gtk_image_get_icon_set(
        (GtkImage*)a0
        ,(GtkIconSet**)a1
        ,(GtkIconSize*)a2
        );
    word r1 = OBJECT_TO_WORD(*a1, TYPE_BOXED, GTK_TYPE_ICON_SET);
    word r2 = GtkIconSizetToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_ImagegetStock) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_ZERO_TERMINATED_ARRAY(a1, x1, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkIconSize tmp0 = GtkIconSizetFromWord(x2);GtkIconSize *a2 = &tmp0;
    gtk_image_get_stock(
        (GtkImage*)a0
        ,(gchar**)a1
        ,(GtkIconSize*)a2
        );
    word r2 = GtkIconSizetToWord(*a2);
    RETURN1(r2);
} END
DEFINE1(Gtk_ImagegetPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_image_get_pixbuf(
        (GtkImage*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ImagegetImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    GdkImage* tmp0 = 0; GdkImage** a1 = &tmp0;
    GdkBitmap* tmp1 = 0; GdkBitmap** a2 = &tmp1;
    gtk_image_get_image(
        (GtkImage*)a0
        ,(GdkImage**)a1
        ,(GdkBitmap**)a2
        );
    word r1 = OBJECT_TO_WORD(*a1,TYPE_G_OBJECT);
    word r2 = OBJECT_TO_WORD(*a2, TYPE_BOXED);
    RETURN2(r1,r2);
} END
DEFINE1(Gtk_ImagegetPixmap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    GdkPixmap* tmp0 = 0; GdkPixmap** a1 = &tmp0;
    GdkBitmap* tmp1 = 0; GdkBitmap** a2 = &tmp1;
    gtk_image_get_pixmap(
        (GtkImage*)a0
        ,(GdkPixmap**)a1
        ,(GdkBitmap**)a2
        );
    word r1 = OBJECT_TO_WORD(*a1,TYPE_G_OBJECT);
    word r2 = OBJECT_TO_WORD(*a2, TYPE_BOXED);
    RETURN2(r1,r2);
} END
DEFINE1(Gtk_ImagegetStorageType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    GtkImageType cres = (GtkImageType)gtk_image_get_storage_type(
        (GtkImage*)a0
        );
    word res = GtkImageTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ImagesetFromAnimation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_PIXBUF_ANIMATION);
    gtk_image_set_from_animation(
        (GtkImage*)a0
        ,(GdkPixbufAnimation*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ImagesetFromIconSet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ICON_SET);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkIconSize a2 = GtkIconSizetFromWord(x2);
    gtk_image_set_from_icon_set(
        (GtkImage*)a0
        ,(GtkIconSet*)a1
        ,(GtkIconSize)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ImagesetFromStock) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_CSTRING(a1, x1);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkIconSize a2 = GtkIconSizetFromWord(x2);
    gtk_image_set_from_stock(
        (GtkImage*)a0
        ,(const gchar*)a1
        ,(GtkIconSize)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ImagesetFromPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_PIXBUF);
    gtk_image_set_from_pixbuf(
        (GtkImage*)a0
        ,(GdkPixbuf*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ImagesetFromFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_CSTRING(a1, x1);
    gtk_image_set_from_file(
        (GtkImage*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ImagesetFromImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_IMAGE);
    DECLARE_OBJECT(a2, x2);
    gtk_image_set_from_image(
        (GtkImage*)a0
        ,(GdkImage*)a1
        ,(GdkBitmap*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ImagesetFromPixmap) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_IMAGE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_PIXMAP);
    DECLARE_OBJECT(a2, x2);
    gtk_image_set_from_pixmap(
        (GtkImage*)a0
        ,(GdkPixmap*)a1
        ,(GdkBitmap*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ImagenewFromAnimation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_PIXBUF_ANIMATION);
    GtkWidget* cres = (GtkWidget*)gtk_image_new_from_animation(
        (GdkPixbufAnimation*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ImagenewFromIconSet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_SET);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkIconSize a1 = GtkIconSizetFromWord(x1);
    GtkWidget* cres = (GtkWidget*)gtk_image_new_from_icon_set(
        (GtkIconSet*)a0
        ,(GtkIconSize)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ImagegetType) {
    GType cres = (GType)gtk_image_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_IconViewnew) {
    GtkWidget* cres = (GtkWidget*)gtk_icon_view_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewitemActivated) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_icon_view_item_activated(
        (GtkIconView*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewunselectAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gtk_icon_view_unselect_all(
        (GtkIconView*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewselectAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gtk_icon_view_select_all(
        (GtkIconView*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetSelectedItems) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    GList* cres = (GList*)gtk_icon_view_get_selected_items(
        (GtkIconView*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewpathIsSelected) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_icon_view_path_is_selected(
        (GtkIconView*)a0
        ,(GtkTreePath*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewunselectPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_icon_view_unselect_path(
        (GtkIconView*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconViewselectPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_icon_view_select_path(
        (GtkIconView*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetSelectionMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    GtkSelectionMode cres = (GtkSelectionMode)gtk_icon_view_get_selection_mode(
        (GtkIconView*)a0
        );
    word res = GtkSelectionModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetSelectionMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkSelectionMode a1 = GtkSelectionModetFromWord(x1);
    gtk_icon_view_set_selection_mode(
        (GtkIconView*)a0
        ,(GtkSelectionMode)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_IconViewgetPathAtPos) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    GtkTreePath* cres = (GtkTreePath*)gtk_icon_view_get_path_at_pos(
        (GtkIconView*)a0
        ,(gint)a1
        ,(gint)a2
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE1(Gtk_IconViewgetMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_margin(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetMargin) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_margin(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetColumnSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_column_spacing(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetColumnSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_column_spacing(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetRowSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_row_spacing(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetRowSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_row_spacing(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_spacing(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_spacing(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetItemWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_item_width(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetItemWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_item_width(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetColumns) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_columns(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetColumns) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_columns(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetOrientation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    GtkOrientation cres = (GtkOrientation)gtk_icon_view_get_orientation(
        (GtkIconView*)a0
        );
    word res = GtkOrientationtToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetOrientation) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkOrientation a1 = GtkOrientationtFromWord(x1);
    gtk_icon_view_set_orientation(
        (GtkIconView*)a0
        ,(GtkOrientation)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetPixbufColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_pixbuf_column(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetPixbufColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_pixbuf_column(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetMarkupColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_markup_column(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetMarkupColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_markup_column(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetTextColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    gint cres = (gint)gtk_icon_view_get_text_column(
        (GtkIconView*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetTextColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_INT(a1, x1);
    gtk_icon_view_set_text_column(
        (GtkIconView*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewgetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    GtkTreeModel* cres = (GtkTreeModel*)gtk_icon_view_get_model(
        (GtkIconView*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_IconViewsetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_MODEL);
    gtk_icon_view_set_model(
        (GtkIconView*)a0
        ,(GtkTreeModel*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconViewnewWithModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    GtkWidget* cres = (GtkWidget*)gtk_icon_view_new_with_model(
        (GtkTreeModel*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_IconViewgetType) {
    GType cres = (GType)gtk_icon_view_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_IconThemenew) {
    GtkIconTheme* cres = (GtkIconTheme*)gtk_icon_theme_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_IconThemeaddBuiltinIcon) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_PIXBUF);
    gtk_icon_theme_add_builtin_icon(
        (const gchar*)a0
        ,(gint)a1
        ,(GdkPixbuf*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconThemerescanIfNeeded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    gboolean cres = (gboolean)gtk_icon_theme_rescan_if_needed(
        (GtkIconTheme*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_IconThemegetExampleIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    char* cres = (char*)gtk_icon_theme_get_example_icon_name(
        (GtkIconTheme*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_IconThemelistIcons) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    DECLARE_CSTRING(a1, x1);
    GList* cres = (GList*)gtk_icon_theme_list_icons(
        (GtkIconTheme*)a0
        ,(const gchar*)a1
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_IconThemeloadIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x3, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x3);}
});
GtkIconLookupFlags a3 = GtkIconLookupFlagstFromWord(x3);
    GError *tmp2 = 0; GError **a4 = &tmp2;
    GdkPixbuf* cres = (GdkPixbuf*)gtk_icon_theme_load_icon(
        (GtkIconTheme*)a0
        ,(const gchar*)a1
        ,(gint)a2
        ,(GtkIconLookupFlags)a3
        ,a4
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    if ((*a4) != NULL) {char message[strlen((*a4)->message)];g_error_free(*a4);RAISE_CORE_ERROR(message);}
    RETURN1(res);
} END
DEFINE4(Gtk_IconThemelookupIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x3, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x3);}
});
GtkIconLookupFlags a3 = GtkIconLookupFlagstFromWord(x3);
    GtkIconInfo* cres = (GtkIconInfo*)gtk_icon_theme_lookup_icon(
        (GtkIconTheme*)a0
        ,(const gchar*)a1
        ,(gint)a2
        ,(GtkIconLookupFlags)a3
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_INFO);
    RETURN1(res);
} END
DEFINE2(Gtk_IconThemehasIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_icon_theme_has_icon(
        (GtkIconTheme*)a0
        ,(const gchar*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_IconThemesetCustomTheme) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    DECLARE_CSTRING(a1, x1);
    gtk_icon_theme_set_custom_theme(
        (GtkIconTheme*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconThemeprependSearchPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    DECLARE_CSTRING(a1, x1);
    gtk_icon_theme_prepend_search_path(
        (GtkIconTheme*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconThemeappendSearchPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    DECLARE_CSTRING(a1, x1);
    gtk_icon_theme_append_search_path(
        (GtkIconTheme*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconThemesetScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_THEME);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_SCREEN);
    gtk_icon_theme_set_screen(
        (GtkIconTheme*)a0
        ,(GdkScreen*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconThemegetForScreen) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_SCREEN);
    GtkIconTheme* cres = (GtkIconTheme*)gtk_icon_theme_get_for_screen(
        (GdkScreen*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_IconThemegetDefault) {
    GtkIconTheme* cres = (GtkIconTheme*)gtk_icon_theme_get_default(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_IconThemegetType) {
    GType cres = (GType)gtk_icon_theme_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_IconFactorynew) {
    GtkIconFactory* cres = (GtkIconFactory*)gtk_icon_factory_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_IconFactorylookupDefault) {
    DECLARE_CSTRING(a0, x0);
    GtkIconSet* cres = (GtkIconSet*)gtk_icon_factory_lookup_default(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SET);
    RETURN1(res);
} END
DEFINE1(Gtk_IconFactoryremoveDefault) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_FACTORY);
    gtk_icon_factory_remove_default(
        (GtkIconFactory*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IconFactoryaddDefault) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_FACTORY);
    gtk_icon_factory_add_default(
        (GtkIconFactory*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_IconFactorylookup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_FACTORY);
    DECLARE_CSTRING(a1, x1);
    GtkIconSet* cres = (GtkIconSet*)gtk_icon_factory_lookup(
        (GtkIconFactory*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_ICON_SET);
    RETURN1(res);
} END
DEFINE3(Gtk_IconFactoryadd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ICON_FACTORY);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_ICON_SET);
    gtk_icon_factory_add(
        (GtkIconFactory*)a0
        ,(const gchar*)a1
        ,(GtkIconSet*)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_IconFactorygetType) {
    GType cres = (GType)gtk_icon_factory_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_HSeparatornew) {
    GtkWidget* cres = (GtkWidget*)gtk_hseparator_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_HSeparatorgetType) {
    GType cres = (GType)gtk_hseparator_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_HScrollbarnew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    GtkWidget* cres = (GtkWidget*)gtk_hscrollbar_new(
        (GtkAdjustment*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_HScrollbargetType) {
    GType cres = (GType)gtk_hscrollbar_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_HScalenewWithRange) {
    DECLARE_CDOUBLE(a0, x0);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    GtkWidget* cres = (GtkWidget*)gtk_hscale_new_with_range(
        (gdouble)a0
        ,(gdouble)a1
        ,(gdouble)a2
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_HScalenew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    GtkWidget* cres = (GtkWidget*)gtk_hscale_new(
        (GtkAdjustment*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_HScalegetType) {
    GType cres = (GType)gtk_hscale_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_HRulernew) {
    GtkWidget* cres = (GtkWidget*)gtk_hruler_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_HRulergetType) {
    GType cres = (GType)gtk_hruler_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_HPanednew) {
    GtkWidget* cres = (GtkWidget*)gtk_hpaned_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_HPanedgetType) {
    GType cres = (GType)gtk_hpaned_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_HButtonBoxnew) {
    GtkWidget* cres = (GtkWidget*)gtk_hbutton_box_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_HButtonBoxgetType) {
    GType cres = (GType)gtk_hbutton_box_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_HBoxnew) {
    DECLARE_BOOL(a0, x0);
    DECLARE_INT(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_hbox_new(
        (gboolean)a0
        ,(gint)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_HBoxgetType) {
    GType cres = (GType)gtk_hbox_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_HandleBoxnew) {
    GtkWidget* cres = (GtkWidget*)gtk_handle_box_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_HandleBoxgetSnapEdge) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_HANDLE_BOX);
    GtkPositionType cres = (GtkPositionType)gtk_handle_box_get_snap_edge(
        (GtkHandleBox*)a0
        );
    word res = GtkPositionTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_HandleBoxsetSnapEdge) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_HANDLE_BOX);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPositionType a1 = GtkPositionTypetFromWord(x1);
    gtk_handle_box_set_snap_edge(
        (GtkHandleBox*)a0
        ,(GtkPositionType)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_HandleBoxgetHandlePosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_HANDLE_BOX);
    GtkPositionType cres = (GtkPositionType)gtk_handle_box_get_handle_position(
        (GtkHandleBox*)a0
        );
    word res = GtkPositionTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_HandleBoxsetHandlePosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_HANDLE_BOX);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPositionType a1 = GtkPositionTypetFromWord(x1);
    gtk_handle_box_set_handle_position(
        (GtkHandleBox*)a0
        ,(GtkPositionType)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_HandleBoxgetShadowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_HANDLE_BOX);
    GtkShadowType cres = (GtkShadowType)gtk_handle_box_get_shadow_type(
        (GtkHandleBox*)a0
        );
    word res = GtkShadowTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_HandleBoxsetShadowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_HANDLE_BOX);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkShadowType a1 = GtkShadowTypetFromWord(x1);
    gtk_handle_box_set_shadow_type(
        (GtkHandleBox*)a0
        ,(GtkShadowType)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_HandleBoxgetType) {
    GType cres = (GType)gtk_handle_box_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_GammaCurvenew) {
    GtkWidget* cres = (GtkWidget*)gtk_gamma_curve_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldCurve(O) ((O)->curve)
#define DOsetFieldCurve(O, V) ((O)->curve = (V))
#define DOgetFieldGamma(O) ((O)->gamma)
#define DOsetFieldGamma(O, V) ((O)->gamma = (V))
#define DOgetFieldGammaDialog(O) ((O)->gamma_dialog)
#define DOsetFieldGammaDialog(O, V) ((O)->gamma_dialog = (V))
#define DOgetFieldGammaText(O) ((O)->gamma_text)
#define DOsetFieldGammaText(O, V) ((O)->gamma_text = (V))
#define DOgetFieldTable(O) ((O)->table)
#define DOsetFieldTable(O, V) ((O)->table = (V))
DEFINE0(Gtk_GammaCurvegetType) {
    GType cres = (GType)gtk_gamma_curve_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_GammaCurvegetFieldTable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    GtkWidget* cres = (GtkWidget*)DOgetFieldTable(
        (GtkGammaCurve*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_GammaCurvesetFieldTable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldTable(
        (GtkGammaCurve*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_GammaCurvegetFieldGammaText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    GtkWidget* cres = (GtkWidget*)DOgetFieldGammaText(
        (GtkGammaCurve*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_GammaCurvesetFieldGammaText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldGammaText(
        (GtkGammaCurve*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_GammaCurvegetFieldGammaDialog) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    GtkWidget* cres = (GtkWidget*)DOgetFieldGammaDialog(
        (GtkGammaCurve*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_GammaCurvesetFieldGammaDialog) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldGammaDialog(
        (GtkGammaCurve*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_GammaCurvegetFieldGamma) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    gfloat cres = (gfloat)DOgetFieldGamma(
        (GtkGammaCurve*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_GammaCurvesetFieldGamma) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    DECLARE_CFLOAT(a1, x1);
    DOsetFieldGamma(
        (GtkGammaCurve*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_GammaCurvegetFieldCurve) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    GtkWidget* cres = (GtkWidget*)DOgetFieldCurve(
        (GtkGammaCurve*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_GammaCurvesetFieldCurve) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_GAMMA_CURVE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldCurve(
        (GtkGammaCurve*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldCurve
#undef DOsetFieldCurve
#undef DOgetFieldGamma
#undef DOsetFieldGamma
#undef DOgetFieldGammaDialog
#undef DOsetFieldGammaDialog
#undef DOgetFieldGammaText
#undef DOsetFieldGammaText
#undef DOgetFieldTable
#undef DOsetFieldTable
DEFINE1(Gtk_Framenew) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_frame_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_FramegetShadowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FRAME);
    GtkShadowType cres = (GtkShadowType)gtk_frame_get_shadow_type(
        (GtkFrame*)a0
        );
    word res = GtkShadowTypetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FramesetShadowType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FRAME);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkShadowType a1 = GtkShadowTypetFromWord(x1);
    gtk_frame_set_shadow_type(
        (GtkFrame*)a0
        ,(GtkShadowType)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_FramegetLabelAlign) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FRAME);
    DECLARE_DOUBLE_AS(gfloat, tmp0, x1);
               gfloat* a1 = (gfloat*)&tmp0;
    DECLARE_DOUBLE_AS(gfloat, tmp1, x2);
               gfloat* a2 = (gfloat*)&tmp1;
    gtk_frame_get_label_align(
        (GtkFrame*)a0
        ,(gfloat*)a1
        ,(gfloat*)a2
        );
    word r1 = Real::New(*a1)->ToWord ();
    word r2 = Real::New(*a2)->ToWord ();
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_FramesetLabelAlign) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FRAME);
    DECLARE_CFLOAT(a1, x1);
    DECLARE_CFLOAT(a2, x2);
    gtk_frame_set_label_align(
        (GtkFrame*)a0
        ,(gfloat)a1
        ,(gfloat)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FramegetLabelWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FRAME);
    GtkWidget* cres = (GtkWidget*)gtk_frame_get_label_widget(
        (GtkFrame*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FramesetLabelWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FRAME);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_frame_set_label_widget(
        (GtkFrame*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FramegetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FRAME);
    const gchar* cres = (const gchar*)gtk_frame_get_label(
        (GtkFrame*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FramesetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FRAME);
    DECLARE_CSTRING(a1, x1);
    gtk_frame_set_label(
        (GtkFrame*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_FramegetType) {
    GType cres = (GType)gtk_frame_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FontSelectionDialognew) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_font_selection_dialog_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldActionArea(O) ((O)->action_area)
#define DOsetFieldActionArea(O, V) ((O)->action_area = (V))
#define DOgetFieldApplyButton(O) ((O)->apply_button)
#define DOsetFieldApplyButton(O, V) ((O)->apply_button = (V))
#define DOgetFieldCancelButton(O) ((O)->cancel_button)
#define DOsetFieldCancelButton(O, V) ((O)->cancel_button = (V))
#define DOgetFieldFontsel(O) ((O)->fontsel)
#define DOsetFieldFontsel(O, V) ((O)->fontsel = (V))
#define DOgetFieldMainVBox(O) ((O)->main_vbox)
#define DOsetFieldMainVBox(O, V) ((O)->main_vbox = (V))
#define DOgetFieldOkButton(O) ((O)->ok_button)
#define DOsetFieldOkButton(O, V) ((O)->ok_button = (V))
DEFINE2(Gtk_FontSelectionDialogsetPreviewText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_font_selection_dialog_set_preview_text(
        (GtkFontSelectionDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontSelectionDialoggetPreviewText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    const gchar* cres = (const gchar*)gtk_font_selection_dialog_get_preview_text(
        (GtkFontSelectionDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionDialogsetFontName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_font_selection_dialog_set_font_name(
        (GtkFontSelectionDialog*)a0
        ,(const gchar*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FontSelectionDialoggetFont) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    GdkFont* cres = (GdkFont*)gtk_font_selection_dialog_get_font(
        (GtkFontSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GDK_TYPE_FONT);
    RETURN1(res);
} END
DEFINE1(Gtk_FontSelectionDialoggetFontName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    gchar* cres = (gchar*)gtk_font_selection_dialog_get_font_name(
        (GtkFontSelectionDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_FontSelectionDialoggetType) {
    GType cres = (GType)gtk_font_selection_dialog_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FontSelectionDialoggetFieldOkButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldOkButton(
        (GtkFontSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionDialogsetFieldOkButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldOkButton(
        (GtkFontSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontSelectionDialoggetFieldMainVBox) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldMainVBox(
        (GtkFontSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionDialogsetFieldMainVBox) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldMainVBox(
        (GtkFontSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontSelectionDialoggetFieldFontsel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFontsel(
        (GtkFontSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionDialogsetFieldFontsel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFontsel(
        (GtkFontSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontSelectionDialoggetFieldCancelButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldCancelButton(
        (GtkFontSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionDialogsetFieldCancelButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldCancelButton(
        (GtkFontSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontSelectionDialoggetFieldApplyButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldApplyButton(
        (GtkFontSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionDialogsetFieldApplyButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldApplyButton(
        (GtkFontSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontSelectionDialoggetFieldActionArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldActionArea(
        (GtkFontSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionDialogsetFieldActionArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldActionArea(
        (GtkFontSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldActionArea
#undef DOsetFieldActionArea
#undef DOgetFieldApplyButton
#undef DOsetFieldApplyButton
#undef DOgetFieldCancelButton
#undef DOsetFieldCancelButton
#undef DOgetFieldFontsel
#undef DOsetFieldFontsel
#undef DOgetFieldMainVBox
#undef DOsetFieldMainVBox
#undef DOgetFieldOkButton
#undef DOsetFieldOkButton
DEFINE0(Gtk_FontSelectionnew) {
    GtkWidget* cres = (GtkWidget*)gtk_font_selection_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionsetPreviewText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION);
    DECLARE_CSTRING(a1, x1);
    gtk_font_selection_set_preview_text(
        (GtkFontSelection*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontSelectiongetPreviewText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION);
    const gchar* cres = (const gchar*)gtk_font_selection_get_preview_text(
        (GtkFontSelection*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FontSelectionsetFontName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_font_selection_set_font_name(
        (GtkFontSelection*)a0
        ,(const gchar*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FontSelectiongetFont) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION);
    GdkFont* cres = (GdkFont*)gtk_font_selection_get_font(
        (GtkFontSelection*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GDK_TYPE_FONT);
    RETURN1(res);
} END
DEFINE1(Gtk_FontSelectiongetFontName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_SELECTION);
    gchar* cres = (gchar*)gtk_font_selection_get_font_name(
        (GtkFontSelection*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_FontSelectiongetType) {
    GType cres = (GType)gtk_font_selection_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_FontButtonnew) {
    GtkWidget* cres = (GtkWidget*)gtk_font_button_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FontButtonsetShowSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_font_button_set_show_size(
        (GtkFontButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontButtongetShowSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    gboolean cres = (gboolean)gtk_font_button_get_show_size(
        (GtkFontButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FontButtonsetShowStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_font_button_set_show_style(
        (GtkFontButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontButtongetShowStyle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    gboolean cres = (gboolean)gtk_font_button_get_show_style(
        (GtkFontButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FontButtonsetFontName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_font_button_set_font_name(
        (GtkFontButton*)a0
        ,(const gchar*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FontButtongetFontName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    const gchar* cres = (const gchar*)gtk_font_button_get_font_name(
        (GtkFontButton*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FontButtonsetUseSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_font_button_set_use_size(
        (GtkFontButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontButtongetUseSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    gboolean cres = (gboolean)gtk_font_button_get_use_size(
        (GtkFontButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FontButtonsetUseFont) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_font_button_set_use_font(
        (GtkFontButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontButtongetUseFont) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    gboolean cres = (gboolean)gtk_font_button_get_use_font(
        (GtkFontButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FontButtonsetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    DECLARE_CSTRING(a1, x1);
    gtk_font_button_set_title(
        (GtkFontButton*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FontButtongetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FONT_BUTTON);
    const gchar* cres = (const gchar*)gtk_font_button_get_title(
        (GtkFontButton*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_FontButtonnewWithFont) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_font_button_new_with_font(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_FontButtongetType) {
    GType cres = (GType)gtk_font_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Fixednew) {
    GtkWidget* cres = (GtkWidget*)gtk_fixed_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_FixedgetHasWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FIXED);
    gboolean cres = (gboolean)gtk_fixed_get_has_window(
        (GtkFixed*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FixedsetHasWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FIXED);
    DECLARE_BOOL(a1, x1);
    gtk_fixed_set_has_window(
        (GtkFixed*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_Fixedmove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FIXED);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_fixed_move(
        (GtkFixed*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_Fixedput) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FIXED);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_fixed_put(
        (GtkFixed*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_FixedgetType) {
    GType cres = (GType)gtk_fixed_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileSelectionnew) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_file_selection_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldActionArea(O) ((O)->action_area)
#define DOsetFieldActionArea(O, V) ((O)->action_area = (V))
#define DOgetFieldButtonArea(O) ((O)->button_area)
#define DOsetFieldButtonArea(O, V) ((O)->button_area = (V))
#define DOgetFieldCancelButton(O) ((O)->cancel_button)
#define DOsetFieldCancelButton(O, V) ((O)->cancel_button = (V))
#define DOgetFieldDirList(O) ((O)->dir_list)
#define DOsetFieldDirList(O, V) ((O)->dir_list = (V))
#define DOgetFieldFileList(O) ((O)->file_list)
#define DOsetFieldFileList(O, V) ((O)->file_list = (V))
#define DOgetFieldFileopCDir(O) ((O)->fileop_c_dir)
#define DOsetFieldFileopCDir(O, V) ((O)->fileop_c_dir = (V))
#define DOgetFieldFileopDelFile(O) ((O)->fileop_del_file)
#define DOsetFieldFileopDelFile(O, V) ((O)->fileop_del_file = (V))
#define DOgetFieldFileopDialog(O) ((O)->fileop_dialog)
#define DOsetFieldFileopDialog(O, V) ((O)->fileop_dialog = (V))
#define DOgetFieldFileopEntry(O) ((O)->fileop_entry)
#define DOsetFieldFileopEntry(O, V) ((O)->fileop_entry = (V))
#define DOgetFieldFileopFile(O) ((O)->fileop_file)
#define DOsetFieldFileopFile(O, V) ((O)->fileop_file = (V))
#define DOgetFieldFileopRenFile(O) ((O)->fileop_ren_file)
#define DOsetFieldFileopRenFile(O, V) ((O)->fileop_ren_file = (V))
#define DOgetFieldHelpButton(O) ((O)->help_button)
#define DOsetFieldHelpButton(O, V) ((O)->help_button = (V))
#define DOgetFieldHistoryMenu(O) ((O)->history_menu)
#define DOsetFieldHistoryMenu(O, V) ((O)->history_menu = (V))
#define DOgetFieldHistoryPulldown(O) ((O)->history_pulldown)
#define DOsetFieldHistoryPulldown(O, V) ((O)->history_pulldown = (V))
#define DOgetFieldMainVBox(O) ((O)->main_vbox)
#define DOsetFieldMainVBox(O, V) ((O)->main_vbox = (V))
#define DOgetFieldOkButton(O) ((O)->ok_button)
#define DOsetFieldOkButton(O, V) ((O)->ok_button = (V))
#define DOgetFieldSelectionEntry(O) ((O)->selection_entry)
#define DOsetFieldSelectionEntry(O, V) ((O)->selection_entry = (V))
#define DOgetFieldSelectionText(O) ((O)->selection_text)
#define DOsetFieldSelectionText(O, V) ((O)->selection_text = (V))
DEFINE1(Gtk_FileSelectiongetSelectMultiple) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    gboolean cres = (gboolean)gtk_file_selection_get_select_multiple(
        (GtkFileSelection*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetSelectMultiple) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_BOOL(a1, x1);
    gtk_file_selection_set_select_multiple(
        (GtkFileSelection*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetSelections) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    gchar** cres = (gchar**)gtk_file_selection_get_selections(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileSelectionhideFileopButtons) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    gtk_file_selection_hide_fileop_buttons(
        (GtkFileSelection*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectionshowFileopButtons) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    gtk_file_selection_show_fileop_buttons(
        (GtkFileSelection*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_FileSelectioncomplete) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_CSTRING(a1, x1);
    gtk_file_selection_complete(
        (GtkFileSelection*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    const gchar* cres = (const gchar*)gtk_file_selection_get_filename(
        (GtkFileSelection*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_CSTRING(a1, x1);
    gtk_file_selection_set_filename(
        (GtkFileSelection*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_FileSelectiongetType) {
    GType cres = (GType)gtk_file_selection_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileSelectiongetFieldSelectionText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldSelectionText(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldSelectionText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldSelectionText(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldSelectionEntry) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldSelectionEntry(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldSelectionEntry) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldSelectionEntry(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldOkButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldOkButton(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldOkButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldOkButton(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldMainVBox) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldMainVBox(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldMainVBox) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldMainVBox(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldHistoryPulldown) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldHistoryPulldown(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldHistoryPulldown) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldHistoryPulldown(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldHistoryMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldHistoryMenu(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldHistoryMenu) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldHistoryMenu(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldHelpButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldHelpButton(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldHelpButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldHelpButton(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldFileopRenFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFileopRenFile(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldFileopRenFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFileopRenFile(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldFileopFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    gchar* cres = (gchar*)DOgetFieldFileopFile(
        (GtkFileSelection*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldFileopFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_CSTRING(a1, x1);
    DOsetFieldFileopFile(
        (GtkFileSelection*)a0
        ,(gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldFileopEntry) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFileopEntry(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldFileopEntry) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFileopEntry(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldFileopDialog) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFileopDialog(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldFileopDialog) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFileopDialog(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldFileopDelFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFileopDelFile(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldFileopDelFile) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFileopDelFile(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldFileopCDir) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFileopCDir(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldFileopCDir) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFileopCDir(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldFileList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFileList(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldFileList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFileList(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldDirList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldDirList(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldDirList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldDirList(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldCancelButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldCancelButton(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldCancelButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldCancelButton(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldButtonArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldButtonArea(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldButtonArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldButtonArea(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileSelectiongetFieldActionArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    GtkWidget* cres = (GtkWidget*)DOgetFieldActionArea(
        (GtkFileSelection*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileSelectionsetFieldActionArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldActionArea(
        (GtkFileSelection*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldActionArea
#undef DOsetFieldActionArea
#undef DOgetFieldButtonArea
#undef DOsetFieldButtonArea
#undef DOgetFieldCancelButton
#undef DOsetFieldCancelButton
#undef DOgetFieldDirList
#undef DOsetFieldDirList
#undef DOgetFieldFileList
#undef DOsetFieldFileList
#undef DOgetFieldFileopCDir
#undef DOsetFieldFileopCDir
#undef DOgetFieldFileopDelFile
#undef DOsetFieldFileopDelFile
#undef DOgetFieldFileopDialog
#undef DOsetFieldFileopDialog
#undef DOgetFieldFileopEntry
#undef DOsetFieldFileopEntry
#undef DOgetFieldFileopFile
#undef DOsetFieldFileopFile
#undef DOgetFieldFileopRenFile
#undef DOsetFieldFileopRenFile
#undef DOgetFieldHelpButton
#undef DOsetFieldHelpButton
#undef DOgetFieldHistoryMenu
#undef DOsetFieldHistoryMenu
#undef DOgetFieldHistoryPulldown
#undef DOsetFieldHistoryPulldown
#undef DOgetFieldMainVBox
#undef DOsetFieldMainVBox
#undef DOgetFieldOkButton
#undef DOsetFieldOkButton
#undef DOgetFieldSelectionEntry
#undef DOsetFieldSelectionEntry
#undef DOgetFieldSelectionText
#undef DOsetFieldSelectionText
DEFINE0(Gtk_FileFilternew) {
    GtkFileFilter* cres = (GtkFileFilter*)gtk_file_filter_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileFilterfilter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_FILTER);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_file_filter_filter(
        (GtkFileFilter*)a0
        ,(const GtkFileFilterInfo*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileFiltergetNeeded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_FILTER);
    GtkFileFilterFlags cres = (GtkFileFilterFlags)gtk_file_filter_get_needed(
        (GtkFileFilter*)a0
        );
    word res = GtkFileFilterFlagstToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileFilteraddPixbufFormats) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_FILTER);
    gtk_file_filter_add_pixbuf_formats(
        (GtkFileFilter*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_FileFilteraddPattern) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_FILTER);
    DECLARE_CSTRING(a1, x1);
    gtk_file_filter_add_pattern(
        (GtkFileFilter*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_FileFilteraddMimeType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_FILTER);
    DECLARE_CSTRING(a1, x1);
    gtk_file_filter_add_mime_type(
        (GtkFileFilter*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileFiltergetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_FILTER);
    const gchar* cres = (const gchar*)gtk_file_filter_get_name(
        (GtkFileFilter*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FileFiltersetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_FILTER);
    DECLARE_CSTRING(a1, x1);
    gtk_file_filter_set_name(
        (GtkFileFilter*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_FileFiltergetType) {
    GType cres = (GType)gtk_file_filter_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileChooserWidgetnew) {
    if (Store::WordToInt(x0) == INVALID_INT) {REQUEST(x0);}
GtkFileChooserAction a0 = GtkFileChooserActiontFromWord(x0);
    GtkWidget* cres = (GtkWidget*)gtk_file_chooser_widget_new(
        (GtkFileChooserAction)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooserWidgetnewWithBackend) {
    if (Store::WordToInt(x0) == INVALID_INT) {REQUEST(x0);}
GtkFileChooserAction a0 = GtkFileChooserActiontFromWord(x0);
    DECLARE_CSTRING(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_file_chooser_widget_new_with_backend(
        (GtkFileChooserAction)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_FileChooserWidgetgetType) {
    GType cres = (GType)gtk_file_chooser_widget_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_FileChooserDialognew) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkFileChooserAction a2 = GtkFileChooserActiontFromWord(x2);
    DECLARE_CSTRING(a3, x3);
    GtkWidget* cres = (GtkWidget*)gtk_file_chooser_dialog_new(
        (const gchar*)a0
        ,(GtkWindow*)a1
        ,(GtkFileChooserAction)a2
        ,(const gchar*)a3
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE5(Gtk_FileChooserDialognewWithBackend) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WINDOW);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkFileChooserAction a2 = GtkFileChooserActiontFromWord(x2);
    DECLARE_CSTRING(a3, x3);
    DECLARE_CSTRING(a4, x4);
    GtkWidget* cres = (GtkWidget*)gtk_file_chooser_dialog_new_with_backend(
        (const gchar*)a0
        ,(GtkWindow*)a1
        ,(GtkFileChooserAction)a2
        ,(const gchar*)a3
        ,(const gchar*)a4
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_FileChooserDialoggetType) {
    GType cres = (GType)gtk_file_chooser_dialog_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooserButtonsetWidthChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER_BUTTON);
    DECLARE_INT(a1, x1);
    gtk_file_chooser_button_set_width_chars(
        (GtkFileChooserButton*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChooserButtongetWidthChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER_BUTTON);
    gint cres = (gint)gtk_file_chooser_button_get_width_chars(
        (GtkFileChooserButton*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooserButtonsetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER_BUTTON);
    DECLARE_CSTRING(a1, x1);
    gtk_file_chooser_button_set_title(
        (GtkFileChooserButton*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChooserButtongetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER_BUTTON);
    const gchar* cres = (const gchar*)gtk_file_chooser_button_get_title(
        (GtkFileChooserButton*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_FileChooserButtonnewWithDialog) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkWidget* cres = (GtkWidget*)gtk_file_chooser_button_new_with_dialog(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_FileChooserButtongetType) {
    GType cres = (GType)gtk_file_chooser_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_Expandernew) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_expander_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ExpandergetLabelWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    GtkWidget* cres = (GtkWidget*)gtk_expander_get_label_widget(
        (GtkExpander*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ExpandersetLabelWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_expander_set_label_widget(
        (GtkExpander*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ExpandergetUseMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    gboolean cres = (gboolean)gtk_expander_get_use_markup(
        (GtkExpander*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ExpandersetUseMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    DECLARE_BOOL(a1, x1);
    gtk_expander_set_use_markup(
        (GtkExpander*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ExpandergetUseUnderline) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    gboolean cres = (gboolean)gtk_expander_get_use_underline(
        (GtkExpander*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ExpandersetUseUnderline) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    DECLARE_BOOL(a1, x1);
    gtk_expander_set_use_underline(
        (GtkExpander*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ExpandergetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    const gchar* cres = (const gchar*)gtk_expander_get_label(
        (GtkExpander*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ExpandersetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    DECLARE_CSTRING(a1, x1);
    gtk_expander_set_label(
        (GtkExpander*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ExpandergetSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    gint cres = (gint)gtk_expander_get_spacing(
        (GtkExpander*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ExpandersetSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    DECLARE_INT(a1, x1);
    gtk_expander_set_spacing(
        (GtkExpander*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ExpandergetExpanded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    gboolean cres = (gboolean)gtk_expander_get_expanded(
        (GtkExpander*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ExpandersetExpanded) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EXPANDER);
    DECLARE_BOOL(a1, x1);
    gtk_expander_set_expanded(
        (GtkExpander*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ExpandernewWithMnemonic) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_expander_new_with_mnemonic(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ExpandergetType) {
    GType cres = (GType)gtk_expander_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_EventBoxnew) {
    GtkWidget* cres = (GtkWidget*)gtk_event_box_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_EventBoxsetAboveChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EVENT_BOX);
    DECLARE_BOOL(a1, x1);
    gtk_event_box_set_above_child(
        (GtkEventBox*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EventBoxgetAboveChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EVENT_BOX);
    gboolean cres = (gboolean)gtk_event_box_get_above_child(
        (GtkEventBox*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EventBoxsetVisibleWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EVENT_BOX);
    DECLARE_BOOL(a1, x1);
    gtk_event_box_set_visible_window(
        (GtkEventBox*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EventBoxgetVisibleWindow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EVENT_BOX);
    gboolean cres = (gboolean)gtk_event_box_get_visible_window(
        (GtkEventBox*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_EventBoxgetType) {
    GType cres = (GType)gtk_event_box_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_EntryCompletionnew) {
    GtkEntryCompletion* cres = (GtkEntryCompletion*)gtk_entry_completion_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_EntryCompletiongetPopupCompletion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    gboolean cres = (gboolean)gtk_entry_completion_get_popup_completion(
        (GtkEntryCompletion*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntryCompletionsetPopupCompletion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    DECLARE_BOOL(a1, x1);
    gtk_entry_completion_set_popup_completion(
        (GtkEntryCompletion*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntryCompletiongetInlineCompletion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    gboolean cres = (gboolean)gtk_entry_completion_get_inline_completion(
        (GtkEntryCompletion*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntryCompletionsetInlineCompletion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    DECLARE_BOOL(a1, x1);
    gtk_entry_completion_set_inline_completion(
        (GtkEntryCompletion*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntryCompletioninsertPrefix) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    gtk_entry_completion_insert_prefix(
        (GtkEntryCompletion*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_EntryCompletionsetTextColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    DECLARE_INT(a1, x1);
    gtk_entry_completion_set_text_column(
        (GtkEntryCompletion*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_EntryCompletiondeleteAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    DECLARE_INT(a1, x1);
    gtk_entry_completion_delete_action(
        (GtkEntryCompletion*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_EntryCompletioninsertActionMarkup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    DECLARE_INT(a1, x1);
    DECLARE_CSTRING(a2, x2);
    gtk_entry_completion_insert_action_markup(
        (GtkEntryCompletion*)a0
        ,(gint)a1
        ,(const gchar*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_EntryCompletioninsertActionText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    DECLARE_INT(a1, x1);
    DECLARE_CSTRING(a2, x2);
    gtk_entry_completion_insert_action_text(
        (GtkEntryCompletion*)a0
        ,(gint)a1
        ,(const gchar*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntryCompletioncomplete) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    gtk_entry_completion_complete(
        (GtkEntryCompletion*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntryCompletiongetMinimumKeyLength) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    gint cres = (gint)gtk_entry_completion_get_minimum_key_length(
        (GtkEntryCompletion*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntryCompletionsetMinimumKeyLength) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    DECLARE_INT(a1, x1);
    gtk_entry_completion_set_minimum_key_length(
        (GtkEntryCompletion*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntryCompletiongetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    GtkTreeModel* cres = (GtkTreeModel*)gtk_entry_completion_get_model(
        (GtkEntryCompletion*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_EntryCompletionsetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_MODEL);
    gtk_entry_completion_set_model(
        (GtkEntryCompletion*)a0
        ,(GtkTreeModel*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntryCompletiongetEntry) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY_COMPLETION);
    GtkWidget* cres = (GtkWidget*)gtk_entry_completion_get_entry(
        (GtkEntryCompletion*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_EntryCompletiongetType) {
    GType cres = (GType)gtk_entry_completion_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Entrynew) {
    GtkWidget* cres = (GtkWidget*)gtk_entry_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetEditable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_BOOL(a1, x1);
    gtk_entry_set_editable(
        (GtkEntry*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_EntryselectRegion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_entry_select_region(
        (GtkEntry*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_EntrysetPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_INT(a1, x1);
    gtk_entry_set_position(
        (GtkEntry*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_EntryprependText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_CSTRING(a1, x1);
    gtk_entry_prepend_text(
        (GtkEntry*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntrygetCompletion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    GtkEntryCompletion* cres = (GtkEntryCompletion*)gtk_entry_get_completion(
        (GtkEntry*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetCompletion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ENTRY_COMPLETION);
    gtk_entry_set_completion(
        (GtkEntry*)a0
        ,(GtkEntryCompletion*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntrygetAlignment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    gfloat cres = (gfloat)gtk_entry_get_alignment(
        (GtkEntry*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetAlignment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_CFLOAT(a1, x1);
    gtk_entry_set_alignment(
        (GtkEntry*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_EntrygetLayoutOffsets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_entry_get_layout_offsets(
        (GtkEntry*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE1(Gtk_EntrygetLayout) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    PangoLayout* cres = (PangoLayout*)gtk_entry_get_layout(
        (GtkEntry*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_EntrygetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    const gchar* cres = (const gchar*)gtk_entry_get_text(
        (GtkEntry*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_CSTRING(a1, x1);
    gtk_entry_set_text(
        (GtkEntry*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntrygetWidthChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    gint cres = (gint)gtk_entry_get_width_chars(
        (GtkEntry*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetWidthChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_INT(a1, x1);
    gtk_entry_set_width_chars(
        (GtkEntry*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntrygetActivatesDefault) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    gboolean cres = (gboolean)gtk_entry_get_activates_default(
        (GtkEntry*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetActivatesDefault) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_BOOL(a1, x1);
    gtk_entry_set_activates_default(
        (GtkEntry*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntrygetMaxLength) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    gint cres = (gint)gtk_entry_get_max_length(
        (GtkEntry*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetMaxLength) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_INT(a1, x1);
    gtk_entry_set_max_length(
        (GtkEntry*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntrygetHasFrame) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    gboolean cres = (gboolean)gtk_entry_get_has_frame(
        (GtkEntry*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetHasFrame) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_BOOL(a1, x1);
    gtk_entry_set_has_frame(
        (GtkEntry*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntrygetInvisibleChar) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    gunichar cres = (gunichar)gtk_entry_get_invisible_char(
        (GtkEntry*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetInvisibleChar) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_INT(a1, x1);
    gtk_entry_set_invisible_char(
        (GtkEntry*)a0
        ,(gunichar)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EntrygetVisibility) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    gboolean cres = (gboolean)gtk_entry_get_visibility(
        (GtkEntry*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EntrysetVisibility) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ENTRY);
    DECLARE_BOOL(a1, x1);
    gtk_entry_set_visibility(
        (GtkEntry*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_EntrygetType) {
    GType cres = (GType)gtk_entry_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_DrawingAreanew) {
    GtkWidget* cres = (GtkWidget*)gtk_drawing_area_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_DrawingAreagetType) {
    GType cres = (GType)gtk_drawing_area_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_DialognewWithButtons) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WINDOW);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GtkDialogFlags a2 = GtkDialogFlagstFromWord(x2);
    DECLARE_CSTRING(a3, x3);
    GtkWidget* cres = (GtkWidget*)gtk_dialog_new_with_buttons(
        (const gchar*)a0
        ,(GtkWindow*)a1
        ,(GtkDialogFlags)a2
        ,(const gchar*)a3
        , NULL
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_Dialognew) {
    GtkWidget* cres = (GtkWidget*)gtk_dialog_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldActionArea(O) ((O)->action_area)
#define DOsetFieldActionArea(O, V) ((O)->action_area = (V))
#define DOgetFieldVBox(O) ((O)->vbox)
#define DOsetFieldVBox(O, V) ((O)->vbox = (V))
DEFINE3(Gtk_DialogsetAlternativeButtonOrderFromArray) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_INT(a1, x1);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    gtk_dialog_set_alternative_button_order_from_array(
        (GtkDialog*)a0
        ,(gint)a1
        ,(gint*)a2
        );
    word r2 = Store::IntToWord(*a2);
    RETURN1(r2);
} END
DEFINE2(Gtk_DialogsetAlternativeButtonOrder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_INT(a1, x1);
    gtk_dialog_set_alternative_button_order(
        (GtkDialog*)a0
        ,(gint)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Dialogrun) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    gint cres = (gint)gtk_dialog_run(
        (GtkDialog*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_Dialogresponse) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_INT(a1, x1);
    gtk_dialog_response(
        (GtkDialog*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_DialoggetHasSeparator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    gboolean cres = (gboolean)gtk_dialog_get_has_separator(
        (GtkDialog*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_DialogsetHasSeparator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_BOOL(a1, x1);
    gtk_dialog_set_has_separator(
        (GtkDialog*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_DialogsetDefaultResponse) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_INT(a1, x1);
    gtk_dialog_set_default_response(
        (GtkDialog*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_DialogsetResponseSensitive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_INT(a1, x1);
    DECLARE_BOOL(a2, x2);
    gtk_dialog_set_response_sensitive(
        (GtkDialog*)a0
        ,(gint)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_DialogaddButtons) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_dialog_add_buttons(
        (GtkDialog*)a0
        ,(const gchar*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_DialogaddButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    GtkWidget* cres = (GtkWidget*)gtk_dialog_add_button(
        (GtkDialog*)a0
        ,(const gchar*)a1
        ,(gint)a2
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_DialogaddActionWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    gtk_dialog_add_action_widget(
        (GtkDialog*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_DialoggetType) {
    GType cres = (GType)gtk_dialog_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_DialoggetFieldVBox) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldVBox(
        (GtkDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_DialogsetFieldVBox) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldVBox(
        (GtkDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_DialoggetFieldActionArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldActionArea(
        (GtkDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_DialogsetFieldActionArea) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldActionArea(
        (GtkDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldActionArea
#undef DOsetFieldActionArea
#undef DOgetFieldVBox
#undef DOsetFieldVBox
DEFINE0(Gtk_Curvenew) {
    GtkWidget* cres = (GtkWidget*)gtk_curve_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_CurvesetCurveType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CURVE);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkCurveType a1 = GtkCurveTypetFromWord(x1);
    gtk_curve_set_curve_type(
        (GtkCurve*)a0
        ,(GtkCurveType)a1
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_CurvesetRange) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CURVE);
    DECLARE_CFLOAT(a1, x1);
    DECLARE_CFLOAT(a2, x2);
    DECLARE_CFLOAT(a3, x3);
    DECLARE_CFLOAT(a4, x4);
    gtk_curve_set_range(
        (GtkCurve*)a0
        ,(gfloat)a1
        ,(gfloat)a2
        ,(gfloat)a3
        ,(gfloat)a4
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_CurvesetGamma) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CURVE);
    DECLARE_CFLOAT(a1, x1);
    gtk_curve_set_gamma(
        (GtkCurve*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Curvereset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CURVE);
    gtk_curve_reset(
        (GtkCurve*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_CurvegetType) {
    GType cres = (GType)gtk_curve_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
GtkContainer* MK_GtkContainerNew (
        guint border_width
        , GtkWidget* focus_child
        , guint has_focus_chain
        , guint need_resize
        , guint reallocate_redraws
        , guint resize_mode
        ) {
    GtkContainer* res_ = new GtkContainer;
    res_->border_width = border_width;
    res_->focus_child = focus_child;
    res_->has_focus_chain = has_focus_chain;
    res_->need_resize = need_resize;
    res_->reallocate_redraws = reallocate_redraws;
    res_->resize_mode = resize_mode;
    return res_;
}
DEFINE6(Gtk_Containernew) {
    DECLARE_INT(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    DECLARE_INT(a5, x5);
    GtkContainer* cres = (GtkContainer*)MK_GtkContainerNew(
        (guint)a0
        ,(GtkWidget*)a1
        ,(guint)a2
        ,(guint)a3
        ,(guint)a4
        ,(guint)a5
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldBorderWidth(O) ((O)->border_width)
#define DOsetFieldBorderWidth(O, V) ((O)->border_width = (V))
#define DOgetFieldFocusChild(O) ((O)->focus_child)
#define DOsetFieldFocusChild(O, V) ((O)->focus_child = (V))
#define DOgetFieldHasFocusChain(O) ((O)->has_focus_chain)
#define DOsetFieldHasFocusChain(O, V) ((O)->has_focus_chain = (V))
#define DOgetFieldNeedResize(O) ((O)->need_resize)
#define DOsetFieldNeedResize(O, V) ((O)->need_resize = (V))
#define DOgetFieldReallocateRedraws(O) ((O)->reallocate_redraws)
#define DOsetFieldReallocateRedraws(O, V) ((O)->reallocate_redraws = (V))
#define DOgetFieldResizeMode(O) ((O)->resize_mode)
#define DOsetFieldResizeMode(O, V) ((O)->resize_mode = (V))
DEFINE3(Gtk_Containerforall) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT (a1, x1);
    DECLARE_OBJECT(a2, x2);
    gtk_container_forall(
        (GtkContainer*)a0
        ,(GtkCallback)a1
        ,(gpointer)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ContainerchildGetProperty) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a2, x2);
    GValue* a3 = new GValue; memset(a3, 0, sizeof(GValue));
    gtk_container_child_get_property(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        ,(const gchar*)a2
        ,(GValue*)a3
        );
    word r3 = OBJECT_TO_WORD (a3, TYPE_BOXED | FLAG_OWN, G_TYPE_VALUE);
    RETURN1(r3);
} END
DEFINE4(Gtk_ContainerchildSetProperty) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a2, x2);
    DECLARE_OBJECT_OF_TYPE(a3, x3, G_TYPE_VALUE);
    gtk_container_child_set_property(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        ,(const gchar*)a2
        ,(GValue*)a3
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ContainerchildGet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a2, x2);
    gtk_container_child_get(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        ,(const gchar*)a2
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ContainerchildSet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a2, x2);
    gtk_container_child_set(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        ,(const gchar*)a2
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ContaineraddWithProperties) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a2, x2);
    gtk_container_add_with_properties(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        ,(const gchar*)a2
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ContainerclassListChildProperties) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_INT_AS(guint, tmp0, x1);
               int* a1 = (int*)&tmp0;
    GParamSpec** cres = (GParamSpec**)gtk_container_class_list_child_properties(
        (GObjectClass*)a0
        ,(guint*)a1
        );
    word res = OBJECT_TO_WORD (cres);
    word r1 = Store::IntToWord(*a1);
    RETURN2(res,r1);
} END
DEFINE2(Gtk_ContainerclassFindChildProperty) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_CSTRING(a1, x1);
    GParamSpec* cres = (GParamSpec*)gtk_container_class_find_child_property(
        (GObjectClass*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE3(Gtk_ContainerclassInstallChildProperty) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_OBJECT (a2, x2);
    gtk_container_class_install_child_property(
        (GtkContainerClass*)a0
        ,(guint)a1
        ,(GParamSpec*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainerchildType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    GType cres = (GType)gtk_container_child_type(
        (GtkContainer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ContainerresizeChildren) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    gtk_container_resize_children(
        (GtkContainer*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetFocusHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_container_get_focus_hadjustment(
        (GtkContainer*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFocusHadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_container_set_focus_hadjustment(
        (GtkContainer*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetFocusVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    GtkAdjustment* cres = (GtkAdjustment*)gtk_container_get_focus_vadjustment(
        (GtkContainer*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFocusVadjustment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ADJUSTMENT);
    gtk_container_set_focus_vadjustment(
        (GtkContainer*)a0
        ,(GtkAdjustment*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ContainersetFocusChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_container_set_focus_child(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ContainersetReallocateRedraws) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_BOOL(a1, x1);
    gtk_container_set_reallocate_redraws(
        (GtkContainer*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainerunsetFocusChain) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    gtk_container_unset_focus_chain(
        (GtkContainer*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ContainergetFocusChain) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_container_get_focus_chain(
        (GtkContainer*)a0
        ,(GList**)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFocusChain) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_GLIST(a1, x1, DECLARE_OBJECT);
    gtk_container_set_focus_chain(
        (GtkContainer*)a0
        ,(GList*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ContainerpropagateExpose) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT (a2, x2);
    gtk_container_propagate_expose(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        ,(GdkEventExpose*)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetChildren) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    GList* cres = (GList*)gtk_container_get_children(
        (GtkContainer*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_Containerforeach) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT (a1, x1);
    DECLARE_OBJECT(a2, x2);
    gtk_container_foreach(
        (GtkContainer*)a0
        ,(GtkCallback)a1
        ,(gpointer)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainercheckResize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    gtk_container_check_resize(
        (GtkContainer*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetResizeMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    GtkResizeMode cres = (GtkResizeMode)gtk_container_get_resize_mode(
        (GtkContainer*)a0
        );
    word res = GtkResizeModetToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetResizeMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkResizeMode a1 = GtkResizeModetFromWord(x1);
    gtk_container_set_resize_mode(
        (GtkContainer*)a0
        ,(GtkResizeMode)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Containerremove) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_container_remove(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Containeradd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_container_add(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetBorderWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    guint cres = (guint)gtk_container_get_border_width(
        (GtkContainer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetBorderWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_INT(a1, x1);
    gtk_container_set_border_width(
        (GtkContainer*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ContainergetType) {
    GType cres = (GType)gtk_container_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ContainergetFieldResizeMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    guint cres = (guint)DOgetFieldResizeMode(
        (GtkContainer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFieldResizeMode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_INT(a1, x1);
    DOsetFieldResizeMode(
        (GtkContainer*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetFieldReallocateRedraws) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    guint cres = (guint)DOgetFieldReallocateRedraws(
        (GtkContainer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFieldReallocateRedraws) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_INT(a1, x1);
    DOsetFieldReallocateRedraws(
        (GtkContainer*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetFieldNeedResize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    guint cres = (guint)DOgetFieldNeedResize(
        (GtkContainer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFieldNeedResize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_INT(a1, x1);
    DOsetFieldNeedResize(
        (GtkContainer*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetFieldHasFocusChain) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    guint cres = (guint)DOgetFieldHasFocusChain(
        (GtkContainer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFieldHasFocusChain) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_INT(a1, x1);
    DOsetFieldHasFocusChain(
        (GtkContainer*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetFieldFocusChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    GtkWidget* cres = (GtkWidget*)DOgetFieldFocusChild(
        (GtkContainer*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFieldFocusChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldFocusChild(
        (GtkContainer*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ContainergetFieldBorderWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    guint cres = (guint)DOgetFieldBorderWidth(
        (GtkContainer*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ContainersetFieldBorderWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CONTAINER);
    DECLARE_INT(a1, x1);
    DOsetFieldBorderWidth(
        (GtkContainer*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldBorderWidth
#undef DOsetFieldBorderWidth
#undef DOgetFieldFocusChild
#undef DOsetFieldFocusChild
#undef DOgetFieldHasFocusChain
#undef DOsetFieldHasFocusChain
#undef DOgetFieldNeedResize
#undef DOsetFieldNeedResize
#undef DOgetFieldReallocateRedraws
#undef DOsetFieldReallocateRedraws
#undef DOgetFieldResizeMode
#undef DOsetFieldResizeMode
DEFINE0(Gtk_ComboBoxEntrynew) {
    GtkWidget* cres = (GtkWidget*)gtk_combo_box_entry_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ComboBoxEntrynewText) {
    GtkWidget* cres = (GtkWidget*)gtk_combo_box_entry_new_text(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ComboBoxEntrygetTextColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX_ENTRY);
    gint cres = (gint)gtk_combo_box_entry_get_text_column(
        (GtkComboBoxEntry*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ComboBoxEntrysetTextColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX_ENTRY);
    DECLARE_INT(a1, x1);
    gtk_combo_box_entry_set_text_column(
        (GtkComboBoxEntry*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ComboBoxEntrynewWithModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_INT(a1, x1);
    GtkWidget* cres = (GtkWidget*)gtk_combo_box_entry_new_with_model(
        (GtkTreeModel*)a0
        ,(gint)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ComboBoxEntrygetType) {
    GType cres = (GType)gtk_combo_box_entry_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ComboBoxnewWithModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    GtkWidget* cres = (GtkWidget*)gtk_combo_box_new_with_model(
        (GtkTreeModel*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ComboBoxnew) {
    GtkWidget* cres = (GtkWidget*)gtk_combo_box_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ComboBoxgetPopupAccessible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    AtkObject* cres = (AtkObject*)gtk_combo_box_get_popup_accessible(
        (GtkComboBox*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ComboBoxgetActiveText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    gchar* cres = (gchar*)gtk_combo_box_get_active_text(
        (GtkComboBox*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ComboBoxsetFocusOnClick) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_BOOL(a1, x1);
    gtk_combo_box_set_focus_on_click(
        (GtkComboBox*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ComboBoxgetFocusOnClick) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    gboolean cres = (gboolean)gtk_combo_box_get_focus_on_click(
        (GtkComboBox*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ComboBoxsetAddTearoffs) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_BOOL(a1, x1);
    gtk_combo_box_set_add_tearoffs(
        (GtkComboBox*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ComboBoxgetColumnSpanColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    gint cres = (gint)gtk_combo_box_get_column_span_column(
        (GtkComboBox*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ComboBoxgetRowSpanColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    gint cres = (gint)gtk_combo_box_get_row_span_column(
        (GtkComboBox*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ComboBoxgetWrapWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    gint cres = (gint)gtk_combo_box_get_wrap_width(
        (GtkComboBox*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ComboBoxpopdown) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    gtk_combo_box_popdown(
        (GtkComboBox*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ComboBoxpopup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    gtk_combo_box_popup(
        (GtkComboBox*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ComboBoxremoveText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_INT(a1, x1);
    gtk_combo_box_remove_text(
        (GtkComboBox*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ComboBoxprependText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_CSTRING(a1, x1);
    gtk_combo_box_prepend_text(
        (GtkComboBox*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ComboBoxinsertText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_INT(a1, x1);
    DECLARE_CSTRING(a2, x2);
    gtk_combo_box_insert_text(
        (GtkComboBox*)a0
        ,(gint)a1
        ,(const gchar*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ComboBoxappendText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_CSTRING(a1, x1);
    gtk_combo_box_append_text(
        (GtkComboBox*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ComboBoxnewText) {
    GtkWidget* cres = (GtkWidget*)gtk_combo_box_new_text(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ComboBoxgetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    GtkTreeModel* cres = (GtkTreeModel*)gtk_combo_box_get_model(
        (GtkComboBox*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ComboBoxsetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_MODEL);
    gtk_combo_box_set_model(
        (GtkComboBox*)a0
        ,(GtkTreeModel*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ComboBoxsetActiveIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_combo_box_set_active_iter(
        (GtkComboBox*)a0
        ,(GtkTreeIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ComboBoxgetActiveIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_combo_box_get_active_iter(
        (GtkComboBox*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ComboBoxsetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_INT(a1, x1);
    gtk_combo_box_set_active(
        (GtkComboBox*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ComboBoxgetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    gint cres = (gint)gtk_combo_box_get_active(
        (GtkComboBox*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ComboBoxsetColumnSpanColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_INT(a1, x1);
    gtk_combo_box_set_column_span_column(
        (GtkComboBox*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ComboBoxsetRowSpanColumn) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_INT(a1, x1);
    gtk_combo_box_set_row_span_column(
        (GtkComboBox*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ComboBoxsetWrapWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO_BOX);
    DECLARE_INT(a1, x1);
    gtk_combo_box_set_wrap_width(
        (GtkComboBox*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ComboBoxgetType) {
    GType cres = (GType)gtk_combo_box_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
GtkCombo* MK_GtkComboNew (
        GtkWidget* entry
        , GtkWidget* list
        ) {
    GtkCombo* res_ = new GtkCombo;
    res_->entry = entry;
    res_->list = list;
    return res_;
}
DEFINE2(Gtk_Combonew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    GtkCombo* cres = (GtkCombo*)MK_GtkComboNew(
        (GtkWidget*)a0
        ,(GtkWidget*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldEntry(O) ((O)->entry)
#define DOsetFieldEntry(O, V) ((O)->entry = (V))
#define DOgetFieldList(O) ((O)->list)
#define DOsetFieldList(O, V) ((O)->list = (V))
DEFINE1(Gtk_CombogetFieldList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO);
    GtkWidget* cres = (GtkWidget*)DOgetFieldList(
        (GtkCombo*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_CombosetFieldList) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldList(
        (GtkCombo*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CombogetFieldEntry) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO);
    GtkWidget* cres = (GtkWidget*)DOgetFieldEntry(
        (GtkCombo*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_CombosetFieldEntry) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COMBO);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldEntry(
        (GtkCombo*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldEntry
#undef DOsetFieldEntry
#undef DOgetFieldList
#undef DOsetFieldList
DEFINE1(Gtk_ColorSelectionDialognew) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_color_selection_dialog_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldCancelButton(O) ((O)->cancel_button)
#define DOsetFieldCancelButton(O, V) ((O)->cancel_button = (V))
#define DOgetFieldColorsel(O) ((O)->colorsel)
#define DOsetFieldColorsel(O, V) ((O)->colorsel = (V))
#define DOgetFieldHelpButton(O) ((O)->help_button)
#define DOsetFieldHelpButton(O, V) ((O)->help_button = (V))
#define DOgetFieldOkButton(O) ((O)->ok_button)
#define DOsetFieldOkButton(O, V) ((O)->ok_button = (V))
DEFINE0(Gtk_ColorSelectionDialoggetType) {
    GType cres = (GType)gtk_color_selection_dialog_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ColorSelectionDialoggetFieldOkButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldOkButton(
        (GtkColorSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorSelectionDialogsetFieldOkButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldOkButton(
        (GtkColorSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ColorSelectionDialoggetFieldHelpButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldHelpButton(
        (GtkColorSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorSelectionDialogsetFieldHelpButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldHelpButton(
        (GtkColorSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ColorSelectionDialoggetFieldColorsel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldColorsel(
        (GtkColorSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorSelectionDialogsetFieldColorsel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldColorsel(
        (GtkColorSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ColorSelectionDialoggetFieldCancelButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION_DIALOG);
    GtkWidget* cres = (GtkWidget*)DOgetFieldCancelButton(
        (GtkColorSelectionDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorSelectionDialogsetFieldCancelButton) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldCancelButton(
        (GtkColorSelectionDialog*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldCancelButton
#undef DOsetFieldCancelButton
#undef DOgetFieldColorsel
#undef DOsetFieldColorsel
#undef DOgetFieldHelpButton
#undef DOsetFieldHelpButton
#undef DOgetFieldOkButton
#undef DOsetFieldOkButton
DEFINE0(Gtk_ColorSelectionnew) {
    GtkWidget* cres = (GtkWidget*)gtk_color_selection_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ColorSelectionpaletteToString) {
    DECLARE_C_ARG_ARRAY(a0, a0size, x0, gint, GdkColor, DECLARE_OBJECT(tmp0, elem_alice);
GdkColor elem_c = *(GdkColor*)tmp0;);
    gchar* cres = (gchar*)gtk_color_selection_palette_to_string(
        (GdkColor*)a0, (gint)a0size
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ColorSelectionpaletteFromString) {
    DECLARE_CSTRING(a0, x0);
    GdkColor* tmp0 = 0; GdkColor** a1 = &tmp0;
    DECLARE_INT_AS(gint, tmp1, x1);
               gint* a2 = (gint*)&tmp1;
    gboolean cres = (gboolean)gtk_color_selection_palette_from_string(
        (const gchar*)a0
        ,(GdkColor**)a1
        ,(gint*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r1 = OBJECT_TO_WORD(*a1, TYPE_BOXED, GDK_TYPE_COLOR);
    word r2 = Store::IntToWord(*a2);
    RETURN3(res,r1,r2);
} END
DEFINE1(Gtk_ColorSelectionisAdjusting) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    gboolean cres = (gboolean)gtk_color_selection_is_adjusting(
        (GtkColorSelection*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ColorSelectiongetPreviousAlpha) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    guint16 cres = (guint16)gtk_color_selection_get_previous_alpha(
        (GtkColorSelection*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorSelectiongetPreviousColor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLOR);
    gtk_color_selection_get_previous_color(
        (GtkColorSelection*)a0
        ,(GdkColor*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ColorSelectionsetPreviousAlpha) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    DECLARE_INT(a1, x1);
    gtk_color_selection_set_previous_alpha(
        (GtkColorSelection*)a0
        ,(guint16)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ColorSelectionsetPreviousColor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLOR);
    gtk_color_selection_set_previous_color(
        (GtkColorSelection*)a0
        ,(GdkColor*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ColorSelectiongetCurrentAlpha) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    guint16 cres = (guint16)gtk_color_selection_get_current_alpha(
        (GtkColorSelection*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorSelectiongetCurrentColor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLOR);
    gtk_color_selection_get_current_color(
        (GtkColorSelection*)a0
        ,(GdkColor*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ColorSelectionsetCurrentAlpha) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    DECLARE_INT(a1, x1);
    gtk_color_selection_set_current_alpha(
        (GtkColorSelection*)a0
        ,(guint16)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ColorSelectionsetCurrentColor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLOR);
    gtk_color_selection_set_current_color(
        (GtkColorSelection*)a0
        ,(GdkColor*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ColorSelectionsetHasPalette) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    DECLARE_BOOL(a1, x1);
    gtk_color_selection_set_has_palette(
        (GtkColorSelection*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ColorSelectiongetHasPalette) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    gboolean cres = (gboolean)gtk_color_selection_get_has_palette(
        (GtkColorSelection*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorSelectionsetHasOpacityControl) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    DECLARE_BOOL(a1, x1);
    gtk_color_selection_set_has_opacity_control(
        (GtkColorSelection*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ColorSelectiongetHasOpacityControl) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_SELECTION);
    gboolean cres = (gboolean)gtk_color_selection_get_has_opacity_control(
        (GtkColorSelection*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_ColorSelectiongetType) {
    GType cres = (GType)gtk_color_selection_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ColorButtonnewWithColor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_COLOR);
    GtkWidget* cres = (GtkWidget*)gtk_color_button_new_with_color(
        (const GdkColor*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ColorButtonnew) {
    GtkWidget* cres = (GtkWidget*)gtk_color_button_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ColorButtongetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_BUTTON);
    const gchar* cres = (const gchar*)gtk_color_button_get_title(
        (GtkColorButton*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ColorButtonsetTitle) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_BUTTON);
    DECLARE_CSTRING(a1, x1);
    gtk_color_button_set_title(
        (GtkColorButton*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ColorButtongetUseAlpha) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_BUTTON);
    gboolean cres = (gboolean)gtk_color_button_get_use_alpha(
        (GtkColorButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorButtonsetUseAlpha) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_color_button_set_use_alpha(
        (GtkColorButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ColorButtongetAlpha) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_BUTTON);
    guint16 cres = (guint16)gtk_color_button_get_alpha(
        (GtkColorButton*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ColorButtongetColor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLOR);
    gtk_color_button_get_color(
        (GtkColorButton*)a0
        ,(GdkColor*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ColorButtonsetAlpha) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_BUTTON);
    DECLARE_INT(a1, x1);
    gtk_color_button_set_alpha(
        (GtkColorButton*)a0
        ,(guint16)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ColorButtonsetColor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_COLOR_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLOR);
    gtk_color_button_set_color(
        (GtkColorButton*)a0
        ,(const GdkColor*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ColorButtongetType) {
    GType cres = (GType)gtk_color_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ClipboardgetForDisplay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_DISPLAY);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    GtkClipboard* cres = (GtkClipboard*)gtk_clipboard_get_for_display(
        (GdkDisplay*)a0
        ,(GdkAtom)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_ClipboardwaitForTargets) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    DECLARE_OBJECT (a1, x1);
    DECLARE_INT_AS(gint, tmp0, x2);
               gint* a2 = (gint*)&tmp0;
    gboolean cres = (gboolean)gtk_clipboard_wait_for_targets(
        (GtkClipboard*)a0
        ,(GdkAtom**)a1
        ,(gint*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r2 = Store::IntToWord(*a2);
    RETURN2(res,r2);
} END
DEFINE1(Gtk_ClipboardwaitIsTextAvailable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    gboolean cres = (gboolean)gtk_clipboard_wait_is_text_available(
        (GtkClipboard*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ClipboardwaitForText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    gchar* cres = (gchar*)gtk_clipboard_wait_for_text(
        (GtkClipboard*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ClipboardwaitForContents) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    GtkSelectionData* cres = (GtkSelectionData*)gtk_clipboard_wait_for_contents(
        (GtkClipboard*)a0
        ,(GdkAtom)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_SELECTION_DATA);
    RETURN1(res);
} END
DEFINE3(Gtk_ClipboardsetText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_clipboard_set_text(
        (GtkClipboard*)a0
        ,(const gchar*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Clipboardclear) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    gtk_clipboard_clear(
        (GtkClipboard*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ClipboardgetOwner) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    GObject* cres = (GObject*)gtk_clipboard_get_owner(
        (GtkClipboard*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ClipboardgetDisplay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    GdkDisplay* cres = (GdkDisplay*)gtk_clipboard_get_display(
        (GtkClipboard*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_Clipboardget) {
    DECLARE_WORD32(tmp0, x0); GdkAtom a0 = (GdkAtom)tmp0;
    GtkClipboard* cres = (GtkClipboard*)gtk_clipboard_get(
        (GdkAtom)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_ClipboardgetType) {
    GType cres = (GType)gtk_clipboard_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_Clipboardstore) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    gtk_clipboard_store(
        (GtkClipboard*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ClipboardsetCanStore) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    DECLARE_C_ARG_ARRAY(a1, a1size, x1, gint, GtkTargetEntry, DECLARE_OBJECT(tmp0, elem_alice);
GtkTargetEntry elem_c = *(GtkTargetEntry*)tmp0;);
    gtk_clipboard_set_can_store(
        (GtkClipboard*)a0
        ,(GtkTargetEntry*)a1, (gint)a1size
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ClipboardwaitIsTargetAvailable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CLIPBOARD);
    DECLARE_WORD32(tmp0, x1); GdkAtom a1 = (GdkAtom)tmp0;
    gboolean cres = (gboolean)gtk_clipboard_wait_is_target_available(
        (GtkClipboard*)a0
        ,(GdkAtom)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_CheckMenuItemnewWithMnemonic) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_check_menu_item_new_with_mnemonic(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_CheckMenuItemnewWithLabel) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_check_menu_item_new_with_label(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_CheckMenuItemnew) {
    GtkWidget* cres = (GtkWidget*)gtk_check_menu_item_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldActive(O) ((O)->active)
#define DOsetFieldActive(O, V) ((O)->active = (V))
DEFINE1(Gtk_CheckMenuItemgetDrawAsRadio) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    gboolean cres = (gboolean)gtk_check_menu_item_get_draw_as_radio(
        (GtkCheckMenuItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CheckMenuItemsetDrawAsRadio) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_check_menu_item_set_draw_as_radio(
        (GtkCheckMenuItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CheckMenuItemgetInconsistent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    gboolean cres = (gboolean)gtk_check_menu_item_get_inconsistent(
        (GtkCheckMenuItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CheckMenuItemsetInconsistent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_check_menu_item_set_inconsistent(
        (GtkCheckMenuItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CheckMenuItemtoggled) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    gtk_check_menu_item_toggled(
        (GtkCheckMenuItem*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CheckMenuItemgetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    gboolean cres = (gboolean)gtk_check_menu_item_get_active(
        (GtkCheckMenuItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CheckMenuItemsetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    DECLARE_BOOL(a1, x1);
    gtk_check_menu_item_set_active(
        (GtkCheckMenuItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_CheckMenuItemgetType) {
    GType cres = (GType)gtk_check_menu_item_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_CheckMenuItemgetFieldActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    gboolean cres = (gboolean)DOgetFieldActive(
        (GtkCheckMenuItem*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CheckMenuItemsetFieldActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CHECK_MENU_ITEM);
    DECLARE_BOOL(a1, x1);
    DOsetFieldActive(
        (GtkCheckMenuItem*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldActive
#undef DOsetFieldActive
DEFINE1(Gtk_CheckButtonnewWithMnemonic) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_check_button_new_with_mnemonic(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_CheckButtonnewWithLabel) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_check_button_new_with_label(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_CheckButtonnew) {
    GtkWidget* cres = (GtkWidget*)gtk_check_button_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_CheckButtongetType) {
    GType cres = (GType)gtk_check_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_CellViewnew) {
    GtkWidget* cres = (GtkWidget*)gtk_cell_view_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_CellViewgetCellRenderers) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_VIEW);
    GList* cres = (GList*)gtk_cell_view_get_cell_renderers(
        (GtkCellView*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CellViewsetBackgroundColor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLOR);
    gtk_cell_view_set_background_color(
        (GtkCellView*)a0
        ,(const GdkColor*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_CellViewgetSizeOfRow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_REQUISITION);
    gboolean cres = (gboolean)gtk_cell_view_get_size_of_row(
        (GtkCellView*)a0
        ,(GtkTreePath*)a1
        ,(GtkRequisition*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_CellViewgetDisplayedRow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_VIEW);
    GtkTreePath* cres = (GtkTreePath*)gtk_cell_view_get_displayed_row(
        (GtkCellView*)a0
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE2(Gtk_CellViewsetDisplayedRow) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_cell_view_set_displayed_row(
        (GtkCellView*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_CellViewsetModel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_VIEW);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_MODEL);
    gtk_cell_view_set_model(
        (GtkCellView*)a0
        ,(GtkTreeModel*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CellViewnewWithPixbuf) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_PIXBUF);
    GtkWidget* cres = (GtkWidget*)gtk_cell_view_new_with_pixbuf(
        (GdkPixbuf*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_CellViewnewWithMarkup) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_cell_view_new_with_markup(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_CellViewnewWithText) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_cell_view_new_with_text(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_CellViewgetType) {
    GType cres = (GType)gtk_cell_view_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererTogglenew) {
    GtkCellRenderer* cres = (GtkCellRenderer*)gtk_cell_renderer_toggle_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_CellRendererTogglesetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER_TOGGLE);
    DECLARE_BOOL(a1, x1);
    gtk_cell_renderer_toggle_set_active(
        (GtkCellRendererToggle*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CellRendererTogglegetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER_TOGGLE);
    gboolean cres = (gboolean)gtk_cell_renderer_toggle_get_active(
        (GtkCellRendererToggle*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CellRendererTogglesetRadio) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER_TOGGLE);
    DECLARE_BOOL(a1, x1);
    gtk_cell_renderer_toggle_set_radio(
        (GtkCellRendererToggle*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CellRendererTogglegetRadio) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER_TOGGLE);
    gboolean cres = (gboolean)gtk_cell_renderer_toggle_get_radio(
        (GtkCellRendererToggle*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererTogglegetType) {
    GType cres = (GType)gtk_cell_renderer_toggle_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererTextnew) {
    GtkCellRenderer* cres = (GtkCellRenderer*)gtk_cell_renderer_text_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_CellRendererTextsetFixedHeightFromFont) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER_TEXT);
    DECLARE_INT(a1, x1);
    gtk_cell_renderer_text_set_fixed_height_from_font(
        (GtkCellRendererText*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_CellRendererTextgetType) {
    GType cres = (GType)gtk_cell_renderer_text_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererProgressnew) {
    GtkCellRenderer* cres = (GtkCellRenderer*)gtk_cell_renderer_progress_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererProgressgetType) {
    GType cres = (GType)gtk_cell_renderer_progress_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererPixbufnew) {
    GtkCellRenderer* cres = (GtkCellRenderer*)gtk_cell_renderer_pixbuf_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererPixbufgetType) {
    GType cres = (GType)gtk_cell_renderer_pixbuf_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererCombonew) {
    GtkCellRenderer* cres = (GtkCellRenderer*)gtk_cell_renderer_combo_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_CellRendererCombogetType) {
    GType cres = (GType)gtk_cell_renderer_combo_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CellRendererstopEditing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER);
    DECLARE_BOOL(a1, x1);
    gtk_cell_renderer_stop_editing(
        (GtkCellRenderer*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CellRenderereditingCanceled) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER);
    gtk_cell_renderer_editing_canceled(
        (GtkCellRenderer*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_CellRenderergetFixedSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gtk_cell_renderer_get_fixed_size(
        (GtkCellRenderer*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_CellRenderersetFixedSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_cell_renderer_set_fixed_size(
        (GtkCellRenderer*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE7(Gtk_CellRendererstartEditing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_EVENT);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a3, x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GDK_TYPE_RECTANGLE);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x6, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x6);}
});
GtkCellRendererState a6 = GtkCellRendererStatetFromWord(x6);
    GtkCellEditable* cres = (GtkCellEditable*)gtk_cell_renderer_start_editing(
        (GtkCellRenderer*)a0
        ,(GdkEvent*)a1
        ,(GtkWidget*)a2
        ,(const gchar*)a3
        ,(GdkRectangle*)a4
        ,(GdkRectangle*)a5
        ,(GtkCellRendererState)a6
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE7(Gtk_CellRendereractivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_EVENT);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    DECLARE_CSTRING(a3, x3);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GDK_TYPE_RECTANGLE);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x6, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x6);}
});
GtkCellRendererState a6 = GtkCellRendererStatetFromWord(x6);
    gboolean cres = (gboolean)gtk_cell_renderer_activate(
        (GtkCellRenderer*)a0
        ,(GdkEvent*)a1
        ,(GtkWidget*)a2
        ,(const gchar*)a3
        ,(GdkRectangle*)a4
        ,(GdkRectangle*)a5
        ,(GtkCellRendererState)a6
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE7(Gtk_CellRendererrender) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_WINDOW);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a4, x4, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a5, x5, GDK_TYPE_RECTANGLE);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x6, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x6);}
});
GtkCellRendererState a6 = GtkCellRendererStatetFromWord(x6);
    gtk_cell_renderer_render(
        (GtkCellRenderer*)a0
        ,(GdkWindow*)a1
        ,(GtkWidget*)a2
        ,(GdkRectangle*)a3
        ,(GdkRectangle*)a4
        ,(GdkRectangle*)a5
        ,(GtkCellRendererState)a6
        );
    RETURN_UNIT;
} END
DEFINE7(Gtk_CellRenderergetSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_RENDERER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_RECTANGLE);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x4);
               gint* a4 = (gint*)&tmp1;
    DECLARE_INT_AS(gint, tmp2, x5);
               gint* a5 = (gint*)&tmp2;
    DECLARE_INT_AS(gint, tmp3, x6);
               gint* a6 = (gint*)&tmp3;
    gtk_cell_renderer_get_size(
        (GtkCellRenderer*)a0
        ,(GtkWidget*)a1
        ,(GdkRectangle*)a2
        ,(gint*)a3
        ,(gint*)a4
        ,(gint*)a5
        ,(gint*)a6
        );
    word r3 = Store::IntToWord(*a3);
    word r4 = Store::IntToWord(*a4);
    word r5 = Store::IntToWord(*a5);
    word r6 = Store::IntToWord(*a6);
    RETURN4(r3,r4,r5,r6);
} END
DEFINE0(Gtk_CellRenderergetType) {
    GType cres = (GType)gtk_cell_renderer_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Calendarnew) {
    GtkWidget* cres = (GtkWidget*)gtk_calendar_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_Calendarthaw) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    gtk_calendar_thaw(
        (GtkCalendar*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Calendarfreeze) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    gtk_calendar_freeze(
        (GtkCalendar*)a0
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_CalendargetDate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    DECLARE_INT_AS(guint, tmp0, x1);
               int* a1 = (int*)&tmp0;
    DECLARE_INT_AS(guint, tmp1, x2);
               int* a2 = (int*)&tmp1;
    DECLARE_INT_AS(guint, tmp2, x3);
               int* a3 = (int*)&tmp2;
    gtk_calendar_get_date(
        (GtkCalendar*)a0
        ,(guint*)a1
        ,(guint*)a2
        ,(guint*)a3
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    word r3 = Store::IntToWord(*a3);
    RETURN3(r1,r2,r3);
} END
DEFINE2(Gtk_CalendardisplayOptions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GtkCalendarDisplayOptions a1 = GtkCalendarDisplayOptionstFromWord(x1);
    gtk_calendar_display_options(
        (GtkCalendar*)a0
        ,(GtkCalendarDisplayOptions)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CalendargetDisplayOptions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    GtkCalendarDisplayOptions cres = (GtkCalendarDisplayOptions)gtk_calendar_get_display_options(
        (GtkCalendar*)a0
        );
    word res = GtkCalendarDisplayOptionstToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CalendarsetDisplayOptions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GtkCalendarDisplayOptions a1 = GtkCalendarDisplayOptionstFromWord(x1);
    gtk_calendar_set_display_options(
        (GtkCalendar*)a0
        ,(GtkCalendarDisplayOptions)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CalendarclearMarks) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    gtk_calendar_clear_marks(
        (GtkCalendar*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_CalendarunmarkDay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_calendar_unmark_day(
        (GtkCalendar*)a0
        ,(guint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CalendarmarkDay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    DECLARE_INT(a1, x1);
    gboolean cres = (gboolean)gtk_calendar_mark_day(
        (GtkCalendar*)a0
        ,(guint)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_CalendarselectDay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    DECLARE_INT(a1, x1);
    gtk_calendar_select_day(
        (GtkCalendar*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_CalendarselectMonth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CALENDAR);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gboolean cres = (gboolean)gtk_calendar_select_month(
        (GtkCalendar*)a0
        ,(guint)a1
        ,(guint)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_CalendargetType) {
    GType cres = (GType)gtk_calendar_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_ButtonBoxsetChildSecondary) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a2, x2);
    gtk_button_box_set_child_secondary(
        (GtkButtonBox*)a0
        ,(GtkWidget*)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ButtonBoxgetChildSecondary) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gboolean cres = (gboolean)gtk_button_box_get_child_secondary(
        (GtkButtonBox*)a0
        ,(GtkWidget*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ButtonBoxsetLayout) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON_BOX);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkButtonBoxStyle a1 = GtkButtonBoxStyletFromWord(x1);
    gtk_button_box_set_layout(
        (GtkButtonBox*)a0
        ,(GtkButtonBoxStyle)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ButtonBoxgetLayout) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON_BOX);
    GtkButtonBoxStyle cres = (GtkButtonBoxStyle)gtk_button_box_get_layout(
        (GtkButtonBox*)a0
        );
    word res = GtkButtonBoxStyletToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_ButtonBoxgetType) {
    GType cres = (GType)gtk_button_box_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ButtonnewWithMnemonic) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_button_new_with_mnemonic(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ButtonnewFromStock) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_button_new_from_stock(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ButtonnewWithLabel) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_button_new_with_label(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_Buttonnew) {
    GtkWidget* cres = (GtkWidget*)gtk_button_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ButtongetImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    GtkWidget* cres = (GtkWidget*)gtk_button_get_image(
        (GtkButton*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ButtonsetImage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_button_set_image(
        (GtkButton*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ButtongetAlignment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    DECLARE_DOUBLE_AS(gfloat, tmp0, x1);
               gfloat* a1 = (gfloat*)&tmp0;
    DECLARE_DOUBLE_AS(gfloat, tmp1, x2);
               gfloat* a2 = (gfloat*)&tmp1;
    gtk_button_get_alignment(
        (GtkButton*)a0
        ,(gfloat*)a1
        ,(gfloat*)a2
        );
    word r1 = Real::New(*a1)->ToWord ();
    word r2 = Real::New(*a2)->ToWord ();
    RETURN2(r1,r2);
} END
DEFINE3(Gtk_ButtonsetAlignment) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    DECLARE_CFLOAT(a1, x1);
    DECLARE_CFLOAT(a2, x2);
    gtk_button_set_alignment(
        (GtkButton*)a0
        ,(gfloat)a1
        ,(gfloat)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ButtongetFocusOnClick) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    gboolean cres = (gboolean)gtk_button_get_focus_on_click(
        (GtkButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ButtonsetFocusOnClick) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_button_set_focus_on_click(
        (GtkButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ButtongetUseStock) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    gboolean cres = (gboolean)gtk_button_get_use_stock(
        (GtkButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ButtonsetUseStock) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_button_set_use_stock(
        (GtkButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ButtongetUseUnderline) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    gboolean cres = (gboolean)gtk_button_get_use_underline(
        (GtkButton*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ButtonsetUseUnderline) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    DECLARE_BOOL(a1, x1);
    gtk_button_set_use_underline(
        (GtkButton*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ButtongetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    const gchar* cres = (const gchar*)gtk_button_get_label(
        (GtkButton*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ButtonsetLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    DECLARE_CSTRING(a1, x1);
    gtk_button_set_label(
        (GtkButton*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ButtongetRelief) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    GtkReliefStyle cres = (GtkReliefStyle)gtk_button_get_relief(
        (GtkButton*)a0
        );
    word res = GtkReliefStyletToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ButtonsetRelief) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkReliefStyle a1 = GtkReliefStyletFromWord(x1);
    gtk_button_set_relief(
        (GtkButton*)a0
        ,(GtkReliefStyle)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Buttonleave) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    gtk_button_leave(
        (GtkButton*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Buttonenter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    gtk_button_enter(
        (GtkButton*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Buttonclicked) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    gtk_button_clicked(
        (GtkButton*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Buttonreleased) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    gtk_button_released(
        (GtkButton*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Buttonpressed) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BUTTON);
    gtk_button_pressed(
        (GtkButton*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ButtongetType) {
    GType cres = (GType)gtk_button_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE6(Gtk_BoxsetChildPacking) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a2, x2);
    DECLARE_BOOL(a3, x3);
    DECLARE_INT(a4, x4);
    if (Store::WordToInt(x5) == INVALID_INT) {REQUEST(x5);}
GtkPackType a5 = GtkPackTypetFromWord(x5);
    gtk_box_set_child_packing(
        (GtkBox*)a0
        ,(GtkWidget*)a1
        ,(gboolean)a2
        ,(gboolean)a3
        ,(guint)a4
        ,(GtkPackType)a5
        );
    RETURN_UNIT;
} END
DEFINE6(Gtk_BoxqueryChildPacking) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_OBJECT (a2, x2);
    DECLARE_OBJECT (a3, x3);
    DECLARE_INT_AS(guint, tmp0, x4);
               int* a4 = (int*)&tmp0;
    if (Store::WordToInt(x5) == INVALID_INT) {REQUEST(x5);}
GtkPackType tmp1 = GtkPackTypetFromWord(x5);GtkPackType *a5 = &tmp1;
    gtk_box_query_child_packing(
        (GtkBox*)a0
        ,(GtkWidget*)a1
        ,(gboolean*)a2
        ,(gboolean*)a3
        ,(guint*)a4
        ,(GtkPackType*)a5
        );
    word r4 = Store::IntToWord(*a4);
    word r5 = GtkPackTypetToWord(*a5);
    RETURN2(r4,r5);
} END
DEFINE3(Gtk_BoxreorderChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_INT(a2, x2);
    gtk_box_reorder_child(
        (GtkBox*)a0
        ,(GtkWidget*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_BoxgetSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    gint cres = (gint)gtk_box_get_spacing(
        (GtkBox*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_BoxsetSpacing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_INT(a1, x1);
    gtk_box_set_spacing(
        (GtkBox*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_BoxgetHomogeneous) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    gboolean cres = (gboolean)gtk_box_get_homogeneous(
        (GtkBox*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_BoxsetHomogeneous) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_BOOL(a1, x1);
    gtk_box_set_homogeneous(
        (GtkBox*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_BoxpackEndDefaults) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_box_pack_end_defaults(
        (GtkBox*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_BoxpackStartDefaults) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_box_pack_start_defaults(
        (GtkBox*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_BoxpackEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a2, x2);
    DECLARE_BOOL(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_box_pack_end(
        (GtkBox*)a0
        ,(GtkWidget*)a1
        ,(gboolean)a2
        ,(gboolean)a3
        ,(guint)a4
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_BoxpackStart) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BOX);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_BOOL(a2, x2);
    DECLARE_BOOL(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_box_pack_start(
        (GtkBox*)a0
        ,(GtkWidget*)a1
        ,(gboolean)a2
        ,(gboolean)a3
        ,(guint)a4
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_BoxgetType) {
    GType cres = (GType)gtk_box_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
GtkBin* MK_GtkBinNew (
        GtkWidget* child
        ) {
    GtkBin* res_ = new GtkBin;
    res_->child = child;
    return res_;
}
DEFINE1(Gtk_Binnew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    GtkBin* cres = (GtkBin*)MK_GtkBinNew(
        (GtkWidget*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldChild(O) ((O)->child)
#define DOsetFieldChild(O, V) ((O)->child = (V))
DEFINE1(Gtk_BingetChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BIN);
    GtkWidget* cres = (GtkWidget*)gtk_bin_get_child(
        (GtkBin*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_BingetType) {
    GType cres = (GType)gtk_bin_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_BingetFieldChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BIN);
    GtkWidget* cres = (GtkWidget*)DOgetFieldChild(
        (GtkBin*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_BinsetFieldChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_BIN);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DOsetFieldChild(
        (GtkBin*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldChild
#undef DOsetFieldChild
DEFINE5(Gtk_AspectFramenew) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    DECLARE_CDOUBLE(a3, x3);
    DECLARE_BOOL(a4, x4);
    GtkWidget* cres = (GtkWidget*)gtk_aspect_frame_new(
        (const gchar*)a0
        ,(double)a1
        ,(double)a2
        ,(double)a3
        ,(gboolean)a4
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE5(Gtk_AspectFrameset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ASPECT_FRAME);
    DECLARE_CFLOAT(a1, x1);
    DECLARE_CFLOAT(a2, x2);
    DECLARE_CFLOAT(a3, x3);
    DECLARE_BOOL(a4, x4);
    gtk_aspect_frame_set(
        (GtkAspectFrame*)a0
        ,(gfloat)a1
        ,(gfloat)a2
        ,(gfloat)a3
        ,(gboolean)a4
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_AspectFramegetType) {
    GType cres = (GType)gtk_aspect_frame_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_Arrownew) {
    if (Store::WordToInt(x0) == INVALID_INT) {REQUEST(x0);}
GtkArrowType a0 = GtkArrowTypetFromWord(x0);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkShadowType a1 = GtkShadowTypetFromWord(x1);
    GtkWidget* cres = (GtkWidget*)gtk_arrow_new(
        (GtkArrowType)a0
        ,(GtkShadowType)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE3(Gtk_Arrowset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ARROW);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkArrowType a1 = GtkArrowTypetFromWord(x1);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkShadowType a2 = GtkShadowTypetFromWord(x2);
    gtk_arrow_set(
        (GtkArrow*)a0
        ,(GtkArrowType)a1
        ,(GtkShadowType)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_ArrowgetType) {
    GType cres = (GType)gtk_arrow_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_Alignmentnew) {
    DECLARE_CDOUBLE(a0, x0);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    DECLARE_CDOUBLE(a3, x3);
    GtkWidget* cres = (GtkWidget*)gtk_alignment_new(
        (double)a0
        ,(double)a1
        ,(double)a2
        ,(double)a3
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE5(Gtk_AlignmentgetPadding) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ALIGNMENT);
    DECLARE_INT_AS(guint, tmp0, x1);
               int* a1 = (int*)&tmp0;
    DECLARE_INT_AS(guint, tmp1, x2);
               int* a2 = (int*)&tmp1;
    DECLARE_INT_AS(guint, tmp2, x3);
               int* a3 = (int*)&tmp2;
    DECLARE_INT_AS(guint, tmp3, x4);
               int* a4 = (int*)&tmp3;
    gtk_alignment_get_padding(
        (GtkAlignment*)a0
        ,(guint*)a1
        ,(guint*)a2
        ,(guint*)a3
        ,(guint*)a4
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    word r3 = Store::IntToWord(*a3);
    word r4 = Store::IntToWord(*a4);
    RETURN4(r1,r2,r3,r4);
} END
DEFINE5(Gtk_AlignmentsetPadding) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ALIGNMENT);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_alignment_set_padding(
        (GtkAlignment*)a0
        ,(guint)a1
        ,(guint)a2
        ,(guint)a3
        ,(guint)a4
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_Alignmentset) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ALIGNMENT);
    DECLARE_CFLOAT(a1, x1);
    DECLARE_CFLOAT(a2, x2);
    DECLARE_CFLOAT(a3, x3);
    DECLARE_CFLOAT(a4, x4);
    gtk_alignment_set(
        (GtkAlignment*)a0
        ,(gfloat)a1
        ,(gfloat)a2
        ,(gfloat)a3
        ,(gfloat)a4
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_AlignmentgetType) {
    GType cres = (GType)gtk_alignment_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE6(Gtk_Adjustmentnew) {
    DECLARE_CDOUBLE(a0, x0);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    DECLARE_CDOUBLE(a3, x3);
    DECLARE_CDOUBLE(a4, x4);
    DECLARE_CDOUBLE(a5, x5);
    GtkObject* cres = (GtkObject*)gtk_adjustment_new(
        (double)a0
        ,(double)a1
        ,(double)a2
        ,(double)a3
        ,(double)a4
        ,(double)a5
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
#define DOgetFieldLower(O) ((O)->lower)
#define DOsetFieldLower(O, V) ((O)->lower = (V))
#define DOgetFieldPageIncrement(O) ((O)->page_increment)
#define DOsetFieldPageIncrement(O, V) ((O)->page_increment = (V))
#define DOgetFieldPageSize(O) ((O)->page_size)
#define DOsetFieldPageSize(O, V) ((O)->page_size = (V))
#define DOgetFieldStepIncrement(O) ((O)->step_increment)
#define DOsetFieldStepIncrement(O, V) ((O)->step_increment = (V))
#define DOgetFieldUpper(O) ((O)->upper)
#define DOsetFieldUpper(O, V) ((O)->upper = (V))
#define DOgetFieldValue(O) ((O)->value)
#define DOsetFieldValue(O, V) ((O)->value = (V))
DEFINE2(Gtk_AdjustmentsetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CDOUBLE(a1, x1);
    gtk_adjustment_set_value(
        (GtkAdjustment*)a0
        ,(gdouble)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AdjustmentgetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gdouble cres = (gdouble)gtk_adjustment_get_value(
        (GtkAdjustment*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE3(Gtk_AdjustmentclampPage) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CDOUBLE(a1, x1);
    DECLARE_CDOUBLE(a2, x2);
    gtk_adjustment_clamp_page(
        (GtkAdjustment*)a0
        ,(gdouble)a1
        ,(gdouble)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AdjustmentvalueChanged) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gtk_adjustment_value_changed(
        (GtkAdjustment*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Adjustmentchanged) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gtk_adjustment_changed(
        (GtkAdjustment*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_AdjustmentgetType) {
    GType cres = (GType)gtk_adjustment_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_AdjustmentgetFieldValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gfloat cres = (gfloat)DOgetFieldValue(
        (GtkAdjustment*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AdjustmentsetFieldValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CFLOAT(a1, x1);
    DOsetFieldValue(
        (GtkAdjustment*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AdjustmentgetFieldUpper) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gfloat cres = (gfloat)DOgetFieldUpper(
        (GtkAdjustment*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AdjustmentsetFieldUpper) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CFLOAT(a1, x1);
    DOsetFieldUpper(
        (GtkAdjustment*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AdjustmentgetFieldStepIncrement) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gfloat cres = (gfloat)DOgetFieldStepIncrement(
        (GtkAdjustment*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AdjustmentsetFieldStepIncrement) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CFLOAT(a1, x1);
    DOsetFieldStepIncrement(
        (GtkAdjustment*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AdjustmentgetFieldPageSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gfloat cres = (gfloat)DOgetFieldPageSize(
        (GtkAdjustment*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AdjustmentsetFieldPageSize) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CFLOAT(a1, x1);
    DOsetFieldPageSize(
        (GtkAdjustment*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AdjustmentgetFieldPageIncrement) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gfloat cres = (gfloat)DOgetFieldPageIncrement(
        (GtkAdjustment*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AdjustmentsetFieldPageIncrement) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CFLOAT(a1, x1);
    DOsetFieldPageIncrement(
        (GtkAdjustment*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AdjustmentgetFieldLower) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    gfloat cres = (gfloat)DOgetFieldLower(
        (GtkAdjustment*)a0
        );
    word res = Real::New (cres)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AdjustmentsetFieldLower) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ADJUSTMENT);
    DECLARE_CFLOAT(a1, x1);
    DOsetFieldLower(
        (GtkAdjustment*)a0
        ,(gfloat)a1
        );
    RETURN_UNIT;
} END
#undef DOgetFieldLower
#undef DOsetFieldLower
#undef DOgetFieldPageIncrement
#undef DOsetFieldPageIncrement
#undef DOgetFieldPageSize
#undef DOsetFieldPageSize
#undef DOgetFieldStepIncrement
#undef DOsetFieldStepIncrement
#undef DOgetFieldUpper
#undef DOsetFieldUpper
#undef DOgetFieldValue
#undef DOsetFieldValue
DEFINE1(Gtk_ActionGroupnew) {
    DECLARE_CSTRING(a0, x0);
    GtkActionGroup* cres = (GtkActionGroup*)gtk_action_group_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ActionGrouptranslateString) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    DECLARE_CSTRING(a1, x1);
    const gchar* cres = (const gchar*)gtk_action_group_translate_string(
        (GtkActionGroup*)a0
        ,(const gchar*)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_ActionGroupsetTranslationDomain) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    DECLARE_CSTRING(a1, x1);
    gtk_action_group_set_translation_domain(
        (GtkActionGroup*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ActionGroupremoveAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACTION);
    gtk_action_group_remove_action(
        (GtkActionGroup*)a0
        ,(GtkAction*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_ActionGroupaddActionWithAccel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACTION);
    DECLARE_CSTRING(a2, x2);
    gtk_action_group_add_action_with_accel(
        (GtkActionGroup*)a0
        ,(GtkAction*)a1
        ,(const gchar*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ActionGroupaddAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACTION);
    gtk_action_group_add_action(
        (GtkActionGroup*)a0
        ,(GtkAction*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ActionGrouplistActions) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    GList* cres = (GList*)gtk_action_group_list_actions(
        (GtkActionGroup*)a0
        );
    word res  = GLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ActionGroupgetAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    DECLARE_CSTRING(a1, x1);
    GtkAction* cres = (GtkAction*)gtk_action_group_get_action(
        (GtkActionGroup*)a0
        ,(const gchar*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ActionGroupsetVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    DECLARE_BOOL(a1, x1);
    gtk_action_group_set_visible(
        (GtkActionGroup*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ActionGroupgetVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    gboolean cres = (gboolean)gtk_action_group_get_visible(
        (GtkActionGroup*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ActionGroupsetSensitive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    DECLARE_BOOL(a1, x1);
    gtk_action_group_set_sensitive(
        (GtkActionGroup*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ActionGroupgetSensitive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    gboolean cres = (gboolean)gtk_action_group_get_sensitive(
        (GtkActionGroup*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ActionGroupgetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION_GROUP);
    const gchar* cres = (const gchar*)gtk_action_group_get_name(
        (GtkActionGroup*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_ActionGroupgetType) {
    GType cres = (GType)gtk_action_group_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_Actionnew) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_CSTRING(a1, x1);
    DECLARE_CSTRING(a2, x2);
    DECLARE_CSTRING(a3, x3);
    GtkAction* cres = (GtkAction*)gtk_action_new(
        (const gchar*)a0
        ,(const gchar*)a1
        ,(const gchar*)a2
        ,(const gchar*)a3
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ActionsetVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    DECLARE_BOOL(a1, x1);
    gtk_action_set_visible(
        (GtkAction*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ActionsetSensitive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    DECLARE_BOOL(a1, x1);
    gtk_action_set_sensitive(
        (GtkAction*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ActionsetAccelGroup) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_ACCEL_GROUP);
    gtk_action_set_accel_group(
        (GtkAction*)a0
        ,(GtkAccelGroup*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ActionsetAccelPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    DECLARE_CSTRING(a1, x1);
    gtk_action_set_accel_path(
        (GtkAction*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ActionunblockActivateFrom) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_action_unblock_activate_from(
        (GtkAction*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ActionblockActivateFrom) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_action_block_activate_from(
        (GtkAction*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ActiongetAccelPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    const gchar* cres = (const gchar*)gtk_action_get_accel_path(
        (GtkAction*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_ActiondisconnectAccelerator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    gtk_action_disconnect_accelerator(
        (GtkAction*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ActionconnectAccelerator) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    gtk_action_connect_accelerator(
        (GtkAction*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ActiongetProxies) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    GSList* cres = (GSList*)gtk_action_get_proxies(
        (GtkAction*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_ActiondisconnectProxy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_action_disconnect_proxy(
        (GtkAction*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ActionconnectProxy) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_action_connect_proxy(
        (GtkAction*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ActioncreateToolItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    GtkWidget* cres = (GtkWidget*)gtk_action_create_tool_item(
        (GtkAction*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_ActioncreateMenuItem) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    GtkWidget* cres = (GtkWidget*)gtk_action_create_menu_item(
        (GtkAction*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_ActioncreateIcon) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkIconSize a1 = GtkIconSizetFromWord(x1);
    GtkWidget* cres = (GtkWidget*)gtk_action_create_icon(
        (GtkAction*)a0
        ,(GtkIconSize)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_Actionactivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    gtk_action_activate(
        (GtkAction*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_ActiongetVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    gboolean cres = (gboolean)gtk_action_get_visible(
        (GtkAction*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ActionisVisible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    gboolean cres = (gboolean)gtk_action_is_visible(
        (GtkAction*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ActiongetSensitive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    gboolean cres = (gboolean)gtk_action_get_sensitive(
        (GtkAction*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ActionisSensitive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    gboolean cres = (gboolean)gtk_action_is_sensitive(
        (GtkAction*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_ActiongetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACTION);
    const gchar* cres = (const gchar*)gtk_action_get_name(
        (GtkAction*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_ActiongetType) {
    GType cres = (GType)gtk_action_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_AccessibleconnectWidgetDestroyed) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCESSIBLE);
    gtk_accessible_connect_widget_destroyed(
        (GtkAccessible*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_AccessiblegetType) {
    GType cres = (GType)gtk_accessible_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_AccelLabelnew) {
    DECLARE_CSTRING(a0, x0);
    GtkWidget* cres = (GtkWidget*)gtk_accel_label_new(
        (const gchar*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_AccelLabelrefetch) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_LABEL);
    gboolean cres = (gboolean)gtk_accel_label_refetch(
        (GtkAccelLabel*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_AccelLabelsetAccelClosure) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_LABEL);
    DECLARE_OBJECT (a1, x1);
    gtk_accel_label_set_accel_closure(
        (GtkAccelLabel*)a0
        ,(GClosure*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_AccelLabelsetAccelWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_LABEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_accel_label_set_accel_widget(
        (GtkAccelLabel*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelLabelgetAccelWidth) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_LABEL);
    guint cres = (guint)gtk_accel_label_get_accel_width(
        (GtkAccelLabel*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_AccelLabelgetAccelWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_LABEL);
    GtkWidget* cres = (GtkWidget*)gtk_accel_label_get_accel_widget(
        (GtkAccelLabel*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_AccelLabelgetType) {
    GType cres = (GType)gtk_accel_label_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_AccelGroupnew) {
    GtkAccelGroup* cres = (GtkAccelGroup*)gtk_accel_group_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE4(Gtk_AccelGroupquery) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_GROUP);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    DECLARE_INT_AS(guint, tmp2, x3);
               int* a3 = (int*)&tmp2;
    GtkAccelGroupEntry* cres = (GtkAccelGroupEntry*)gtk_accel_group_query(
        (GtkAccelGroup*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        ,(guint*)a3
        );
    word res = OBJECT_TO_WORD (cres);
    word r3 = Store::IntToWord(*a3);
    RETURN2(res,r3);
} END
DEFINE1(Gtk_AccelGroupfromAccelClosure) {
    DECLARE_OBJECT (a0, x0);
    GtkAccelGroup* cres = (GtkAccelGroup*)gtk_accel_group_from_accel_closure(
        (GClosure*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE5(Gtk_AccelGroupactivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_GROUP);
    DECLARE_WORD32(tmp0, x1); GQuark a1 = (GQuark)tmp0;
    DECLARE_OBJECT_OF_TYPE(a2, x2, G_TYPE_OBJECT);
    DECLARE_INT(a3, x3);
    DECLARE_LIST_ELEMS(tmp1, tmp2, x4, 
{ if (Store::WordToInt(tmp1->Sel(0)) == INVALID_INT)
{REQUEST(x4);}
});
GdkModifierType a4 = GdkModifierTypetFromWord(x4);
    gboolean cres = (gboolean)gtk_accel_group_activate(
        (GtkAccelGroup*)a0
        ,(GQuark)a1
        ,(GObject*)a2
        ,(guint)a3
        ,(GdkModifierType)a4
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_AccelGroupdisconnectKey) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_GROUP);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    gboolean cres = (gboolean)gtk_accel_group_disconnect_key(
        (GtkAccelGroup*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_AccelGroupdisconnect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_GROUP);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_accel_group_disconnect(
        (GtkAccelGroup*)a0
        ,(GClosure*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_AccelGroupconnectByPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_GROUP);
    DECLARE_CSTRING(a1, x1);
    DECLARE_OBJECT (a2, x2);
    gtk_accel_group_connect_by_path(
        (GtkAccelGroup*)a0
        ,(const gchar*)a1
        ,(GClosure*)a2
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_AccelGroupconnect) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_GROUP);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    DECLARE_LIST_ELEMS(tmp2, tmp3, x3, 
{ if (Store::WordToInt(tmp2->Sel(0)) == INVALID_INT)
{REQUEST(x3);}
});
GtkAccelFlags a3 = GtkAccelFlagstFromWord(x3);
    DECLARE_OBJECT (a4, x4);
    gtk_accel_group_connect(
        (GtkAccelGroup*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        ,(GtkAccelFlags)a3
        ,(GClosure*)a4
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelGroupunlock) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_GROUP);
    gtk_accel_group_unlock(
        (GtkAccelGroup*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelGrouplock) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ACCEL_GROUP);
    gtk_accel_group_lock(
        (GtkAccelGroup*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_AccelGroupgetType) {
    GType cres = (GType)gtk_accel_group_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_AboutDialognew) {
    GtkWidget* cres = (GtkWidget*)gtk_about_dialog_new(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetLogoIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_logo_icon_name(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetLogoIconName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_logo_icon_name(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetLogo) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_PIXBUF);
    gtk_about_dialog_set_logo(
        (GtkAboutDialog*)a0
        ,(GdkPixbuf*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetLogo) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    GdkPixbuf* cres = (GdkPixbuf*)gtk_about_dialog_get_logo(
        (GtkAboutDialog*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetTranslatorCredits) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_translator_credits(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetTranslatorCredits) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_translator_credits(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetArtists) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_ZERO_TERMINATED_ARRAY(a1, x1, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    gtk_about_dialog_set_artists(
        (GtkAboutDialog*)a0
        ,(const gchar**)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetArtists) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    gchar** cres = (gchar**)gtk_about_dialog_get_artists(
        (GtkAboutDialog*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetDocumenters) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_ZERO_TERMINATED_ARRAY(a1, x1, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    gtk_about_dialog_set_documenters(
        (GtkAboutDialog*)a0
        ,(const gchar**)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetDocumenters) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    gchar** cres = (gchar**)gtk_about_dialog_get_documenters(
        (GtkAboutDialog*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetAuthors) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_ZERO_TERMINATED_ARRAY(a1, x1, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    gtk_about_dialog_set_authors(
        (GtkAboutDialog*)a0
        ,(const gchar**)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetAuthors) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    gchar** cres = (gchar**)gtk_about_dialog_get_authors(
        (GtkAboutDialog*)a0
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetWebsiteLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_website_label(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetWebsiteLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_website_label(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetWebsite) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_website(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetWebsite) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_website(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetLicense) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_license(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetLicense) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_license(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetComments) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_comments(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetComments) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_comments(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetCopyright) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_copyright(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetCopyright) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_copyright(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetVersion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_version(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetVersion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_version(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_AboutDialogsetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    DECLARE_CSTRING(a1, x1);
    gtk_about_dialog_set_name(
        (GtkAboutDialog*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AboutDialoggetName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_ABOUT_DIALOG);
    const gchar* cres = (const gchar*)gtk_about_dialog_get_name(
        (GtkAboutDialog*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_AboutDialoggetType) {
    GType cres = (GType)gtk_about_dialog_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeSortablehasDefaultSortFunc) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SORTABLE);
    gboolean cres = (gboolean)gtk_tree_sortable_has_default_sort_func(
        (GtkTreeSortable*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeSortablesetSortColumnId) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SORTABLE);
    DECLARE_INT(a1, x1);
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkSortType a2 = GtkSortTypetFromWord(x2);
    gtk_tree_sortable_set_sort_column_id(
        (GtkTreeSortable*)a0
        ,(gint)a1
        ,(GtkSortType)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeSortablegetSortColumnId) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SORTABLE);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    if (Store::WordToInt(x2) == INVALID_INT) {REQUEST(x2);}
GtkSortType tmp1 = GtkSortTypetFromWord(x2);GtkSortType *a2 = &tmp1;
    gboolean cres = (gboolean)gtk_tree_sortable_get_sort_column_id(
        (GtkTreeSortable*)a0
        ,(gint*)a1
        ,(GtkSortType*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r1 = Store::IntToWord(*a1);
    word r2 = GtkSortTypetToWord(*a2);
    RETURN3(res,r1,r2);
} END
DEFINE1(Gtk_TreeSortablesortColumnChanged) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_SORTABLE);
    gtk_tree_sortable_sort_column_changed(
        (GtkTreeSortable*)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_TreeSortablegetType) {
    GType cres = (GType)gtk_tree_sortable_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModelfilterNew) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    GtkTreeModel* cres = (GtkTreeModel*)gtk_tree_model_filter_new(
        (GtkTreeModel*)a0
        ,(GtkTreePath*)a1
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE4(Gtk_TreeModelrowsReordered) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    gtk_tree_model_rows_reordered(
        (GtkTreeModel*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeIter*)a2
        ,(gint*)a3
        );
    word r3 = Store::IntToWord(*a3);
    RETURN1(r3);
} END
DEFINE2(Gtk_TreeModelrowDeleted) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gtk_tree_model_row_deleted(
        (GtkTreeModel*)a0
        ,(GtkTreePath*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeModelrowHasChildToggled) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_model_row_has_child_toggled(
        (GtkTreeModel*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeModelrowInserted) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_model_row_inserted(
        (GtkTreeModel*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeModelrowChanged) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gtk_tree_model_row_changed(
        (GtkTreeModel*)a0
        ,(GtkTreePath*)a1
        ,(GtkTreeIter*)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeModelget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_tree_model_get(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeModelunrefNode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_tree_model_unref_node(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TreeModelrefNode) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gtk_tree_model_ref_node(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TreeModeliterParent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_model_iter_parent(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_TreeModeliterNthChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    DECLARE_INT(a3, x3);
    gboolean cres = (gboolean)gtk_tree_model_iter_nth_child(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        ,(gint)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModeliterNChildren) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gint cres = (gint)gtk_tree_model_iter_n_children(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModeliterHasChild) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_model_iter_has_child(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeModeliterChildren) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_model_iter_children(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreeIter*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModeliterNext) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_model_iter_next(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeModelgetValue) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_INT(a2, x2);
    GValue* a3 = new GValue; memset(a3, 0, sizeof(GValue));
    gtk_tree_model_get_value(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        ,(gint)a2
        ,(GValue*)a3
        );
    word r3 = OBJECT_TO_WORD (a3, TYPE_BOXED | FLAG_OWN, G_TYPE_VALUE);
    RETURN1(r3);
} END
DEFINE2(Gtk_TreeModelgetPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    GtkTreePath* cres = (GtkTreePath*)gtk_tree_model_get_path(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GTK_TYPE_TREE_PATH);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModelgetIterFirst) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_model_get_iter_first(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModelgetIterRoot) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gboolean cres = (gboolean)gtk_tree_model_get_iter_first(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModelgetStringFromIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    gchar* cres = (gchar*)gtk_tree_model_get_string_from_iter(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE3(Gtk_TreeModelgetIterFromString) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_CSTRING(a2, x2);
    gboolean cres = (gboolean)gtk_tree_model_get_iter_from_string(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        ,(const gchar*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeModelgetIter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_ITER);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_tree_model_get_iter(
        (GtkTreeModel*)a0
        ,(GtkTreeIter*)a1
        ,(GtkTreePath*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeModelgetColumnType) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    DECLARE_INT(a1, x1);
    GType cres = (GType)gtk_tree_model_get_column_type(
        (GtkTreeModel*)a0
        ,(gint)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeModelgetNColumns) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    gint cres = (gint)gtk_tree_model_get_n_columns(
        (GtkTreeModel*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_TreeModelgetFlags) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_MODEL);
    GtkTreeModelFlags cres = (GtkTreeModelFlags)gtk_tree_model_get_flags(
        (GtkTreeModel*)a0
        );
    word res = GtkTreeModelFlagstToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeModelgetType) {
    GType cres = (GType)gtk_tree_model_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeDragSourcedragDataGet) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_DRAG_SOURCE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_SELECTION_DATA);
    gboolean cres = (gboolean)gtk_tree_drag_source_drag_data_get(
        (GtkTreeDragSource*)a0
        ,(GtkTreePath*)a1
        ,(GtkSelectionData*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeDragSourcedragDataDelete) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_DRAG_SOURCE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_tree_drag_source_drag_data_delete(
        (GtkTreeDragSource*)a0
        ,(GtkTreePath*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_TreeDragSourcerowDraggable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_DRAG_SOURCE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    gboolean cres = (gboolean)gtk_tree_drag_source_row_draggable(
        (GtkTreeDragSource*)a0
        ,(GtkTreePath*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeDragSourcegetType) {
    GType cres = (GType)gtk_tree_drag_source_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeDragDestrowDropPossible) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_DRAG_DEST);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_SELECTION_DATA);
    gboolean cres = (gboolean)gtk_tree_drag_dest_row_drop_possible(
        (GtkTreeDragDest*)a0
        ,(GtkTreePath*)a1
        ,(GtkSelectionData*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_TreeDragDestdragDataReceived) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_TREE_DRAG_DEST);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_TREE_PATH);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GTK_TYPE_SELECTION_DATA);
    gboolean cres = (gboolean)gtk_tree_drag_dest_drag_data_received(
        (GtkTreeDragDest*)a0
        ,(GtkTreePath*)a1
        ,(GtkSelectionData*)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_TreeDragDestgetType) {
    GType cres = (GType)gtk_tree_drag_dest_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetShowHidden) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gboolean cres = (gboolean)gtk_file_chooser_get_show_hidden(
        (GtkFileChooser*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetShowHidden) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_BOOL(a1, x1);
    gtk_file_chooser_set_show_hidden(
        (GtkFileChooser*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChooserlistShortcutFolderUris) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GSList* cres = (GSList*)gtk_file_chooser_list_shortcut_folder_uris(
        (GtkFileChooser*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooserremoveShortcutFolderUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    GError *tmp0 = 0; GError **a2 = &tmp0;
    gboolean cres = (gboolean)gtk_file_chooser_remove_shortcut_folder_uri(
        (GtkFileChooser*)a0
        ,(const char*)a1
        ,a2
        );
    word res = BOOL_TO_WORD(cres);
    if ((*a2) != NULL) {char message[strlen((*a2)->message)];g_error_free(*a2);RAISE_CORE_ERROR(message);}
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooseraddShortcutFolderUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    GError *tmp0 = 0; GError **a2 = &tmp0;
    gboolean cres = (gboolean)gtk_file_chooser_add_shortcut_folder_uri(
        (GtkFileChooser*)a0
        ,(const char*)a1
        ,a2
        );
    word res = BOOL_TO_WORD(cres);
    if ((*a2) != NULL) {char message[strlen((*a2)->message)];g_error_free(*a2);RAISE_CORE_ERROR(message);}
    RETURN1(res);
} END
DEFINE1(Gtk_FileChooserlistShortcutFolders) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GSList* cres = (GSList*)gtk_file_chooser_list_shortcut_folders(
        (GtkFileChooser*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooserremoveShortcutFolder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    GError *tmp0 = 0; GError **a2 = &tmp0;
    gboolean cres = (gboolean)gtk_file_chooser_remove_shortcut_folder(
        (GtkFileChooser*)a0
        ,(const char*)a1
        ,a2
        );
    word res = BOOL_TO_WORD(cres);
    if ((*a2) != NULL) {char message[strlen((*a2)->message)];g_error_free(*a2);RAISE_CORE_ERROR(message);}
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooseraddShortcutFolder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    GError *tmp0 = 0; GError **a2 = &tmp0;
    gboolean cres = (gboolean)gtk_file_chooser_add_shortcut_folder(
        (GtkFileChooser*)a0
        ,(const char*)a1
        ,a2
        );
    word res = BOOL_TO_WORD(cres);
    if ((*a2) != NULL) {char message[strlen((*a2)->message)];g_error_free(*a2);RAISE_CORE_ERROR(message);}
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetFilter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GtkFileFilter* cres = (GtkFileFilter*)gtk_file_chooser_get_filter(
        (GtkFileChooser*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetFilter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_FILE_FILTER);
    gtk_file_chooser_set_filter(
        (GtkFileChooser*)a0
        ,(GtkFileFilter*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChooserlistFilters) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GSList* cres = (GSList*)gtk_file_chooser_list_filters(
        (GtkFileChooser*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooserremoveFilter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_FILE_FILTER);
    gtk_file_chooser_remove_filter(
        (GtkFileChooser*)a0
        ,(GtkFileFilter*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_FileChooseraddFilter) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_FILE_FILTER);
    gtk_file_chooser_add_filter(
        (GtkFileChooser*)a0
        ,(GtkFileFilter*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChoosergetExtraWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GtkWidget* cres = (GtkWidget*)gtk_file_chooser_get_extra_widget(
        (GtkFileChooser*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetExtraWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_file_chooser_set_extra_widget(
        (GtkFileChooser*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChoosergetPreviewUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    char* cres = (char*)gtk_file_chooser_get_preview_uri(
        (GtkFileChooser*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetPreviewFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    char* cres = (char*)gtk_file_chooser_get_preview_filename(
        (GtkFileChooser*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetUsePreviewLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gboolean cres = (gboolean)gtk_file_chooser_get_use_preview_label(
        (GtkFileChooser*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetUsePreviewLabel) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_BOOL(a1, x1);
    gtk_file_chooser_set_use_preview_label(
        (GtkFileChooser*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChoosergetPreviewWidgetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gboolean cres = (gboolean)gtk_file_chooser_get_preview_widget_active(
        (GtkFileChooser*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetPreviewWidgetActive) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_BOOL(a1, x1);
    gtk_file_chooser_set_preview_widget_active(
        (GtkFileChooser*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChoosergetPreviewWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GtkWidget* cres = (GtkWidget*)gtk_file_chooser_get_preview_widget(
        (GtkFileChooser*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetPreviewWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    gtk_file_chooser_set_preview_widget(
        (GtkFileChooser*)a0
        ,(GtkWidget*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChoosergetCurrentFolderUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gchar* cres = (gchar*)gtk_file_chooser_get_current_folder_uri(
        (GtkFileChooser*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetCurrentFolderUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_file_chooser_set_current_folder_uri(
        (GtkFileChooser*)a0
        ,(const gchar*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetUris) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GSList* cres = (GSList*)gtk_file_chooser_get_uris(
        (GtkFileChooser*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChooserunselectUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gtk_file_chooser_unselect_uri(
        (GtkFileChooser*)a0
        ,(const char*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_FileChooserselectUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_file_chooser_select_uri(
        (GtkFileChooser*)a0
        ,(const char*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_file_chooser_set_uri(
        (GtkFileChooser*)a0
        ,(const char*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetUri) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gchar* cres = (gchar*)gtk_file_chooser_get_uri(
        (GtkFileChooser*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetCurrentFolder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gchar* cres = (gchar*)gtk_file_chooser_get_current_folder(
        (GtkFileChooser*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetCurrentFolder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_file_chooser_set_current_folder(
        (GtkFileChooser*)a0
        ,(const gchar*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetFilenames) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GSList* cres = (GSList*)gtk_file_chooser_get_filenames(
        (GtkFileChooser*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileChooserunselectAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gtk_file_chooser_unselect_all(
        (GtkFileChooser*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChooserselectAll) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gtk_file_chooser_select_all(
        (GtkFileChooser*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_FileChooserunselectFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gtk_file_chooser_unselect_filename(
        (GtkFileChooser*)a0
        ,(const char*)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_FileChooserselectFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_file_chooser_select_filename(
        (GtkFileChooser*)a0
        ,(const char*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gboolean cres = (gboolean)gtk_file_chooser_set_filename(
        (GtkFileChooser*)a0
        ,(const char*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_FileChoosergetFilename) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gchar* cres = (gchar*)gtk_file_chooser_get_filename(
        (GtkFileChooser*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetCurrentName) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_CSTRING(a1, x1);
    gtk_file_chooser_set_current_name(
        (GtkFileChooser*)a0
        ,(const gchar*)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChoosergetSelectMultiple) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gboolean cres = (gboolean)gtk_file_chooser_get_select_multiple(
        (GtkFileChooser*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetSelectMultiple) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_BOOL(a1, x1);
    gtk_file_chooser_set_select_multiple(
        (GtkFileChooser*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChoosergetLocalOnly) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    gboolean cres = (gboolean)gtk_file_chooser_get_local_only(
        (GtkFileChooser*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetLocalOnly) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    DECLARE_BOOL(a1, x1);
    gtk_file_chooser_set_local_only(
        (GtkFileChooser*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_FileChoosergetAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    GtkFileChooserAction cres = (GtkFileChooserAction)gtk_file_chooser_get_action(
        (GtkFileChooser*)a0
        );
    word res = GtkFileChooserActiontToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_FileChoosersetAction) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_FILE_CHOOSER);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkFileChooserAction a1 = GtkFileChooserActiontFromWord(x1);
    gtk_file_chooser_set_action(
        (GtkFileChooser*)a0
        ,(GtkFileChooserAction)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_FileChoosergetType) {
    GType cres = (GType)gtk_file_chooser_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_EditablegetEditable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    gboolean cres = (gboolean)gtk_editable_get_editable(
        (GtkEditable*)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EditablesetEditable) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    DECLARE_BOOL(a1, x1);
    gtk_editable_set_editable(
        (GtkEditable*)a0
        ,(gboolean)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EditablegetPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    gint cres = (gint)gtk_editable_get_position(
        (GtkEditable*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_EditablesetPosition) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    DECLARE_INT(a1, x1);
    gtk_editable_set_position(
        (GtkEditable*)a0
        ,(gint)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EditabledeleteSelection) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    gtk_editable_delete_selection(
        (GtkEditable*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EditablepasteClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    gtk_editable_paste_clipboard(
        (GtkEditable*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EditablecopyClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    gtk_editable_copy_clipboard(
        (GtkEditable*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_EditablecutClipboard) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    gtk_editable_cut_clipboard(
        (GtkEditable*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_EditablegetChars) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gchar* cres = (gchar*)gtk_editable_get_chars(
        (GtkEditable*)a0
        ,(gint)a1
        ,(gint)a2
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE3(Gtk_EditabledeleteText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_editable_delete_text(
        (GtkEditable*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_EditableinsertText) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    DECLARE_CSTRING(a1, x1);
    DECLARE_INT(a2, x2);
    DECLARE_INT_AS(gint, tmp0, x3);
               gint* a3 = (gint*)&tmp0;
    gtk_editable_insert_text(
        (GtkEditable*)a0
        ,(const gchar*)a1
        ,(gint)a2
        ,(gint*)a3
        );
    word r3 = Store::IntToWord(*a3);
    RETURN1(r3);
} END
DEFINE3(Gtk_EditablegetSelectionBounds) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    DECLARE_INT_AS(gint, tmp0, x1);
               gint* a1 = (gint*)&tmp0;
    DECLARE_INT_AS(gint, tmp1, x2);
               gint* a2 = (gint*)&tmp1;
    gboolean cres = (gboolean)gtk_editable_get_selection_bounds(
        (GtkEditable*)a0
        ,(gint*)a1
        ,(gint*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r1 = Store::IntToWord(*a1);
    word r2 = Store::IntToWord(*a2);
    RETURN3(res,r1,r2);
} END
DEFINE3(Gtk_EditableselectRegion) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_EDITABLE);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gtk_editable_select_region(
        (GtkEditable*)a0
        ,(gint)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_EditablegetType) {
    GType cres = (GType)gtk_editable_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_CellLayoutreorder) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    DECLARE_INT(a2, x2);
    gtk_cell_layout_reorder(
        (GtkCellLayout*)a0
        ,(GtkCellRenderer*)a1
        ,(gint)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_CellLayoutclearAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    gtk_cell_layout_clear_attributes(
        (GtkCellLayout*)a0
        ,(GtkCellRenderer*)a1
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_CellLayoutaddAttribute) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    DECLARE_CSTRING(a2, x2);
    DECLARE_INT(a3, x3);
    gtk_cell_layout_add_attribute(
        (GtkCellLayout*)a0
        ,(GtkCellRenderer*)a1
        ,(const gchar*)a2
        ,(gint)a3
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_CellLayoutsetAttributes) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    gtk_cell_layout_set_attributes(
        (GtkCellLayout*)a0
        ,(GtkCellRenderer*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CellLayoutclear) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_LAYOUT);
    gtk_cell_layout_clear(
        (GtkCellLayout*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_CellLayoutpackEnd) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    DECLARE_BOOL(a2, x2);
    gtk_cell_layout_pack_end(
        (GtkCellLayout*)a0
        ,(GtkCellRenderer*)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_CellLayoutpackStart) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_LAYOUT);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_CELL_RENDERER);
    DECLARE_BOOL(a2, x2);
    gtk_cell_layout_pack_start(
        (GtkCellLayout*)a0
        ,(GtkCellRenderer*)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_CellLayoutgetType) {
    GType cres = (GType)gtk_cell_layout_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_CellEditableremoveWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_EDITABLE);
    gtk_cell_editable_remove_widget(
        (GtkCellEditable*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_CellEditableeditingDone) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_EDITABLE);
    gtk_cell_editable_editing_done(
        (GtkCellEditable*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_CellEditablestartEditing) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_CELL_EDITABLE);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_EVENT);
    gtk_cell_editable_start_editing(
        (GtkCellEditable*)a0
        ,(GdkEvent*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_CellEditablegetType) {
    GType cres = (GType)gtk_cell_editable_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_QuitremoveByData) {
    DECLARE_OBJECT(a0, x0);
    gtk_quit_remove_by_data(
        (gpointer)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Quitremove) {
    DECLARE_INT(a0, x0);
    gtk_quit_remove(
        (guint)a0
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_QuitaddFull) {
    DECLARE_INT(a0, x0);
    DECLARE_OBJECT (a1, x1);
    DECLARE_OBJECT (a2, x2);
    DECLARE_OBJECT(a3, x3);
    DECLARE_OBJECT (a4, x4);
    guint cres = (guint)gtk_quit_add_full(
        (guint)a0
        ,(GtkFunction)a1
        ,(GtkCallbackMarshal)a2
        ,(gpointer)a3
        ,(GtkDestroyNotify)a4
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_Quitadd) {
    DECLARE_INT(a0, x0);
    DECLARE_OBJECT (a1, x1);
    DECLARE_OBJECT(a2, x2);
    guint cres = (guint)gtk_quit_add(
        (guint)a0
        ,(GtkFunction)a1
        ,(gpointer)a2
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_QuitaddDestroy) {
    DECLARE_INT(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_OBJECT);
    gtk_quit_add_destroy(
        (guint)a0
        ,(GtkObject*)a1
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_AccelmapGet) {
    GtkAccelMap* cres = (GtkAccelMap*)gtk_accel_map_get(
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE0(Gtk_AccelmapGetType) {
    GType cres = (GType)gtk_accel_map_get_type(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_AccelmapForeachUnfiltered) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_OBJECT (a1, x1);
    gtk_accel_map_foreach_unfiltered(
        (gpointer)a0
        ,(GtkAccelMapForeach)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelmapAddFilter) {
    DECLARE_CSTRING(a0, x0);
    gtk_accel_map_add_filter(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelmapUnlockPath) {
    DECLARE_CSTRING(a0, x0);
    gtk_accel_map_unlock_path(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelmapLockPath) {
    DECLARE_CSTRING(a0, x0);
    gtk_accel_map_lock_path(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelmapSaveFd) {
    DECLARE_INT(a0, x0);
    gtk_accel_map_save_fd(
        (gint)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelmapLoadScanner) {
    DECLARE_OBJECT (a0, x0);
    gtk_accel_map_load_scanner(
        (GScanner*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelmapLoadFd) {
    DECLARE_INT(a0, x0);
    gtk_accel_map_load_fd(
        (gint)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_AccelmapForeach) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_OBJECT (a1, x1);
    gtk_accel_map_foreach(
        (gpointer)a0
        ,(GtkAccelMapForeach)a1
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelmapSave) {
    DECLARE_CSTRING(a0, x0);
    gtk_accel_map_save(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelmapLoad) {
    DECLARE_CSTRING(a0, x0);
    gtk_accel_map_load(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_AccelmapChangeEntry) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    DECLARE_BOOL(a3, x3);
    gboolean cres = (gboolean)gtk_accel_map_change_entry(
        (const gchar*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        ,(gboolean)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_AccelmapLookupEntry) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_accel_map_lookup_entry(
        (const gchar*)a0
        ,(GtkAccelKey*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_AccelmapAddEntry) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    gtk_accel_map_add_entry(
        (const gchar*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_AccelgroupsFromObject) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, G_TYPE_OBJECT);
    GSList* cres = (GSList*)gtk_accel_groups_from_object(
        (GObject*)a0
        );
    word res = GSLIST_OBJECT_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_AccelgroupsActivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, G_TYPE_OBJECT);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    gboolean cres = (gboolean)gtk_accel_groups_activate(
        (GObject*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE2(Gtk_Initadd) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT(a1, x1);
    gtk_init_add(
        (GtkFunction)a0
        ,(gpointer)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Initcheck) {
    DECLARE_INT_AS(int, tmp0, x0);
               int* a0 = (int*)&tmp0;
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_init_check(
        (int*)a0
        ,(char***)a1
        );
    word res = BOOL_TO_WORD(cres);
    word r0 = Store::IntToWord(*a0);
    RETURN2(res,r0);
} END
DEFINE3(Gtk_Checkversion) {
    DECLARE_INT(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_INT(a2, x2);
    gchar* cres = (gchar*)gtk_check_version(
        (guint)a0
        ,(guint)a1
        ,(guint)a2
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_KeysnooperRemove) {
    DECLARE_INT(a0, x0);
    gtk_key_snooper_remove(
        (guint)a0
        );
    RETURN_UNIT;
} END
DEFINE7(Gtk_DrawinsertionCursor) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WIDGET);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_DRAWABLE);
    DECLARE_OBJECT_OF_TYPE(a2, x2, GDK_TYPE_RECTANGLE);
    DECLARE_OBJECT_OF_TYPE(a3, x3, GDK_TYPE_RECTANGLE);
    DECLARE_BOOL(a4, x4);
    if (Store::WordToInt(x5) == INVALID_INT) {REQUEST(x5);}
GtkTextDirection a5 = GtkTextDirectiontFromWord(x5);
    DECLARE_BOOL(a6, x6);
    gtk_draw_insertion_cursor(
        (GtkWidget*)a0
        ,(GdkDrawable*)a1
        ,(GdkRectangle*)a2
        ,(GdkRectangle*)a3
        ,(gboolean)a4
        ,(GtkTextDirection)a5
        ,(gboolean)a6
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Inputremove) {
    DECLARE_INT(a0, x0);
    gtk_input_remove(
        (guint)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Timeoutremove) {
    DECLARE_INT(a0, x0);
    gtk_timeout_remove(
        (guint)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_MainiterationDo) {
    DECLARE_BOOL(a0, x0);
    gboolean cres = (gboolean)gtk_main_iteration_do(
        (gboolean)a0
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Mainiteration) {
    gboolean cres = (gboolean)gtk_main_iteration(
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_Mainquit) {
    gtk_main_quit(
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_Mainlevel) {
    guint cres = (guint)gtk_main_level(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_MaindoEvent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_EVENT);
    gtk_main_do_event(
        (GdkEvent*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_IdleremoveByData) {
    DECLARE_OBJECT(a0, x0);
    gtk_idle_remove_by_data(
        (gpointer)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Idleremove) {
    DECLARE_INT(a0, x0);
    gtk_idle_remove(
        (guint)a0
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_Eventspending) {
    gint cres = (gint)gtk_events_pending(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_GCrelease) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_GC);
    gtk_gc_release(
        (GdkGC*)a0
        );
    RETURN_UNIT;
} END
DEFINE4(Gtk_GCget) {
    DECLARE_INT(a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLORMAP);
    DECLARE_OBJECT (a2, x2);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x3, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x3);}
});
GdkGCValuesMask a3 = GdkGCValuesMasktFromWord(x3);
    GdkGC* cres = (GdkGC*)gtk_gc_get(
        (gint)a0
        ,(GdkColormap*)a1
        ,(GdkGCValues*)a2
        ,(GdkGCValuesMask)a3
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_BindingsactivateEvent) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OBJECT);
    DECLARE_OBJECT (a1, x1);
    gboolean cres = (gboolean)gtk_bindings_activate_event(
        (GtkObject*)a0
        ,(GdkEventKey*)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE3(Gtk_Bindingsactivate) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_OBJECT);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    gboolean cres = (gboolean)gtk_bindings_activate(
        (GtkObject*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_BindingparseBinding) {
    DECLARE_OBJECT (a0, x0);
    guint cres = (guint)gtk_binding_parse_binding(
        (GScanner*)a0
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE5(Gtk_BindingentryAddSignall) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    DECLARE_CSTRING(a3, x3);
    DECLARE_GSLIST(a4, x4, DECLARE_OBJECT);
    gtk_binding_entry_add_signall(
        (GtkBindingSet*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        ,(const gchar*)a3
        ,(GSList*)a4
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_BindingentryRemove) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    gtk_binding_entry_remove(
        (GtkBindingSet*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        );
    RETURN_UNIT;
} END
DEFINE5(Gtk_BindingentryAddSignal) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    DECLARE_CSTRING(a3, x3);
    DECLARE_INT(a4, x4);
    gtk_binding_entry_add_signal(
        (GtkBindingSet*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        ,(const gchar*)a3
        ,(guint)a4
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_BindingentryClear) {
    DECLARE_OBJECT(a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x2, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType a2 = GdkModifierTypetFromWord(x2);
    gtk_binding_entry_clear(
        (GtkBindingSet*)a0
        ,(guint)a1
        ,(GdkModifierType)a2
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_GrabgetCurrent) {
    GtkWidget* cres = (GtkWidget*)gtk_grab_get_current(
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE2(Gtk_RcpropertyParseBorder) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT (a1, x1);
    GValue* a2 = new GValue; memset(a2, 0, sizeof(GValue));
    gboolean cres = (gboolean)gtk_rc_property_parse_border(
        (const GParamSpec*)a0
        ,(const GString*)a1
        ,(GValue*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r2 = OBJECT_TO_WORD (a2, TYPE_BOXED | FLAG_OWN, G_TYPE_VALUE);
    RETURN2(res,r2);
} END
DEFINE2(Gtk_RcpropertyParseRequisition) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT (a1, x1);
    GValue* a2 = new GValue; memset(a2, 0, sizeof(GValue));
    gboolean cres = (gboolean)gtk_rc_property_parse_requisition(
        (const GParamSpec*)a0
        ,(const GString*)a1
        ,(GValue*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r2 = OBJECT_TO_WORD (a2, TYPE_BOXED | FLAG_OWN, G_TYPE_VALUE);
    RETURN2(res,r2);
} END
DEFINE2(Gtk_RcpropertyParseFlags) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT (a1, x1);
    GValue* a2 = new GValue; memset(a2, 0, sizeof(GValue));
    gboolean cres = (gboolean)gtk_rc_property_parse_flags(
        (const GParamSpec*)a0
        ,(const GString*)a1
        ,(GValue*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r2 = OBJECT_TO_WORD (a2, TYPE_BOXED | FLAG_OWN, G_TYPE_VALUE);
    RETURN2(res,r2);
} END
DEFINE2(Gtk_RcpropertyParseEnum) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT (a1, x1);
    GValue* a2 = new GValue; memset(a2, 0, sizeof(GValue));
    gboolean cres = (gboolean)gtk_rc_property_parse_enum(
        (const GParamSpec*)a0
        ,(const GString*)a1
        ,(GValue*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r2 = OBJECT_TO_WORD (a2, TYPE_BOXED | FLAG_OWN, G_TYPE_VALUE);
    RETURN2(res,r2);
} END
DEFINE2(Gtk_RcpropertyParseColor) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT (a1, x1);
    GValue* a2 = new GValue; memset(a2, 0, sizeof(GValue));
    gboolean cres = (gboolean)gtk_rc_property_parse_color(
        (const GParamSpec*)a0
        ,(const GString*)a1
        ,(GValue*)a2
        );
    word res = BOOL_TO_WORD(cres);
    word r2 = OBJECT_TO_WORD (a2, TYPE_BOXED | FLAG_OWN, G_TYPE_VALUE);
    RETURN2(res,r2);
} END
DEFINE2(Gtk_RcparsePriority) {
    DECLARE_OBJECT (a0, x0);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkPathPriorityType tmp0 = GtkPathPriorityTypetFromWord(x1);GtkPathPriorityType *a1 = &tmp0;
    guint cres = (guint)gtk_rc_parse_priority(
        (GScanner*)a0
        ,(GtkPathPriorityType*)a1
        );
    word res = Store::IntToWord(cres);
    word r1 = GtkPathPriorityTypetToWord(*a1);
    RETURN2(res,r1);
} END
DEFINE2(Gtk_RcparseState) {
    DECLARE_OBJECT (a0, x0);
    if (Store::WordToInt(x1) == INVALID_INT) {REQUEST(x1);}
GtkStateType tmp0 = GtkStateTypetFromWord(x1);GtkStateType *a1 = &tmp0;
    guint cres = (guint)gtk_rc_parse_state(
        (GScanner*)a0
        ,(GtkStateType*)a1
        );
    word res = Store::IntToWord(cres);
    word r1 = GtkStateTypetToWord(*a1);
    RETURN2(res,r1);
} END
DEFINE2(Gtk_RcparseColor) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GDK_TYPE_COLOR);
    guint cres = (guint)gtk_rc_parse_color(
        (GScanner*)a0
        ,(GdkColor*)a1
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_RcgetIMModuleFile) {
    gchar* cres = (gchar*)gtk_rc_get_im_module_file(
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_RcgetIMModulePath) {
    gchar* cres = (gchar*)gtk_rc_get_im_module_path(
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_RcgetModuleDir) {
    gchar* cres = (gchar*)gtk_rc_get_module_dir(
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_RcgetThemeDir) {
    gchar* cres = (gchar*)gtk_rc_get_theme_dir(
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_RcfindModuleInPath) {
    DECLARE_CSTRING(a0, x0);
    gchar* cres = (gchar*)gtk_rc_find_module_in_path(
        (const gchar*)a0
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_RcreparseAll) {
    gboolean cres = (gboolean)gtk_rc_reparse_all(
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_RcparseString) {
    DECLARE_CSTRING(a0, x0);
    gtk_rc_parse_string(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_Rcparse) {
    DECLARE_CSTRING(a0, x0);
    gtk_rc_parse(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_RcfindPixmapInPath) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SETTINGS);
    DECLARE_OBJECT (a1, x1);
    DECLARE_CSTRING(a2, x2);
    gchar* cres = (gchar*)gtk_rc_find_pixmap_in_path(
        (GtkSettings*)a0
        ,(GScanner*)a1
        ,(const gchar*)a2
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE1(Gtk_RcresetStyles) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SETTINGS);
    gtk_rc_reset_styles(
        (GtkSettings*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_RcreparseAllForSettings) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SETTINGS);
    DECLARE_BOOL(a1, x1);
    gboolean cres = (gboolean)gtk_rc_reparse_all_for_settings(
        (GtkSettings*)a0
        ,(gboolean)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE4(Gtk_RcgetStyleByPaths) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_SETTINGS);
    DECLARE_CSTRING(a1, x1);
    DECLARE_CSTRING(a2, x2);
    DECLARE_INT(a3, x3);
    GtkStyle* cres = (GtkStyle*)gtk_rc_get_style_by_paths(
        (GtkSettings*)a0
        ,(const char*)a1
        ,(const char*)a2
        ,(GType)a3
        );
    word res = OBJECT_TO_WORD(cres,TYPE_G_OBJECT);
    RETURN1(res);
} END
DEFINE0(Gtk_RcgetDefaultFiles) {
    gchar** cres = (gchar**)gtk_rc_get_default_files(
        );
    word res = OBJECT_TO_WORD (cres);
    RETURN1(res);
} END
DEFINE1(Gtk_RcsetDefaultFiles) {
    DECLARE_ZERO_TERMINATED_ARRAY(a0, x0, gchar*, DECLARE_CSTRING(elem_c, elem_alice));
    gtk_rc_set_default_files(
        (gchar**)a0
        );
    RETURN_UNIT;
} END
DEFINE1(Gtk_RcaddDefaultFile) {
    DECLARE_CSTRING(a0, x0);
    gtk_rc_add_default_file(
        (const gchar*)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_ShowaboutDialog) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GTK_TYPE_WINDOW);
    DECLARE_CSTRING(a1, x1);
    gtk_show_about_dialog(
        (GtkWindow*)a0
        ,(const gchar*)a1
        , NULL
        );
    RETURN_UNIT;
} END
DEFINE0(Gtk_Setlocale) {
    gchar* cres = (gchar*)gtk_set_locale(
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_Disablesetlocale) {
    gtk_disable_setlocale(
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TargetlistAddUriTargets) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_INT(a1, x1);
    gtk_target_list_add_uri_targets(
        (GtkTargetList*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE3(Gtk_TargetlistAddImageTargets) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_INT(a1, x1);
    DECLARE_BOOL(a2, x2);
    gtk_target_list_add_image_targets(
        (GtkTargetList*)a0
        ,(guint)a1
        ,(gboolean)a2
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_TargetlistAddTextTargets) {
    DECLARE_OBJECT (a0, x0);
    DECLARE_INT(a1, x1);
    gtk_target_list_add_text_targets(
        (GtkTargetList*)a0
        ,(guint)a1
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_AcceleratorgetLabel) {
    DECLARE_INT(a0, x0);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GdkModifierType a1 = GdkModifierTypetFromWord(x1);
    gchar* cres = (gchar*)gtk_accelerator_get_label(
        (guint)a0
        ,(GdkModifierType)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE0(Gtk_AcceleratorgetDefaultModMask) {
    guint cres = (guint)gtk_accelerator_get_default_mod_mask(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_AcceleratorsetDefaultModMask) {
    DECLARE_LIST_ELEMS(tmp0, tmp1, x0, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x0);}
});
GdkModifierType a0 = GdkModifierTypetFromWord(x0);
    gtk_accelerator_set_default_mod_mask(
        (GdkModifierType)a0
        );
    RETURN_UNIT;
} END
DEFINE2(Gtk_Acceleratorname) {
    DECLARE_INT(a0, x0);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GdkModifierType a1 = GdkModifierTypetFromWord(x1);
    gchar* cres = (gchar*)gtk_accelerator_name(
        (guint)a0
        ,(GdkModifierType)a1
        );
    word res = String::New (cres != 0 ? cres : empty_str)->ToWord ();
    RETURN1(res);
} END
DEFINE3(Gtk_Acceleratorparse) {
    DECLARE_CSTRING(a0, x0);
    DECLARE_INT_AS(guint, tmp0, x1);
               int* a1 = (int*)&tmp0;
    DECLARE_LIST_ELEMS(tmp1, tmp2, x2, 
{ if (Store::WordToInt(tmp1->Sel(0)) == INVALID_INT)
{REQUEST(x2);}
});
GdkModifierType tmp3 = GdkModifierTypetFromWord(x2);GdkModifierType *a2 = &tmp3;
    gtk_accelerator_parse(
        (const gchar*)a0
        ,(guint*)a1
        ,(GdkModifierType*)a2
        );
    word r1 = Store::IntToWord(*a1);
    word r2 = GdkModifierTypetToWord(*a2);
    RETURN2(r1,r2);
} END
DEFINE2(Gtk_Acceleratorvalid) {
    DECLARE_INT(a0, x0);
    DECLARE_LIST_ELEMS(tmp0, tmp1, x1, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x1);}
});
GdkModifierType a1 = GdkModifierTypetFromWord(x1);
    gboolean cres = (gboolean)gtk_accelerator_valid(
        (guint)a0
        ,(GdkModifierType)a1
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
DEFINE1(Gtk_GeteventWidget) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_EVENT);
    GtkWidget* cres = (GtkWidget*)gtk_get_event_widget(
        (GdkEvent*)a0
        );
    word res = OBJECT_TO_WORD(cres,TYPE_GTK_OBJECT);
    RETURN1(res);
} END
DEFINE1(Gtk_GetcurrentEventState) {
    DECLARE_LIST_ELEMS(tmp0, tmp1, x0, 
{ if (Store::WordToInt(tmp0->Sel(0)) == INVALID_INT)
{REQUEST(x0);}
});
GdkModifierType tmp2 = GdkModifierTypetFromWord(x0);GdkModifierType *a0 = &tmp2;
    gboolean cres = (gboolean)gtk_get_current_event_state(
        (GdkModifierType*)a0
        );
    word res = BOOL_TO_WORD(cres);
    word r0 = GdkModifierTypetToWord(*a0);
    RETURN2(res,r0);
} END
DEFINE0(Gtk_GetcurrentEventTime) {
    guint32 cres = (guint32)gtk_get_current_event_time(
        );
    word res = Store::IntToWord(cres);
    RETURN1(res);
} END
DEFINE0(Gtk_GetcurrentEvent) {
    GdkEvent* cres = (GdkEvent*)gtk_get_current_event(
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, GDK_TYPE_EVENT);
    RETURN1(res);
} END
DEFINE0(Gtk_GetdefaultLanguage) {
    PangoLanguage* cres = (PangoLanguage*)gtk_get_default_language(
        );
    word res = OBJECT_TO_WORD (cres, TYPE_BOXED, PANGO_TYPE_LANGUAGE);
    RETURN1(res);
} END
DEFINE4(Gtk_SelectionownerSetForDisplay) {
    DECLARE_OBJECT_OF_TYPE(a0, x0, GDK_TYPE_DISPLAY);
    DECLARE_OBJECT_OF_TYPE(a1, x1, GTK_TYPE_WIDGET);
    DECLARE_WORD32(tmp0, x2); GdkAtom a2 = (GdkAtom)tmp0;
    DECLARE_INT(a3, x3);
    gboolean cres = (gboolean)gtk_selection_owner_set_for_display(
        (GdkDisplay*)a0
        ,(GtkWidget*)a1
        ,(GdkAtom)a2
        ,(guint32)a3
        );
    word res = BOOL_TO_WORD(cres);
    RETURN1(res);
} END
word NativeGtk_CreateComponent() {
    Record *record = Record::New ((unsigned)2634);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionownerSetForDisplay",Gtk_SelectionownerSetForDisplay, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GetdefaultLanguage",Gtk_GetdefaultLanguage, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GetcurrentEvent",Gtk_GetcurrentEvent, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GetcurrentEventTime",Gtk_GetcurrentEventTime, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GetcurrentEventState",Gtk_GetcurrentEventState, 1, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GeteventWidget",Gtk_GeteventWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Acceleratorvalid",Gtk_Acceleratorvalid, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Acceleratorparse",Gtk_Acceleratorparse, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Acceleratorname",Gtk_Acceleratorname, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AcceleratorsetDefaultModMask",Gtk_AcceleratorsetDefaultModMask, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AcceleratorgetDefaultModMask",Gtk_AcceleratorgetDefaultModMask, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AcceleratorgetLabel",Gtk_AcceleratorgetLabel, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetlistAddTextTargets",Gtk_TargetlistAddTextTargets, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetlistAddImageTargets",Gtk_TargetlistAddImageTargets, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetlistAddUriTargets",Gtk_TargetlistAddUriTargets, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Disablesetlocale",Gtk_Disablesetlocale, 0, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Setlocale",Gtk_Setlocale, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ShowaboutDialog",Gtk_ShowaboutDialog, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcaddDefaultFile",Gtk_RcaddDefaultFile, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcsetDefaultFiles",Gtk_RcsetDefaultFiles, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcgetDefaultFiles",Gtk_RcgetDefaultFiles, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcgetStyleByPaths",Gtk_RcgetStyleByPaths, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcreparseAllForSettings",Gtk_RcreparseAllForSettings, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcresetStyles",Gtk_RcresetStyles, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcfindPixmapInPath",Gtk_RcfindPixmapInPath, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Rcparse",Gtk_Rcparse, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcparseString",Gtk_RcparseString, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcreparseAll",Gtk_RcreparseAll, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcfindModuleInPath",Gtk_RcfindModuleInPath, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcgetThemeDir",Gtk_RcgetThemeDir, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcgetModuleDir",Gtk_RcgetModuleDir, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcgetIMModulePath",Gtk_RcgetIMModulePath, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcgetIMModuleFile",Gtk_RcgetIMModuleFile, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcparseColor",Gtk_RcparseColor, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcparseState",Gtk_RcparseState, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcparsePriority",Gtk_RcparsePriority, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcpropertyParseColor",Gtk_RcpropertyParseColor, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcpropertyParseEnum",Gtk_RcpropertyParseEnum, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcpropertyParseFlags",Gtk_RcpropertyParseFlags, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcpropertyParseRequisition",Gtk_RcpropertyParseRequisition, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcpropertyParseBorder",Gtk_RcpropertyParseBorder, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GrabgetCurrent",Gtk_GrabgetCurrent, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingentryClear",Gtk_BindingentryClear, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingentryAddSignal",Gtk_BindingentryAddSignal, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingentryRemove",Gtk_BindingentryRemove, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingentryAddSignall",Gtk_BindingentryAddSignall, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingparseBinding",Gtk_BindingparseBinding, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Bindingsactivate",Gtk_Bindingsactivate, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingsactivateEvent",Gtk_BindingsactivateEvent, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GCget",Gtk_GCget, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GCrelease",Gtk_GCrelease, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Eventspending",Gtk_Eventspending, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Idleremove",Gtk_Idleremove, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IdleremoveByData",Gtk_IdleremoveByData, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MaindoEvent",Gtk_MaindoEvent, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Mainlevel",Gtk_Mainlevel, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Mainquit",Gtk_Mainquit, 0, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Mainiteration",Gtk_Mainiteration, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MainiterationDo",Gtk_MainiterationDo, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Timeoutremove",Gtk_Timeoutremove, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Inputremove",Gtk_Inputremove, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DrawinsertionCursor",Gtk_DrawinsertionCursor, 7, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "KeysnooperRemove",Gtk_KeysnooperRemove, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Checkversion",Gtk_Checkversion, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Initcheck",Gtk_Initcheck, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Initadd",Gtk_Initadd, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelgroupsActivate",Gtk_AccelgroupsActivate, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelgroupsFromObject",Gtk_AccelgroupsFromObject, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapAddEntry",Gtk_AccelmapAddEntry, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapLookupEntry",Gtk_AccelmapLookupEntry, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapChangeEntry",Gtk_AccelmapChangeEntry, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapLoad",Gtk_AccelmapLoad, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapSave",Gtk_AccelmapSave, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapForeach",Gtk_AccelmapForeach, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapLoadFd",Gtk_AccelmapLoadFd, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapLoadScanner",Gtk_AccelmapLoadScanner, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapSaveFd",Gtk_AccelmapSaveFd, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapLockPath",Gtk_AccelmapLockPath, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapUnlockPath",Gtk_AccelmapUnlockPath, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapAddFilter",Gtk_AccelmapAddFilter, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapForeachUnfiltered",Gtk_AccelmapForeachUnfiltered, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapGetType",Gtk_AccelmapGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelmapGet",Gtk_AccelmapGet, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "QuitaddDestroy",Gtk_QuitaddDestroy, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Quitadd",Gtk_Quitadd, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "QuitaddFull",Gtk_QuitaddFull, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Quitremove",Gtk_Quitremove, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "QuitremoveByData",Gtk_QuitremoveByData, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellEditablegetType",Gtk_CellEditablegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellEditablestartEditing",Gtk_CellEditablestartEditing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellEditableeditingDone",Gtk_CellEditableeditingDone, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellEditableremoveWidget",Gtk_CellEditableremoveWidget, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellLayoutgetType",Gtk_CellLayoutgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellLayoutpackStart",Gtk_CellLayoutpackStart, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellLayoutpackEnd",Gtk_CellLayoutpackEnd, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellLayoutclear",Gtk_CellLayoutclear, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellLayoutsetAttributes",Gtk_CellLayoutsetAttributes, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellLayoutaddAttribute",Gtk_CellLayoutaddAttribute, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellLayoutclearAttributes",Gtk_CellLayoutclearAttributes, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellLayoutreorder",Gtk_CellLayoutreorder, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablegetType",Gtk_EditablegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditableselectRegion",Gtk_EditableselectRegion, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablegetSelectionBounds",Gtk_EditablegetSelectionBounds, 3, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditableinsertText",Gtk_EditableinsertText, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditabledeleteText",Gtk_EditabledeleteText, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablegetChars",Gtk_EditablegetChars, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablecutClipboard",Gtk_EditablecutClipboard, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablecopyClipboard",Gtk_EditablecopyClipboard, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablepasteClipboard",Gtk_EditablepasteClipboard, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditabledeleteSelection",Gtk_EditabledeleteSelection, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablesetPosition",Gtk_EditablesetPosition, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablegetPosition",Gtk_EditablegetPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablesetEditable",Gtk_EditablesetEditable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EditablegetEditable",Gtk_EditablegetEditable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetType",Gtk_FileChoosergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetAction",Gtk_FileChoosersetAction, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetAction",Gtk_FileChoosergetAction, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetLocalOnly",Gtk_FileChoosersetLocalOnly, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetLocalOnly",Gtk_FileChoosergetLocalOnly, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetSelectMultiple",Gtk_FileChoosersetSelectMultiple, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetSelectMultiple",Gtk_FileChoosergetSelectMultiple, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetCurrentName",Gtk_FileChoosersetCurrentName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetFilename",Gtk_FileChoosergetFilename, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetFilename",Gtk_FileChoosersetFilename, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserselectFilename",Gtk_FileChooserselectFilename, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserunselectFilename",Gtk_FileChooserunselectFilename, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserselectAll",Gtk_FileChooserselectAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserunselectAll",Gtk_FileChooserunselectAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetFilenames",Gtk_FileChoosergetFilenames, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetCurrentFolder",Gtk_FileChoosersetCurrentFolder, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetCurrentFolder",Gtk_FileChoosergetCurrentFolder, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetUri",Gtk_FileChoosergetUri, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetUri",Gtk_FileChoosersetUri, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserselectUri",Gtk_FileChooserselectUri, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserunselectUri",Gtk_FileChooserunselectUri, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetUris",Gtk_FileChoosergetUris, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetCurrentFolderUri",Gtk_FileChoosersetCurrentFolderUri, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetCurrentFolderUri",Gtk_FileChoosergetCurrentFolderUri, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetPreviewWidget",Gtk_FileChoosersetPreviewWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetPreviewWidget",Gtk_FileChoosergetPreviewWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetPreviewWidgetActive",Gtk_FileChoosersetPreviewWidgetActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetPreviewWidgetActive",Gtk_FileChoosergetPreviewWidgetActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetUsePreviewLabel",Gtk_FileChoosersetUsePreviewLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetUsePreviewLabel",Gtk_FileChoosergetUsePreviewLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetPreviewFilename",Gtk_FileChoosergetPreviewFilename, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetPreviewUri",Gtk_FileChoosergetPreviewUri, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetExtraWidget",Gtk_FileChoosersetExtraWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetExtraWidget",Gtk_FileChoosergetExtraWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooseraddFilter",Gtk_FileChooseraddFilter, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserremoveFilter",Gtk_FileChooserremoveFilter, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserlistFilters",Gtk_FileChooserlistFilters, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetFilter",Gtk_FileChoosersetFilter, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetFilter",Gtk_FileChoosergetFilter, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooseraddShortcutFolder",Gtk_FileChooseraddShortcutFolder, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserremoveShortcutFolder",Gtk_FileChooserremoveShortcutFolder, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserlistShortcutFolders",Gtk_FileChooserlistShortcutFolders, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooseraddShortcutFolderUri",Gtk_FileChooseraddShortcutFolderUri, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserremoveShortcutFolderUri",Gtk_FileChooserremoveShortcutFolderUri, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserlistShortcutFolderUris",Gtk_FileChooserlistShortcutFolderUris, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosersetShowHidden",Gtk_FileChoosersetShowHidden, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChoosergetShowHidden",Gtk_FileChoosergetShowHidden, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeDragDestgetType",Gtk_TreeDragDestgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeDragDestdragDataReceived",Gtk_TreeDragDestdragDataReceived, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeDragDestrowDropPossible",Gtk_TreeDragDestrowDropPossible, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeDragSourcegetType",Gtk_TreeDragSourcegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeDragSourcerowDraggable",Gtk_TreeDragSourcerowDraggable, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeDragSourcedragDataDelete",Gtk_TreeDragSourcedragDataDelete, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeDragSourcedragDataGet",Gtk_TreeDragSourcedragDataGet, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetType",Gtk_TreeModelgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetFlags",Gtk_TreeModelgetFlags, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetNColumns",Gtk_TreeModelgetNColumns, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetColumnType",Gtk_TreeModelgetColumnType, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetIter",Gtk_TreeModelgetIter, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetIterFromString",Gtk_TreeModelgetIterFromString, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetStringFromIter",Gtk_TreeModelgetStringFromIter, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetIterRoot",Gtk_TreeModelgetIterRoot, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetIterFirst",Gtk_TreeModelgetIterFirst, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetPath",Gtk_TreeModelgetPath, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelgetValue",Gtk_TreeModelgetValue, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModeliterNext",Gtk_TreeModeliterNext, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModeliterChildren",Gtk_TreeModeliterChildren, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModeliterHasChild",Gtk_TreeModeliterHasChild, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModeliterNChildren",Gtk_TreeModeliterNChildren, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModeliterNthChild",Gtk_TreeModeliterNthChild, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModeliterParent",Gtk_TreeModeliterParent, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelrefNode",Gtk_TreeModelrefNode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelunrefNode",Gtk_TreeModelunrefNode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelget",Gtk_TreeModelget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelrowChanged",Gtk_TreeModelrowChanged, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelrowInserted",Gtk_TreeModelrowInserted, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelrowHasChildToggled",Gtk_TreeModelrowHasChildToggled, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelrowDeleted",Gtk_TreeModelrowDeleted, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelrowsReordered",Gtk_TreeModelrowsReordered, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelfilterNew",Gtk_TreeModelfilterNew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSortablegetType",Gtk_TreeSortablegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSortablesortColumnChanged",Gtk_TreeSortablesortColumnChanged, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSortablegetSortColumnId",Gtk_TreeSortablegetSortColumnId, 3, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSortablesetSortColumnId",Gtk_TreeSortablesetSortColumnId, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSortablehasDefaultSortFunc",Gtk_TreeSortablehasDefaultSortFunc, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetType",Gtk_AboutDialoggetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetName",Gtk_AboutDialoggetName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetName",Gtk_AboutDialogsetName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetVersion",Gtk_AboutDialoggetVersion, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetVersion",Gtk_AboutDialogsetVersion, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetCopyright",Gtk_AboutDialoggetCopyright, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetCopyright",Gtk_AboutDialogsetCopyright, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetComments",Gtk_AboutDialoggetComments, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetComments",Gtk_AboutDialogsetComments, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetLicense",Gtk_AboutDialoggetLicense, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetLicense",Gtk_AboutDialogsetLicense, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetWebsite",Gtk_AboutDialoggetWebsite, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetWebsite",Gtk_AboutDialogsetWebsite, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetWebsiteLabel",Gtk_AboutDialoggetWebsiteLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetWebsiteLabel",Gtk_AboutDialogsetWebsiteLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetAuthors",Gtk_AboutDialoggetAuthors, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetAuthors",Gtk_AboutDialogsetAuthors, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetDocumenters",Gtk_AboutDialoggetDocumenters, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetDocumenters",Gtk_AboutDialogsetDocumenters, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetArtists",Gtk_AboutDialoggetArtists, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetArtists",Gtk_AboutDialogsetArtists, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetTranslatorCredits",Gtk_AboutDialoggetTranslatorCredits, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetTranslatorCredits",Gtk_AboutDialogsetTranslatorCredits, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetLogo",Gtk_AboutDialoggetLogo, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetLogo",Gtk_AboutDialogsetLogo, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialoggetLogoIconName",Gtk_AboutDialoggetLogoIconName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialogsetLogoIconName",Gtk_AboutDialogsetLogoIconName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AboutDialognew",Gtk_AboutDialognew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupgetType",Gtk_AccelGroupgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGrouplock",Gtk_AccelGrouplock, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupunlock",Gtk_AccelGroupunlock, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupconnect",Gtk_AccelGroupconnect, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupconnectByPath",Gtk_AccelGroupconnectByPath, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupdisconnect",Gtk_AccelGroupdisconnect, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupdisconnectKey",Gtk_AccelGroupdisconnectKey, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupactivate",Gtk_AccelGroupactivate, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupfromAccelClosure",Gtk_AccelGroupfromAccelClosure, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupquery",Gtk_AccelGroupquery, 4, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelGroupnew",Gtk_AccelGroupnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelLabelgetType",Gtk_AccelLabelgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelLabelgetAccelWidget",Gtk_AccelLabelgetAccelWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelLabelgetAccelWidth",Gtk_AccelLabelgetAccelWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelLabelsetAccelWidget",Gtk_AccelLabelsetAccelWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelLabelsetAccelClosure",Gtk_AccelLabelsetAccelClosure, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelLabelrefetch",Gtk_AccelLabelrefetch, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelLabelnew",Gtk_AccelLabelnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccessiblegetType",Gtk_AccessiblegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccessibleconnectWidgetDestroyed",Gtk_AccessibleconnectWidgetDestroyed, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActiongetType",Gtk_ActiongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActiongetName",Gtk_ActiongetName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionisSensitive",Gtk_ActionisSensitive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActiongetSensitive",Gtk_ActiongetSensitive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionisVisible",Gtk_ActionisVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActiongetVisible",Gtk_ActiongetVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Actionactivate",Gtk_Actionactivate, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActioncreateIcon",Gtk_ActioncreateIcon, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActioncreateMenuItem",Gtk_ActioncreateMenuItem, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActioncreateToolItem",Gtk_ActioncreateToolItem, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionconnectProxy",Gtk_ActionconnectProxy, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActiondisconnectProxy",Gtk_ActiondisconnectProxy, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActiongetProxies",Gtk_ActiongetProxies, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionconnectAccelerator",Gtk_ActionconnectAccelerator, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActiondisconnectAccelerator",Gtk_ActiondisconnectAccelerator, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActiongetAccelPath",Gtk_ActiongetAccelPath, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionblockActivateFrom",Gtk_ActionblockActivateFrom, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionunblockActivateFrom",Gtk_ActionunblockActivateFrom, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionsetAccelPath",Gtk_ActionsetAccelPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionsetAccelGroup",Gtk_ActionsetAccelGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionsetSensitive",Gtk_ActionsetSensitive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionsetVisible",Gtk_ActionsetVisible, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Actionnew",Gtk_Actionnew, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupgetType",Gtk_ActionGroupgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupgetName",Gtk_ActionGroupgetName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupgetSensitive",Gtk_ActionGroupgetSensitive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupsetSensitive",Gtk_ActionGroupsetSensitive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupgetVisible",Gtk_ActionGroupgetVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupsetVisible",Gtk_ActionGroupsetVisible, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupgetAction",Gtk_ActionGroupgetAction, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGrouplistActions",Gtk_ActionGrouplistActions, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupaddAction",Gtk_ActionGroupaddAction, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupaddActionWithAccel",Gtk_ActionGroupaddActionWithAccel, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupremoveAction",Gtk_ActionGroupremoveAction, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupsetTranslationDomain",Gtk_ActionGroupsetTranslationDomain, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGrouptranslateString",Gtk_ActionGrouptranslateString, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ActionGroupnew",Gtk_ActionGroupnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentsetFieldLower",Gtk_AdjustmentsetFieldLower, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentgetFieldLower",Gtk_AdjustmentgetFieldLower, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentsetFieldPageIncrement",Gtk_AdjustmentsetFieldPageIncrement, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentgetFieldPageIncrement",Gtk_AdjustmentgetFieldPageIncrement, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentsetFieldPageSize",Gtk_AdjustmentsetFieldPageSize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentgetFieldPageSize",Gtk_AdjustmentgetFieldPageSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentsetFieldStepIncrement",Gtk_AdjustmentsetFieldStepIncrement, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentgetFieldStepIncrement",Gtk_AdjustmentgetFieldStepIncrement, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentsetFieldUpper",Gtk_AdjustmentsetFieldUpper, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentgetFieldUpper",Gtk_AdjustmentgetFieldUpper, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentsetFieldValue",Gtk_AdjustmentsetFieldValue, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentgetFieldValue",Gtk_AdjustmentgetFieldValue, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentgetType",Gtk_AdjustmentgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Adjustmentchanged",Gtk_Adjustmentchanged, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentvalueChanged",Gtk_AdjustmentvalueChanged, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentclampPage",Gtk_AdjustmentclampPage, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentgetValue",Gtk_AdjustmentgetValue, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AdjustmentsetValue",Gtk_AdjustmentsetValue, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Adjustmentnew",Gtk_Adjustmentnew, 6, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AlignmentgetType",Gtk_AlignmentgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Alignmentset",Gtk_Alignmentset, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AlignmentsetPadding",Gtk_AlignmentsetPadding, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AlignmentgetPadding",Gtk_AlignmentgetPadding, 5, 4);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Alignmentnew",Gtk_Alignmentnew, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ArrowgetType",Gtk_ArrowgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Arrowset",Gtk_Arrowset, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Arrownew",Gtk_Arrownew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AspectFramegetType",Gtk_AspectFramegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AspectFrameset",Gtk_AspectFrameset, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AspectFramenew",Gtk_AspectFramenew, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BinsetFieldChild",Gtk_BinsetFieldChild, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BingetFieldChild",Gtk_BingetFieldChild, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BingetType",Gtk_BingetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BingetChild",Gtk_BingetChild, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Binnew",Gtk_Binnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxgetType",Gtk_BoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxpackStart",Gtk_BoxpackStart, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxpackEnd",Gtk_BoxpackEnd, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxpackStartDefaults",Gtk_BoxpackStartDefaults, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxpackEndDefaults",Gtk_BoxpackEndDefaults, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxsetHomogeneous",Gtk_BoxsetHomogeneous, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxgetHomogeneous",Gtk_BoxgetHomogeneous, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxsetSpacing",Gtk_BoxsetSpacing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxgetSpacing",Gtk_BoxgetSpacing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxreorderChild",Gtk_BoxreorderChild, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxqueryChildPacking",Gtk_BoxqueryChildPacking, 6, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BoxsetChildPacking",Gtk_BoxsetChildPacking, 6, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtongetType",Gtk_ButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Buttonpressed",Gtk_Buttonpressed, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Buttonreleased",Gtk_Buttonreleased, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Buttonclicked",Gtk_Buttonclicked, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Buttonenter",Gtk_Buttonenter, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Buttonleave",Gtk_Buttonleave, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsetRelief",Gtk_ButtonsetRelief, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtongetRelief",Gtk_ButtongetRelief, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsetLabel",Gtk_ButtonsetLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtongetLabel",Gtk_ButtongetLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsetUseUnderline",Gtk_ButtonsetUseUnderline, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtongetUseUnderline",Gtk_ButtongetUseUnderline, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsetUseStock",Gtk_ButtonsetUseStock, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtongetUseStock",Gtk_ButtongetUseStock, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsetFocusOnClick",Gtk_ButtonsetFocusOnClick, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtongetFocusOnClick",Gtk_ButtongetFocusOnClick, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsetAlignment",Gtk_ButtonsetAlignment, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtongetAlignment",Gtk_ButtongetAlignment, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsetImage",Gtk_ButtonsetImage, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtongetImage",Gtk_ButtongetImage, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Buttonnew",Gtk_Buttonnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonnewWithLabel",Gtk_ButtonnewWithLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonnewFromStock",Gtk_ButtonnewFromStock, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonnewWithMnemonic",Gtk_ButtonnewWithMnemonic, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonBoxgetType",Gtk_ButtonBoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonBoxgetLayout",Gtk_ButtonBoxgetLayout, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonBoxsetLayout",Gtk_ButtonBoxsetLayout, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonBoxgetChildSecondary",Gtk_ButtonBoxgetChildSecondary, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonBoxsetChildSecondary",Gtk_ButtonBoxsetChildSecondary, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendargetType",Gtk_CalendargetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarselectMonth",Gtk_CalendarselectMonth, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarselectDay",Gtk_CalendarselectDay, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarmarkDay",Gtk_CalendarmarkDay, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarunmarkDay",Gtk_CalendarunmarkDay, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarclearMarks",Gtk_CalendarclearMarks, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarsetDisplayOptions",Gtk_CalendarsetDisplayOptions, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendargetDisplayOptions",Gtk_CalendargetDisplayOptions, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendardisplayOptions",Gtk_CalendardisplayOptions, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendargetDate",Gtk_CalendargetDate, 4, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Calendarfreeze",Gtk_Calendarfreeze, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Calendarthaw",Gtk_Calendarthaw, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Calendarnew",Gtk_Calendarnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRenderergetType",Gtk_CellRenderergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRenderergetSize",Gtk_CellRenderergetSize, 7, 4);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererrender",Gtk_CellRendererrender, 7, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendereractivate",Gtk_CellRendereractivate, 7, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererstartEditing",Gtk_CellRendererstartEditing, 7, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRenderersetFixedSize",Gtk_CellRenderersetFixedSize, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRenderergetFixedSize",Gtk_CellRenderergetFixedSize, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRenderereditingCanceled",Gtk_CellRenderereditingCanceled, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererstopEditing",Gtk_CellRendererstopEditing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererCombogetType",Gtk_CellRendererCombogetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererCombonew",Gtk_CellRendererCombonew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererPixbufgetType",Gtk_CellRendererPixbufgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererPixbufnew",Gtk_CellRendererPixbufnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererProgressgetType",Gtk_CellRendererProgressgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererProgressnew",Gtk_CellRendererProgressnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTextgetType",Gtk_CellRendererTextgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTextsetFixedHeightFromFont",Gtk_CellRendererTextsetFixedHeightFromFont, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTextnew",Gtk_CellRendererTextnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTogglegetType",Gtk_CellRendererTogglegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTogglegetRadio",Gtk_CellRendererTogglegetRadio, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTogglesetRadio",Gtk_CellRendererTogglesetRadio, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTogglegetActive",Gtk_CellRendererTogglegetActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTogglesetActive",Gtk_CellRendererTogglesetActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererTogglenew",Gtk_CellRendererTogglenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewgetType",Gtk_CellViewgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewnewWithText",Gtk_CellViewnewWithText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewnewWithMarkup",Gtk_CellViewnewWithMarkup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewnewWithPixbuf",Gtk_CellViewnewWithPixbuf, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewsetModel",Gtk_CellViewsetModel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewsetDisplayedRow",Gtk_CellViewsetDisplayedRow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewgetDisplayedRow",Gtk_CellViewgetDisplayedRow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewgetSizeOfRow",Gtk_CellViewgetSizeOfRow, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewsetBackgroundColor",Gtk_CellViewsetBackgroundColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewgetCellRenderers",Gtk_CellViewgetCellRenderers, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellViewnew",Gtk_CellViewnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckButtongetType",Gtk_CheckButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckButtonnew",Gtk_CheckButtonnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckButtonnewWithLabel",Gtk_CheckButtonnewWithLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckButtonnewWithMnemonic",Gtk_CheckButtonnewWithMnemonic, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemsetFieldActive",Gtk_CheckMenuItemsetFieldActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemgetFieldActive",Gtk_CheckMenuItemgetFieldActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemgetType",Gtk_CheckMenuItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemsetActive",Gtk_CheckMenuItemsetActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemgetActive",Gtk_CheckMenuItemgetActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemtoggled",Gtk_CheckMenuItemtoggled, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemsetInconsistent",Gtk_CheckMenuItemsetInconsistent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemgetInconsistent",Gtk_CheckMenuItemgetInconsistent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemsetDrawAsRadio",Gtk_CheckMenuItemsetDrawAsRadio, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemgetDrawAsRadio",Gtk_CheckMenuItemgetDrawAsRadio, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemnew",Gtk_CheckMenuItemnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemnewWithLabel",Gtk_CheckMenuItemnewWithLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CheckMenuItemnewWithMnemonic",Gtk_CheckMenuItemnewWithMnemonic, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardwaitIsTargetAvailable",Gtk_ClipboardwaitIsTargetAvailable, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardsetCanStore",Gtk_ClipboardsetCanStore, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Clipboardstore",Gtk_Clipboardstore, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardgetType",Gtk_ClipboardgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Clipboardget",Gtk_Clipboardget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardgetDisplay",Gtk_ClipboardgetDisplay, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardgetOwner",Gtk_ClipboardgetOwner, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Clipboardclear",Gtk_Clipboardclear, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardsetText",Gtk_ClipboardsetText, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardwaitForContents",Gtk_ClipboardwaitForContents, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardwaitForText",Gtk_ClipboardwaitForText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardwaitIsTextAvailable",Gtk_ClipboardwaitIsTextAvailable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardwaitForTargets",Gtk_ClipboardwaitForTargets, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ClipboardgetForDisplay",Gtk_ClipboardgetForDisplay, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtongetType",Gtk_ColorButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtonsetColor",Gtk_ColorButtonsetColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtonsetAlpha",Gtk_ColorButtonsetAlpha, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtongetColor",Gtk_ColorButtongetColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtongetAlpha",Gtk_ColorButtongetAlpha, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtonsetUseAlpha",Gtk_ColorButtonsetUseAlpha, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtongetUseAlpha",Gtk_ColorButtongetUseAlpha, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtonsetTitle",Gtk_ColorButtonsetTitle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtongetTitle",Gtk_ColorButtongetTitle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtonnew",Gtk_ColorButtonnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorButtonnewWithColor",Gtk_ColorButtonnewWithColor, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectiongetType",Gtk_ColorSelectiongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectiongetHasOpacityControl",Gtk_ColorSelectiongetHasOpacityControl, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionsetHasOpacityControl",Gtk_ColorSelectionsetHasOpacityControl, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectiongetHasPalette",Gtk_ColorSelectiongetHasPalette, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionsetHasPalette",Gtk_ColorSelectionsetHasPalette, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionsetCurrentColor",Gtk_ColorSelectionsetCurrentColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionsetCurrentAlpha",Gtk_ColorSelectionsetCurrentAlpha, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectiongetCurrentColor",Gtk_ColorSelectiongetCurrentColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectiongetCurrentAlpha",Gtk_ColorSelectiongetCurrentAlpha, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionsetPreviousColor",Gtk_ColorSelectionsetPreviousColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionsetPreviousAlpha",Gtk_ColorSelectionsetPreviousAlpha, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectiongetPreviousColor",Gtk_ColorSelectiongetPreviousColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectiongetPreviousAlpha",Gtk_ColorSelectiongetPreviousAlpha, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionisAdjusting",Gtk_ColorSelectionisAdjusting, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionpaletteFromString",Gtk_ColorSelectionpaletteFromString, 2, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionpaletteToString",Gtk_ColorSelectionpaletteToString, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionnew",Gtk_ColorSelectionnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialogsetFieldCancelButton",Gtk_ColorSelectionDialogsetFieldCancelButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialoggetFieldCancelButton",Gtk_ColorSelectionDialoggetFieldCancelButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialogsetFieldColorsel",Gtk_ColorSelectionDialogsetFieldColorsel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialoggetFieldColorsel",Gtk_ColorSelectionDialoggetFieldColorsel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialogsetFieldHelpButton",Gtk_ColorSelectionDialogsetFieldHelpButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialoggetFieldHelpButton",Gtk_ColorSelectionDialoggetFieldHelpButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialogsetFieldOkButton",Gtk_ColorSelectionDialogsetFieldOkButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialoggetFieldOkButton",Gtk_ColorSelectionDialoggetFieldOkButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialoggetType",Gtk_ColorSelectionDialoggetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ColorSelectionDialognew",Gtk_ColorSelectionDialognew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CombosetFieldEntry",Gtk_CombosetFieldEntry, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CombogetFieldEntry",Gtk_CombogetFieldEntry, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CombosetFieldList",Gtk_CombosetFieldList, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CombogetFieldList",Gtk_CombogetFieldList, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Combonew",Gtk_Combonew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetType",Gtk_ComboBoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxsetWrapWidth",Gtk_ComboBoxsetWrapWidth, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxsetRowSpanColumn",Gtk_ComboBoxsetRowSpanColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxsetColumnSpanColumn",Gtk_ComboBoxsetColumnSpanColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetActive",Gtk_ComboBoxgetActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxsetActive",Gtk_ComboBoxsetActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetActiveIter",Gtk_ComboBoxgetActiveIter, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxsetActiveIter",Gtk_ComboBoxsetActiveIter, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxsetModel",Gtk_ComboBoxsetModel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetModel",Gtk_ComboBoxgetModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxnewText",Gtk_ComboBoxnewText, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxappendText",Gtk_ComboBoxappendText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxinsertText",Gtk_ComboBoxinsertText, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxprependText",Gtk_ComboBoxprependText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxremoveText",Gtk_ComboBoxremoveText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxpopup",Gtk_ComboBoxpopup, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxpopdown",Gtk_ComboBoxpopdown, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetWrapWidth",Gtk_ComboBoxgetWrapWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetRowSpanColumn",Gtk_ComboBoxgetRowSpanColumn, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetColumnSpanColumn",Gtk_ComboBoxgetColumnSpanColumn, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxsetAddTearoffs",Gtk_ComboBoxsetAddTearoffs, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetFocusOnClick",Gtk_ComboBoxgetFocusOnClick, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxsetFocusOnClick",Gtk_ComboBoxsetFocusOnClick, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetActiveText",Gtk_ComboBoxgetActiveText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxgetPopupAccessible",Gtk_ComboBoxgetPopupAccessible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxnew",Gtk_ComboBoxnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxnewWithModel",Gtk_ComboBoxnewWithModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxEntrygetType",Gtk_ComboBoxEntrygetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxEntrynewWithModel",Gtk_ComboBoxEntrynewWithModel, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxEntrysetTextColumn",Gtk_ComboBoxEntrysetTextColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxEntrygetTextColumn",Gtk_ComboBoxEntrygetTextColumn, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxEntrynewText",Gtk_ComboBoxEntrynewText, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ComboBoxEntrynew",Gtk_ComboBoxEntrynew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFieldBorderWidth",Gtk_ContainersetFieldBorderWidth, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFieldBorderWidth",Gtk_ContainergetFieldBorderWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFieldFocusChild",Gtk_ContainersetFieldFocusChild, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFieldFocusChild",Gtk_ContainergetFieldFocusChild, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFieldHasFocusChain",Gtk_ContainersetFieldHasFocusChain, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFieldHasFocusChain",Gtk_ContainergetFieldHasFocusChain, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFieldNeedResize",Gtk_ContainersetFieldNeedResize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFieldNeedResize",Gtk_ContainergetFieldNeedResize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFieldReallocateRedraws",Gtk_ContainersetFieldReallocateRedraws, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFieldReallocateRedraws",Gtk_ContainergetFieldReallocateRedraws, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFieldResizeMode",Gtk_ContainersetFieldResizeMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFieldResizeMode",Gtk_ContainergetFieldResizeMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetType",Gtk_ContainergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetBorderWidth",Gtk_ContainersetBorderWidth, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetBorderWidth",Gtk_ContainergetBorderWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Containeradd",Gtk_Containeradd, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Containerremove",Gtk_Containerremove, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetResizeMode",Gtk_ContainersetResizeMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetResizeMode",Gtk_ContainergetResizeMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainercheckResize",Gtk_ContainercheckResize, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Containerforeach",Gtk_Containerforeach, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetChildren",Gtk_ContainergetChildren, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerpropagateExpose",Gtk_ContainerpropagateExpose, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFocusChain",Gtk_ContainersetFocusChain, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFocusChain",Gtk_ContainergetFocusChain, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerunsetFocusChain",Gtk_ContainerunsetFocusChain, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetReallocateRedraws",Gtk_ContainersetReallocateRedraws, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFocusChild",Gtk_ContainersetFocusChild, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFocusVadjustment",Gtk_ContainersetFocusVadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFocusVadjustment",Gtk_ContainergetFocusVadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainersetFocusHadjustment",Gtk_ContainersetFocusHadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainergetFocusHadjustment",Gtk_ContainergetFocusHadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerresizeChildren",Gtk_ContainerresizeChildren, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerchildType",Gtk_ContainerchildType, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerclassInstallChildProperty",Gtk_ContainerclassInstallChildProperty, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerclassFindChildProperty",Gtk_ContainerclassFindChildProperty, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerclassListChildProperties",Gtk_ContainerclassListChildProperties, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContaineraddWithProperties",Gtk_ContaineraddWithProperties, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerchildSet",Gtk_ContainerchildSet, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerchildGet",Gtk_ContainerchildGet, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerchildSetProperty",Gtk_ContainerchildSetProperty, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ContainerchildGetProperty",Gtk_ContainerchildGetProperty, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Containerforall",Gtk_Containerforall, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Containernew",Gtk_Containernew, 6, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CurvegetType",Gtk_CurvegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Curvereset",Gtk_Curvereset, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CurvesetGamma",Gtk_CurvesetGamma, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CurvesetRange",Gtk_CurvesetRange, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CurvesetCurveType",Gtk_CurvesetCurveType, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Curvenew",Gtk_Curvenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogsetFieldActionArea",Gtk_DialogsetFieldActionArea, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialoggetFieldActionArea",Gtk_DialoggetFieldActionArea, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogsetFieldVBox",Gtk_DialogsetFieldVBox, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialoggetFieldVBox",Gtk_DialoggetFieldVBox, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialoggetType",Gtk_DialoggetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogaddActionWidget",Gtk_DialogaddActionWidget, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogaddButton",Gtk_DialogaddButton, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogaddButtons",Gtk_DialogaddButtons, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogsetResponseSensitive",Gtk_DialogsetResponseSensitive, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogsetDefaultResponse",Gtk_DialogsetDefaultResponse, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogsetHasSeparator",Gtk_DialogsetHasSeparator, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialoggetHasSeparator",Gtk_DialoggetHasSeparator, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Dialogresponse",Gtk_Dialogresponse, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Dialogrun",Gtk_Dialogrun, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogsetAlternativeButtonOrder",Gtk_DialogsetAlternativeButtonOrder, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogsetAlternativeButtonOrderFromArray",Gtk_DialogsetAlternativeButtonOrderFromArray, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Dialognew",Gtk_Dialognew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialognewWithButtons",Gtk_DialognewWithButtons, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DrawingAreagetType",Gtk_DrawingAreagetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DrawingAreanew",Gtk_DrawingAreanew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetType",Gtk_EntrygetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetVisibility",Gtk_EntrysetVisibility, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetVisibility",Gtk_EntrygetVisibility, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetInvisibleChar",Gtk_EntrysetInvisibleChar, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetInvisibleChar",Gtk_EntrygetInvisibleChar, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetHasFrame",Gtk_EntrysetHasFrame, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetHasFrame",Gtk_EntrygetHasFrame, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetMaxLength",Gtk_EntrysetMaxLength, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetMaxLength",Gtk_EntrygetMaxLength, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetActivatesDefault",Gtk_EntrysetActivatesDefault, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetActivatesDefault",Gtk_EntrygetActivatesDefault, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetWidthChars",Gtk_EntrysetWidthChars, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetWidthChars",Gtk_EntrygetWidthChars, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetText",Gtk_EntrysetText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetText",Gtk_EntrygetText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetLayout",Gtk_EntrygetLayout, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetLayoutOffsets",Gtk_EntrygetLayoutOffsets, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetAlignment",Gtk_EntrysetAlignment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetAlignment",Gtk_EntrygetAlignment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetCompletion",Gtk_EntrysetCompletion, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrygetCompletion",Gtk_EntrygetCompletion, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryprependText",Gtk_EntryprependText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetPosition",Gtk_EntrysetPosition, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryselectRegion",Gtk_EntryselectRegion, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntrysetEditable",Gtk_EntrysetEditable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Entrynew",Gtk_Entrynew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletiongetType",Gtk_EntryCompletiongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletiongetEntry",Gtk_EntryCompletiongetEntry, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletionsetModel",Gtk_EntryCompletionsetModel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletiongetModel",Gtk_EntryCompletiongetModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletionsetMinimumKeyLength",Gtk_EntryCompletionsetMinimumKeyLength, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletiongetMinimumKeyLength",Gtk_EntryCompletiongetMinimumKeyLength, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletioncomplete",Gtk_EntryCompletioncomplete, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletioninsertActionText",Gtk_EntryCompletioninsertActionText, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletioninsertActionMarkup",Gtk_EntryCompletioninsertActionMarkup, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletiondeleteAction",Gtk_EntryCompletiondeleteAction, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletionsetTextColumn",Gtk_EntryCompletionsetTextColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletioninsertPrefix",Gtk_EntryCompletioninsertPrefix, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletionsetInlineCompletion",Gtk_EntryCompletionsetInlineCompletion, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletiongetInlineCompletion",Gtk_EntryCompletiongetInlineCompletion, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletionsetPopupCompletion",Gtk_EntryCompletionsetPopupCompletion, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletiongetPopupCompletion",Gtk_EntryCompletiongetPopupCompletion, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EntryCompletionnew",Gtk_EntryCompletionnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EventBoxgetType",Gtk_EventBoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EventBoxgetVisibleWindow",Gtk_EventBoxgetVisibleWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EventBoxsetVisibleWindow",Gtk_EventBoxsetVisibleWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EventBoxgetAboveChild",Gtk_EventBoxgetAboveChild, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EventBoxsetAboveChild",Gtk_EventBoxsetAboveChild, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "EventBoxnew",Gtk_EventBoxnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandergetType",Gtk_ExpandergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandernewWithMnemonic",Gtk_ExpandernewWithMnemonic, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandersetExpanded",Gtk_ExpandersetExpanded, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandergetExpanded",Gtk_ExpandergetExpanded, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandersetSpacing",Gtk_ExpandersetSpacing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandergetSpacing",Gtk_ExpandergetSpacing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandersetLabel",Gtk_ExpandersetLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandergetLabel",Gtk_ExpandergetLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandersetUseUnderline",Gtk_ExpandersetUseUnderline, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandergetUseUnderline",Gtk_ExpandergetUseUnderline, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandersetUseMarkup",Gtk_ExpandersetUseMarkup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandergetUseMarkup",Gtk_ExpandergetUseMarkup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandersetLabelWidget",Gtk_ExpandersetLabelWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpandergetLabelWidget",Gtk_ExpandergetLabelWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Expandernew",Gtk_Expandernew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserButtongetType",Gtk_FileChooserButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserButtonnewWithDialog",Gtk_FileChooserButtonnewWithDialog, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserButtongetTitle",Gtk_FileChooserButtongetTitle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserButtonsetTitle",Gtk_FileChooserButtonsetTitle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserButtongetWidthChars",Gtk_FileChooserButtongetWidthChars, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserButtonsetWidthChars",Gtk_FileChooserButtonsetWidthChars, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserDialoggetType",Gtk_FileChooserDialoggetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserDialognewWithBackend",Gtk_FileChooserDialognewWithBackend, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserDialognew",Gtk_FileChooserDialognew, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserWidgetgetType",Gtk_FileChooserWidgetgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserWidgetnewWithBackend",Gtk_FileChooserWidgetnewWithBackend, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserWidgetnew",Gtk_FileChooserWidgetnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFiltergetType",Gtk_FileFiltergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFiltersetName",Gtk_FileFiltersetName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFiltergetName",Gtk_FileFiltergetName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFilteraddMimeType",Gtk_FileFilteraddMimeType, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFilteraddPattern",Gtk_FileFilteraddPattern, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFilteraddPixbufFormats",Gtk_FileFilteraddPixbufFormats, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFiltergetNeeded",Gtk_FileFiltergetNeeded, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFilterfilter",Gtk_FileFilterfilter, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFilternew",Gtk_FileFilternew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldActionArea",Gtk_FileSelectionsetFieldActionArea, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldActionArea",Gtk_FileSelectiongetFieldActionArea, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldButtonArea",Gtk_FileSelectionsetFieldButtonArea, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldButtonArea",Gtk_FileSelectiongetFieldButtonArea, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldCancelButton",Gtk_FileSelectionsetFieldCancelButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldCancelButton",Gtk_FileSelectiongetFieldCancelButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldDirList",Gtk_FileSelectionsetFieldDirList, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldDirList",Gtk_FileSelectiongetFieldDirList, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldFileList",Gtk_FileSelectionsetFieldFileList, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldFileList",Gtk_FileSelectiongetFieldFileList, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldFileopCDir",Gtk_FileSelectionsetFieldFileopCDir, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldFileopCDir",Gtk_FileSelectiongetFieldFileopCDir, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldFileopDelFile",Gtk_FileSelectionsetFieldFileopDelFile, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldFileopDelFile",Gtk_FileSelectiongetFieldFileopDelFile, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldFileopDialog",Gtk_FileSelectionsetFieldFileopDialog, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldFileopDialog",Gtk_FileSelectiongetFieldFileopDialog, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldFileopEntry",Gtk_FileSelectionsetFieldFileopEntry, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldFileopEntry",Gtk_FileSelectiongetFieldFileopEntry, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldFileopFile",Gtk_FileSelectionsetFieldFileopFile, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldFileopFile",Gtk_FileSelectiongetFieldFileopFile, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldFileopRenFile",Gtk_FileSelectionsetFieldFileopRenFile, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldFileopRenFile",Gtk_FileSelectiongetFieldFileopRenFile, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldHelpButton",Gtk_FileSelectionsetFieldHelpButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldHelpButton",Gtk_FileSelectiongetFieldHelpButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldHistoryMenu",Gtk_FileSelectionsetFieldHistoryMenu, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldHistoryMenu",Gtk_FileSelectiongetFieldHistoryMenu, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldHistoryPulldown",Gtk_FileSelectionsetFieldHistoryPulldown, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldHistoryPulldown",Gtk_FileSelectiongetFieldHistoryPulldown, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldMainVBox",Gtk_FileSelectionsetFieldMainVBox, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldMainVBox",Gtk_FileSelectiongetFieldMainVBox, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldOkButton",Gtk_FileSelectionsetFieldOkButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldOkButton",Gtk_FileSelectiongetFieldOkButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldSelectionEntry",Gtk_FileSelectionsetFieldSelectionEntry, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldSelectionEntry",Gtk_FileSelectiongetFieldSelectionEntry, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFieldSelectionText",Gtk_FileSelectionsetFieldSelectionText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFieldSelectionText",Gtk_FileSelectiongetFieldSelectionText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetType",Gtk_FileSelectiongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetFilename",Gtk_FileSelectionsetFilename, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetFilename",Gtk_FileSelectiongetFilename, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectioncomplete",Gtk_FileSelectioncomplete, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionshowFileopButtons",Gtk_FileSelectionshowFileopButtons, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionhideFileopButtons",Gtk_FileSelectionhideFileopButtons, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetSelections",Gtk_FileSelectiongetSelections, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionsetSelectMultiple",Gtk_FileSelectionsetSelectMultiple, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectiongetSelectMultiple",Gtk_FileSelectiongetSelectMultiple, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileSelectionnew",Gtk_FileSelectionnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FixedgetType",Gtk_FixedgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Fixedput",Gtk_Fixedput, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Fixedmove",Gtk_Fixedmove, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FixedsetHasWindow",Gtk_FixedsetHasWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FixedgetHasWindow",Gtk_FixedgetHasWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Fixednew",Gtk_Fixednew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtongetType",Gtk_FontButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtonnewWithFont",Gtk_FontButtonnewWithFont, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtongetTitle",Gtk_FontButtongetTitle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtonsetTitle",Gtk_FontButtonsetTitle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtongetUseFont",Gtk_FontButtongetUseFont, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtonsetUseFont",Gtk_FontButtonsetUseFont, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtongetUseSize",Gtk_FontButtongetUseSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtonsetUseSize",Gtk_FontButtonsetUseSize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtongetFontName",Gtk_FontButtongetFontName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtonsetFontName",Gtk_FontButtonsetFontName, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtongetShowStyle",Gtk_FontButtongetShowStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtonsetShowStyle",Gtk_FontButtonsetShowStyle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtongetShowSize",Gtk_FontButtongetShowSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtonsetShowSize",Gtk_FontButtonsetShowSize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontButtonnew",Gtk_FontButtonnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectiongetType",Gtk_FontSelectiongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectiongetFontName",Gtk_FontSelectiongetFontName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectiongetFont",Gtk_FontSelectiongetFont, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionsetFontName",Gtk_FontSelectionsetFontName, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectiongetPreviewText",Gtk_FontSelectiongetPreviewText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionsetPreviewText",Gtk_FontSelectionsetPreviewText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionnew",Gtk_FontSelectionnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialogsetFieldActionArea",Gtk_FontSelectionDialogsetFieldActionArea, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetFieldActionArea",Gtk_FontSelectionDialoggetFieldActionArea, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialogsetFieldApplyButton",Gtk_FontSelectionDialogsetFieldApplyButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetFieldApplyButton",Gtk_FontSelectionDialoggetFieldApplyButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialogsetFieldCancelButton",Gtk_FontSelectionDialogsetFieldCancelButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetFieldCancelButton",Gtk_FontSelectionDialoggetFieldCancelButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialogsetFieldFontsel",Gtk_FontSelectionDialogsetFieldFontsel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetFieldFontsel",Gtk_FontSelectionDialoggetFieldFontsel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialogsetFieldMainVBox",Gtk_FontSelectionDialogsetFieldMainVBox, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetFieldMainVBox",Gtk_FontSelectionDialoggetFieldMainVBox, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialogsetFieldOkButton",Gtk_FontSelectionDialogsetFieldOkButton, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetFieldOkButton",Gtk_FontSelectionDialoggetFieldOkButton, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetType",Gtk_FontSelectionDialoggetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetFontName",Gtk_FontSelectionDialoggetFontName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetFont",Gtk_FontSelectionDialoggetFont, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialogsetFontName",Gtk_FontSelectionDialogsetFontName, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialoggetPreviewText",Gtk_FontSelectionDialoggetPreviewText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialogsetPreviewText",Gtk_FontSelectionDialogsetPreviewText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FontSelectionDialognew",Gtk_FontSelectionDialognew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramegetType",Gtk_FramegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramesetLabel",Gtk_FramesetLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramegetLabel",Gtk_FramegetLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramesetLabelWidget",Gtk_FramesetLabelWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramegetLabelWidget",Gtk_FramegetLabelWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramesetLabelAlign",Gtk_FramesetLabelAlign, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramegetLabelAlign",Gtk_FramegetLabelAlign, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramesetShadowType",Gtk_FramesetShadowType, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FramegetShadowType",Gtk_FramegetShadowType, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Framenew",Gtk_Framenew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvesetFieldCurve",Gtk_GammaCurvesetFieldCurve, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvegetFieldCurve",Gtk_GammaCurvegetFieldCurve, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvesetFieldGamma",Gtk_GammaCurvesetFieldGamma, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvegetFieldGamma",Gtk_GammaCurvegetFieldGamma, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvesetFieldGammaDialog",Gtk_GammaCurvesetFieldGammaDialog, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvegetFieldGammaDialog",Gtk_GammaCurvegetFieldGammaDialog, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvesetFieldGammaText",Gtk_GammaCurvesetFieldGammaText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvegetFieldGammaText",Gtk_GammaCurvegetFieldGammaText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvesetFieldTable",Gtk_GammaCurvesetFieldTable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvegetFieldTable",Gtk_GammaCurvegetFieldTable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvegetType",Gtk_GammaCurvegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "GammaCurvenew",Gtk_GammaCurvenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HandleBoxgetType",Gtk_HandleBoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HandleBoxsetShadowType",Gtk_HandleBoxsetShadowType, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HandleBoxgetShadowType",Gtk_HandleBoxgetShadowType, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HandleBoxsetHandlePosition",Gtk_HandleBoxsetHandlePosition, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HandleBoxgetHandlePosition",Gtk_HandleBoxgetHandlePosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HandleBoxsetSnapEdge",Gtk_HandleBoxsetSnapEdge, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HandleBoxgetSnapEdge",Gtk_HandleBoxgetSnapEdge, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HandleBoxnew",Gtk_HandleBoxnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HBoxgetType",Gtk_HBoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HBoxnew",Gtk_HBoxnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HButtonBoxgetType",Gtk_HButtonBoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HButtonBoxnew",Gtk_HButtonBoxnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HPanedgetType",Gtk_HPanedgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HPanednew",Gtk_HPanednew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HRulergetType",Gtk_HRulergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HRulernew",Gtk_HRulernew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HScalegetType",Gtk_HScalegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HScalenew",Gtk_HScalenew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HScalenewWithRange",Gtk_HScalenewWithRange, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HScrollbargetType",Gtk_HScrollbargetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HScrollbarnew",Gtk_HScrollbarnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HSeparatorgetType",Gtk_HSeparatorgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "HSeparatornew",Gtk_HSeparatornew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconFactorygetType",Gtk_IconFactorygetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconFactoryadd",Gtk_IconFactoryadd, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconFactorylookup",Gtk_IconFactorylookup, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconFactoryaddDefault",Gtk_IconFactoryaddDefault, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconFactoryremoveDefault",Gtk_IconFactoryremoveDefault, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconFactorylookupDefault",Gtk_IconFactorylookupDefault, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconFactorynew",Gtk_IconFactorynew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemegetType",Gtk_IconThemegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemegetDefault",Gtk_IconThemegetDefault, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemegetForScreen",Gtk_IconThemegetForScreen, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemesetScreen",Gtk_IconThemesetScreen, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemeappendSearchPath",Gtk_IconThemeappendSearchPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemeprependSearchPath",Gtk_IconThemeprependSearchPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemesetCustomTheme",Gtk_IconThemesetCustomTheme, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemehasIcon",Gtk_IconThemehasIcon, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemelookupIcon",Gtk_IconThemelookupIcon, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemeloadIcon",Gtk_IconThemeloadIcon, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemelistIcons",Gtk_IconThemelistIcons, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemegetExampleIconName",Gtk_IconThemegetExampleIconName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemerescanIfNeeded",Gtk_IconThemerescanIfNeeded, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemeaddBuiltinIcon",Gtk_IconThemeaddBuiltinIcon, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemenew",Gtk_IconThemenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetType",Gtk_IconViewgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewnewWithModel",Gtk_IconViewnewWithModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetModel",Gtk_IconViewsetModel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetModel",Gtk_IconViewgetModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetTextColumn",Gtk_IconViewsetTextColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetTextColumn",Gtk_IconViewgetTextColumn, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetMarkupColumn",Gtk_IconViewsetMarkupColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetMarkupColumn",Gtk_IconViewgetMarkupColumn, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetPixbufColumn",Gtk_IconViewsetPixbufColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetPixbufColumn",Gtk_IconViewgetPixbufColumn, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetOrientation",Gtk_IconViewsetOrientation, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetOrientation",Gtk_IconViewgetOrientation, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetColumns",Gtk_IconViewsetColumns, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetColumns",Gtk_IconViewgetColumns, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetItemWidth",Gtk_IconViewsetItemWidth, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetItemWidth",Gtk_IconViewgetItemWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetSpacing",Gtk_IconViewsetSpacing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetSpacing",Gtk_IconViewgetSpacing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetRowSpacing",Gtk_IconViewsetRowSpacing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetRowSpacing",Gtk_IconViewgetRowSpacing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetColumnSpacing",Gtk_IconViewsetColumnSpacing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetColumnSpacing",Gtk_IconViewgetColumnSpacing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetMargin",Gtk_IconViewsetMargin, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetMargin",Gtk_IconViewgetMargin, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetPathAtPos",Gtk_IconViewgetPathAtPos, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewsetSelectionMode",Gtk_IconViewsetSelectionMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetSelectionMode",Gtk_IconViewgetSelectionMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewselectPath",Gtk_IconViewselectPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewunselectPath",Gtk_IconViewunselectPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewpathIsSelected",Gtk_IconViewpathIsSelected, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewgetSelectedItems",Gtk_IconViewgetSelectedItems, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewselectAll",Gtk_IconViewselectAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewunselectAll",Gtk_IconViewunselectAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewitemActivated",Gtk_IconViewitemActivated, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconViewnew",Gtk_IconViewnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetType",Gtk_ImagegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagenewFromIconSet",Gtk_ImagenewFromIconSet, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagenewFromAnimation",Gtk_ImagenewFromAnimation, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetFromPixmap",Gtk_ImagesetFromPixmap, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetFromImage",Gtk_ImagesetFromImage, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetFromFile",Gtk_ImagesetFromFile, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetFromPixbuf",Gtk_ImagesetFromPixbuf, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetFromStock",Gtk_ImagesetFromStock, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetFromIconSet",Gtk_ImagesetFromIconSet, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetFromAnimation",Gtk_ImagesetFromAnimation, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetStorageType",Gtk_ImagegetStorageType, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetPixmap",Gtk_ImagegetPixmap, 1, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetImage",Gtk_ImagegetImage, 1, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetPixbuf",Gtk_ImagegetPixbuf, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetStock",Gtk_ImagegetStock, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetIconSet",Gtk_ImagegetIconSet, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetAnimation",Gtk_ImagegetAnimation, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagenewFromIconName",Gtk_ImagenewFromIconName, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetFromIconName",Gtk_ImagesetFromIconName, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagesetPixelSize",Gtk_ImagesetPixelSize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetIconName",Gtk_ImagegetIconName, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagegetPixelSize",Gtk_ImagegetPixelSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Imagenew",Gtk_Imagenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagenewFromPixmap",Gtk_ImagenewFromPixmap, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagenewFromImage",Gtk_ImagenewFromImage, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagenewFromFile",Gtk_ImagenewFromFile, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagenewFromPixbuf",Gtk_ImagenewFromPixbuf, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImagenewFromStock",Gtk_ImagenewFromStock, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageMenuItemgetType",Gtk_ImageMenuItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageMenuItemsetImage",Gtk_ImageMenuItemsetImage, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageMenuItemgetImage",Gtk_ImageMenuItemgetImage, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageMenuItemnew",Gtk_ImageMenuItemnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageMenuItemnewWithLabel",Gtk_ImageMenuItemnewWithLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageMenuItemnewWithMnemonic",Gtk_ImageMenuItemnewWithMnemonic, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageMenuItemnewFromStock",Gtk_ImageMenuItemnewFromStock, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextgetType",Gtk_IMContextgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextsetClientWindow",Gtk_IMContextsetClientWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextgetPreeditString",Gtk_IMContextgetPreeditString, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextfilterKeypress",Gtk_IMContextfilterKeypress, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextfocusIn",Gtk_IMContextfocusIn, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextfocusOut",Gtk_IMContextfocusOut, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextreset",Gtk_IMContextreset, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextsetCursorLocation",Gtk_IMContextsetCursorLocation, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextsetUsePreedit",Gtk_IMContextsetUsePreedit, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextsetSurrounding",Gtk_IMContextsetSurrounding, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextgetSurrounding",Gtk_IMContextgetSurrounding, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextdeleteSurrounding",Gtk_IMContextdeleteSurrounding, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextSimplegetType",Gtk_IMContextSimplegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextSimpleaddTable",Gtk_IMContextSimpleaddTable, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMContextSimplenew",Gtk_IMContextSimplenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMMulticontextgetType",Gtk_IMMulticontextgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMMulticontextappendMenuitems",Gtk_IMMulticontextappendMenuitems, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMMulticontextnew",Gtk_IMMulticontextnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "InputDialoggetType",Gtk_InputDialoggetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "InputDialognew",Gtk_InputDialognew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "InvisiblegetType",Gtk_InvisiblegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "InvisiblesetScreen",Gtk_InvisiblesetScreen, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "InvisiblegetScreen",Gtk_InvisiblegetScreen, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Invisiblenew",Gtk_Invisiblenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "InvisiblenewForScreen",Gtk_InvisiblenewForScreen, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ItemgetType",Gtk_ItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Itemselect",Gtk_Itemselect, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Itemdeselect",Gtk_Itemdeselect, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Itemtoggle",Gtk_Itemtoggle, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetType",Gtk_LabelgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetText",Gtk_LabelsetText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetText",Gtk_LabelgetText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetAttributes",Gtk_LabelsetAttributes, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetAttributes",Gtk_LabelgetAttributes, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetLabel",Gtk_LabelsetLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetLabel",Gtk_LabelgetLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetMarkup",Gtk_LabelsetMarkup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetUseMarkup",Gtk_LabelsetUseMarkup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetUseMarkup",Gtk_LabelgetUseMarkup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetUseUnderline",Gtk_LabelsetUseUnderline, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetUseUnderline",Gtk_LabelgetUseUnderline, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetMarkupWithMnemonic",Gtk_LabelsetMarkupWithMnemonic, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetMnemonicKeyval",Gtk_LabelgetMnemonicKeyval, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetMnemonicWidget",Gtk_LabelsetMnemonicWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetMnemonicWidget",Gtk_LabelgetMnemonicWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetTextWithMnemonic",Gtk_LabelsetTextWithMnemonic, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetJustify",Gtk_LabelsetJustify, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetJustify",Gtk_LabelgetJustify, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetPattern",Gtk_LabelsetPattern, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetLineWrap",Gtk_LabelsetLineWrap, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetLineWrap",Gtk_LabelgetLineWrap, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetSelectable",Gtk_LabelsetSelectable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetSelectable",Gtk_LabelgetSelectable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelselectRegion",Gtk_LabelselectRegion, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetSelectionBounds",Gtk_LabelgetSelectionBounds, 3, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetLayout",Gtk_LabelgetLayout, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetLayoutOffsets",Gtk_LabelgetLayoutOffsets, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetEllipsize",Gtk_LabelsetEllipsize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetEllipsize",Gtk_LabelgetEllipsize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetAngle",Gtk_LabelsetAngle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetAngle",Gtk_LabelgetAngle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetWidthChars",Gtk_LabelsetWidthChars, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetWidthChars",Gtk_LabelgetWidthChars, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetMaxWidthChars",Gtk_LabelsetMaxWidthChars, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetMaxWidthChars",Gtk_LabelgetMaxWidthChars, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelsetSingleLineMode",Gtk_LabelsetSingleLineMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelgetSingleLineMode",Gtk_LabelgetSingleLineMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Labelnew",Gtk_Labelnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LabelnewWithMnemonic",Gtk_LabelnewWithMnemonic, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutsetFieldBinWindow",Gtk_LayoutsetFieldBinWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutgetFieldBinWindow",Gtk_LayoutgetFieldBinWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutgetType",Gtk_LayoutgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Layoutput",Gtk_Layoutput, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Layoutmove",Gtk_Layoutmove, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutsetSize",Gtk_LayoutsetSize, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutgetSize",Gtk_LayoutgetSize, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutgetHadjustment",Gtk_LayoutgetHadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutgetVadjustment",Gtk_LayoutgetVadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutsetHadjustment",Gtk_LayoutsetHadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "LayoutsetVadjustment",Gtk_LayoutsetVadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Layoutfreeze",Gtk_Layoutfreeze, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Layoutthaw",Gtk_Layoutthaw, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Layoutnew",Gtk_Layoutnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoregetType",Gtk_ListStoregetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoresetColumnTypes",Gtk_ListStoresetColumnTypes, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoresetValue",Gtk_ListStoresetValue, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreset",Gtk_ListStoreset, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreremove",Gtk_ListStoreremove, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreinsert",Gtk_ListStoreinsert, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreinsertBefore",Gtk_ListStoreinsertBefore, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreinsertAfter",Gtk_ListStoreinsertAfter, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreinsertWithValues",Gtk_ListStoreinsertWithValues, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreinsertWithValuesv",Gtk_ListStoreinsertWithValuesv, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreprepend",Gtk_ListStoreprepend, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreappend",Gtk_ListStoreappend, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreclear",Gtk_ListStoreclear, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreiterIsValid",Gtk_ListStoreiterIsValid, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStorereorder",Gtk_ListStorereorder, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoreswap",Gtk_ListStoreswap, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoremoveAfter",Gtk_ListStoremoveAfter, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStoremoveBefore",Gtk_ListStoremoveBefore, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ListStorenewv",Gtk_ListStorenewv, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenugetType",Gtk_MenugetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Menupopup",Gtk_Menupopup, 7, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Menureposition",Gtk_Menureposition, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Menupopdown",Gtk_Menupopdown, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenugetActive",Gtk_MenugetActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenusetActive",Gtk_MenusetActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenusetAccelGroup",Gtk_MenusetAccelGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenugetAccelGroup",Gtk_MenugetAccelGroup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenusetAccelPath",Gtk_MenusetAccelPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuattachToWidget",Gtk_MenuattachToWidget, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Menudetach",Gtk_Menudetach, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenugetAttachWidget",Gtk_MenugetAttachWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenusetTearoffState",Gtk_MenusetTearoffState, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenugetTearoffState",Gtk_MenugetTearoffState, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenusetTitle",Gtk_MenusetTitle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenugetTitle",Gtk_MenugetTitle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenureorderChild",Gtk_MenureorderChild, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenusetScreen",Gtk_MenusetScreen, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Menuattach",Gtk_Menuattach, 6, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenusetMonitor",Gtk_MenusetMonitor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Menunew",Gtk_Menunew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuBargetType",Gtk_MenuBargetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuBarnew",Gtk_MenuBarnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemgetType",Gtk_MenuItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemsetSubmenu",Gtk_MenuItemsetSubmenu, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemgetSubmenu",Gtk_MenuItemgetSubmenu, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemremoveSubmenu",Gtk_MenuItemremoveSubmenu, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemselect",Gtk_MenuItemselect, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemdeselect",Gtk_MenuItemdeselect, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemactivate",Gtk_MenuItemactivate, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemtoggleSizeRequest",Gtk_MenuItemtoggleSizeRequest, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemtoggleSizeAllocate",Gtk_MenuItemtoggleSizeAllocate, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemsetRightJustified",Gtk_MenuItemsetRightJustified, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemgetRightJustified",Gtk_MenuItemgetRightJustified, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemsetAccelPath",Gtk_MenuItemsetAccelPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemnew",Gtk_MenuItemnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemnewWithLabel",Gtk_MenuItemnewWithLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuItemnewWithMnemonic",Gtk_MenuItemnewWithMnemonic, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShellgetType",Gtk_MenuShellgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShellappend",Gtk_MenuShellappend, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShellprepend",Gtk_MenuShellprepend, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShellinsert",Gtk_MenuShellinsert, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShelldeactivate",Gtk_MenuShelldeactivate, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShellselectItem",Gtk_MenuShellselectItem, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShelldeselect",Gtk_MenuShelldeselect, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShellactivateItem",Gtk_MenuShellactivateItem, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShellselectFirst",Gtk_MenuShellselectFirst, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuShellcancel",Gtk_MenuShellcancel, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuToolButtongetType",Gtk_MenuToolButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuToolButtonnewFromStock",Gtk_MenuToolButtonnewFromStock, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuToolButtonsetMenu",Gtk_MenuToolButtonsetMenu, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuToolButtongetMenu",Gtk_MenuToolButtongetMenu, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuToolButtonsetArrowTooltip",Gtk_MenuToolButtonsetArrowTooltip, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuToolButtonnew",Gtk_MenuToolButtonnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialogsetFieldImage",Gtk_MessageDialogsetFieldImage, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialoggetFieldImage",Gtk_MessageDialoggetFieldImage, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialogsetFieldLabel",Gtk_MessageDialogsetFieldLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialoggetFieldLabel",Gtk_MessageDialoggetFieldLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialoggetType",Gtk_MessageDialoggetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialogsetMarkup",Gtk_MessageDialogsetMarkup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialogformatSecondaryText",Gtk_MessageDialogformatSecondaryText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialogformatSecondaryMarkup",Gtk_MessageDialogformatSecondaryMarkup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialognew",Gtk_MessageDialognew, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageDialognewWithMarkup",Gtk_MessageDialognewWithMarkup, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MiscgetType",Gtk_MiscgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MiscsetAlignment",Gtk_MiscsetAlignment, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MiscgetAlignment",Gtk_MiscgetAlignment, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MiscsetPadding",Gtk_MiscsetPadding, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MiscgetPadding",Gtk_MiscgetPadding, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetFieldTabPos",Gtk_NotebooksetFieldTabPos, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetFieldTabPos",Gtk_NotebookgetFieldTabPos, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetType",Gtk_NotebookgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookappendPage",Gtk_NotebookappendPage, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookappendPageMenu",Gtk_NotebookappendPageMenu, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookprependPage",Gtk_NotebookprependPage, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookprependPageMenu",Gtk_NotebookprependPageMenu, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookinsertPage",Gtk_NotebookinsertPage, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookinsertPageMenu",Gtk_NotebookinsertPageMenu, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookremovePage",Gtk_NotebookremovePage, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetCurrentPage",Gtk_NotebookgetCurrentPage, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetNthPage",Gtk_NotebookgetNthPage, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetNPages",Gtk_NotebookgetNPages, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookpageNum",Gtk_NotebookpageNum, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetCurrentPage",Gtk_NotebooksetCurrentPage, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooknextPage",Gtk_NotebooknextPage, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookprevPage",Gtk_NotebookprevPage, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetShowBorder",Gtk_NotebooksetShowBorder, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetShowBorder",Gtk_NotebookgetShowBorder, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetShowTabs",Gtk_NotebooksetShowTabs, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetShowTabs",Gtk_NotebookgetShowTabs, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetTabPos",Gtk_NotebooksetTabPos, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetTabPos",Gtk_NotebookgetTabPos, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetScrollable",Gtk_NotebooksetScrollable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetScrollable",Gtk_NotebookgetScrollable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookpopupEnable",Gtk_NotebookpopupEnable, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookpopupDisable",Gtk_NotebookpopupDisable, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetTabLabel",Gtk_NotebookgetTabLabel, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetTabLabel",Gtk_NotebooksetTabLabel, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetTabLabelText",Gtk_NotebooksetTabLabelText, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetTabLabelText",Gtk_NotebookgetTabLabelText, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetMenuLabel",Gtk_NotebookgetMenuLabel, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetMenuLabel",Gtk_NotebooksetMenuLabel, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetMenuLabelText",Gtk_NotebooksetMenuLabelText, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookgetMenuLabelText",Gtk_NotebookgetMenuLabelText, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookqueryTabLabelPacking",Gtk_NotebookqueryTabLabelPacking, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebooksetTabLabelPacking",Gtk_NotebooksetTabLabelPacking, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookreorderChild",Gtk_NotebookreorderChild, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Notebooknew",Gtk_Notebooknew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ObjectgetType",Gtk_ObjectgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Objectnew",Gtk_Objectnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Objectsink",Gtk_Objectsink, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Objectdestroy",Gtk_Objectdestroy, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OldEditablegetType",Gtk_OldEditablegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OldEditableclaimSelection",Gtk_OldEditableclaimSelection, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OldEditablechanged",Gtk_OldEditablechanged, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OptionMenugetType",Gtk_OptionMenugetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OptionMenugetMenu",Gtk_OptionMenugetMenu, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OptionMenusetMenu",Gtk_OptionMenusetMenu, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OptionMenuremoveMenu",Gtk_OptionMenuremoveMenu, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OptionMenugetHistory",Gtk_OptionMenugetHistory, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OptionMenusetHistory",Gtk_OptionMenusetHistory, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PanedgetType",Gtk_PanedgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Panedadd1",Gtk_Panedadd1, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Panedadd2",Gtk_Panedadd2, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Panedpack1",Gtk_Panedpack1, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Panedpack2",Gtk_Panedpack2, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PanedgetPosition",Gtk_PanedgetPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PanedsetPosition",Gtk_PanedsetPosition, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PanedgetChild1",Gtk_PanedgetChild1, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PanedgetChild2",Gtk_PanedgetChild2, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PanedcomputePosition",Gtk_PanedcomputePosition, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PreviewgetType",Gtk_PreviewgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Previewsize",Gtk_Previewsize, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Previewput",Gtk_Previewput, 9, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PreviewdrawRow",Gtk_PreviewdrawRow, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PreviewsetExpand",Gtk_PreviewsetExpand, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressgetType",Gtk_ProgressgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBargetType",Gtk_ProgressBargetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarpulse",Gtk_ProgressBarpulse, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarsetText",Gtk_ProgressBarsetText, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarsetFraction",Gtk_ProgressBarsetFraction, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarsetPulseStep",Gtk_ProgressBarsetPulseStep, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarsetOrientation",Gtk_ProgressBarsetOrientation, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBargetText",Gtk_ProgressBargetText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBargetFraction",Gtk_ProgressBargetFraction, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBargetPulseStep",Gtk_ProgressBargetPulseStep, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBargetOrientation",Gtk_ProgressBargetOrientation, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarsetEllipsize",Gtk_ProgressBarsetEllipsize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBargetEllipsize",Gtk_ProgressBargetEllipsize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarnew",Gtk_ProgressBarnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtongetType",Gtk_RadioButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtongetGroup",Gtk_RadioButtongetGroup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtonsetGroup",Gtk_RadioButtonsetGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtonnew",Gtk_RadioButtonnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtonnewFromWidget",Gtk_RadioButtonnewFromWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtonnewWithLabel",Gtk_RadioButtonnewWithLabel, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtonnewWithLabelFromWidget",Gtk_RadioButtonnewWithLabelFromWidget, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtonnewWithMnemonic",Gtk_RadioButtonnewWithMnemonic, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioButtonnewWithMnemonicFromWidget",Gtk_RadioButtonnewWithMnemonicFromWidget, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemgetType",Gtk_RadioMenuItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemnewFromWidget",Gtk_RadioMenuItemnewFromWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemnewWithMnemonicFromWidget",Gtk_RadioMenuItemnewWithMnemonicFromWidget, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemnewWithLabelFromWidget",Gtk_RadioMenuItemnewWithLabelFromWidget, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemgetGroup",Gtk_RadioMenuItemgetGroup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemsetGroup",Gtk_RadioMenuItemsetGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemnew",Gtk_RadioMenuItemnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemnewWithLabel",Gtk_RadioMenuItemnewWithLabel, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioMenuItemnewWithMnemonic",Gtk_RadioMenuItemnewWithMnemonic, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioToolButtongetType",Gtk_RadioToolButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioToolButtonsetGroup",Gtk_RadioToolButtonsetGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioToolButtongetGroup",Gtk_RadioToolButtongetGroup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioToolButtonnewFromWidget",Gtk_RadioToolButtonnewFromWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RadioToolButtonnewWithStockFromWidget",Gtk_RadioToolButtonnewWithStockFromWidget, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangegetType",Gtk_RangegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangesetUpdatePolicy",Gtk_RangesetUpdatePolicy, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangegetUpdatePolicy",Gtk_RangegetUpdatePolicy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangesetAdjustment",Gtk_RangesetAdjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangegetAdjustment",Gtk_RangegetAdjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangesetInverted",Gtk_RangesetInverted, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangegetInverted",Gtk_RangegetInverted, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangesetIncrements",Gtk_RangesetIncrements, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangesetRange",Gtk_RangesetRange, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangesetValue",Gtk_RangesetValue, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RangegetValue",Gtk_RangegetValue, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcStylegetType",Gtk_RcStylegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcStylecopy",Gtk_RcStylecopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcStylereference",Gtk_RcStylereference, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcStyleunref",Gtk_RcStyleunref, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RulergetType",Gtk_RulergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RulersetMetric",Gtk_RulersetMetric, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RulersetRange",Gtk_RulersetRange, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RulerdrawTicks",Gtk_RulerdrawTicks, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RulerdrawPos",Gtk_RulerdrawPos, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RulergetMetric",Gtk_RulergetMetric, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RulergetRange",Gtk_RulergetRange, 5, 4);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalegetType",Gtk_ScalegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalesetDigits",Gtk_ScalesetDigits, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalegetDigits",Gtk_ScalegetDigits, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalesetDrawValue",Gtk_ScalesetDrawValue, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalegetDrawValue",Gtk_ScalegetDrawValue, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalesetValuePos",Gtk_ScalesetValuePos, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalegetValuePos",Gtk_ScalegetValuePos, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalegetLayout",Gtk_ScalegetLayout, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScalegetLayoutOffsets",Gtk_ScalegetLayoutOffsets, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrollbargetType",Gtk_ScrollbargetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowgetType",Gtk_ScrolledWindowgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowsetHadjustment",Gtk_ScrolledWindowsetHadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowsetVadjustment",Gtk_ScrolledWindowsetVadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowgetHadjustment",Gtk_ScrolledWindowgetHadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowgetVadjustment",Gtk_ScrolledWindowgetVadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowsetPolicy",Gtk_ScrolledWindowsetPolicy, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowgetPolicy",Gtk_ScrolledWindowgetPolicy, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowsetPlacement",Gtk_ScrolledWindowsetPlacement, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowgetPlacement",Gtk_ScrolledWindowgetPlacement, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowsetShadowType",Gtk_ScrolledWindowsetShadowType, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowgetShadowType",Gtk_ScrolledWindowgetShadowType, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindowaddWithViewport",Gtk_ScrolledWindowaddWithViewport, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrolledWindownew",Gtk_ScrolledWindownew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SeparatorgetType",Gtk_SeparatorgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SeparatorMenuItemgetType",Gtk_SeparatorMenuItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SeparatorMenuItemnew",Gtk_SeparatorMenuItemnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SeparatorToolItemgetType",Gtk_SeparatorToolItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SeparatorToolItemgetDraw",Gtk_SeparatorToolItemgetDraw, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SeparatorToolItemsetDraw",Gtk_SeparatorToolItemsetDraw, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SeparatorToolItemnew",Gtk_SeparatorToolItemnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingsgetType",Gtk_SettingsgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingsgetDefault",Gtk_SettingsgetDefault, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingsgetForScreen",Gtk_SettingsgetForScreen, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingsinstallProperty",Gtk_SettingsinstallProperty, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingsinstallPropertyParser",Gtk_SettingsinstallPropertyParser, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingssetPropertyValue",Gtk_SettingssetPropertyValue, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingssetStringProperty",Gtk_SettingssetStringProperty, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingssetLongProperty",Gtk_SettingssetLongProperty, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SettingssetDoubleProperty",Gtk_SettingssetDoubleProperty, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupgetType",Gtk_SizeGroupgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupsetMode",Gtk_SizeGroupsetMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupgetMode",Gtk_SizeGroupgetMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupaddWidget",Gtk_SizeGroupaddWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupremoveWidget",Gtk_SizeGroupremoveWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupnew",Gtk_SizeGroupnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetType",Gtk_SpinButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonconfigure",Gtk_SpinButtonconfigure, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetAdjustment",Gtk_SpinButtonsetAdjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetAdjustment",Gtk_SpinButtongetAdjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetDigits",Gtk_SpinButtonsetDigits, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetDigits",Gtk_SpinButtongetDigits, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetIncrements",Gtk_SpinButtonsetIncrements, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetIncrements",Gtk_SpinButtongetIncrements, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetRange",Gtk_SpinButtonsetRange, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetRange",Gtk_SpinButtongetRange, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetValue",Gtk_SpinButtongetValue, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetValueAsInt",Gtk_SpinButtongetValueAsInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetValue",Gtk_SpinButtonsetValue, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetUpdatePolicy",Gtk_SpinButtonsetUpdatePolicy, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetUpdatePolicy",Gtk_SpinButtongetUpdatePolicy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetNumeric",Gtk_SpinButtonsetNumeric, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetNumeric",Gtk_SpinButtongetNumeric, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonspin",Gtk_SpinButtonspin, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetWrap",Gtk_SpinButtonsetWrap, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetWrap",Gtk_SpinButtongetWrap, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonsetSnapToTicks",Gtk_SpinButtonsetSnapToTicks, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtongetSnapToTicks",Gtk_SpinButtongetSnapToTicks, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonupdate",Gtk_SpinButtonupdate, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonnew",Gtk_SpinButtonnew, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonnewWithRange",Gtk_SpinButtonnewWithRange, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StatusbargetType",Gtk_StatusbargetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StatusbargetContextId",Gtk_StatusbargetContextId, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Statusbarpush",Gtk_Statusbarpush, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Statusbarpop",Gtk_Statusbarpop, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Statusbarremove",Gtk_Statusbarremove, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StatusbarsetHasResizeGrip",Gtk_StatusbarsetHasResizeGrip, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StatusbargetHasResizeGrip",Gtk_StatusbargetHasResizeGrip, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Statusbarnew",Gtk_Statusbarnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylegetType",Gtk_StylegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Stylecopy",Gtk_Stylecopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Styleattach",Gtk_Styleattach, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Styledetach",Gtk_Styledetach, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylesetBackground",Gtk_StylesetBackground, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StyleapplyDefaultBackground",Gtk_StyleapplyDefaultBackground, 9, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylelookupIconSet",Gtk_StylelookupIconSet, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylerenderIcon",Gtk_StylerenderIcon, 7, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StyledrawCheck",Gtk_StyledrawCheck, 8, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintHLine",Gtk_StylepaintHLine, 9, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintVLine",Gtk_StylepaintVLine, 9, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintShadow",Gtk_StylepaintShadow, 11, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintPolygon",Gtk_StylepaintPolygon, 10, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintArrow",Gtk_StylepaintArrow, 13, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintDiamond",Gtk_StylepaintDiamond, 11, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintBox",Gtk_StylepaintBox, 11, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintFlatBox",Gtk_StylepaintFlatBox, 11, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintCheck",Gtk_StylepaintCheck, 11, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintOption",Gtk_StylepaintOption, 11, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintTab",Gtk_StylepaintTab, 11, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintShadowGap",Gtk_StylepaintShadowGap, 14, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintBoxGap",Gtk_StylepaintBoxGap, 14, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintExtension",Gtk_StylepaintExtension, 12, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintFocus",Gtk_StylepaintFocus, 10, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintSlider",Gtk_StylepaintSlider, 12, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintHandle",Gtk_StylepaintHandle, 12, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintExpander",Gtk_StylepaintExpander, 9, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintLayout",Gtk_StylepaintLayout, 10, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StylepaintResizeGrip",Gtk_StylepaintResizeGrip, 11, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Stylenew",Gtk_Stylenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablegetType",Gtk_TablegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Tableresize",Gtk_Tableresize, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Tableattach",Gtk_Tableattach, 10, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TableattachDefaults",Gtk_TableattachDefaults, 6, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablesetRowSpacing",Gtk_TablesetRowSpacing, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablegetRowSpacing",Gtk_TablegetRowSpacing, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablesetColSpacing",Gtk_TablesetColSpacing, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablegetColSpacing",Gtk_TablegetColSpacing, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablesetRowSpacings",Gtk_TablesetRowSpacings, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablegetDefaultRowSpacing",Gtk_TablegetDefaultRowSpacing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablesetColSpacings",Gtk_TablesetColSpacings, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablegetDefaultColSpacing",Gtk_TablegetDefaultColSpacing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablesetHomogeneous",Gtk_TablesetHomogeneous, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TablegetHomogeneous",Gtk_TablegetHomogeneous, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Tablenew",Gtk_Tablenew, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TearoffMenuItemgetType",Gtk_TearoffMenuItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TearoffMenuItemnew",Gtk_TearoffMenuItemnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffersetFieldTagTable",Gtk_TextBuffersetFieldTagTable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetFieldTagTable",Gtk_TextBuffergetFieldTagTable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetType",Gtk_TextBuffergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetLineCount",Gtk_TextBuffergetLineCount, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetCharCount",Gtk_TextBuffergetCharCount, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetTagTable",Gtk_TextBuffergetTagTable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffersetText",Gtk_TextBuffersetText, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsert",Gtk_TextBufferinsert, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertAtCursor",Gtk_TextBufferinsertAtCursor, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertInteractive",Gtk_TextBufferinsertInteractive, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertInteractiveAtCursor",Gtk_TextBufferinsertInteractiveAtCursor, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertRange",Gtk_TextBufferinsertRange, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertRangeInteractive",Gtk_TextBufferinsertRangeInteractive, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertWithTags",Gtk_TextBufferinsertWithTags, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertWithTagsByName",Gtk_TextBufferinsertWithTagsByName, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferdelete",Gtk_TextBufferdelete, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferdeleteInteractive",Gtk_TextBufferdeleteInteractive, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetText",Gtk_TextBuffergetText, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetSlice",Gtk_TextBuffergetSlice, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertPixbuf",Gtk_TextBufferinsertPixbuf, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferinsertChildAnchor",Gtk_TextBufferinsertChildAnchor, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffercreateChildAnchor",Gtk_TextBuffercreateChildAnchor, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffercreateMark",Gtk_TextBuffercreateMark, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffermoveMark",Gtk_TextBuffermoveMark, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferdeleteMark",Gtk_TextBufferdeleteMark, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetMark",Gtk_TextBuffergetMark, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffermoveMarkByName",Gtk_TextBuffermoveMarkByName, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferdeleteMarkByName",Gtk_TextBufferdeleteMarkByName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetInsert",Gtk_TextBuffergetInsert, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetSelectionBound",Gtk_TextBuffergetSelectionBound, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferplaceCursor",Gtk_TextBufferplaceCursor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferselectRange",Gtk_TextBufferselectRange, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferapplyTag",Gtk_TextBufferapplyTag, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferremoveTag",Gtk_TextBufferremoveTag, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferapplyTagByName",Gtk_TextBufferapplyTagByName, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferremoveTagByName",Gtk_TextBufferremoveTagByName, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferremoveAllTags",Gtk_TextBufferremoveAllTags, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffercreateTag",Gtk_TextBuffercreateTag, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetIterAtLineOffset",Gtk_TextBuffergetIterAtLineOffset, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetIterAtLineIndex",Gtk_TextBuffergetIterAtLineIndex, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetIterAtOffset",Gtk_TextBuffergetIterAtOffset, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetIterAtLine",Gtk_TextBuffergetIterAtLine, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetStartIter",Gtk_TextBuffergetStartIter, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetEndIter",Gtk_TextBuffergetEndIter, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetBounds",Gtk_TextBuffergetBounds, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetIterAtMark",Gtk_TextBuffergetIterAtMark, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetIterAtChildAnchor",Gtk_TextBuffergetIterAtChildAnchor, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetModified",Gtk_TextBuffergetModified, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffersetModified",Gtk_TextBuffersetModified, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferaddSelectionClipboard",Gtk_TextBufferaddSelectionClipboard, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferremoveSelectionClipboard",Gtk_TextBufferremoveSelectionClipboard, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffercutClipboard",Gtk_TextBuffercutClipboard, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffercopyClipboard",Gtk_TextBuffercopyClipboard, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferpasteClipboard",Gtk_TextBufferpasteClipboard, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffergetSelectionBounds",Gtk_TextBuffergetSelectionBounds, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferdeleteSelection",Gtk_TextBufferdeleteSelection, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferbeginUserAction",Gtk_TextBufferbeginUserAction, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferendUserAction",Gtk_TextBufferendUserAction, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferbackspace",Gtk_TextBufferbackspace, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBufferconnectSpecialSignals",Gtk_TextBufferconnectSpecialSignals, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextBuffernew",Gtk_TextBuffernew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextChildAnchorgetType",Gtk_TextChildAnchorgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextChildAnchorgetWidgets",Gtk_TextChildAnchorgetWidgets, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextChildAnchorgetDeleted",Gtk_TextChildAnchorgetDeleted, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextChildAnchornew",Gtk_TextChildAnchornew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextMarkgetType",Gtk_TextMarkgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextMarksetVisible",Gtk_TextMarksetVisible, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextMarkgetVisible",Gtk_TextMarkgetVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextMarkgetName",Gtk_TextMarkgetName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextMarkgetDeleted",Gtk_TextMarkgetDeleted, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextMarkgetBuffer",Gtk_TextMarkgetBuffer, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextMarkgetLeftGravity",Gtk_TextMarkgetLeftGravity, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTaggetType",Gtk_TextTaggetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTaggetPriority",Gtk_TextTaggetPriority, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagsetPriority",Gtk_TextTagsetPriority, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagevent",Gtk_TextTagevent, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagnew",Gtk_TextTagnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagTablegetType",Gtk_TextTagTablegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagTableadd",Gtk_TextTagTableadd, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagTableremove",Gtk_TextTagTableremove, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagTablelookup",Gtk_TextTagTablelookup, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagTableforeach",Gtk_TextTagTableforeach, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagTablegetSize",Gtk_TextTagTablegetSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextTagTablenew",Gtk_TextTagTablenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetType",Gtk_TextViewgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetBuffer",Gtk_TextViewsetBuffer, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetBuffer",Gtk_TextViewgetBuffer, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewscrollToIter",Gtk_TextViewscrollToIter, 6, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewscrollToMark",Gtk_TextViewscrollToMark, 6, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewscrollMarkOnscreen",Gtk_TextViewscrollMarkOnscreen, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewmoveMarkOnscreen",Gtk_TextViewmoveMarkOnscreen, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewplaceCursorOnscreen",Gtk_TextViewplaceCursorOnscreen, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetVisibleRect",Gtk_TextViewgetVisibleRect, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetCursorVisible",Gtk_TextViewsetCursorVisible, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetCursorVisible",Gtk_TextViewgetCursorVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetIterLocation",Gtk_TextViewgetIterLocation, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetIterAtLocation",Gtk_TextViewgetIterAtLocation, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetIterAtPosition",Gtk_TextViewgetIterAtPosition, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetLineYrange",Gtk_TextViewgetLineYrange, 4, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetLineAtY",Gtk_TextViewgetLineAtY, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewbufferToWindowCoords",Gtk_TextViewbufferToWindowCoords, 6, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewwindowToBufferCoords",Gtk_TextViewwindowToBufferCoords, 6, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetWindow",Gtk_TextViewgetWindow, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetWindowType",Gtk_TextViewgetWindowType, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetBorderWindowSize",Gtk_TextViewsetBorderWindowSize, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetBorderWindowSize",Gtk_TextViewgetBorderWindowSize, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewforwardDisplayLine",Gtk_TextViewforwardDisplayLine, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewbackwardDisplayLine",Gtk_TextViewbackwardDisplayLine, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewforwardDisplayLineEnd",Gtk_TextViewforwardDisplayLineEnd, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewbackwardDisplayLineStart",Gtk_TextViewbackwardDisplayLineStart, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewstartsDisplayLine",Gtk_TextViewstartsDisplayLine, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewmoveVisually",Gtk_TextViewmoveVisually, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewaddChildAtAnchor",Gtk_TextViewaddChildAtAnchor, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewaddChildInWindow",Gtk_TextViewaddChildInWindow, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewmoveChild",Gtk_TextViewmoveChild, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetWrapMode",Gtk_TextViewsetWrapMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetWrapMode",Gtk_TextViewgetWrapMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetEditable",Gtk_TextViewsetEditable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetEditable",Gtk_TextViewgetEditable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetOverwrite",Gtk_TextViewsetOverwrite, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetOverwrite",Gtk_TextViewgetOverwrite, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetAcceptsTab",Gtk_TextViewsetAcceptsTab, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetAcceptsTab",Gtk_TextViewgetAcceptsTab, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetPixelsAboveLines",Gtk_TextViewsetPixelsAboveLines, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetPixelsAboveLines",Gtk_TextViewgetPixelsAboveLines, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetPixelsBelowLines",Gtk_TextViewsetPixelsBelowLines, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetPixelsBelowLines",Gtk_TextViewgetPixelsBelowLines, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetPixelsInsideWrap",Gtk_TextViewsetPixelsInsideWrap, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetPixelsInsideWrap",Gtk_TextViewgetPixelsInsideWrap, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetJustification",Gtk_TextViewsetJustification, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetJustification",Gtk_TextViewgetJustification, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetLeftMargin",Gtk_TextViewsetLeftMargin, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetLeftMargin",Gtk_TextViewgetLeftMargin, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetRightMargin",Gtk_TextViewsetRightMargin, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetRightMargin",Gtk_TextViewgetRightMargin, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetIndent",Gtk_TextViewsetIndent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetIndent",Gtk_TextViewgetIndent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewsetTabs",Gtk_TextViewsetTabs, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetTabs",Gtk_TextViewgetTabs, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewgetDefaultAttributes",Gtk_TextViewgetDefaultAttributes, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewnew",Gtk_TextViewnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextViewnewWithBuffer",Gtk_TextViewnewWithBuffer, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleActiongetType",Gtk_ToggleActiongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleActiontoggled",Gtk_ToggleActiontoggled, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleActionsetActive",Gtk_ToggleActionsetActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleActiongetActive",Gtk_ToggleActiongetActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleActionsetDrawAsRadio",Gtk_ToggleActionsetDrawAsRadio, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleActiongetDrawAsRadio",Gtk_ToggleActiongetDrawAsRadio, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleActionnew",Gtk_ToggleActionnew, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtonsetFieldDrawIndicator",Gtk_ToggleButtonsetFieldDrawIndicator, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtongetFieldDrawIndicator",Gtk_ToggleButtongetFieldDrawIndicator, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtongetType",Gtk_ToggleButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtonsetMode",Gtk_ToggleButtonsetMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtongetMode",Gtk_ToggleButtongetMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtonsetActive",Gtk_ToggleButtonsetActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtongetActive",Gtk_ToggleButtongetActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtontoggled",Gtk_ToggleButtontoggled, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtonsetInconsistent",Gtk_ToggleButtonsetInconsistent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtongetInconsistent",Gtk_ToggleButtongetInconsistent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtonnew",Gtk_ToggleButtonnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtonnewWithLabel",Gtk_ToggleButtonnewWithLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleButtonnewWithMnemonic",Gtk_ToggleButtonnewWithMnemonic, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleToolButtongetType",Gtk_ToggleToolButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleToolButtonnewFromStock",Gtk_ToggleToolButtonnewFromStock, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleToolButtonsetActive",Gtk_ToggleToolButtonsetActive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleToolButtongetActive",Gtk_ToggleToolButtongetActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToggleToolButtonnew",Gtk_ToggleToolButtonnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetType",Gtk_ToolbargetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Toolbarinsert",Gtk_Toolbarinsert, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetItemIndex",Gtk_ToolbargetItemIndex, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetNItems",Gtk_ToolbargetNItems, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetNthItem",Gtk_ToolbargetNthItem, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetDropIndex",Gtk_ToolbargetDropIndex, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarsetDropHighlightItem",Gtk_ToolbarsetDropHighlightItem, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarsetShowArrow",Gtk_ToolbarsetShowArrow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetShowArrow",Gtk_ToolbargetShowArrow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetReliefStyle",Gtk_ToolbargetReliefStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarsetOrientation",Gtk_ToolbarsetOrientation, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarsetStyle",Gtk_ToolbarsetStyle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarsetTooltips",Gtk_ToolbarsetTooltips, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarunsetStyle",Gtk_ToolbarunsetStyle, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetOrientation",Gtk_ToolbargetOrientation, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetStyle",Gtk_ToolbargetStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetIconSize",Gtk_ToolbargetIconSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbargetTooltips",Gtk_ToolbargetTooltips, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Toolbarnew",Gtk_Toolbarnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtongetType",Gtk_ToolButtongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtonnewFromStock",Gtk_ToolButtonnewFromStock, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtonsetLabel",Gtk_ToolButtonsetLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtongetLabel",Gtk_ToolButtongetLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtonsetUseUnderline",Gtk_ToolButtonsetUseUnderline, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtongetUseUnderline",Gtk_ToolButtongetUseUnderline, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtonsetStockId",Gtk_ToolButtonsetStockId, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtongetStockId",Gtk_ToolButtongetStockId, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtonsetIconWidget",Gtk_ToolButtonsetIconWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtongetIconWidget",Gtk_ToolButtongetIconWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtonsetLabelWidget",Gtk_ToolButtonsetLabelWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtongetLabelWidget",Gtk_ToolButtongetLabelWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolButtonnew",Gtk_ToolButtonnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetType",Gtk_ToolItemgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemsetHomogeneous",Gtk_ToolItemsetHomogeneous, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetHomogeneous",Gtk_ToolItemgetHomogeneous, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemsetExpand",Gtk_ToolItemsetExpand, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetExpand",Gtk_ToolItemgetExpand, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemsetTooltip",Gtk_ToolItemsetTooltip, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemsetUseDragWindow",Gtk_ToolItemsetUseDragWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetUseDragWindow",Gtk_ToolItemgetUseDragWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemsetVisibleHorizontal",Gtk_ToolItemsetVisibleHorizontal, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetVisibleHorizontal",Gtk_ToolItemgetVisibleHorizontal, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemsetVisibleVertical",Gtk_ToolItemsetVisibleVertical, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetVisibleVertical",Gtk_ToolItemgetVisibleVertical, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemsetIsImportant",Gtk_ToolItemsetIsImportant, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetIsImportant",Gtk_ToolItemgetIsImportant, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetIconSize",Gtk_ToolItemgetIconSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetOrientation",Gtk_ToolItemgetOrientation, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetToolbarStyle",Gtk_ToolItemgetToolbarStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetReliefStyle",Gtk_ToolItemgetReliefStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemretrieveProxyMenuItem",Gtk_ToolItemretrieveProxyMenuItem, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemsetProxyMenuItem",Gtk_ToolItemsetProxyMenuItem, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemgetProxyMenuItem",Gtk_ToolItemgetProxyMenuItem, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemrebuildMenu",Gtk_ToolItemrebuildMenu, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolItemnew",Gtk_ToolItemnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetFieldActiveTipsData",Gtk_TooltipssetFieldActiveTipsData, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetFieldActiveTipsData",Gtk_TooltipsgetFieldActiveTipsData, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetFieldDelay",Gtk_TooltipssetFieldDelay, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetFieldDelay",Gtk_TooltipsgetFieldDelay, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetFieldEnabled",Gtk_TooltipssetFieldEnabled, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetFieldEnabled",Gtk_TooltipsgetFieldEnabled, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetFieldTimerTag",Gtk_TooltipssetFieldTimerTag, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetFieldTimerTag",Gtk_TooltipsgetFieldTimerTag, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetFieldTipLabel",Gtk_TooltipssetFieldTipLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetFieldTipLabel",Gtk_TooltipsgetFieldTipLabel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetFieldTipWindow",Gtk_TooltipssetFieldTipWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetFieldTipWindow",Gtk_TooltipsgetFieldTipWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetFieldTipsDataList",Gtk_TooltipssetFieldTipsDataList, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetFieldTipsDataList",Gtk_TooltipsgetFieldTipsDataList, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetFieldUseStickyDelay",Gtk_TooltipssetFieldUseStickyDelay, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetFieldUseStickyDelay",Gtk_TooltipsgetFieldUseStickyDelay, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsgetType",Gtk_TooltipsgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Tooltipsenable",Gtk_Tooltipsenable, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Tooltipsdisable",Gtk_Tooltipsdisable, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipssetTip",Gtk_TooltipssetTip, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsdataGet",Gtk_TooltipsdataGet, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TooltipsforceWindow",Gtk_TooltipsforceWindow, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Tooltipsnew",Gtk_Tooltipsnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFiltergetType",Gtk_TreeModelFiltergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFiltersetModifyFunc",Gtk_TreeModelFiltersetModifyFunc, 6, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFiltersetVisibleColumn",Gtk_TreeModelFiltersetVisibleColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFiltergetModel",Gtk_TreeModelFiltergetModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFilterconvertChildIterToIter",Gtk_TreeModelFilterconvertChildIterToIter, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFilterconvertIterToChildIter",Gtk_TreeModelFilterconvertIterToChildIter, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFilterconvertChildPathToPath",Gtk_TreeModelFilterconvertChildPathToPath, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFilterconvertPathToChildPath",Gtk_TreeModelFilterconvertPathToChildPath, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFilterrefilter",Gtk_TreeModelFilterrefilter, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFilterclearCache",Gtk_TreeModelFilterclearCache, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortgetType",Gtk_TreeModelSortgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortgetModel",Gtk_TreeModelSortgetModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortconvertChildPathToPath",Gtk_TreeModelSortconvertChildPathToPath, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortconvertChildIterToIter",Gtk_TreeModelSortconvertChildIterToIter, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortconvertPathToChildPath",Gtk_TreeModelSortconvertPathToChildPath, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortconvertIterToChildIter",Gtk_TreeModelSortconvertIterToChildIter, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortresetDefaultSortFunc",Gtk_TreeModelSortresetDefaultSortFunc, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortclearCache",Gtk_TreeModelSortclearCache, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortiterIsValid",Gtk_TreeModelSortiterIsValid, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelSortnewWithModel",Gtk_TreeModelSortnewWithModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectiongetType",Gtk_TreeSelectiongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionsetMode",Gtk_TreeSelectionsetMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectiongetMode",Gtk_TreeSelectiongetMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectiongetUserData",Gtk_TreeSelectiongetUserData, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectiongetTreeView",Gtk_TreeSelectiongetTreeView, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectiongetSelected",Gtk_TreeSelectiongetSelected, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectiongetSelectedRows",Gtk_TreeSelectiongetSelectedRows, 1, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectioncountSelectedRows",Gtk_TreeSelectioncountSelectedRows, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionselectPath",Gtk_TreeSelectionselectPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionunselectPath",Gtk_TreeSelectionunselectPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionselectIter",Gtk_TreeSelectionselectIter, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionunselectIter",Gtk_TreeSelectionunselectIter, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionpathIsSelected",Gtk_TreeSelectionpathIsSelected, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectioniterIsSelected",Gtk_TreeSelectioniterIsSelected, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionselectAll",Gtk_TreeSelectionselectAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionunselectAll",Gtk_TreeSelectionunselectAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionselectRange",Gtk_TreeSelectionselectRange, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeSelectionunselectRange",Gtk_TreeSelectionunselectRange, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoregetType",Gtk_TreeStoregetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoresetColumnTypes",Gtk_TreeStoresetColumnTypes, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoresetValue",Gtk_TreeStoresetValue, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreset",Gtk_TreeStoreset, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreremove",Gtk_TreeStoreremove, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreinsert",Gtk_TreeStoreinsert, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreinsertBefore",Gtk_TreeStoreinsertBefore, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreinsertAfter",Gtk_TreeStoreinsertAfter, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreprepend",Gtk_TreeStoreprepend, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreappend",Gtk_TreeStoreappend, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreisAncestor",Gtk_TreeStoreisAncestor, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreiterDepth",Gtk_TreeStoreiterDepth, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreclear",Gtk_TreeStoreclear, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreiterIsValid",Gtk_TreeStoreiterIsValid, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStorereorder",Gtk_TreeStorereorder, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoreswap",Gtk_TreeStoreswap, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoremoveAfter",Gtk_TreeStoremoveAfter, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStoremoveBefore",Gtk_TreeStoremoveBefore, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeStorenewv",Gtk_TreeStorenewv, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetType",Gtk_TreeViewgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetModel",Gtk_TreeViewgetModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetModel",Gtk_TreeViewsetModel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetSelection",Gtk_TreeViewgetSelection, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetHadjustment",Gtk_TreeViewgetHadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetHadjustment",Gtk_TreeViewsetHadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetVadjustment",Gtk_TreeViewgetVadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetVadjustment",Gtk_TreeViewsetVadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetHeadersVisible",Gtk_TreeViewgetHeadersVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetHeadersVisible",Gtk_TreeViewsetHeadersVisible, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewcolumnsAutosize",Gtk_TreeViewcolumnsAutosize, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetHeadersClickable",Gtk_TreeViewsetHeadersClickable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetRulesHint",Gtk_TreeViewsetRulesHint, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetRulesHint",Gtk_TreeViewgetRulesHint, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewappendColumn",Gtk_TreeViewappendColumn, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewremoveColumn",Gtk_TreeViewremoveColumn, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewinsertColumn",Gtk_TreeViewinsertColumn, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewinsertColumnWithAttributes",Gtk_TreeViewinsertColumnWithAttributes, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetColumn",Gtk_TreeViewgetColumn, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetColumns",Gtk_TreeViewgetColumns, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewmoveColumnAfter",Gtk_TreeViewmoveColumnAfter, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetExpanderColumn",Gtk_TreeViewsetExpanderColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetExpanderColumn",Gtk_TreeViewgetExpanderColumn, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewscrollToPoint",Gtk_TreeViewscrollToPoint, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewscrollToCell",Gtk_TreeViewscrollToCell, 6, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewrowActivated",Gtk_TreeViewrowActivated, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewexpandAll",Gtk_TreeViewexpandAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewcollapseAll",Gtk_TreeViewcollapseAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewexpandToPath",Gtk_TreeViewexpandToPath, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewexpandRow",Gtk_TreeViewexpandRow, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewcollapseRow",Gtk_TreeViewcollapseRow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewrowExpanded",Gtk_TreeViewrowExpanded, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetReorderable",Gtk_TreeViewsetReorderable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetReorderable",Gtk_TreeViewgetReorderable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetCursor",Gtk_TreeViewsetCursor, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetCursorOnCell",Gtk_TreeViewsetCursorOnCell, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetCursor",Gtk_TreeViewgetCursor, 1, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetBinWindow",Gtk_TreeViewgetBinWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetPathAtPos",Gtk_TreeViewgetPathAtPos, 5, 5);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetCellArea",Gtk_TreeViewgetCellArea, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetBackgroundArea",Gtk_TreeViewgetBackgroundArea, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetVisibleRect",Gtk_TreeViewgetVisibleRect, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewwidgetToTreeCoords",Gtk_TreeViewwidgetToTreeCoords, 5, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewtreeToWidgetCoords",Gtk_TreeViewtreeToWidgetCoords, 5, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewenableModelDragSource",Gtk_TreeViewenableModelDragSource, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewenableModelDragDest",Gtk_TreeViewenableModelDragDest, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewunsetRowsDragSource",Gtk_TreeViewunsetRowsDragSource, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewunsetRowsDragDest",Gtk_TreeViewunsetRowsDragDest, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetDragDestRow",Gtk_TreeViewsetDragDestRow, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetDragDestRow",Gtk_TreeViewgetDragDestRow, 2, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetDestRowAtPos",Gtk_TreeViewgetDestRowAtPos, 4, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewcreateRowDragIcon",Gtk_TreeViewcreateRowDragIcon, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetEnableSearch",Gtk_TreeViewsetEnableSearch, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetEnableSearch",Gtk_TreeViewgetEnableSearch, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetSearchColumn",Gtk_TreeViewgetSearchColumn, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetSearchColumn",Gtk_TreeViewsetSearchColumn, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetFixedHeightMode",Gtk_TreeViewsetFixedHeightMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetFixedHeightMode",Gtk_TreeViewgetFixedHeightMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetHoverSelection",Gtk_TreeViewsetHoverSelection, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetHoverSelection",Gtk_TreeViewgetHoverSelection, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewsetHoverExpand",Gtk_TreeViewsetHoverExpand, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewgetHoverExpand",Gtk_TreeViewgetHoverExpand, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewnew",Gtk_TreeViewnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewnewWithModel",Gtk_TreeViewnewWithModel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetType",Gtk_TreeViewColumngetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnpackStart",Gtk_TreeViewColumnpackStart, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnpackEnd",Gtk_TreeViewColumnpackEnd, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnclear",Gtk_TreeViewColumnclear, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetCellRenderers",Gtk_TreeViewColumngetCellRenderers, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnaddAttribute",Gtk_TreeViewColumnaddAttribute, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetAttributes",Gtk_TreeViewColumnsetAttributes, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetCellDataFunc",Gtk_TreeViewColumnsetCellDataFunc, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnclearAttributes",Gtk_TreeViewColumnclearAttributes, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetSpacing",Gtk_TreeViewColumnsetSpacing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetSpacing",Gtk_TreeViewColumngetSpacing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetVisible",Gtk_TreeViewColumnsetVisible, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetVisible",Gtk_TreeViewColumngetVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetResizable",Gtk_TreeViewColumnsetResizable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetResizable",Gtk_TreeViewColumngetResizable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetSizing",Gtk_TreeViewColumnsetSizing, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetSizing",Gtk_TreeViewColumngetSizing, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetWidth",Gtk_TreeViewColumngetWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetFixedWidth",Gtk_TreeViewColumngetFixedWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetFixedWidth",Gtk_TreeViewColumnsetFixedWidth, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetMinWidth",Gtk_TreeViewColumnsetMinWidth, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetMinWidth",Gtk_TreeViewColumngetMinWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetMaxWidth",Gtk_TreeViewColumnsetMaxWidth, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetMaxWidth",Gtk_TreeViewColumngetMaxWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnclicked",Gtk_TreeViewColumnclicked, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetTitle",Gtk_TreeViewColumnsetTitle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetTitle",Gtk_TreeViewColumngetTitle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetExpand",Gtk_TreeViewColumnsetExpand, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetExpand",Gtk_TreeViewColumngetExpand, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetClickable",Gtk_TreeViewColumnsetClickable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetClickable",Gtk_TreeViewColumngetClickable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetWidget",Gtk_TreeViewColumnsetWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetWidget",Gtk_TreeViewColumngetWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetAlignment",Gtk_TreeViewColumnsetAlignment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetAlignment",Gtk_TreeViewColumngetAlignment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetReorderable",Gtk_TreeViewColumnsetReorderable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetReorderable",Gtk_TreeViewColumngetReorderable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetSortColumnId",Gtk_TreeViewColumnsetSortColumnId, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetSortColumnId",Gtk_TreeViewColumngetSortColumnId, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetSortIndicator",Gtk_TreeViewColumnsetSortIndicator, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetSortIndicator",Gtk_TreeViewColumngetSortIndicator, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnsetSortOrder",Gtk_TreeViewColumnsetSortOrder, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumngetSortOrder",Gtk_TreeViewColumngetSortOrder, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumncellSetCellData",Gtk_TreeViewColumncellSetCellData, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumncellGetSize",Gtk_TreeViewColumncellGetSize, 6, 4);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumncellIsVisible",Gtk_TreeViewColumncellIsVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnfocusCell",Gtk_TreeViewColumnfocusCell, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumncellGetPosition",Gtk_TreeViewColumncellGetPosition, 4, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnnew",Gtk_TreeViewColumnnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnnewWithAttributes",Gtk_TreeViewColumnnewWithAttributes, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagergetType",Gtk_UIManagergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagersetAddTearoffs",Gtk_UIManagersetAddTearoffs, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagergetAddTearoffs",Gtk_UIManagergetAddTearoffs, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagerinsertActionGroup",Gtk_UIManagerinsertActionGroup, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagerremoveActionGroup",Gtk_UIManagerremoveActionGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagergetActionGroups",Gtk_UIManagergetActionGroups, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagergetAccelGroup",Gtk_UIManagergetAccelGroup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagergetWidget",Gtk_UIManagergetWidget, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagergetToplevels",Gtk_UIManagergetToplevels, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagergetAction",Gtk_UIManagergetAction, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManageraddUIFromString",Gtk_UIManageraddUIFromString, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManageraddUIFromFile",Gtk_UIManageraddUIFromFile, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManageraddUI",Gtk_UIManageraddUI, 7, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagerremoveUI",Gtk_UIManagerremoveUI, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagergetUI",Gtk_UIManagergetUI, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagerensureUpdate",Gtk_UIManagerensureUpdate, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagernewMergeId",Gtk_UIManagernewMergeId, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagernew",Gtk_UIManagernew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VBoxgetType",Gtk_VBoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VBoxnew",Gtk_VBoxnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VButtonBoxgetType",Gtk_VButtonBoxgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VButtonBoxgetSpacingDefault",Gtk_VButtonBoxgetSpacingDefault, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VButtonBoxsetSpacingDefault",Gtk_VButtonBoxsetSpacingDefault, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VButtonBoxgetLayoutDefault",Gtk_VButtonBoxgetLayoutDefault, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VButtonBoxsetLayoutDefault",Gtk_VButtonBoxsetLayoutDefault, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VButtonBoxnew",Gtk_VButtonBoxnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ViewportgetType",Gtk_ViewportgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ViewportgetHadjustment",Gtk_ViewportgetHadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ViewportgetVadjustment",Gtk_ViewportgetVadjustment, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ViewportsetHadjustment",Gtk_ViewportsetHadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ViewportsetVadjustment",Gtk_ViewportsetVadjustment, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ViewportsetShadowType",Gtk_ViewportsetShadowType, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ViewportgetShadowType",Gtk_ViewportgetShadowType, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Viewportnew",Gtk_Viewportnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VPanedgetType",Gtk_VPanedgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VPanednew",Gtk_VPanednew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VRulergetType",Gtk_VRulergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VRulernew",Gtk_VRulernew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VScalegetType",Gtk_VScalegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VScalenew",Gtk_VScalenew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VScalenewWithRange",Gtk_VScalenewWithRange, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VScrollbargetType",Gtk_VScrollbargetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VScrollbarnew",Gtk_VScrollbarnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VSeparatorgetType",Gtk_VSeparatorgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VSeparatornew",Gtk_VSeparatornew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetFieldAllocation",Gtk_WidgetsetFieldAllocation, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetFieldAllocation",Gtk_WidgetgetFieldAllocation, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetFieldName",Gtk_WidgetsetFieldName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetFieldName",Gtk_WidgetgetFieldName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetFieldParent",Gtk_WidgetsetFieldParent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetFieldParent",Gtk_WidgetgetFieldParent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetFieldSavedState",Gtk_WidgetsetFieldSavedState, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetFieldSavedState",Gtk_WidgetgetFieldSavedState, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetFieldState",Gtk_WidgetsetFieldState, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetFieldState",Gtk_WidgetgetFieldState, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetFieldStyle",Gtk_WidgetsetFieldStyle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetFieldStyle",Gtk_WidgetgetFieldStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetFieldWindow",Gtk_WidgetsetFieldWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetFieldWindow",Gtk_WidgetgetFieldWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragCheckThreshold",Gtk_WidgetdragCheckThreshold, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragGetData",Gtk_WidgetdragGetData, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragHighlight",Gtk_WidgetdragHighlight, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragUnhighlight",Gtk_WidgetdragUnhighlight, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestSet",Gtk_WidgetdragDestSet, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestSetProxy",Gtk_WidgetdragDestSetProxy, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestUnset",Gtk_WidgetdragDestUnset, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestFindTarget",Gtk_WidgetdragDestFindTarget, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestGetTargetList",Gtk_WidgetdragDestGetTargetList, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestSetTargetList",Gtk_WidgetdragDestSetTargetList, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragSourceSet",Gtk_WidgetdragSourceSet, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragSourceUnset",Gtk_WidgetdragSourceUnset, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragSourceSetIcon",Gtk_WidgetdragSourceSetIcon, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragSourceSetIconPixbuf",Gtk_WidgetdragSourceSetIconPixbuf, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragSourceSetIconStock",Gtk_WidgetdragSourceSetIconStock, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragSourceGetTargetList",Gtk_WidgetdragSourceGetTargetList, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragSourceSetTargetList",Gtk_WidgetdragSourceSetTargetList, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragBegin",Gtk_WidgetdragBegin, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestAddTextTargets",Gtk_WidgetdragDestAddTextTargets, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestAddImageTargets",Gtk_WidgetdragDestAddImageTargets, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragDestAddUriTargets",Gtk_WidgetdragDestAddUriTargets, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetdragSourceAddTextTargets",Gtk_WidgetdragSourceAddTextTargets, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgrabAdd",Gtk_WidgetgrabAdd, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgrabRemove",Gtk_WidgetgrabRemove, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetpropagateEvent",Gtk_WidgetpropagateEvent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetmenuGetForAttachWidget",Gtk_WidgetmenuGetForAttachWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetrcGetStyle",Gtk_WidgetrcGetStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetselectionOwnerSet",Gtk_WidgetselectionOwnerSet, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetselectionAddTarget",Gtk_WidgetselectionAddTarget, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetselectionAddTargets",Gtk_WidgetselectionAddTargets, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetselectionClearTargets",Gtk_WidgetselectionClearTargets, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetselectionConvert",Gtk_WidgetselectionConvert, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetselectionRemoveAll",Gtk_WidgetselectionRemoveAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetselectionClear",Gtk_WidgetselectionClear, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetType",Gtk_WidgetgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetreference",Gtk_Widgetreference, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetunref",Gtk_Widgetunref, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetdestroy",Gtk_Widgetdestroy, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetdestroyed",Gtk_Widgetdestroyed, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetset",Gtk_Widgetset, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetunparent",Gtk_Widgetunparent, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetshow",Gtk_Widgetshow, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetshowNow",Gtk_WidgetshowNow, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgethide",Gtk_Widgethide, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetshowAll",Gtk_WidgetshowAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgethideAll",Gtk_WidgethideAll, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetNoShowAll",Gtk_WidgetsetNoShowAll, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetNoShowAll",Gtk_WidgetgetNoShowAll, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetmap",Gtk_Widgetmap, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetunmap",Gtk_Widgetunmap, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetrealize",Gtk_Widgetrealize, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetunrealize",Gtk_Widgetunrealize, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetqueueDraw",Gtk_WidgetqueueDraw, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetqueueDrawArea",Gtk_WidgetqueueDrawArea, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetqueueClear",Gtk_WidgetqueueClear, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetqueueClearArea",Gtk_WidgetqueueClearArea, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetqueueResize",Gtk_WidgetqueueResize, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetqueueResizeNoRedraw",Gtk_WidgetqueueResizeNoRedraw, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetdraw",Gtk_Widgetdraw, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsizeRequest",Gtk_WidgetsizeRequest, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsizeAllocate",Gtk_WidgetsizeAllocate, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetChildRequisition",Gtk_WidgetgetChildRequisition, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetaddAccelerator",Gtk_WidgetaddAccelerator, 6, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetremoveAccelerator",Gtk_WidgetremoveAccelerator, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetAccelPath",Gtk_WidgetsetAccelPath, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetlistAccelClosures",Gtk_WidgetlistAccelClosures, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetcanActivateAccel",Gtk_WidgetcanActivateAccel, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetmnemonicActivate",Gtk_WidgetmnemonicActivate, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetevent",Gtk_Widgetevent, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsendExpose",Gtk_WidgetsendExpose, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetactivate",Gtk_Widgetactivate, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetScrollAdjustments",Gtk_WidgetsetScrollAdjustments, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetreparent",Gtk_Widgetreparent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetintersect",Gtk_Widgetintersect, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetregionIntersect",Gtk_WidgetregionIntersect, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetfreezeChildNotify",Gtk_WidgetfreezeChildNotify, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetchildNotify",Gtk_WidgetchildNotify, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetthawChildNotify",Gtk_WidgetthawChildNotify, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetisFocus",Gtk_WidgetisFocus, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgrabFocus",Gtk_WidgetgrabFocus, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgrabDefault",Gtk_WidgetgrabDefault, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetName",Gtk_WidgetsetName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetName",Gtk_WidgetgetName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetState",Gtk_WidgetsetState, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetSensitive",Gtk_WidgetsetSensitive, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetAppPaintable",Gtk_WidgetsetAppPaintable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetDoubleBuffered",Gtk_WidgetsetDoubleBuffered, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetRedrawOnAllocate",Gtk_WidgetsetRedrawOnAllocate, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetParent",Gtk_WidgetsetParent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetParentWindow",Gtk_WidgetsetParentWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetChildVisible",Gtk_WidgetsetChildVisible, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetChildVisible",Gtk_WidgetgetChildVisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetParent",Gtk_WidgetgetParent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetParentWindow",Gtk_WidgetgetParentWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetchildFocus",Gtk_WidgetchildFocus, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetSizeRequest",Gtk_WidgetsetSizeRequest, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetSizeRequest",Gtk_WidgetgetSizeRequest, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetEvents",Gtk_WidgetsetEvents, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetaddEvents",Gtk_WidgetaddEvents, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetExtensionEvents",Gtk_WidgetsetExtensionEvents, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetExtensionEvents",Gtk_WidgetgetExtensionEvents, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetToplevel",Gtk_WidgetgetToplevel, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetAncestor",Gtk_WidgetgetAncestor, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetColormap",Gtk_WidgetgetColormap, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetVisual",Gtk_WidgetgetVisual, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetScreen",Gtk_WidgetgetScreen, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgethasScreen",Gtk_WidgethasScreen, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetDisplay",Gtk_WidgetgetDisplay, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetRootWindow",Gtk_WidgetgetRootWindow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetSettings",Gtk_WidgetgetSettings, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetClipboard",Gtk_WidgetgetClipboard, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetAccessible",Gtk_WidgetgetAccessible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetColormap",Gtk_WidgetsetColormap, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetEvents",Gtk_WidgetgetEvents, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetPointer",Gtk_WidgetgetPointer, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetisAncestor",Gtk_WidgetisAncestor, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgettranslateCoordinates",Gtk_WidgettranslateCoordinates, 6, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgethideOnDelete",Gtk_WidgethideOnDelete, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetStyle",Gtk_WidgetsetStyle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetensureStyle",Gtk_WidgetensureStyle, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetStyle",Gtk_WidgetgetStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetmodifyStyle",Gtk_WidgetmodifyStyle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetModifierStyle",Gtk_WidgetgetModifierStyle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetmodifyFg",Gtk_WidgetmodifyFg, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetmodifyBg",Gtk_WidgetmodifyBg, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetmodifyText",Gtk_WidgetmodifyText, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetmodifyBase",Gtk_WidgetmodifyBase, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetmodifyFont",Gtk_WidgetmodifyFont, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetcreatePangoContext",Gtk_WidgetcreatePangoContext, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetPangoContext",Gtk_WidgetgetPangoContext, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetcreatePangoLayout",Gtk_WidgetcreatePangoLayout, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetrenderIcon",Gtk_WidgetrenderIcon, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetCompositeName",Gtk_WidgetsetCompositeName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetCompositeName",Gtk_WidgetgetCompositeName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetresetRcStyles",Gtk_WidgetresetRcStyles, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetpushColormap",Gtk_WidgetpushColormap, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetpushCompositeChild",Gtk_WidgetpushCompositeChild, 0, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetpopCompositeChild",Gtk_WidgetpopCompositeChild, 0, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetpopColormap",Gtk_WidgetpopColormap, 0, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetclassInstallStyleProperty",Gtk_WidgetclassInstallStyleProperty, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetclassInstallStylePropertyParser",Gtk_WidgetclassInstallStylePropertyParser, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetclassFindStyleProperty",Gtk_WidgetclassFindStyleProperty, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetstyleGetProperty",Gtk_WidgetstyleGetProperty, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetstyleGet",Gtk_WidgetstyleGet, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetDefaultStyle",Gtk_WidgetgetDefaultStyle, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetDefaultColormap",Gtk_WidgetsetDefaultColormap, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetDefaultColormap",Gtk_WidgetgetDefaultColormap, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetDefaultVisual",Gtk_WidgetgetDefaultVisual, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetDirection",Gtk_WidgetsetDirection, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetDirection",Gtk_WidgetgetDirection, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetsetDefaultDirection",Gtk_WidgetsetDefaultDirection, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetgetDefaultDirection",Gtk_WidgetgetDefaultDirection, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetshapeCombineMask",Gtk_WidgetshapeCombineMask, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetresetShapes",Gtk_WidgetresetShapes, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetpath",Gtk_Widgetpath, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetclassPath",Gtk_WidgetclassPath, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetlistMnemonicLabels",Gtk_WidgetlistMnemonicLabels, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetaddMnemonicLabel",Gtk_WidgetaddMnemonicLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetremoveMnemonicLabel",Gtk_WidgetremoveMnemonicLabel, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Widgetnew",Gtk_Widgetnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldAllowGrow",Gtk_WindowsetFieldAllowGrow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldAllowGrow",Gtk_WindowgetFieldAllowGrow, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldAllowShrink",Gtk_WindowsetFieldAllowShrink, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldAllowShrink",Gtk_WindowgetFieldAllowShrink, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldConfigureNotifyReceived",Gtk_WindowsetFieldConfigureNotifyReceived, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldConfigureNotifyReceived",Gtk_WindowgetFieldConfigureNotifyReceived, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldConfigureRequestCount",Gtk_WindowsetFieldConfigureRequestCount, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldConfigureRequestCount",Gtk_WindowgetFieldConfigureRequestCount, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldDecorated",Gtk_WindowsetFieldDecorated, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldDecorated",Gtk_WindowgetFieldDecorated, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldDefaultWidget",Gtk_WindowsetFieldDefaultWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldDefaultWidget",Gtk_WindowgetFieldDefaultWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldDestroyWithParent",Gtk_WindowsetFieldDestroyWithParent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldDestroyWithParent",Gtk_WindowgetFieldDestroyWithParent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldFocusWidget",Gtk_WindowsetFieldFocusWidget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldFocusWidget",Gtk_WindowgetFieldFocusWidget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldFrame",Gtk_WindowsetFieldFrame, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldFrame",Gtk_WindowgetFieldFrame, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldFrameBottom",Gtk_WindowsetFieldFrameBottom, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldFrameBottom",Gtk_WindowgetFieldFrameBottom, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldFrameLeft",Gtk_WindowsetFieldFrameLeft, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldFrameLeft",Gtk_WindowgetFieldFrameLeft, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldFrameRight",Gtk_WindowsetFieldFrameRight, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldFrameRight",Gtk_WindowgetFieldFrameRight, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldFrameTop",Gtk_WindowsetFieldFrameTop, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldFrameTop",Gtk_WindowgetFieldFrameTop, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldGravity",Gtk_WindowsetFieldGravity, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldGravity",Gtk_WindowgetFieldGravity, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldGroup",Gtk_WindowsetFieldGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldGroup",Gtk_WindowgetFieldGroup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldHasFocus",Gtk_WindowsetFieldHasFocus, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldHasFocus",Gtk_WindowgetFieldHasFocus, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldHasFrame",Gtk_WindowsetFieldHasFrame, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldHasFrame",Gtk_WindowgetFieldHasFrame, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldHasUserRefCount",Gtk_WindowsetFieldHasUserRefCount, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldHasUserRefCount",Gtk_WindowgetFieldHasUserRefCount, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldIconifyInitially",Gtk_WindowsetFieldIconifyInitially, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldIconifyInitially",Gtk_WindowgetFieldIconifyInitially, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldKeysChangedHandler",Gtk_WindowsetFieldKeysChangedHandler, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldKeysChangedHandler",Gtk_WindowgetFieldKeysChangedHandler, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldMaximizeInitially",Gtk_WindowsetFieldMaximizeInitially, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldMaximizeInitially",Gtk_WindowgetFieldMaximizeInitially, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldMnemonicModifier",Gtk_WindowsetFieldMnemonicModifier, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldMnemonicModifier",Gtk_WindowgetFieldMnemonicModifier, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldModal",Gtk_WindowsetFieldModal, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldModal",Gtk_WindowgetFieldModal, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldNeedDefaultPosition",Gtk_WindowsetFieldNeedDefaultPosition, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldNeedDefaultPosition",Gtk_WindowgetFieldNeedDefaultPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldNeedDefaultSize",Gtk_WindowsetFieldNeedDefaultSize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldNeedDefaultSize",Gtk_WindowgetFieldNeedDefaultSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldPosition",Gtk_WindowsetFieldPosition, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldPosition",Gtk_WindowgetFieldPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldStickInitially",Gtk_WindowsetFieldStickInitially, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldStickInitially",Gtk_WindowgetFieldStickInitially, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldTitle",Gtk_WindowsetFieldTitle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldTitle",Gtk_WindowgetFieldTitle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldTransientParent",Gtk_WindowsetFieldTransientParent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldTransientParent",Gtk_WindowgetFieldTransientParent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldType",Gtk_WindowsetFieldType, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldType",Gtk_WindowgetFieldType, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldTypeHint",Gtk_WindowsetFieldTypeHint, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldTypeHint",Gtk_WindowgetFieldTypeHint, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldWmRole",Gtk_WindowsetFieldWmRole, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldWmRole",Gtk_WindowgetFieldWmRole, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldWmclassClass",Gtk_WindowsetFieldWmclassClass, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldWmclassClass",Gtk_WindowgetFieldWmclassClass, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFieldWmclassName",Gtk_WindowsetFieldWmclassName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFieldWmclassName",Gtk_WindowgetFieldWmclassName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowtooltipsGetInfoFromTipWindow",Gtk_WindowtooltipsGetInfoFromTipWindow, 1, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetType",Gtk_WindowgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetTitle",Gtk_WindowsetTitle, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetTitle",Gtk_WindowgetTitle, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetWmclass",Gtk_WindowsetWmclass, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetRole",Gtk_WindowsetRole, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetRole",Gtk_WindowgetRole, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowaddAccelGroup",Gtk_WindowaddAccelGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowremoveAccelGroup",Gtk_WindowremoveAccelGroup, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetPosition",Gtk_WindowsetPosition, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowactivateFocus",Gtk_WindowactivateFocus, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFocus",Gtk_WindowsetFocus, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFocus",Gtk_WindowgetFocus, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetDefault",Gtk_WindowsetDefault, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowactivateDefault",Gtk_WindowactivateDefault, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetTransientFor",Gtk_WindowsetTransientFor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetTransientFor",Gtk_WindowgetTransientFor, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetTypeHint",Gtk_WindowsetTypeHint, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetTypeHint",Gtk_WindowgetTypeHint, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetSkipTaskbarHint",Gtk_WindowsetSkipTaskbarHint, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetSkipTaskbarHint",Gtk_WindowgetSkipTaskbarHint, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetSkipPagerHint",Gtk_WindowsetSkipPagerHint, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetSkipPagerHint",Gtk_WindowgetSkipPagerHint, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetAcceptFocus",Gtk_WindowsetAcceptFocus, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetAcceptFocus",Gtk_WindowgetAcceptFocus, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetDestroyWithParent",Gtk_WindowsetDestroyWithParent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetDestroyWithParent",Gtk_WindowgetDestroyWithParent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetResizable",Gtk_WindowsetResizable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetResizable",Gtk_WindowgetResizable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetGravity",Gtk_WindowsetGravity, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetGravity",Gtk_WindowgetGravity, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetScreen",Gtk_WindowsetScreen, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetScreen",Gtk_WindowgetScreen, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowisActive",Gtk_WindowisActive, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowhasToplevelFocus",Gtk_WindowhasToplevelFocus, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetHasFrame",Gtk_WindowsetHasFrame, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetHasFrame",Gtk_WindowgetHasFrame, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFrameDimensions",Gtk_WindowsetFrameDimensions, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFrameDimensions",Gtk_WindowgetFrameDimensions, 5, 4);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetDecorated",Gtk_WindowsetDecorated, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetDecorated",Gtk_WindowgetDecorated, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetIconList",Gtk_WindowsetIconList, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetIconList",Gtk_WindowgetIconList, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetIcon",Gtk_WindowsetIcon, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetIconFromFile",Gtk_WindowsetIconFromFile, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetIcon",Gtk_WindowgetIcon, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetDefaultIconList",Gtk_WindowsetDefaultIconList, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetDefaultIconList",Gtk_WindowgetDefaultIconList, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetDefaultIcon",Gtk_WindowsetDefaultIcon, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetDefaultIconFromFile",Gtk_WindowsetDefaultIconFromFile, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetAutoStartupNotification",Gtk_WindowsetAutoStartupNotification, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetModal",Gtk_WindowsetModal, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetModal",Gtk_WindowgetModal, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowlistToplevels",Gtk_WindowlistToplevels, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowaddMnemonic",Gtk_WindowaddMnemonic, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowremoveMnemonic",Gtk_WindowremoveMnemonic, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowmnemonicActivate",Gtk_WindowmnemonicActivate, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetMnemonicModifier",Gtk_WindowsetMnemonicModifier, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetMnemonicModifier",Gtk_WindowgetMnemonicModifier, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowactivateKey",Gtk_WindowactivateKey, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowpropagateKeyEvent",Gtk_WindowpropagateKeyEvent, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowpresent",Gtk_Windowpresent, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowiconify",Gtk_Windowiconify, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowdeiconify",Gtk_Windowdeiconify, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowstick",Gtk_Windowstick, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowunstick",Gtk_Windowunstick, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowmaximize",Gtk_Windowmaximize, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowunmaximize",Gtk_Windowunmaximize, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowfullscreen",Gtk_Windowfullscreen, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowunfullscreen",Gtk_Windowunfullscreen, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetKeepAbove",Gtk_WindowsetKeepAbove, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetKeepBelow",Gtk_WindowsetKeepBelow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowbeginResizeDrag",Gtk_WindowbeginResizeDrag, 6, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowbeginMoveDrag",Gtk_WindowbeginMoveDrag, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetDefaultSize",Gtk_WindowsetDefaultSize, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetDefaultSize",Gtk_WindowgetDefaultSize, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowresize",Gtk_Windowresize, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetSize",Gtk_WindowgetSize, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windowmove",Gtk_Windowmove, 3, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetPosition",Gtk_WindowgetPosition, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowparseGeometry",Gtk_WindowparseGeometry, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowreshowWithInitialSize",Gtk_WindowreshowWithInitialSize, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowremoveEmbeddedXid",Gtk_WindowremoveEmbeddedXid, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowaddEmbeddedXid",Gtk_WindowaddEmbeddedXid, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetFocusOnMap",Gtk_WindowsetFocusOnMap, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetFocusOnMap",Gtk_WindowgetFocusOnMap, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetIconName",Gtk_WindowsetIconName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowgetIconName",Gtk_WindowgetIconName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowsetDefaultIconName",Gtk_WindowsetDefaultIconName, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Windownew",Gtk_Windownew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowGroupgetType",Gtk_WindowGroupgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowGroupaddWindow",Gtk_WindowGroupaddWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowGroupremoveWindow",Gtk_WindowGroupremoveWindow, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowGroupnew",Gtk_WindowGroupnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingSetbyClass",Gtk_BindingSetbyClass, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingSetactivate",Gtk_BindingSetactivate, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingSetaddPath",Gtk_BindingSetaddPath, 4, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingSetnew",Gtk_BindingSetnew, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BindingSetfind",Gtk_BindingSetfind, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathnewFromString",Gtk_TreePathnewFromString, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathnewFromIndices",Gtk_TreePathnewFromIndices, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathtoString",Gtk_TreePathtoString, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathnewFirst",Gtk_TreePathnewFirst, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathappendIndex",Gtk_TreePathappendIndex, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathprependIndex",Gtk_TreePathprependIndex, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathgetDepth",Gtk_TreePathgetDepth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathfree",Gtk_TreePathfree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathcopy",Gtk_TreePathcopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathcompare",Gtk_TreePathcompare, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathnext",Gtk_TreePathnext, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathprev",Gtk_TreePathprev, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathup",Gtk_TreePathup, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathdown",Gtk_TreePathdown, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathisAncestor",Gtk_TreePathisAncestor, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathisDescendant",Gtk_TreePathisDescendant, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreePathnew",Gtk_TreePathnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetEntrysetFieldFlags",Gtk_TargetEntrysetFieldFlags, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetEntrygetFieldFlags",Gtk_TargetEntrygetFieldFlags, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetEntrysetFieldInfo",Gtk_TargetEntrysetFieldInfo, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetEntrygetFieldInfo",Gtk_TargetEntrygetFieldInfo, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetEntrysetFieldTarget",Gtk_TargetEntrysetFieldTarget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetEntrygetFieldTarget",Gtk_TargetEntrygetFieldTarget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetEntrynew",Gtk_TargetEntrynew, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "BordergetType",Gtk_BordergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Bordercopy",Gtk_Bordercopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Borderfree",Gtk_Borderfree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfogetType",Gtk_IconInfogetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfocopy",Gtk_IconInfocopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfofree",Gtk_IconInfofree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfogetBaseSize",Gtk_IconInfogetBaseSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfogetFilename",Gtk_IconInfogetFilename, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfogetBuiltinPixbuf",Gtk_IconInfogetBuiltinPixbuf, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfoloadIcon",Gtk_IconInfoloadIcon, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfosetRawCoordinates",Gtk_IconInfosetRawCoordinates, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfogetEmbeddedRect",Gtk_IconInfogetEmbeddedRect, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfogetAttachPoints",Gtk_IconInfogetAttachPoints, 2, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconInfogetDisplayName",Gtk_IconInfogetDisplayName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetgetType",Gtk_IconSetgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetnew",Gtk_IconSetnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetreference",Gtk_IconSetreference, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetunref",Gtk_IconSetunref, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetcopy",Gtk_IconSetcopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetrenderIcon",Gtk_IconSetrenderIcon, 7, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetaddSource",Gtk_IconSetaddSource, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetgetSizes",Gtk_IconSetgetSizes, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSetnewFromPixbuf",Gtk_IconSetnewFromPixbuf, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetType",Gtk_IconSourcegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcecopy",Gtk_IconSourcecopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcefree",Gtk_IconSourcefree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetFilename",Gtk_IconSourcesetFilename, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetIconName",Gtk_IconSourcesetIconName, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetPixbuf",Gtk_IconSourcesetPixbuf, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetFilename",Gtk_IconSourcegetFilename, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetIconName",Gtk_IconSourcegetIconName, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetPixbuf",Gtk_IconSourcegetPixbuf, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetDirectionWildcarded",Gtk_IconSourcesetDirectionWildcarded, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetStateWildcarded",Gtk_IconSourcesetStateWildcarded, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetSizeWildcarded",Gtk_IconSourcesetSizeWildcarded, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetSizeWildcarded",Gtk_IconSourcegetSizeWildcarded, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetStateWildcarded",Gtk_IconSourcegetStateWildcarded, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetDirectionWildcarded",Gtk_IconSourcegetDirectionWildcarded, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetDirection",Gtk_IconSourcesetDirection, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetState",Gtk_IconSourcesetState, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcesetSize",Gtk_IconSourcesetSize, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetDirection",Gtk_IconSourcegetDirection, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetState",Gtk_IconSourcegetState, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcegetSize",Gtk_IconSourcegetSize, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSourcenew",Gtk_IconSourcenew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RequisitionsetFieldHeight",Gtk_RequisitionsetFieldHeight, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RequisitiongetFieldHeight",Gtk_RequisitiongetFieldHeight, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RequisitionsetFieldWidth",Gtk_RequisitionsetFieldWidth, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RequisitiongetFieldWidth",Gtk_RequisitiongetFieldWidth, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RequisitiongetType",Gtk_RequisitiongetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Requisitioncopy",Gtk_Requisitioncopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Requisitionfree",Gtk_Requisitionfree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "Requisitionnew",Gtk_Requisitionnew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatasetFieldData",Gtk_SelectionDatasetFieldData, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetFieldData",Gtk_SelectionDatagetFieldData, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatasetFieldFormat",Gtk_SelectionDatasetFieldFormat, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetFieldFormat",Gtk_SelectionDatagetFieldFormat, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatasetFieldSelection",Gtk_SelectionDatasetFieldSelection, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetFieldSelection",Gtk_SelectionDatagetFieldSelection, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatasetFieldTarget",Gtk_SelectionDatasetFieldTarget, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetFieldTarget",Gtk_SelectionDatagetFieldTarget, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatasetFieldType",Gtk_SelectionDatasetFieldType, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetFieldType",Gtk_SelectionDatagetFieldType, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDataset",Gtk_SelectionDataset, 5, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatasetText",Gtk_SelectionDatasetText, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetText",Gtk_SelectionDatagetText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetTargets",Gtk_SelectionDatagetTargets, 3, 2);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatatargetsIncludeText",Gtk_SelectionDatatargetsIncludeText, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetType",Gtk_SelectionDatagetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatacopy",Gtk_SelectionDatacopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatafree",Gtk_SelectionDatafree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatasetPixbuf",Gtk_SelectionDatasetPixbuf, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetPixbuf",Gtk_SelectionDatagetPixbuf, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatasetUris",Gtk_SelectionDatasetUris, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatagetUris",Gtk_SelectionDatagetUris, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatatargetsIncludeImage",Gtk_SelectionDatatargetsIncludeImage, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatatreeSetRowDragData",Gtk_SelectionDatatreeSetRowDragData, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatatreeGetRowDragData",Gtk_SelectionDatatreeGetRowDragData, 1, 3);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionDatanew",Gtk_SelectionDatanew, 5, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancesetFieldBgColor",Gtk_TextAppearancesetFieldBgColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancegetFieldBgColor",Gtk_TextAppearancegetFieldBgColor, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancesetFieldBgStipple",Gtk_TextAppearancesetFieldBgStipple, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancegetFieldBgStipple",Gtk_TextAppearancegetFieldBgStipple, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancesetFieldDrawBg",Gtk_TextAppearancesetFieldDrawBg, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancegetFieldDrawBg",Gtk_TextAppearancegetFieldDrawBg, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancesetFieldFgColor",Gtk_TextAppearancesetFieldFgColor, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancegetFieldFgColor",Gtk_TextAppearancegetFieldFgColor, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancesetFieldFgStipple",Gtk_TextAppearancesetFieldFgStipple, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancegetFieldFgStipple",Gtk_TextAppearancegetFieldFgStipple, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancesetFieldRise",Gtk_TextAppearancesetFieldRise, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancegetFieldRise",Gtk_TextAppearancegetFieldRise, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancesetFieldStrikethrough",Gtk_TextAppearancesetFieldStrikethrough, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancegetFieldStrikethrough",Gtk_TextAppearancegetFieldStrikethrough, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancesetFieldUnderline",Gtk_TextAppearancesetFieldUnderline, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancegetFieldUnderline",Gtk_TextAppearancegetFieldUnderline, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAppearancenew",Gtk_TextAppearancenew, 8, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldAppearance",Gtk_TextAttributessetFieldAppearance, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldAppearance",Gtk_TextAttributesgetFieldAppearance, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldBgFullHeight",Gtk_TextAttributessetFieldBgFullHeight, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldBgFullHeight",Gtk_TextAttributesgetFieldBgFullHeight, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldDirection",Gtk_TextAttributessetFieldDirection, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldDirection",Gtk_TextAttributesgetFieldDirection, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldEditable",Gtk_TextAttributessetFieldEditable, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldEditable",Gtk_TextAttributesgetFieldEditable, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldFont",Gtk_TextAttributessetFieldFont, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldFont",Gtk_TextAttributesgetFieldFont, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldFontScale",Gtk_TextAttributessetFieldFontScale, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldFontScale",Gtk_TextAttributesgetFieldFontScale, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldIndent",Gtk_TextAttributessetFieldIndent, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldIndent",Gtk_TextAttributesgetFieldIndent, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldInvisible",Gtk_TextAttributessetFieldInvisible, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldInvisible",Gtk_TextAttributesgetFieldInvisible, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldJustification",Gtk_TextAttributessetFieldJustification, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldJustification",Gtk_TextAttributesgetFieldJustification, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldLanguage",Gtk_TextAttributessetFieldLanguage, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldLanguage",Gtk_TextAttributesgetFieldLanguage, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldLeftMargin",Gtk_TextAttributessetFieldLeftMargin, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldLeftMargin",Gtk_TextAttributesgetFieldLeftMargin, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldPixelsAboveLines",Gtk_TextAttributessetFieldPixelsAboveLines, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldPixelsAboveLines",Gtk_TextAttributesgetFieldPixelsAboveLines, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldPixelsBelowLines",Gtk_TextAttributessetFieldPixelsBelowLines, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldPixelsBelowLines",Gtk_TextAttributesgetFieldPixelsBelowLines, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldPixelsInsideWrap",Gtk_TextAttributessetFieldPixelsInsideWrap, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldPixelsInsideWrap",Gtk_TextAttributesgetFieldPixelsInsideWrap, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldRealized",Gtk_TextAttributessetFieldRealized, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldRealized",Gtk_TextAttributesgetFieldRealized, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldRightMargin",Gtk_TextAttributessetFieldRightMargin, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldRightMargin",Gtk_TextAttributesgetFieldRightMargin, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldTabs",Gtk_TextAttributessetFieldTabs, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldTabs",Gtk_TextAttributesgetFieldTabs, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributessetFieldWrapMode",Gtk_TextAttributessetFieldWrapMode, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetFieldWrapMode",Gtk_TextAttributesgetFieldWrapMode, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributescopy",Gtk_TextAttributescopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributescopyValues",Gtk_TextAttributescopyValues, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesunref",Gtk_TextAttributesunref, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesreference",Gtk_TextAttributesreference, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesgetType",Gtk_TextAttributesgetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextAttributesnew",Gtk_TextAttributesnew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetBuffer",Gtk_TextItergetBuffer, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItercopy",Gtk_TextItercopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterfree",Gtk_TextIterfree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetType",Gtk_TextItergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetOffset",Gtk_TextItergetOffset, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetLine",Gtk_TextItergetLine, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetLineOffset",Gtk_TextItergetLineOffset, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetLineIndex",Gtk_TextItergetLineIndex, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetVisibleLineOffset",Gtk_TextItergetVisibleLineOffset, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetVisibleLineIndex",Gtk_TextItergetVisibleLineIndex, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetChar",Gtk_TextItergetChar, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetSlice",Gtk_TextItergetSlice, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetText",Gtk_TextItergetText, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetVisibleSlice",Gtk_TextItergetVisibleSlice, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetVisibleText",Gtk_TextItergetVisibleText, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetPixbuf",Gtk_TextItergetPixbuf, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetMarks",Gtk_TextItergetMarks, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetChildAnchor",Gtk_TextItergetChildAnchor, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetToggledTags",Gtk_TextItergetToggledTags, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbeginsTag",Gtk_TextIterbeginsTag, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterendsTag",Gtk_TextIterendsTag, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItertogglesTag",Gtk_TextItertogglesTag, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterhasTag",Gtk_TextIterhasTag, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetTags",Gtk_TextItergetTags, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItereditable",Gtk_TextItereditable, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItercanInsert",Gtk_TextItercanInsert, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterstartsWord",Gtk_TextIterstartsWord, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterendsWord",Gtk_TextIterendsWord, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterinsideWord",Gtk_TextIterinsideWord, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterstartsSentence",Gtk_TextIterstartsSentence, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterendsSentence",Gtk_TextIterendsSentence, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterinsideSentence",Gtk_TextIterinsideSentence, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterstartsLine",Gtk_TextIterstartsLine, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterendsLine",Gtk_TextIterendsLine, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterisCursorPosition",Gtk_TextIterisCursorPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetCharsInLine",Gtk_TextItergetCharsInLine, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetBytesInLine",Gtk_TextItergetBytesInLine, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetAttributes",Gtk_TextItergetAttributes, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItergetLanguage",Gtk_TextItergetLanguage, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterisEnd",Gtk_TextIterisEnd, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterisStart",Gtk_TextIterisStart, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardChar",Gtk_TextIterforwardChar, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardChar",Gtk_TextIterbackwardChar, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardChars",Gtk_TextIterforwardChars, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardChars",Gtk_TextIterbackwardChars, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardLine",Gtk_TextIterforwardLine, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardLine",Gtk_TextIterbackwardLine, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardLines",Gtk_TextIterforwardLines, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardLines",Gtk_TextIterbackwardLines, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardWordEnd",Gtk_TextIterforwardWordEnd, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardWordStart",Gtk_TextIterbackwardWordStart, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardWordEnds",Gtk_TextIterforwardWordEnds, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardWordStarts",Gtk_TextIterbackwardWordStarts, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardVisibleWordEnd",Gtk_TextIterforwardVisibleWordEnd, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardVisibleWordStart",Gtk_TextIterbackwardVisibleWordStart, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardVisibleWordEnds",Gtk_TextIterforwardVisibleWordEnds, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardVisibleWordStarts",Gtk_TextIterbackwardVisibleWordStarts, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardSentenceEnd",Gtk_TextIterforwardSentenceEnd, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardSentenceStart",Gtk_TextIterbackwardSentenceStart, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardSentenceEnds",Gtk_TextIterforwardSentenceEnds, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardSentenceStarts",Gtk_TextIterbackwardSentenceStarts, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardCursorPosition",Gtk_TextIterforwardCursorPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardCursorPosition",Gtk_TextIterbackwardCursorPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardCursorPositions",Gtk_TextIterforwardCursorPositions, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardCursorPositions",Gtk_TextIterbackwardCursorPositions, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardVisibleCursorPosition",Gtk_TextIterforwardVisibleCursorPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardVisibleCursorPosition",Gtk_TextIterbackwardVisibleCursorPosition, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardVisibleCursorPositions",Gtk_TextIterforwardVisibleCursorPositions, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardVisibleCursorPositions",Gtk_TextIterbackwardVisibleCursorPositions, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItersetOffset",Gtk_TextItersetOffset, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItersetLine",Gtk_TextItersetLine, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItersetLineOffset",Gtk_TextItersetLineOffset, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItersetLineIndex",Gtk_TextItersetLineIndex, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardToEnd",Gtk_TextIterforwardToEnd, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardToLineEnd",Gtk_TextIterforwardToLineEnd, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItersetVisibleLineOffset",Gtk_TextItersetVisibleLineOffset, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItersetVisibleLineIndex",Gtk_TextItersetVisibleLineIndex, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardToTagToggle",Gtk_TextIterforwardToTagToggle, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardToTagToggle",Gtk_TextIterbackwardToTagToggle, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardFindChar",Gtk_TextIterforwardFindChar, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardFindChar",Gtk_TextIterbackwardFindChar, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterforwardSearch",Gtk_TextIterforwardSearch, 6, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterbackwardSearch",Gtk_TextIterbackwardSearch, 6, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterequal",Gtk_TextIterequal, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextItercompare",Gtk_TextItercompare, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterinRange",Gtk_TextIterinRange, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIterorder",Gtk_TextIterorder, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextIternew",Gtk_TextIternew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeItercopy",Gtk_TreeItercopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeIterfree",Gtk_TreeIterfree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeItergetType",Gtk_TreeItergetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeIternew",Gtk_TreeIternew, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencegetType",Gtk_TreeRowReferencegetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencegetPath",Gtk_TreeRowReferencegetPath, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencevalid",Gtk_TreeRowReferencevalid, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencecopy",Gtk_TreeRowReferencecopy, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencefree",Gtk_TreeRowReferencefree, 1, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferenceinserted",Gtk_TreeRowReferenceinserted, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencedeleted",Gtk_TreeRowReferencedeleted, 2, 0);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencereordered",Gtk_TreeRowReferencereordered, 4, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencenew",Gtk_TreeRowReferencenew, 2, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeRowReferencenewProxy",Gtk_TreeRowReferencenewProxy, 3, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AnchorTypeGetType",Gtk_AnchorTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AnchorTypeFromInt",Gtk_AnchorTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AnchorTypeToInt",Gtk_AnchorTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ArrowTypeGetType",Gtk_ArrowTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ArrowTypeFromInt",Gtk_ArrowTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ArrowTypeToInt",Gtk_ArrowTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonBoxStyleGetType",Gtk_ButtonBoxStyleGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonBoxStyleFromInt",Gtk_ButtonBoxStyleFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonBoxStyleToInt",Gtk_ButtonBoxStyleToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsTypeGetType",Gtk_ButtonsTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsTypeFromInt",Gtk_ButtonsTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonsTypeToInt",Gtk_ButtonsTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererModeGetType",Gtk_CellRendererModeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererModeFromInt",Gtk_CellRendererModeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererModeToInt",Gtk_CellRendererModeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellTypeGetType",Gtk_CellTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellTypeFromInt",Gtk_CellTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellTypeToInt",Gtk_CellTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CornerTypeGetType",Gtk_CornerTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CornerTypeFromInt",Gtk_CornerTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CornerTypeToInt",Gtk_CornerTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CurveTypeGetType",Gtk_CurveTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CurveTypeFromInt",Gtk_CurveTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CurveTypeToInt",Gtk_CurveTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DeleteTypeGetType",Gtk_DeleteTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DeleteTypeFromInt",Gtk_DeleteTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DeleteTypeToInt",Gtk_DeleteTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DirectionTypeGetType",Gtk_DirectionTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DirectionTypeFromInt",Gtk_DirectionTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DirectionTypeToInt",Gtk_DirectionTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpanderStyleGetType",Gtk_ExpanderStyleGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpanderStyleFromInt",Gtk_ExpanderStyleFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ExpanderStyleToInt",Gtk_ExpanderStyleToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserActionGetType",Gtk_FileChooserActionGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserActionFromInt",Gtk_FileChooserActionFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserActionToInt",Gtk_FileChooserActionToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserErrorGetType",Gtk_FileChooserErrorGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserErrorFromInt",Gtk_FileChooserErrorFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileChooserErrorToInt",Gtk_FileChooserErrorToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSizeGetType",Gtk_IconSizeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSizeFromInt",Gtk_IconSizeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconSizeToInt",Gtk_IconSizeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemeErrorGetType",Gtk_IconThemeErrorGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemeErrorFromInt",Gtk_IconThemeErrorFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconThemeErrorToInt",Gtk_IconThemeErrorToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageTypeGetType",Gtk_ImageTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageTypeFromInt",Gtk_ImageTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ImageTypeToInt",Gtk_ImageTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMPreeditStyleGetType",Gtk_IMPreeditStyleGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMPreeditStyleFromInt",Gtk_IMPreeditStyleFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMPreeditStyleToInt",Gtk_IMPreeditStyleToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMStatusStyleGetType",Gtk_IMStatusStyleGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMStatusStyleFromInt",Gtk_IMStatusStyleFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IMStatusStyleToInt",Gtk_IMStatusStyleToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "JustificationGetType",Gtk_JustificationGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "JustificationFromInt",Gtk_JustificationFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "JustificationToInt",Gtk_JustificationToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MatchTypeGetType",Gtk_MatchTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MatchTypeFromInt",Gtk_MatchTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MatchTypeToInt",Gtk_MatchTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuDirectionTypeGetType",Gtk_MenuDirectionTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuDirectionTypeFromInt",Gtk_MenuDirectionTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MenuDirectionTypeToInt",Gtk_MenuDirectionTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageTypeGetType",Gtk_MessageTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageTypeFromInt",Gtk_MessageTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MessageTypeToInt",Gtk_MessageTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MetricTypeGetType",Gtk_MetricTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MetricTypeFromInt",Gtk_MetricTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MetricTypeToInt",Gtk_MetricTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MovementStepGetType",Gtk_MovementStepGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MovementStepFromInt",Gtk_MovementStepFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "MovementStepToInt",Gtk_MovementStepToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookTabGetType",Gtk_NotebookTabGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookTabFromInt",Gtk_NotebookTabFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "NotebookTabToInt",Gtk_NotebookTabToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OrientationGetType",Gtk_OrientationGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OrientationFromInt",Gtk_OrientationFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "OrientationToInt",Gtk_OrientationToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PackTypeGetType",Gtk_PackTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PackTypeFromInt",Gtk_PackTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PackTypeToInt",Gtk_PackTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PathPriorityTypeGetType",Gtk_PathPriorityTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PathPriorityTypeFromInt",Gtk_PathPriorityTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PathPriorityTypeToInt",Gtk_PathPriorityTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PathTypeGetType",Gtk_PathTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PathTypeFromInt",Gtk_PathTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PathTypeToInt",Gtk_PathTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PolicyTypeGetType",Gtk_PolicyTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PolicyTypeFromInt",Gtk_PolicyTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PolicyTypeToInt",Gtk_PolicyTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PositionTypeGetType",Gtk_PositionTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PositionTypeFromInt",Gtk_PositionTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PositionTypeToInt",Gtk_PositionTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PreviewTypeGetType",Gtk_PreviewTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PreviewTypeFromInt",Gtk_PreviewTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PreviewTypeToInt",Gtk_PreviewTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarOrientationGetType",Gtk_ProgressBarOrientationGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarOrientationFromInt",Gtk_ProgressBarOrientationFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarOrientationToInt",Gtk_ProgressBarOrientationToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarStyleGetType",Gtk_ProgressBarStyleGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarStyleFromInt",Gtk_ProgressBarStyleFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ProgressBarStyleToInt",Gtk_ProgressBarStyleToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcTokenTypeGetType",Gtk_RcTokenTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcTokenTypeFromInt",Gtk_RcTokenTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcTokenTypeToInt",Gtk_RcTokenTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ReliefStyleGetType",Gtk_ReliefStyleGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ReliefStyleFromInt",Gtk_ReliefStyleFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ReliefStyleToInt",Gtk_ReliefStyleToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ResizeModeGetType",Gtk_ResizeModeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ResizeModeFromInt",Gtk_ResizeModeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ResizeModeToInt",Gtk_ResizeModeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ResponseTypeGetType",Gtk_ResponseTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ResponseTypeFromInt",Gtk_ResponseTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ResponseTypeToInt",Gtk_ResponseTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrollStepGetType",Gtk_ScrollStepGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrollStepFromInt",Gtk_ScrollStepFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrollStepToInt",Gtk_ScrollStepToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrollTypeGetType",Gtk_ScrollTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrollTypeFromInt",Gtk_ScrollTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ScrollTypeToInt",Gtk_ScrollTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionModeGetType",Gtk_SelectionModeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionModeFromInt",Gtk_SelectionModeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SelectionModeToInt",Gtk_SelectionModeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ShadowTypeGetType",Gtk_ShadowTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ShadowTypeFromInt",Gtk_ShadowTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ShadowTypeToInt",Gtk_ShadowTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SideTypeGetType",Gtk_SideTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SideTypeFromInt",Gtk_SideTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SideTypeToInt",Gtk_SideTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupModeGetType",Gtk_SizeGroupModeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupModeFromInt",Gtk_SizeGroupModeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SizeGroupModeToInt",Gtk_SizeGroupModeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SortTypeGetType",Gtk_SortTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SortTypeFromInt",Gtk_SortTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SortTypeToInt",Gtk_SortTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonUpdatePolicyGetType",Gtk_SpinButtonUpdatePolicyGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonUpdatePolicyFromInt",Gtk_SpinButtonUpdatePolicyFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinButtonUpdatePolicyToInt",Gtk_SpinButtonUpdatePolicyToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinTypeGetType",Gtk_SpinTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinTypeFromInt",Gtk_SpinTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SpinTypeToInt",Gtk_SpinTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StateTypeGetType",Gtk_StateTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StateTypeFromInt",Gtk_StateTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "StateTypeToInt",Gtk_StateTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SubmenuDirectionGetType",Gtk_SubmenuDirectionGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SubmenuDirectionFromInt",Gtk_SubmenuDirectionFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SubmenuDirectionToInt",Gtk_SubmenuDirectionToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SubmenuPlacementGetType",Gtk_SubmenuPlacementGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SubmenuPlacementFromInt",Gtk_SubmenuPlacementFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "SubmenuPlacementToInt",Gtk_SubmenuPlacementToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextDirectionGetType",Gtk_TextDirectionGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextDirectionFromInt",Gtk_TextDirectionFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextDirectionToInt",Gtk_TextDirectionToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextWindowTypeGetType",Gtk_TextWindowTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextWindowTypeFromInt",Gtk_TextWindowTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextWindowTypeToInt",Gtk_TextWindowTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarChildTypeGetType",Gtk_ToolbarChildTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarChildTypeFromInt",Gtk_ToolbarChildTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarChildTypeToInt",Gtk_ToolbarChildTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarSpaceStyleGetType",Gtk_ToolbarSpaceStyleGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarSpaceStyleFromInt",Gtk_ToolbarSpaceStyleFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarSpaceStyleToInt",Gtk_ToolbarSpaceStyleToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarStyleGetType",Gtk_ToolbarStyleGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarStyleFromInt",Gtk_ToolbarStyleFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ToolbarStyleToInt",Gtk_ToolbarStyleToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnSizingGetType",Gtk_TreeViewColumnSizingGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnSizingFromInt",Gtk_TreeViewColumnSizingFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewColumnSizingToInt",Gtk_TreeViewColumnSizingToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewDropPositionGetType",Gtk_TreeViewDropPositionGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewDropPositionFromInt",Gtk_TreeViewDropPositionFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeViewDropPositionToInt",Gtk_TreeViewDropPositionToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UpdateTypeGetType",Gtk_UpdateTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UpdateTypeFromInt",Gtk_UpdateTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UpdateTypeToInt",Gtk_UpdateTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VisibilityGetType",Gtk_VisibilityGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VisibilityFromInt",Gtk_VisibilityFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "VisibilityToInt",Gtk_VisibilityToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetHelpTypeGetType",Gtk_WidgetHelpTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetHelpTypeFromInt",Gtk_WidgetHelpTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetHelpTypeToInt",Gtk_WidgetHelpTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowPositionGetType",Gtk_WindowPositionGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowPositionFromInt",Gtk_WindowPositionFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowPositionToInt",Gtk_WindowPositionToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowTypeGetType",Gtk_WindowTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowTypeFromInt",Gtk_WindowTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WindowTypeToInt",Gtk_WindowTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WrapModeGetType",Gtk_WrapModeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WrapModeFromInt",Gtk_WrapModeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WrapModeToInt",Gtk_WrapModeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelFlagsGetType",Gtk_AccelFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelFlagsFromInt",Gtk_AccelFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AccelFlagsToInt",Gtk_AccelFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ArgFlagsGetType",Gtk_ArgFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ArgFlagsFromInt",Gtk_ArgFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ArgFlagsToInt",Gtk_ArgFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AttachOptionsGetType",Gtk_AttachOptionsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AttachOptionsFromInt",Gtk_AttachOptionsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "AttachOptionsToInt",Gtk_AttachOptionsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonActionGetType",Gtk_ButtonActionGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonActionFromInt",Gtk_ButtonActionFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ButtonActionToInt",Gtk_ButtonActionToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarDisplayOptionsGetType",Gtk_CalendarDisplayOptionsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarDisplayOptionsFromInt",Gtk_CalendarDisplayOptionsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CalendarDisplayOptionsToInt",Gtk_CalendarDisplayOptionsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererStateGetType",Gtk_CellRendererStateGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererStateFromInt",Gtk_CellRendererStateFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "CellRendererStateToInt",Gtk_CellRendererStateToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DebugFlagGetType",Gtk_DebugFlagGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DebugFlagFromInt",Gtk_DebugFlagFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DebugFlagToInt",Gtk_DebugFlagToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DestDefaultsGetType",Gtk_DestDefaultsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DestDefaultsFromInt",Gtk_DestDefaultsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DestDefaultsToInt",Gtk_DestDefaultsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogFlagsGetType",Gtk_DialogFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogFlagsFromInt",Gtk_DialogFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "DialogFlagsToInt",Gtk_DialogFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFilterFlagsGetType",Gtk_FileFilterFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFilterFlagsFromInt",Gtk_FileFilterFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "FileFilterFlagsToInt",Gtk_FileFilterFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconLookupFlagsGetType",Gtk_IconLookupFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconLookupFlagsFromInt",Gtk_IconLookupFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "IconLookupFlagsToInt",Gtk_IconLookupFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ObjectFlagsGetType",Gtk_ObjectFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ObjectFlagsFromInt",Gtk_ObjectFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "ObjectFlagsToInt",Gtk_ObjectFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PrivateFlagsGetType",Gtk_PrivateFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PrivateFlagsFromInt",Gtk_PrivateFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "PrivateFlagsToInt",Gtk_PrivateFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcFlagsGetType",Gtk_RcFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcFlagsFromInt",Gtk_RcFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "RcFlagsToInt",Gtk_RcFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetFlagsGetType",Gtk_TargetFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetFlagsFromInt",Gtk_TargetFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TargetFlagsToInt",Gtk_TargetFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextSearchFlagsGetType",Gtk_TextSearchFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextSearchFlagsFromInt",Gtk_TextSearchFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TextSearchFlagsToInt",Gtk_TextSearchFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFlagsGetType",Gtk_TreeModelFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFlagsFromInt",Gtk_TreeModelFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "TreeModelFlagsToInt",Gtk_TreeModelFlagsToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagerItemTypeGetType",Gtk_UIManagerItemTypeGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagerItemTypeFromInt",Gtk_UIManagerItemTypeFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "UIManagerItemTypeToInt",Gtk_UIManagerItemTypeToInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetFlagsGetType",Gtk_WidgetFlagsGetType, 0, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetFlagsFromInt",Gtk_WidgetFlagsFromInt, 1, 1);
    INIT_STRUCTURE_N(record, "NativeLibs.NativeGtk", "WidgetFlagsToInt",Gtk_WidgetFlagsToInt, 1, 1);
    return record->ToWord ();
}
