(*
 * Author:
 *   Andi Scharfstein <andi@ps.uni-sb.de>
 *
 * Copyright:
 *   Andi Scharfstein, 2006
 *)

import structure Socket from "../../system/Socket"
import signature SOCKET from "../../system/SOCKET-sig"
import signature POLICY from "../../system/POLICY-sig"
(*ignore*)import structure Policy : POLICY from "x-alice:/lib/sandbox/Policy"

structure Socket : SOCKET =
struct
    type socket = Socket.socket
    type t = Socket.t
    type vector = Socket.vector
    type elem = Socket.elem

    type host = Socket.host
    type port = Socket.port

    fun server (portOpt, acceptFun) =
        let
            val port' = case portOpt of
                (* Handle 0 as special case in writePort *)
                NONE => Policy.Int.check ("writePort", "Socket.server", 0)
              | SOME port => Policy.Int.check ("writePort", "Socket.server", port)
        in
            if port' = 0
            then Socket.server (NONE, acceptFun)
            else Socket.server (SOME port', acceptFun)
        end
            
    fun client (host, port) =
        let
            val port' = Policy.Int.check ("readPort", "Socket.server", port)
        in
            Socket.client (host, port')
        end

    val input1 = Socket.input1
    val inputN = Socket.inputN
    val inputLine = Socket.inputLine
    val output = Socket.output
    val output1 = Socket.output1

    val close = Socket.close
end
