(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000
 *
 * Last change:
 *   $Date: 2001-01-17 10:36:31 $ by $Author: kornstae $
 *   $Revision: 1.2 $
 *)

(*
 * These tests check the resolving of relative uris.
 * They are transcribed from those published by Roy Fielding
 * <fielding@ics.uci.edu> at http://www.ics.uci.edu/~fielding/url/
 *)

import structure TextIO from "../../system/TextIO"
import structure Url from "../Url"

local
    val tests = [("http://a/b/c/d;p?q",
		  [("gg:h",		"gg:h"),
		   ("g",		"http://a/b/c/g"),
		   ("./g",		"http://a/b/c/g"),
		   ("g/",		"http://a/b/c/g/"),
		   ("/g",		"http://a/g"),
		   ("//g",		"http://g"),
		   ("?y",		"http://a/b/c/?y"),
		   ("g?y",		"http://a/b/c/g?y"),
(*		   ("#s",		"(current document)#s"), *)
		   ("g#s",		"http://a/b/c/g#s"),
		   ("g?y#s",		"http://a/b/c/g?y#s"),
		   (";x",		"http://a/b/c/;x"),
		   ("g;x",		"http://a/b/c/g;x"),
		   ("g;x?y#s",		"http://a/b/c/g;x?y#s"),
		   (".",		"http://a/b/c/"),
		   ("./",		"http://a/b/c/"),
		   ("..",		"http://a/b/"),
		   ("../",		"http://a/b/"),
		   ("../g",		"http://a/b/g"),
		   ("../..",		"http://a/"),
		   ("../../",		"http://a/"),
		   ("../../g",		"http://a/g")]),
		 ("http://a/b/c/d;p?q",
		  [("../../../g",	"http://a/../g"),
		   ("../../../../g",	"http://a/../../g"),
		   ("/./g",		"http://a/./g"),
		   ("/../g",		"http://a/../g"),
		   ("g.",		"http://a/b/c/g."),
		   (".g",		"http://a/b/c/.g"),
		   ("g..",		"http://a/b/c/g.."),
		   ("..g",		"http://a/b/c/..g"),
		   ("./../g",		"http://a/b/g"),
		   ("./g/.",		"http://a/b/c/g/"),
		   ("g/./h",		"http://a/b/c/g/h"),
		   ("g/../h",		"http://a/b/c/h"),
		   ("g;x=1/./y",	"http://a/b/c/g;x=1/y"),
		   ("g;x=1/../y",	"http://a/b/c/y"),
		   ("g?y/./x",		"http://a/b/c/g?y/./x"),
		   ("g?y/../x",		"http://a/b/c/g?y/../x"),
		   ("g#s/./x",		"http://a/b/c/g#s/./x"),
		   ("g#s/../x",		"http://a/b/c/g#s/../x"),
		   ("http:g",		"http:g"),
		   ("http:",		"http:")]),
		 ("http://a/b/c/d;p?q=1/2",
		  [("g",		"http://a/b/c/g"),
		   ("./g",		"http://a/b/c/g"),
		   ("g/",		"http://a/b/c/g/"),
		   ("/g",		"http://a/g"),
		   ("//g",		"http://g"),
		   ("?y",		"http://a/b/c/?y"),
		   ("g?y",		"http://a/b/c/g?y"),
		   ("g?y/./x",		"http://a/b/c/g?y/./x"),
		   ("g?y/../x",		"http://a/b/c/g?y/../x"),
		   ("g#s",		"http://a/b/c/g#s"),
		   ("g#s/./x",		"http://a/b/c/g#s/./x"),
		   ("g#s/../x",		"http://a/b/c/g#s/../x"),
		   ("./",		"http://a/b/c/"),
		   ("../",		"http://a/b/"),
		   ("../g",		"http://a/b/g"),
		   ("../../",		"http://a/"),
		   ("../../g",		"http://a/g")]),
		 ("http://a/b/c/d;p=1/2?q",
		  [("g",		"http://a/b/c/d;p=1/g"),
		   ("./g",		"http://a/b/c/d;p=1/g"),
		   ("g/",		"http://a/b/c/d;p=1/g/"),
		   ("g?y",		"http://a/b/c/d;p=1/g?y"),
		   (";x",		"http://a/b/c/d;p=1/;x"),
		   ("g;x",		"http://a/b/c/d;p=1/g;x"),
		   ("g;x=1/./y",	"http://a/b/c/d;p=1/g;x=1/y"),
		   ("g;x=1/../y",	"http://a/b/c/d;p=1/y"),
		   ("./",		"http://a/b/c/d;p=1/"),
		   ("../",		"http://a/b/c/"),
		   ("../g",		"http://a/b/c/g"),
		   ("../../",		"http://a/b/"),
		   ("../../g",		"http://a/b/g")]),
		 ("fred:///s//a/b/c",
		  [("gg:h",		"gg:h"),
		   ("g",		"fred:///s//a/b/g"),
		   ("./g",		"fred:///s//a/b/g"),
		   ("g/",		"fred:///s//a/b/g/"),
		   ("/g",		"fred:///g"),
		   ("//g",		"fred://g"),
		   ("//g/x",		"fred://g/x"),
		   ("///g",		"fred:///g"),
		   ("./",		"fred:///s//a/b/"),
		   ("../",		"fred:///s//a/"),
		   ("../g",		"fred:///s//a/g"),
		   ("../../",		"fred:///s//"),
		   ("../../g",		"fred:///s//g"),
		   ("../../../g",	"fred:///s/g"),
		   ("../../../../g",	"fred:///g")]),
		 ("http:///s//a/b/c",
		  [("gg:h",		"gg:h"),
		   ("g",		"http:///s//a/b/g"),
		   ("./g",		"http:///s//a/b/g"),
		   ("g/",		"http:///s//a/b/g/"),
		   ("/g",		"http:///g"),
		   ("//g",		"http://g"),
		   ("//g/x",		"http://g/x"),
		   ("///g",		"http:///g"),
		   ("./",		"http:///s//a/b/"),
		   ("../",		"http:///s//a/"),
		   ("../g",		"http:///s//a/g"),
		   ("../../",		"http:///s//"),
		   ("../../g",		"http:///s//g"),
		   ("../../../g",	"http:///s/g"),
		   ("../../../../g",	"http:///g")])]
in
    val _ =
	List.app
	(fn (base, tests) =>
	 let
	     val baseUrl = Url.fromString base
	 in
	     List.app
	     (fn (rel, wanted) =>
	      let
		  val resolved =
		      Url.toString (Url.resolve baseUrl (Url.fromString rel))
		  val status =
		      if resolved = wanted then "Success" else "Failed"
	      in
		  TextIO.print (status ^ ": " ^ base ^ ", " ^ rel ^ " = " ^
				resolved ^ "\n")
	      end) tests
	 end) tests

    val _ = TextIO.print "Done\n"
end
