(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg and Leif Kornstaedt, 2000-2005
 *
 * Last change:
 *   $Date: 2005-03-01 13:53:37 $ by $Author: rossberg $
 *   $Revision: 1.18 $
 *)

import structure TextIO           from "../../lib/system/TextIO"
import structure Source           from "../infrastructure/Source"
import structure Error            from "../infrastructure/Error"
import signature SWITCHES         from "../infrastructure/SWITCHES-sig"
import signature PHASE            from "../infrastructure/PHASE-sig"
import structure Target           from "../infrastructure/Target"
import signature BACKEND_SPECIFIC from "../infrastructure/BACKEND_SPECIFIC-sig"
import signature COMPILER         from "COMPILER-sig"

functor MkCompiler (
    structure Switches :         SWITCHES
    structure FrontendSpecific : PHASE where type I.t = Source.t
    structure FrontendCommon :   PHASE where type I.t = FrontendSpecific.O.t
    structure BackendCommon :    PHASE where type I.t = FrontendCommon.O.t
    structure BackendSpecific :  BACKEND_SPECIFIC
				 where type I.t = BackendCommon.O.t
				 where type O.t = Target.t
) :> COMPILER =
struct
    structure Switches = Switches

    structure Context =
    struct
	type t =
	    { feSpec : FrontendSpecific.C.t
	    , feComm : FrontendCommon.C.t
	    , beComm : BackendCommon.C.t
	    , beSpec : BackendSpecific.C.t
	    }

	val empty =
	    { feSpec = FrontendSpecific.C.empty
	    , feComm = FrontendCommon.C.empty
	    , beComm = BackendCommon.C.empty
	    , beSpec = BackendSpecific.C.empty
	    }
    end

    exception Error

    fun compile (desc, {feSpec, feComm, beComm, beSpec}, source) =
	let
	    val _ = Error.setCurrentUrl (Source.sourceUrl desc)
	    val _ = Error.setOutstream
			(TextIO.getOutstream Switches.Global.errOut)
	    val _ = Error.setOutWidth (!Switches.Global.errWidth)

	    val (c1,rep) = FrontendSpecific.translate (desc, feSpec, source)
	    val (c2,rep) = FrontendCommon.translate (desc, feComm, rep)
	    val (c3,rep) = BackendCommon.translate (desc, beComm, rep)
	    val (c4,target) = BackendSpecific.translate (desc, beSpec, rep)
	in
	    ({feSpec = c1, feComm = c2, beComm = c3, beSpec = c4}, target)
	end
	handle Error.Error _ => raise Error

    val isCrossCompiler = BackendSpecific.isCross
end
