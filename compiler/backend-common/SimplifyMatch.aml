(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 1999-2004
 *
 * Last change:
 *   $Date: 2006-07-18 12:42:03 $ by $Author: rossberg $
 *   $Revision: 1.80 $
 *)

import structure Name                 from "../../lib/rtt/Name"
import structure Label                from "../../lib/rtt/Label"
import functor MkRedBlackMap          from "../../lib/data/MkRedBlackMap"
import structure Crash                from "../infrastructure/Crash"
import structure Source               from "../infrastructure/Source"
import structure Error                from "../infrastructure/Error"
import structure Stamp                from "../common/Stamp"
import structure IntermediateGrammar  from "../common/IntermediateGrammar"
import structure Arity                from "Arity"
import structure FlatGrammar          from "FlatGrammar"
import structure IntermediateAux      from "IntermediateAux"
import signature SIMPLIFY_MATCH       from "SIMPLIFY_MATCH-sig"

structure SimplifyMatch :> SIMPLIFY_MATCH =
    struct
	structure I = IntermediateGrammar
	structure O = FlatGrammar

	open I
	open IntermediateAux

	(* Tests *)

	datatype selector =
	    LABEL of Label.t
	  | LONGID of Stamp.t * Label.t list
	  | REF of Stamp.t
	type pos = selector list

	datatype test =
	    LitTest of lit
	  | TagTest of Label.t vector * int * unit O.args * Arity.t
	  | ConTest of I.longid * unit O.args * Arity.t
	  | RefTest of Stamp.t
	  | TupTest of int
	  | ProdTest of Label.t vector
	    (* sorted, all labels distinct, no tuple *)
	  | VecTest of int
	  | GuardTest of Stamp.t * mapping * I.exp
	  | DecTest of Stamp.t * mapping * I.dec vector
	withtype mapping = (pos * I.id) list

	fun compareLit (IntLit n1, IntLit n2) =
	    LargeInt.compare (n1, n2)
	  | compareLit (WordLit w1, WordLit w2) =
	    LargeWord.compare (w1, w2)
	  | compareLit (RealLit r1, RealLit r2) =
	    LargeReal.compare (r1, r2)
	  | compareLit (CharLit c1, CharLit c2) =
	    WideChar.compare (c1, c2)
	  | compareLit (StringLit s1, StringLit s2) =
	    WideString.compare (s1, s2)
	  | compareLit (_, _) = raise Domain

	fun compareArgs (O.OneArg _, O.OneArg _) = EQUAL
	  | compareArgs (O.TupArgs _, O.TupArgs _) = EQUAL
	  | compareArgs (O.ProdArgs _, O.ProdArgs _) = EQUAL
	  | compareArgs (O.OneArg _, _) = LESS
	  | compareArgs (_, O.OneArg _) = GREATER
	  | compareArgs (O.ProdArgs _, _) = GREATER
	  | compareArgs (_, O.ProdArgs _) = LESS

	fun compareLongid (ShortId (_, _), LongId (_, _, _)) = LESS
	  | compareLongid (LongId (_, _, _), ShortId (_, _)) = GREATER
	  | compareLongid (ShortId (_, Id (_, stamp1, _)),
			   ShortId (_, Id (_, stamp2, _))) =
	    Stamp.compare (stamp1, stamp2)
	  | compareLongid (LongId (_, longid1, Lab (_, label1)),
			   LongId (_, longid2, Lab (_, label2))) =
	    case Label.compare (label1, label2) of
		EQUAL => compareLongid (longid1, longid2)
	      | order => order

	fun compareTest (LitTest lit1, LitTest lit2) = compareLit (lit1, lit2)
	  | compareTest (TagTest (_, n1, args1, _),
			 TagTest (_, n2, args2, _)) =
	    (case Int.compare (n1, n2) of
		 EQUAL => compareArgs (args1, args2)
	       | order => order)
	  | compareTest (ConTest (longid1, args1, _),
			 ConTest (longid2, args2, _)) =
	    (case compareLongid (longid1, longid2) of
		 EQUAL => compareArgs (args1, args2)
	       | order => order)
	  | compareTest (RefTest stamp1, RefTest stamp2) =
	    Stamp.compare (stamp1, stamp2)
	  | compareTest (TupTest _ , TupTest _) = EQUAL
	  | compareTest (ProdTest _ , ProdTest _) = EQUAL
	  | compareTest (VecTest n1 , VecTest n2) = Int.compare (n1, n2)
	  | compareTest (GuardTest (stamp1, _, _), GuardTest (stamp2, _, _)) =
	    Stamp.compare (stamp1, stamp2)
	  | compareTest (DecTest (stamp1, _, _), DecTest (stamp2, _, _)) =
	    Stamp.compare (stamp1, stamp2)
	  | compareTest (DecTest (_, _, _), _) = GREATER  (* put decs to end *)
	  | compareTest (GuardTest (_, _, _), _) = GREATER (* and guards 2nd *)
	  | compareTest (_, _) = LESS                (* and rest before that *)

	fun testEq (test1, test2) = compareTest (test1, test2) = EQUAL

	fun testDisjoint (LitTest lit1, LitTest lit2) =
	    not (litEq (lit1, lit2))
	  | testDisjoint (VecTest n1, VecTest n2) = n1 <> n2
	  | testDisjoint (TagTest (_, n1, _, _), TagTest (_, n2, _, _)) =
	    n1 <> n2
	  | testDisjoint (_, _) = false

	(* Test Sequences *)

	datatype testSeqElem =
	    Test of pos * test
	  | Neg of testSeq
	  | Alt of testSeq * testSeq
	withtype testSeq = testSeqElem list

	(* Test Maps *)

	fun compareSelector (LABEL label1, LABEL label2) =
	    Label.compare (label1, label2)
	  | compareSelector (LONGID (stamp1, labels1),
			     LONGID (stamp2, labels2)) =
	    (case Stamp.compare (stamp1, stamp2) of
		 EQUAL => List.collate Label.compare (labels1, labels2)
	       | order => order)
	  | compareSelector (REF stamp1, REF stamp2) =
	    Stamp.compare (stamp1, stamp2)
	  | compareSelector (LABEL _, _) = LESS
	  | compareSelector (_, LABEL _) = GREATER
	  | compareSelector (REF _, _) = GREATER
	  | compareSelector (_, REF _) = LESS

        val comparePos = List.collate compareSelector

	structure PosMap = MkRedBlackMap (type t = pos
					  val compare = comparePos)

	fun testSetMember (test, nil) = false
	  | testSetMember (test, test'::tests) =
	    case compareTest (test, test') of
		EQUAL => true
	      | LESS => false
	      | GREATER => testSetMember (test, tests)

	fun testSetMerge (tests, nil) = tests
	  | testSetMerge (nil, tests) = tests
	  | testSetMerge (tests1 as test1::tests1',
			  tests2 as test2::tests2') =
	    case compareTest (test1, test2) of
		LESS => test1::testSetMerge (tests1', tests2)
	      | EQUAL => testSetMerge (tests1', tests2)
	      | GREATER => test2::testSetMerge (tests1, tests2')

	fun testMapInsert (testMap, pos, test) =
	    PosMap.insertWith testSetMerge (testMap, pos, [test])

	fun testMapLookup (testMap, pos) =
	    Option.getOpt (PosMap.lookup (testMap, pos), nil)

	fun testMapMember (pos, test, testMap) =
	    testSetMember (test, testMapLookup (testMap, pos))

	fun testSetIntersect (test::tests1, tests2) =
	    if testSetMember (test, tests2) then
		test::testSetIntersect (tests1, tests2)
	    else testSetIntersect (tests1, tests2)
	  | testSetIntersect (nil, _) = nil

	fun testMapIntersect (testMap1, testMap2) =
	    PosMap.intersectWith testSetIntersect (testMap1, testMap2)

	val entailed = testMapMember
	fun disentailed (pos, test, testMap) =
	    List.exists (fn test' => testDisjoint (test, test'))
			(testMapLookup (testMap, pos))

	fun consistent (trueMap, falseMap, pos) =
	    let
		val trueTests = testMapLookup (trueMap, pos)
		val falseTests = testMapLookup (falseMap, pos)
	    in
		not (List.exists (fn test => testSetMember (test, falseTests))
				 trueTests)
		andalso consistent' (falseTests, ~1)
	    end
	and consistent' (_, 0) = false
	  | consistent' (nil, _) = true
	  | consistent' ((RefTest _ | TupTest _ |
			  ProdTest _ | DecTest _)::_, n) = false
	  | consistent' (LitTest (CharLit _)::tests', n) =
		(*--** other small types? *)
		consistent' (tests', if n < 0 then 255 else n - 1)
	  | consistent' (TagTest (labels, _, _, _)::tests', n) =
		consistent' (tests', if n < 0 then Vector.length labels - 1
					      else n - 1)
	  | consistent' ((LitTest _ | ConTest _ |
			  VecTest _ | GuardTest _)::tests', n) =
		consistent' (tests', n)

	(* Test Sequence Construction *)

	local
	    fun longidToSelector' (ShortId (_, Id (_, stamp, _))) =
		(stamp, nil)
	      | longidToSelector' (LongId (_, longid, Lab (_, label))) =
		let
		    val (stamp, labels) = longidToSelector' longid
		in
		    (stamp, label::labels)
		end
	in
	    fun longidToSelector longid =
		let
		    val (stamp, labels) = longidToSelector' longid
		in
		    LONGID (stamp, List.rev labels)
		end
	end

	fun makeConArgs (_, Arity.Tuple 0, _) = (#[], O.TupArgs #[])
	    (*--** this looks irregular *)
	  | makeConArgs (TupPat (_, pats), Arity.Tuple _, pos) =
	    (Vector.mapi (fn (i, pat) =>
			  (LABEL (Label.fromInt (i + 1))::pos, pat)) pats,
	     O.TupArgs (Vector.map ignore pats))
	  | makeConArgs (ProdPat (info, patFlds), Arity.Product _, pos) =
	    (case typToArity (#typ info) of
		 Arity.Tuple n =>
		     (Vector.map (fn Fld (_, Lab (_, label), pat) =>
				  (LABEL label::pos, pat)) patFlds,
		      O.TupArgs (Vector.tabulate (n, ignore)))
	       | Arity.Product labels =>
		     (Vector.map (fn Fld (_, Lab (_, label), pat) =>
				  (LABEL label::pos, pat)) patFlds,
		      O.ProdArgs (Vector.map (fn label =>
					      (label, ())) labels))
	       | Arity.Unary => raise Crash.Crash "SimplifyMatch.makeConArgs")
	  | makeConArgs (pat, _, pos) = (#[(pos, pat)], O.OneArg ())

	fun patToArity (StrictPat (_, pat)) =
	    (typToArity (#typ (infoPat pat)), pat)
	  | patToArity pat = (Arity.Unary, pat)

	fun makeTestSeq (JokPat _, _, rest, mapping) = (rest, mapping)
	  | makeTestSeq (LitPat (_, lit), pos, rest, mapping) =
	    (Test (pos, LitTest lit)::rest, mapping)
	  | makeTestSeq (VarPat (_, id), pos, rest, mapping) =
	    (rest, (pos, id)::mapping)
	  | makeTestSeq (TagPat (info, Lab (_, label), pat),
			 pos, rest, mapping) =
	    let
		val (prod, n) = labelToIndex (#typ info, label)
		val (arity, pat') = patToArity pat
		val (posPatVector, args) =
		    makeConArgs (pat', arity, LABEL label::pos)
	    in
		Vector.foldl (fn ((pos, pat), (rest, mapping)) =>
			      makeTestSeq (pat, pos, rest, mapping))
		(Test (pos, TagTest (prodToLabels prod, n, args, arity))::rest,
		 mapping) posPatVector
	    end
	  | makeTestSeq (ConPat (info, longid, pat), pos, rest, mapping) =
	    let
		val (arity, pat') = patToArity pat
		val (posPatVector, args) =
		    makeConArgs (pat', arity, longidToSelector longid::pos)
	    in
		Vector.foldl (fn ((pos, pat), (rest, mapping)) =>
			      makeTestSeq (pat, pos, rest, mapping))
		(Test (pos, ConTest (longid, args, arity))::rest,
		 mapping) posPatVector
	    end
	  | makeTestSeq (RefPat (_, pat), pos, rest, mapping) =
	    let
		val stamp = Stamp.stamp ()
	    in
		makeTestSeq (pat, REF stamp::pos,
			     Test (pos, RefTest stamp)::rest, mapping)
	    end
	  | makeTestSeq (RollPat (_, pat), pos, rest, mapping) =
	    makeTestSeq (pat, pos, rest, mapping)
	  | makeTestSeq (StrictPat (_, pat), pos, rest, mapping) =
	    makeTestSeq (pat, pos, rest, mapping)
	  | makeTestSeq (TupPat (_, pats), pos, rest, mapping) =
	    Vector.foldli
	    (fn (i, pat, (rest, mapping)) =>
	     makeTestSeq (pat, LABEL (Label.fromInt (i + 1))::pos,
			  rest, mapping))
	    (Test (pos, TupTest (Vector.length pats))::rest, mapping)
	    pats
	  | makeTestSeq (ProdPat (info, patFlds), pos, rest, mapping) =
	    Vector.foldl (fn (Fld (_, Lab (_, label), pat),
			      (rest, mapping)) =>
			  makeTestSeq (pat, LABEL label::pos, rest, mapping))
	    (case typToArity (#typ info) of
		 Arity.Tuple n =>
		     Test (pos, TupTest n)::rest
	       | Arity.Product labels =>
		     Test (pos, ProdTest labels)::rest
	       | Arity.Unary => raise Crash.Crash "SimplifyMatch.makeTestSeq",
	     mapping) patFlds
	  | makeTestSeq (VecPat (_, pats), pos, rest, mapping) =
	    Vector.foldli
	    (fn (i, pat, (rest, mapping)) =>
	     makeTestSeq (pat, LABEL (Label.fromInt (i + 1))::pos,
			  rest, mapping))
	    (Test (pos, VecTest (Vector.length pats))::rest, mapping)
	    pats
	  | makeTestSeq (AsPat (_, pat1, pat2), pos, rest, mapping) =
	    let
		val (rest', mapping') = makeTestSeq (pat1, pos, rest, mapping)
	    in
		makeTestSeq (pat2, pos, rest', mapping')
	    end
	  | makeTestSeq (AltPat (_, pat1, pat2), pos, rest, mapping) =
	    let
		val (rest1', _) = makeTestSeq (pat1, pos, nil, mapping)
		val (rest2', _) = makeTestSeq (pat2, pos, nil, mapping)
	    in
		(Alt (List.rev rest1', List.rev rest2')::rest, mapping)
	    end
	  | makeTestSeq (NegPat (_, pat), pos, rest, mapping) =
	    let
		val (rest', _) = makeTestSeq (pat, pos, nil, mapping)
	    in
		(Neg (List.rev rest')::rest, mapping)
	    end
	  | makeTestSeq (GuardPat (_, pat, exp), pos, rest, mapping) =
	    let
		val stamp = Stamp.stamp ()
		val (rest', mapping') = makeTestSeq (pat, pos, rest, mapping)
	    in
		(Test (pos, GuardTest (stamp, mapping', exp))::rest', mapping')
	    end
	  | makeTestSeq (WithPat (_, pat, decs), pos, rest, mapping) =
	    let
		val stamp = Stamp.stamp ()
		val (rest', mapping') = makeTestSeq (pat, pos, rest, mapping)
	    in
		(Test (pos, DecTest (stamp, mapping', decs))::rest', mapping')
	    end

	(* Test Graphs *)

	type testMap = test list PosMap.t

	datatype testGraph =
	    Node of pos * test * testGraph ref * testGraph ref * nodeStatus ref
	  | Leaf of O.body * O.body option ref
	  | Fail
	  | Default
	  | Unreachable of testGraph
	and nodeStatus =
	    Initial
	  | Raw of testGraph list * testGraph list
	    (* list of all nodes that reference this node as `then',
	     * list of all nodes that reference this node as `else' *)
	  | Cooked of {thenTrue: testMap, thenFalse: testMap,
		       elseTrue: testMap, elseFalse: testMap}
	  | Translated of O.body

	(* Debugging *)

	fun posToString' (LABEL l::rest) =
	    Label.toString l ^ "." ^ posToString' rest
	  | posToString' (LONGID longid::rest) =
	    "<longid>." ^ posToString' rest
	  | posToString' (REF stamp::rest) =
	    "ref[" ^ Stamp.toString stamp ^ "]." ^ posToString' rest
	  | posToString' nil = "<e>"

	fun posToString pos = posToString' (List.rev pos)

	fun indent 0 = ""
	  | indent n = "  " ^ indent (n - 1)

	fun litToString (WordLit w) = LargeWord.toString w
	  | litToString (IntLit i) = LargeInt.toString i
	  | litToString (CharLit c) = "#\"" ^ WideChar.toString c ^ "\""
	  | litToString (StringLit s) = "\"" ^ s ^ "\""
	  | litToString (RealLit r) = LargeReal.toString r

	fun testToString (LitTest lit) = "lit " ^ litToString lit
	  | testToString (TagTest (labels, n, O.OneArg _, _)) =
	    "tag " ^ Label.toString (Vector.sub (labels, n)) ^ "/" ^
	    Int.toString n ^ " one"
	  | testToString (TagTest (labels, n, O.TupArgs xs, _)) =
	    "tag " ^ Label.toString (Vector.sub (labels, n)) ^ "/" ^
	    Int.toString n ^ " tup " ^ Int.toString (Vector.length xs)
	  | testToString (TagTest (labels, n, O.ProdArgs _, _)) =
	    "tag " ^ Label.toString (Vector.sub (labels, n)) ^ "/" ^
	    Int.toString n ^ " prod"
	  | testToString (ConTest (_, O.OneArg _, _)) = "con"
	  | testToString (ConTest (_, O.TupArgs xs, _)) =
	    "con tup " ^ Int.toString (Vector.length xs)
	  | testToString (ConTest (_, O.ProdArgs _, _)) = "con prod"
	  | testToString (RefTest stamp) = "ref[" ^ Stamp.toString stamp ^ "]"
	  | testToString (TupTest n) = "tup " ^ Int.toString n
	  | testToString (ProdTest labelTyplist) = "prod"
	  | testToString (VecTest n) = "vec " ^ Int.toString n
	  | testToString (GuardTest (stamp, _, _)) =
	    "guard[" ^ Stamp.toString stamp ^ "]"
	  | testToString (DecTest (stamp, _, decs)) =
	    "dec[" ^ Stamp.toString stamp ^ "] " ^
	    Int.toString (Vector.length decs)

	fun testsToString tests =
	    String.concatWith ", " (List.map testToString tests)

	fun testMapToString map =
	    String.concatWith "; "
	    (PosMap.foldi (fn (pos, tests, strings) =>
			   (posToString pos ^ ": " ^ testsToString tests)
			   ::strings)
			  nil map)

	fun graphToString (Node (pos, test, ref thenGraph, ref elseGraph,
				 ref status), level) =
	    if level > 30 then "..." else
	    indent level ^
	    posToString pos ^ ": " ^
	    testToString test ^ "\n" ^
	    (case status of
		 Cooked {thenTrue, thenFalse, ...} =>
		     indent (level + 1) ^ "T[" ^
		     testMapToString thenTrue ^ "]\n" ^
		     indent (level + 1) ^ "F[" ^
		     testMapToString thenFalse ^ "]\n"
	       | _ => "") ^
	    graphToString (thenGraph, level + 1) ^
	    (case status of
		 Cooked {elseTrue, elseFalse, ...} =>
		     indent (level + 1) ^ "T[" ^
		     testMapToString elseTrue ^ "]\n" ^
		     indent (level + 1) ^ "F[" ^
		     testMapToString elseFalse ^ "]\n"
	       | _ => "") ^
	    graphToString (elseGraph, level + 1)
	  | graphToString (Leaf (body, _), level) =
	    indent level ^ "leaf " ^
	    (Source.regionToString (O.infoStm (List.hd body))) ^ "\n"
	  | graphToString (Fail, level) = indent level ^ "fail\n"
	  | graphToString (Default, level) = indent level ^ "default\n"
	  | graphToString (Unreachable graph, level) =
	    indent level ^ "unreachable\n" ^
	    graphToString (graph, level + 1)

	fun mappingToString' ((pos, _)::mapping) =
	    " " ^ posToString pos ^ mappingToString' mapping
	  | mappingToString' nil = ""

	fun mappingToString mapping =
	    "dom(mapping) =" ^ mappingToString' mapping ^ "\n"

	fun testSeqToString' (Test (pos, test)::rest) =
	    posToString pos ^ ": " ^ testToString test ^ "\n" ^
	    testSeqToString' rest
	  | testSeqToString' (Neg testSeq::rest) =
	    "<neg>\n" ^ testSeqToString' testSeq ^ "</neg>\n" ^
	    testSeqToString' rest
	  | testSeqToString' (Alt (testSeq1, testSeq2)::rest) =
	    "<alt>\n" ^ testSeqToString' testSeq1 ^
	    "<alt>\n" ^ testSeqToString' testSeq2 ^
	    "</alt>\n" ^ testSeqToString' rest
	  | testSeqToString' nil = ""

	fun testSeqToString testSeq =
	    "<seq>\n" ^ testSeqToString' testSeq ^ "</seq>\n"

	(* Construction of Backtracking Test Trees *)

	local
	    fun findTest (Node (pos', test', thenTreeRef, elseTreeRef, _),
			  pos, test) =
		if pos = pos' then
		    if testEq (test, test') then SOME thenTreeRef
		    else if testDisjoint (test, test') then
			findTest (!elseTreeRef, pos, test)
		    else NONE
		else NONE
	      | findTest (_, _, _) = NONE
	in
	    fun mergeIntoTree (Test (pos, test)::testSeqRest,
			       thenTree, elseTree) =
		(case findTest (elseTree, pos, test) of
		     SOME (treeRef as ref tree) =>
			 let
			     val newTree =
				 mergeIntoTree (testSeqRest, thenTree, tree)
			 in
			     treeRef := newTree; elseTree
			 end
		   | NONE =>
			 let
			     val newThenTree =
				 mergeIntoTree (testSeqRest, thenTree, Fail)
			 in
			     Node (pos, test, ref newThenTree, ref elseTree,
				   ref Initial)
			 end)
	      | mergeIntoTree (Neg testSeq::testSeqRest, thenTree, elseTree) =
		(*--** this may create duplicate code in some cases. *)
		mergeIntoTree (testSeq, elseTree,
			       mergeIntoTree (testSeqRest, thenTree, elseTree))
	      | mergeIntoTree (Alt (testSeq1, testSeq2)::testSeqRest, thenTree,
			       elseTree) =
		(*--** this may create duplicate code in some cases. *)
		mergeIntoTree (testSeq1 @ testSeqRest, thenTree,
			       mergeIntoTree (testSeq2 @ testSeqRest, thenTree,
					      elseTree))
	      | mergeIntoTree (nil, thenTree, _) = thenTree
	end

	(* Elimination of Backtracking, Producing a Test Graph *)

	fun propagateFails (Node (_, _, thenTreeRef, elseTreeRef, _),
			    contTree, defaultTree) =
	    (case !elseTreeRef of
		 Fail => elseTreeRef := contTree
	       | Default => elseTreeRef := defaultTree
	       | elseTree => propagateFails (elseTree, contTree, defaultTree);
	     case !thenTreeRef of
		 Fail => thenTreeRef := contTree
	       | Default => thenTreeRef := defaultTree
	       | thenTree => propagateFails (thenTree, !elseTreeRef,
					     defaultTree))
	  | propagateFails (Leaf (_, _), _, _) = ()
	  | propagateFails ((Fail | Default | Unreachable _), _, _) =
	    raise Crash.Crash "SimplifyMatch.propagateElses"

	(* Optimization of the Test Graph *)

	(* In a first step (`Raw' annotations), compute for each node n
	 * the list of all nodes that reach n through a `then' edge, and
	 * the list of all the nodes that reach n through a `false' edge.
	 *
	 * In a second step (`Cooked' annotations), compute for each edge
	 * (i.e., reference to a graph) the maps (pos -> test) of tests that
	 * are true resp. false upon taking this edge.  Use this information
	 * to shorten paths.  This is essential to maximize parallelization
	 * of tests at the same position in ValuePropagationPhase.
	 *)

	local
	    fun union (NONE, gs) = gs
	      | union (SOME g, gr) = g::gr

	    fun computeRaw (graph as Node (_, _, ref thenGraph, ref elseGraph,
					   status as ref Initial),
			    prevTrueOpt, prevFalseOpt) =
		(status := Raw (union (prevTrueOpt, nil),
				union (prevFalseOpt, nil));
		 computeRaw (thenGraph, SOME graph, NONE);
		 computeRaw (elseGraph, NONE, SOME graph))
	      | computeRaw (Node (_, _, _, _, status as
				  ref (Raw (trueGraphs, falseGraphs))),
			    prevTrueOpt, prevFalseOpt) =
		status := Raw (union (prevTrueOpt, trueGraphs),
			       union (prevFalseOpt, falseGraphs))
	      | computeRaw (_, _, _) = ()

	    fun optimizeNode (graph as Node (pos, test, ref thenGraph,
					     ref elseGraph, _),
			      trueMap, falseMap) =
		if entailed (pos, test, trueMap) then
		    optimizeNode (thenGraph, trueMap, falseMap)
		else if entailed (pos, test, falseMap) orelse
		        disentailed (pos, test, trueMap) then
		    optimizeNode (elseGraph, trueMap, falseMap)
		else graph
	      | optimizeNode (graph, _, _) = graph

	    fun getSets (Node (pos, test, thenGraphRef, elseGraphRef,
			       status as ref (Raw (thenPreds, elsePreds)))) =
		let
		    val thenTrueIn = intersect (#thenTrue, thenPreds)
		    val thenFalseIn = intersect (#thenFalse, thenPreds)
		    val elseTrueIn = intersect (#elseTrue, elsePreds)
		    val elseFalseIn = intersect (#elseFalse, elsePreds)
		    val elseTrue = testMapIntersect (thenTrueIn, elseTrueIn)
		    val thenTrue = testMapInsert (elseTrue, pos, test)
		    val thenFalse = testMapIntersect (thenFalseIn, elseFalseIn)
		    val elseFalse = testMapInsert (thenFalse, pos, test)
		    val sets = {thenTrue = thenTrue, thenFalse = thenFalse,
				elseTrue = elseTrue, elseFalse = elseFalse}
		in
		    status := Cooked sets;
		    getSets (!thenGraphRef); getSets (!elseGraphRef);
		    thenGraphRef := optimizeNode (!thenGraphRef,
						  thenTrue, thenFalse);
		    elseGraphRef := optimizeNode (!elseGraphRef,
						  elseTrue, elseFalse);
		    if consistent (thenTrue, thenFalse, pos) then () else
			thenGraphRef := Unreachable (!thenGraphRef);
		    if consistent (elseTrue, elseFalse, pos) then () else
			elseGraphRef := Unreachable (!elseGraphRef);
		    SOME sets
		end
	      | getSets (Node (_, _, _, _, ref (Cooked sets))) = SOME sets
	      | getSets (Leaf (_, _)) = NONE
	      | getSets _ = raise Crash.Crash "SimplifyMatch.getSets"
	    and intersect (sel, graph::graphs) =
		List.foldr (fn (graph, testMap) =>
			    testMapIntersect (sel (valOf (getSets graph)),
					      testMap))
		(sel (valOf (getSets graph))) graphs
	      | intersect (_, nil) = PosMap.empty
	in
	    fun optimizeGraph graph =
		(computeRaw (graph, NONE, NONE); getSets graph; graph)
	end

	(* Check for exhaustiveness *)

        (*--** sample generation should go somewhere else *)

	fun findSmallest (n, (TagTest (_, n', _, _) | VecTest n')::tests) =
	    if n < n' then n else findSmallest (n' + 1, tests)
	  | findSmallest (n, _) = n

	fun findSmallestInt (n, LitTest (IntLit n')::tests) =
	    if n < n' then n else findSmallestInt (n' + Int.toLarge 1, tests)
	  | findSmallestInt (n, _) = n
	fun findSmallestWord (w, LitTest (WordLit w')::tests) =
	    if w < w' then w else findSmallestWord (w' + (Word.toLarge 0w1),
                                                    tests)
	  | findSmallestWord (w, _) = w
	fun findSmallestReal (x, LitTest (RealLit x')::tests) =
	    if x < x' then x else findSmallestReal (x' + 1.0, tests)
	  | findSmallestReal (x, _) = x
	fun findSmallestChar (c, LitTest (CharLit c')::tests) =
	    if c < c' then c
	    else findSmallestChar (Char.chr (Char.ord c' + 1), tests)
	  | findSmallestChar (c, _) = c
	fun findSmallestString (s, LitTest (StringLit s')::tests) =
	    if s < s' then s
	    else findSmallestString (s ^ ".", tests)
	  | findSmallestString (s, _) = s

	fun falseSample (pos, falseMap) =
	    case PosMap.lookup (falseMap, pos) of
		NONE => "_"
	      | SOME tests =>
	    case List.hd tests of
		LitTest (IntLit _) =>
		LargeInt.toString (findSmallestInt (Int.toLarge 0, tests))
	      | LitTest (WordLit _) =>
		"0w" ^ LargeWord.toString (findSmallestWord (Word.toLarge 0w0,
                                                             tests))
	      | LitTest (RealLit _) =>
		LargeReal.toString (findSmallestReal (0.0, tests))
	      | LitTest (CharLit _) =>
		"#\"" ^ WideChar.toString (findSmallestChar (#"\000", tests)) ^
		"\""
	      | LitTest (StringLit _) =>
		"\"" ^ WideString.toString (findSmallestString ("", tests)) ^
		"\""
	      | TagTest (labels, _, _, _) =>
		let
		    val n = findSmallest (0, tests)
		in
		    Label.toString (Vector.sub (labels, n))
		end
	      | ConTest (_, _, _) => "_"
	      | RefTest _ => "ref _"
	      | VecTest _ =>
		let
		    val n = findSmallest (0, tests)
		in
		    "#[" ^
		    String.concatWith ", " (List.tabulate (n, fn _ => "_")) ^
		    "]"
		end
	      | GuardTest (_, _, _) => "_"
	      | _ => raise Crash.Crash "SimplifyMatch.falseSample"

	fun litSample (IntLit n) = LargeInt.toString n
	  | litSample (WordLit w) = "0wx" ^ LargeWord.toString w
	  | litSample (RealLit r) = LargeReal.toString r
	  | litSample (CharLit c) = "#\"" ^ Char.toString c ^ "\""
	  | litSample (StringLit s) = "\"" ^ String.toString s ^ "\""

	fun longidSample (ShortId (_, Id (_, _, name))) = Name.toString name
	  | longidSample (LongId (_, longid, Lab (_, label))) =
	    longidSample longid ^ "." ^ Label.toString label

	fun sample (pos, trueMap, falseMap) =
	    case PosMap.lookup (trueMap, pos) of
		NONE => falseSample (pos, falseMap)
	      | SOME tests =>
	    case List.hd tests of
		LitTest lit => litSample lit
	      | TagTest (labels, n, _, arity) =>
		let
		    val label = Vector.sub (labels, n)
		in
		    Label.toString label ^
		    argSample (LABEL label::pos, arity, trueMap, falseMap)
		end
	      | ConTest (longid, _, arity) =>
		longidSample longid ^
		argSample (longidToSelector longid::pos, arity,
			   trueMap, falseMap)
	      | RefTest _ => "ref _"
	      | TupTest n => tupSample (pos, n, trueMap, falseMap)
	      | ProdTest labels => prodSample (pos, labels, trueMap, falseMap)
	      | VecTest n =>
		let
		    val samples =
			List.tabulate (n, fn i =>
					  sample (LABEL (Label.fromInt (i+1))
						  ::pos, trueMap, falseMap))
		in
		    "#[" ^ String.concatWith ", " samples ^ "]"
		end
	      | GuardTest (_, _, _) => "_"
	      | DecTest (_, _, _) => "_"
	and argSample (pos, Arity.Unary, trueMap, falseMap) =
	    let
		val sample = sample (pos, trueMap, falseMap)
	    in
		case String.sub (sample, 0) of
		    (#"(" | #"{") => sample
		  | _ => "(" ^ sample ^ ")"
	    end
	  | argSample (pos, Arity.Tuple 0, trueMap, falseMap) = ""
	  | argSample (pos, Arity.Tuple n, trueMap, falseMap) =
	    tupSample (pos, n, trueMap, falseMap)
	  | argSample (pos, Arity.Product labels, trueMap, falseMap) =
	    prodSample (pos, labels, trueMap, falseMap)
	and tupSample (pos, 0, trueMap, falseMap) = "()"
	  | tupSample (pos, 1, trueMap, falseMap) =
	    "{1 = " ^
	    sample (LABEL (Label.fromInt 1)::pos, trueMap, falseMap) ^
	    "}"
	  | tupSample (pos, n, trueMap, falseMap) =
	    let
		val samples =
		    List.tabulate (n, fn i =>
				      sample (LABEL (Label.fromInt (i+1))::pos,
					      trueMap, falseMap))
	    in
		"(" ^ String.concatWith ", " samples ^ ")"
	    end
	and prodSample (pos, labels, trueMap, falseMap) =
	    let
		val fields =
		    List.tabulate (Vector.length labels,
				   fn i =>
				   let
					val label = Vector.sub (labels, i)
				   in
					Label.toString label ^ " = " ^
					sample (LABEL label::pos,
						trueMap, falseMap)
				   end)
	    in
		"{" ^ String.concatWith ", " fields ^ "}"
	    end

	exception NonExhaustive of testMap * testMap
	exception Inconsistent of testMap * testMap

	fun check (trueMap, falseMap, conts,
		   Node (pos, test, ref thenGraph, ref elseGraph, _)) =
	    let
		val trueMap' = testMapInsert (trueMap, pos, test)
		val falseMap' = testMapInsert (falseMap, pos, test)
		val canTakeThen = consistent (trueMap', falseMap, pos)
		val canTakeElse = consistent (trueMap, falseMap', pos)
	    in
		case (canTakeThen, canTakeElse) of
		    (false, false) =>
			raise Inconsistent (trueMap', falseMap)
		  | (true, false) =>
			check (trueMap', falseMap, elseGraph::conts, thenGraph)
		  | (false, true) =>
			check (trueMap, falseMap', conts, elseGraph)
		  | (true, true) =>
			(check (trueMap, falseMap', conts, elseGraph);
			 check (trueMap', falseMap, nil, thenGraph))
	    end
	  | check (trueMap, falseMap, conts, Leaf (_, _)) = ()
	  | check (trueMap, falseMap, nil, Fail) = ()	(* pruned *)
	  | check (trueMap, falseMap, graph::conts, Fail) =
		check (trueMap, falseMap, conts, graph)
	  | check (trueMap, falseMap, conts, Default) =
		raise NonExhaustive (trueMap, falseMap)
	  | check (trueMap, falseMap, conts, Unreachable _) =
		raise Crash.Crash "SimplifyMatch.checkExhaustiveness"

	fun checkExhaustiveness graph =
	    check (PosMap.empty, PosMap.empty, nil, graph)

	(* Main graph creation *)

	type consequent = Source.region * O.body option ref
	type mapping' = (pos * O.idRef) list

	fun buildGraph (region, matches, defaultBody, check) =
	    let
		val (graph, consequents) =
		    Vector.foldr (fn ((region, pat, thenBody),
				      (elseTree, consequents)) =>
				  let
				      val pat' = separateAlt pat
				      val (testSeq, _) =
					  makeTestSeq (pat', nil, nil, nil)
				      val r = ref NONE
				      val leaf = Leaf (thenBody, r)
				  in
				      (mergeIntoTree (List.rev testSeq,
						      leaf, elseTree),
				       (region, r)::consequents)
				  end) (Default, nil) matches
		val defaultGraph = Leaf (defaultBody, ref NONE)
	    in
		case graph of
		    Default =>
			(Error.warn' (true, region, "match is void");
			 (defaultGraph, consequents))
		  | _ =>
			let
			    val _ = if not check then () else
				    checkExhaustiveness graph
			    handle Inconsistent (trueMap, falseMap) =>
				   Error.warn' (true, region,
						"match is inconsistent")
			         | NonExhaustive (trueMap, falseMap) =>
				   Error.warn' (true, region,
						"match is not exhaustive, \
						\because e.g.\n    " ^
						sample (nil, trueMap, falseMap)
						^ "\nis not covered")
			    val _ = propagateFails (graph, defaultGraph,
						    defaultGraph)
			    val graph' = optimizeGraph graph
			in
			    (graph', consequents)
			end
	    end

	(*
	 * Check whether the match rules of a function define
	 * a cartesian n-ary function; if they do, represent
	 * the cartesian arity explicitly.
	 *
	 * Preconditions:
	 * 1) No pattern binds the whole argument value to a variable.
	 * 2) No side effect can be performed by a GuardPat or WithPat
	 *    before the tuple or record is deconstructed (since in the
	 *    presence of by-need futures, the latter may also have
	 *    side effects).
	 *)

	local
	    exception MustBeUnary

	    exception BindsAll     (* precondition 1 not satisfied *)
	    exception SideEffect   (* precondition 2 not satisfied *)
	    exception NotNAry

	    infix or
	    fun x or y = x orelse y (* avoid short-cut! *)

	    fun deconstructs (JokPat _) = false
	      | deconstructs (LitPat _) = raise NotNAry
	      | deconstructs (VarPat (_, _)) = raise BindsAll
	      | deconstructs (TagPat (_, _, _)) = raise NotNAry
	      | deconstructs (ConPat (_, _, _)) = raise NotNAry
	      | deconstructs (RefPat (_, _)) = raise NotNAry
	      | deconstructs (RollPat (_, pat)) = deconstructs pat
	      | deconstructs (StrictPat (_, pat)) = deconstructs pat
	      | deconstructs (TupPat (_, _)) = true
	      | deconstructs (ProdPat (_, _)) = true
	      | deconstructs (VecPat (_, _)) = raise NotNAry
	      | deconstructs (AsPat (_, pat1, pat2)) =
		deconstructs pat1 or deconstructs pat2
	      | deconstructs (AltPat (_, pat1, pat2)) =
		deconstructs pat1 or deconstructs pat2
	      | deconstructs (NegPat (_, pat)) = deconstructs pat
	      | deconstructs (GuardPat (_, pat, _)) =
		deconstructs pat orelse raise SideEffect
	      | deconstructs (WithPat (_, pat, _)) =
		deconstructs pat orelse raise SideEffect

	    fun checkMatches matches =
		(Vector.foldl (fn ((_, pat, _), b) =>
			       deconstructs pat orelse b) false matches)
		handle (BindsAll | SideEffect | NotNAry) => false

	    fun process ((Arity.Unary | Arity.Tuple 1 | Arity.Product #[_]),
			 graph, consequents, region) =
		let
		    val id = O.freshId region
		in
		    (O.OneArg (O.IdDef id), graph, [(nil, O.IdRef id)],
		     consequents)
		end
	      | process (Arity.Tuple n, Node (nil, TupTest _, ref graph, _, _),
			 consequents, _) =
		let
		    val ids =
			Vector.tabulate (n, fn _ => O.freshId Source.nowhere)
		    val mapping =
			Vector.foldri (fn (i, id, mapping) =>
					  ([LABEL (Label.fromInt (i + 1))],
					   O.IdRef id)::mapping)
				      nil ids
		    val idDefs = Vector.map O.IdDef ids
		in
		    (O.TupArgs idDefs, graph, mapping, consequents)
		end
	      | process (Arity.Product labels,
			 Node (nil, ProdTest _, ref graph, _, _),
			 consequents, _) =
		let
		    val labelIdVec =
			Vector.map (fn label =>
				       (label, O.freshId Source.nowhere))
				   labels
		    val mapping =
			Vector.foldr (fn ((label, id), mapping) =>
					 ([LABEL label], O.IdRef id)::mapping)
				     nil labelIdVec
		    val labelIdDefVec =
			Vector.map (fn (label, id) => (label, O.IdDef id))
				   labelIdVec
		in
		    (O.ProdArgs labelIdDefVec, graph, mapping, consequents)
		end
	      | process (_, _, _, _) =
		raise Crash.Crash "SimplifyMatch.process"
	in
	    fun buildFunArgs (region, matches, errStms) =
		let
		    val info = infoPat (#2 (Vector.sub (matches, 0)))
		    val arity =
			if checkMatches matches then typToArity (#typ info)
			else Arity.Unary
		    val (graph, consequents) =
			buildGraph (region, matches, errStms, true)
		in
		    process (arity, graph, consequents, #region info)
		end
	end
    end
