(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2004
 *
 * Last change:
 *   $Date: 2004-09-09 19:23:44 $ by $Author: rossberg $
 *   $Revision: 1.9 $
 *)

import structure Label   from "../../lib/rtt/Label"
import structure Path    from "../../lib/rtt/Path"
import structure Type    from "../../lib/rtt/Type"
import structure Fixity  from "../../lib/rtt/Fixity"
import structure Inf     from "../../lib/rtt/Inf"
import signature INF_LIB from "INF_LIB-sig"

structure InfLib : INF_LIB =
struct
    fun vallab s	= Label.fromString s
    fun typlab s	= Label.fromString s
    fun modlab s	= Label.fromString s

  (* Module and type field names *)

    val modlab_inf	= modlab "Inf"
    structure Inf	= Inf					(* verify *)

    val typlab_kind	= typlab "kind"
    type kind		= Inf.kind				(* verify *)
    val typlab_inf	= typlab "inf"
    type inf		= Inf.inf				(* verify *)
    val typlab_sig	= typlab "sign"
    type sign		= Inf.sign				(* verify *)
    val typlab_mod	= typlab "mod"
    type mod		= Inf.mod				(* verify *)
    val typlab_rea	= typlab "rea"
    type rea		= Inf.rea				(* verify *)


  (* Operations *)

    type fix		= Fixity.t
    type lab		= Label.t
    type path		= Path.t
    type typ		= Type.t
    type tkind		= Type.kind

    val lab_emptySig	= vallab "emptySig"
    val _		= Inf.emptySig : unit -> sign		(* verify *)

    val lab_extendFix	= vallab "extendFix"
    val _		= Inf.extendFix : sign * lab * fix -> unit (* verify *)
    val lab_extendVal	= vallab "extendVal"
    val _		= Inf.extendVal : sign * lab * typ -> unit (* verify *)
    val lab_extendTyp	= vallab "extendTyp"
    val _		= Inf.extendTyp : sign * path * tkind -> unit (*verify*)
    val lab_extendMod	= vallab "extendMod"
    val _		= Inf.extendMod : sign * path * inf -> unit (* verify *)
    val lab_extendInf	= vallab "extendInf"
    val _		= Inf.extendInf : sign * path * kind -> unit (*verify *)

    val lab_lookupFix	= vallab "lookupFix"
    val _		= Inf.lookupFix : sign * lab -> fix	(* verify *)
    val lab_lookupVal	= vallab "lookupVal"
    val _		= Inf.lookupVal : sign * lab -> typ	(* verify *)
    val lab_lookupTyp	= vallab "lookupTyp"
    val _		= Inf.lookupTyp : sign * lab -> tkind	(* verify *)
    val lab_lookupMod	= vallab "lookupMod"
    val _		= Inf.lookupMod : sign * lab -> inf	(* verify *)
    val lab_lookupInf	= vallab "lookupInf"
    val _		= Inf.lookupInf : sign * lab -> kind	(* verify *)
    val lab_lookupTyp'	= vallab "lookupTyp'"
    val _		= Inf.lookupTyp' : sign * lab -> typ	(* verify *)
    val lab_lookupMod'	= vallab "lookupMod'"
    val _		= Inf.lookupMod' : sign * lab -> mod	(* verify *)
    val lab_lookupInf'	= vallab "lookupInf'"
    val _		= Inf.lookupInf' : sign * lab -> inf	(* verify *)

    val lab_mod		= vallab "mod"
    val _		= Inf.mod : path * inf -> mod		(* verify *)

    val lab_asMod	= vallab "asMod"
    val _		= Inf.asMod : mod -> path * inf		(* verify *)

    val lab_top		= vallab "top"
    val _		= Inf.top : unit -> inf			(* verify *)
    val lab_con		= vallab "con"
    val _		= Inf.con : path * kind -> inf		(* verify *)
    val lab_sig		= vallab "sign"
    val _		= Inf.sign : sign -> inf		(* verify *)
    val lab_sing	= vallab "sing"
    val _		= Inf.sing : mod -> inf			(* verify *)
    val lab_arrow	= vallab "arrow"
    val _		= Inf.arrow : path * inf * inf -> inf	(* verify *)
    val lab_lambda	= vallab "lambda"
    val _		= Inf.lambda : path * inf * inf -> inf	(* verify *)
    val lab_apply	= vallab "apply"
    val _		= Inf.apply : inf * mod -> inf		(* verify *)

    val lab_asCon	= vallab "asCon"
    val _		= Inf.asCon : inf -> path		(* verify *)
    val lab_asSig	= vallab "asSig"
    val _		= Inf.asSig : inf -> sign		(* verify *)
    val lab_asArrow	= vallab "asArrow"
    val _		= Inf.asArrow : inf -> path * inf * inf	(* verify *)
    val lab_asSing	= vallab "asSing"
    val _		= Inf.asSing : inf -> mod		(* verify *)
    val lab_asLambda	= vallab "asLambda"
    val _		= Inf.asLambda : inf -> path * inf * inf (* verify *)
    val lab_asApply	= vallab "asApply"
    val _		= Inf.asApply : inf -> inf * mod	(* verify *)

    val lab_groundKind	= vallab "groundKind"
    val _		= Inf.groundKind : unit -> kind		(* verify *)
    val lab_depKind	= vallab "depKind"
    val _		= Inf.depKind : path * inf * kind -> kind (*verify*)
    val lab_singKind	= vallab "singKind"
    val _		= Inf.singKind : inf -> kind		(* verify *)

    val lab_kind	= vallab "kind"
    val _		= Inf.kind : inf -> kind		(* verify *)
    val lab_instance	= vallab "instance"
    val _		= Inf.instance : path * inf -> inf * rea (* verify *)
    val lab_realise	= vallab "realise"
    val _		= Inf.realise : rea * inf -> inf	(* verify *)
    val lab_match	= vallab "match"
    val _		= Inf.match : inf * inf -> rea		(* verify *)
    val lab_infimum	= vallab "infimum"
    val _		= Inf.infimum : inf * inf -> inf	(* verify *)
    val lab_mismatch	= vallab "Mismatch"
    val _		= Inf.Mismatch : Inf.mismatch -> exn	(* verify *)
end
