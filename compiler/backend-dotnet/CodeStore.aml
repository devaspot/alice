(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2003
 *
 * Last change:
 *   $Date: 2003-05-07 12:20:43 $ by $Author: rossberg $
 *   $Revision: 1.37 $
 *)

import structure Crash              from "../infrastructure/Crash"
import structure MkHashScopedImpMap from "../infrastructure/MkHashScopedImpMap"
import structure Stamp              from "../common/Stamp"
import structure StampSet           from "../common/StampSet"
import structure StampMap           from "../common/StampMap"
import structure FlatGrammar        from "../backend-common/FlatGrammar"
import structure IL                 from "IL"
import structure System             from "System"
import signature CODE_STORE         from "CODE_STORE-sig"

structure CodeStore :> CODE_STORE =
    struct
	open IL

	type stamp = Stamp.t

	datatype id = datatype FlatGrammar.id
	datatype idDef = datatype FlatGrammar.idDef
	datatype idRef = datatype FlatGrammar.idRef

	datatype reg =
	    SFld of index
	  | Fld of index
	  | Arg of index
	  | Loc of index
	withtype index = int

	type class = stamp

	structure Map = StampMap
	structure ScopedMap = MkHashScopedImpMap(Stamp)

	type classAttrState = (extends * implements) option ref
	type scope = reg ScopedMap.t
	type classDeclsState = classDecl list ref
	type regState =
	    scope * index ref * index ref * IL.ty list ref * index list ref
	type savedRegState = scope * index list
	type instrsState = IL.instr list ref

	(*--** remove global state *)
	val namespace: dottedname ref = ref #[]
	val classes: (classAttrState * scope * classDeclsState) Map.t ref =
	    ref (Map.map ())
	val env: (class * IL.id * int * regState * instrsState) list ref =
	    ref nil

	fun className class =
	    Vector.concat [!namespace, #["P" ^ Stamp.toString class]]
	fun sfldName i = "V" ^ Int.toString i
	fun fldName i = "G" ^ Int.toString i

	fun init dottedname =
	    (namespace := dottedname;
	     classes := Map.map ();
	     env := [(Stamp.stamp (), "Main", 0,
		      (ScopedMap.map (), ref 0, ref 0,
		       ref nil, ref nil), ref nil)])

	fun defineClass (stamp, extends, implements) =
	    let
		val classAttr = SOME (extends, implements)
		val ctor =
		    Method (".ctor", (Public, Instance),
			    #[], VoidTy, (#[], false),
			    [Ldarg 0,
			     Tail, Call (true, extends, ".ctor", #[], VoidTy),
			     Ret])
	    in
		case Map.lookup (!classes, stamp) of
		    SOME (classAttrRef, _, classDeclsRef) =>
			if Option.isSome (!classAttrRef) then
			    raise Crash.Crash "CodeStore.defineClass"
			else
			    (classAttrRef := classAttr;
			     classDeclsRef := ctor::(!classDeclsRef))
		  | NONE =>
			Map.insertDisjoint (!classes, stamp,
					    (ref classAttr,
					     ScopedMap.map (),
					     ref [ctor]))
	    end

	fun defineMethod (stamp, id, args) =
	    let
		val (scope, classDeclsRef) =
		    case Map.lookup (!classes, stamp) of
			SOME (_, scope, classDeclsRef) =>
			    (scope, classDeclsRef)
		      | NONE =>
			    let
				val scope = ScopedMap.map ()
				val classDeclsRef = ref nil
			    in
				Map.insertDisjoint
				(!classes, stamp,
				 (ref NONE, scope, classDeclsRef));
				(scope, classDeclsRef)
			    end
	    in
		ScopedMap.insertScope scope;
		Vector.foldl (fn (idDef, i) =>
			      (case idDef of
				   IdDef (Id (_, stamp, _)) =>
				       ScopedMap.insertDisjoint (scope, stamp,
								 Arg i)
				 | Wildcard => ();
			       i + 1)) 1 args;
		env :=
		(stamp, id, Vector.length args,
		 (scope, ref 0, ref 0, ref nil, ref nil), ref nil)::(!env)
	    end

	fun emit instr =
	    let
		val (_, _, _, _, instrsRef) = List.hd (!env)
	    in
		instrsRef := instr::(!instrsRef)
	    end

	local
	    fun currentClosure () =
		let
		    val (stamp, _, _, _, _) = List.hd (!env)
		in
		    className stamp
		end

	    fun lookup ((_, _, _, (scope, ri, _, _, _), _)::envr, stamp) =
		(case ScopedMap.lookup (scope, stamp) of
		     SOME reg => reg
		   | NONE =>
			 let
			     val i = !ri
			     val reg = Fld i
			 in   (*--** generate SFld? *)
			     lookup (envr, stamp);
			     ScopedMap.insertDisjoint (scope, stamp, reg);
			     ri := i + 1;
			     reg
			 end)
	      | lookup (nil, stamp) =
		raise Crash.Crash ("CodeStore.lookup: " ^ Stamp.toString stamp)
	in
	    fun emitStamp stamp =
		case lookup (!env, stamp) of
		    SFld i =>
			emit (Ldsfld (currentClosure (), sfldName i, ObjectTy))
		  | Fld i =>
			(emit (Ldarg 0);
			 emit (Ldfld (currentClosure (), fldName i, ObjectTy)))
		  | Loc i => emit (Ldloc i)
		  | Arg i => emit (Ldarg i)
	end

	fun emitId (Id (_, stamp, _)) =
	    (emit (Comment ("load " ^ Stamp.toString stamp));
	     emitStamp stamp)

	fun emitIdRef (IdRef id) = emitId id
	  | emitIdRef (LastIdRef id) = emitId id
	  | emitIdRef (Lit _ | Prim _ | Value _) =
	    raise Crash.Crash "CodeStore.emitIdRef"

	fun allocateLocal ty =
	    let
		val (_, _, _, (_, _, ri, tysRef, _), _) = List.hd (!env)
		val index = !ri
	    in
		tysRef := ty::(!tysRef); ri := index + 1; index
	    end

	fun declareLocal (IdDef (Id (_, stamp, _))) =
	    let
		val (_, _, _, (scope, _, ri, tysRef, indicesRef), _) =
		    List.hd (!env)
	    in
		emit (Comment ("store " ^ Stamp.toString stamp));
		case ScopedMap.lookup (scope, stamp) of
		    SOME (Loc i) =>
			(emit (Stloc i))
		  | SOME _ => raise Crash.Crash "CodeStore.declareLocal"
		  | NONE =>
			let
			    val i =
				case indicesRef of
				    ref nil =>
					!ri before
					(ri := !ri + 1;
					 tysRef := ObjectTy::(!tysRef))
				  | ref (index::rest) =>
					index before indicesRef := rest
			in
			    ScopedMap.insertDisjoint (scope, stamp, Loc i);
			    emit (Stloc i)
			end
	    end
	  | declareLocal Wildcard = emit Pop

	fun kill ids =
	    let
		val (_, _, _, (scope, _, _, _, indicesRef), _) = List.hd (!env)
	    in
		Vector.app
		(fn Id (_, stamp, _) =>
		 case ScopedMap.lookup (scope, stamp) of
		     SOME (Loc i) =>
			 (emit (Comment ("kill " ^ Stamp.toString stamp ^
					 " in loc " ^ Int.toString i));
			  indicesRef := i::(!indicesRef))
		   | SOME (Arg _) =>
			 (* We cannot reuse argument registers *)
			 emit (Comment ("kill-arg " ^ Stamp.toString stamp))
		   | SOME (Fld _ | SFld _) =>
			 emit (Comment ("kill-fld " ^ Stamp.toString stamp))
		   | NONE =>
			 (* This can happen at a SharedStm *)
			 emit (Comment ("kill-none " ^ Stamp.toString stamp)))
		ids
	    end

	fun saveRegState () =
	    let
		val (_, _, _, (scope, _, _, _, ref indices), _) = hd (!env)
	    in
		(ScopedMap.cloneScope scope, indices)
	    end

	fun restoreRegState (scope', indices') =
	    let
		val (_, _, _, (scope, _, _, _, indicesRef), _) = hd (!env)
	    in
		ScopedMap.appi (fn (stamp, reg) =>
				ScopedMap.insert (scope, stamp, reg)) scope';
		indicesRef := indices'
	    end

	fun args n = Vector.tabulate (n, fn _ => ObjectTy)

	fun closeMethod () =
	    case !env of
		(stamp, id, narg, (scope, _, _, ref tys, _),
		 ref instrs)::envr =>
		    let
			val (_, _, classDeclsRef) =
			    Map.lookupExistent (!classes, stamp)
			val delta = ScopedMap.splitScope scope
			val className' = className stamp
			val _ = env := envr
			val method =
			    Method (id, (Public, Virtual),
				    args narg, ObjectTy,
				    (Vector.fromList (List.rev tys), false),
				    List.rev instrs)
			val newClassDecls =
			    ScopedMap.foldi
			    (fn (stamp, reg, classDecls) =>
			     case reg of
				 SFld i =>
				     (emit Dup;
				      emitStamp stamp;
				      emit (Stsfld (className', sfldName i,
						    ObjectTy));
				      ScopedMap.insertDisjoint (scope, stamp,
								reg);
				      Field (sfldName i, (Public, true, false),
					     ObjectTy)::classDecls)
			       | Fld i =>
				     (emit Dup;
				      emitStamp stamp;
				      emit (Stfld (className', fldName i,
						   ObjectTy));
				      ScopedMap.insertDisjoint (scope, stamp,
								reg);
				      Field (fldName i, (Public, false, false),
					     ObjectTy)::classDecls)
			   | _ => classDecls) (!classDeclsRef) delta
		    in
			classDeclsRef := method::newClassDecls
		    end
	      | nil => raise Crash.Crash "CodeStore.closeMethod"

	fun close () =
	    let
		val mainMethod =
		    case !env of
			[(_, id, 0, (_, _, _, ref tys, _), ref instrs)] =>
			    Class (#["Execute"], (true, SealedClass),
				   System.Object, #[],
				   [Method (id, (Public, Static),
					    #[ObjectTy], ObjectTy,
					    (Vector.fromList (List.rev tys),
					     false), List.rev instrs)])
		      | _ => raise Crash.Crash "CodeStore.close"
	    in
		Map.foldi
		(fn (stamp, (ref classAttr, scope, ref classDecls), program) =>
		 let
		     val (extends, implements) = Option.valOf classAttr
		 in
		     Class (className stamp, (true, SealedClass),
			    extends, implements, List.rev classDecls)::program
		 end) [mainMethod] (!classes)
	    end
    end
