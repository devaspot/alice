(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2002
 *
 * Last change:
 *   $Date: 2003-05-09 11:59:36 $ by $Author: rossberg $
 *   $Revision: 1.16 $
 *)

import structure OS               from "../../lib/system/OS"
import structure Source           from "../infrastructure/Source"
import structure Error            from "../infrastructure/Error"
import signature SWITCHES         from "../infrastructure/SWITCHES-sig"
import structure EmptyContext     from "../infrastructure/EmptyContext"
import structure Target           from "../infrastructure/Target"
import signature BACKEND_SPECIFIC from "../infrastructure/BACKEND_SPECIFIC-sig"
import structure MkTracingPhase   from "../infrastructure/MkTracingPhase"
import structure FlatGrammar      from "../backend-common/FlatGrammar"
import structure IL               from "IL"
import structure CodeGenPhase     from "CodeGenPhase"

functor MkBackendDotNet(structure Switches: SWITCHES): BACKEND_SPECIFIC =
    let
	fun inf (_, exportInf) = exportInf

	fun save program filename =
	    let
		val ilFilename = filename ^ ".il"
		val ilasm =
		    "ilasm /quiet /dll \"" ^ ilFilename ^
		    "\" /out=\"" ^ filename ^ "\""
	    in
		IL.outputProgram (ilFilename, program);
		if OS.Process.system ilasm = OS.Process.success then ()
		else
		    Error.error' (Source.nowhere,
				  "invocation of `" ^ ilasm ^ "' failed")
	    end
	structure TracingPhase =
	    MkTracingPhase(structure Phase =
			       struct
				   structure C = EmptyContext
				   structure I = FlatGrammar
				   structure O = Target

				   fun translate x =
				       let
					   val (context, program) =
					       CodeGenPhase.translate x
				       in
					   (context,
					    Target.FOREIGN {save = save program,
							    inf = inf program})
				       end
			       end
			   structure Switches = Switches
			   val name = "Code Generation")
    in
	struct
	    open TracingPhase
	    structure O = Target
	    val isCross = true
	end
    end
