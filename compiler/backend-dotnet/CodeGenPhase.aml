(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2002
 *
 * Last change:
 *   $Date: 2005-03-21 15:14:19 $ by $Author: rossberg $
 *   $Revision: 1.100 $
 *)

(*
 * Optimierungsideen:
 *
 * Voraussetzung: Fuer Pickling muss erkannt werden, welche
 * Referenzen Code auf andere Closures macht.  Idee: Code wird nicht
 * in assemblierter Form in ein PEFile geschrieben (denn Code kann nicht
 * reflektiert werden), sondern in Zwischendarstellung als StockWert
 * gespeichert (bei jeder Closure in einem statischen Feld).
 * Bei Serialisierung wird der transitive Abschluss aller Closures
 * gebildet.  Closures werden ausserdem mit ihrer Definition
 * rausgeschrieben (also mit den Werten ihrer statischen Felder).
 * Bei Deserialisierung eines Token wird (bei Bedarf) der zugehoerige
 * Code in Zwischendarstellung assembliert (eine Form von JITting).
 *
 * Dann kann folgende Optimierung durchgefuehrt werden:
 *
 * Die freien Variablen werden klassifiziert nach statischen und
 * dynamischen freien Variablen (statisch = auf toplevel definiert,
 * also die V-Register in Mozart; dynamisch = nicht auf toplevel
 * definiert, also die G-Register in Mozart) und entsprechend in
 * statischen oder Instanzenfeldern gespeichert.
 *
 * Geboxte Literale sollen auch in V-Registern gespeichert
 * werden, zaehlen also auch als `statische freie Variablen'.
 * V-Register werden als zum Code gehoerig betrachtet.
 *
 * Vorteile:
 * -- Da sich alle Instanzen von Prozeduren die statischen freien
 *    Variablen teilen, wird die (wiederholte) Ausfuehrung einer
 *    Prozedurdefinition effizienter.
 * -- Der Heapverbrauch sinkt, da Literale nur einmal geboxt werden
 *    muessen.
 * Nachteile:
 * -- Es muss der Overhead in Kauf genommen werden, dass der Code
 *    jeder Prozedur in zwei Darstellungen gespeichert wird.
 *)

(*
 * Anzahl der generierten Klassen reduzieren:
 *
 * Eine Toplevel-Prozedur, die ausschliesslich an Designatorposition von
 * Applikationen verwendet wird, heisst Hilfsprozedur (Auxiliary).  Berechne
 * den Dominanzgraphen des Aufrufgraphen der Toplevel-Prozeduren.  Jede
 * dominierende nicht-Hilfsprozedur, die ausschliesslich Hilfsprozeduren
 * unter sich hat, kann die Definitionen ihrer Hilfsprozeduren in ihre
 * eigene Klasse mit aufnehmen.
 *
 * Entsprechend dominierte Hilfsprozeduren sollen mit dem Flag AuxiliaryOf
 * annotiert werden.
 *)

import structure Url             from "../../lib/system/Url"
import structure Name            from "../../lib/rtt/Name"
import structure Label           from "../../lib/rtt/Label"
import structure IntMap          from "../infrastructure/IntMap"
import structure Crash           from "../infrastructure/Crash"
import structure Source          from "../infrastructure/Source"
import structure EmptyContext    from "../infrastructure/EmptyContext"
import structure Stamp           from "../common/Stamp"
import structure StampMap        from "../common/StampMap"
import structure FlatGrammar     from "../backend-common/FlatGrammar"
import structure IntermediateAux from "../backend-common/IntermediateAux"
import structure IL              from "IL"
import structure System          from "System"
import structure Alice           from "Alice"
import structure Builtins        from "Builtins"
import structure CodeStore       from "CodeStore"
import signature CODE_GEN_PHASE  from "CODE_GEN_PHASE-sig"

structure CodeGenPhase :> CODE_GEN_PHASE =
    struct
	structure C = EmptyContext
	structure I = FlatGrammar
	structure O = IL

	open O
	open I
	open CodeStore

	local
	    val count = ref 0
	in
	    fun newLabel () =
		let
		    val n = !count + 1
		in
		    count := n; n
		end
	end

	fun emitRegion (s, region) =
	    emit (Comment (s ^ " at " ^ Source.regionToString region))

	fun emitAwait () =
	    let
		val label = newLabel ()
	    in
		emit Dup; emit (Isinst Alice.TransientTy);
		emit (B (FALSE, label));
		emit (Castclass Alice.TransientTy);
		emit (Callvirt (Alice.Transient, "Await", #[], ObjectTy));
		emit (Label label)
	    end

	fun parseTests (_, _, ~1, min, max) = (min, max)
	  | parseTests (tests, map, i, min, max) =
	    let
		val (j, gen, body) = Vector.sub (tests, i)
	    in
		IntMap.insertWith #1 (map, j, (newLabel (), gen, body));
		parseTests (tests, map, i - 1,
			    Int.min (min, j), Int.max (max, j))
	    end

	fun declareArgs (OneArg idDef, _) = declareLocal idDef
	  | declareArgs (TupArgs idDefs, await) =
	    let
		val indexIdDefList =
		    Vector.foldli (fn (i, idDef, rest) =>
				   case idDef of
				       IdDef _ => (i, idDef)::rest
				     | Wildcard => rest) nil idDefs
	    in
		if await then emitAwait () else ();
		case indexIdDefList of
		    nil => emit Pop
		  | (i, idDef)::indexIdDefList =>
			(emit (Castclass (ArrayTy ObjectTy));
			 List.app (fn (i, idDef) =>
				   (emit Dup; emit (LdcI4 i); emit LdelemRef;
				    declareLocal idDef))
			 (List.rev indexIdDefList);
			 emit (LdcI4 i); emit LdelemRef; declareLocal idDef)
	    end
	  | declareArgs (ProdArgs labelIdDefVec, await) =
	    declareArgs (TupArgs (Vector.map #2 labelIdDefVec), await)

	fun genLit (WordLit (_, w)) =
	    (emit (LdcI4 (LargeWord.toInt w)); emit (Box System.Int32))
	  | genLit (IntLit (_, i)) =
	    (emit (LdcI4 (LargeInt.toInt i)); emit (Box System.Int32))
	  | genLit (CharLit (_, c)) =
	    (emit (LdcI4 (Char.ord c)); emit (Box System.Char))
	  | genLit (StringLit (_, s)) = emit (Ldstr s)
	  | genLit (RealLit (_, r)) = (emit (LdcR8 r); emit (Box System.Double))

	fun emitIdRef (idRef as (IdRef _ | LastIdRef _)) =
	    CodeStore.emitIdRef idRef
	  | emitIdRef (Lit lit) = genLit lit
	  | emitIdRef (Prim name) =
	    let
		val (dottedname, id) = Builtins.lookupField name
	    in
		emit (Ldsfld (dottedname, id, ObjectTy))
	    end
	  | emitIdRef (Value _) =
	    raise Crash.Crash "CodeGenPhase.emitIdRef"

	(*--** remove global state *)
	val sharedLabels: O.label StampMap.t = StampMap.map ()
	val handlerCont: (O.label * I.body) option ref = ref NONE

	structure IdSet = IntermediateAux.IdSet

	fun genStm (Entry (_, _)) = ()
	  | genStm (Exit (_, _, _)) = ()
	  | genStm (LastUse (_, ids)) = kill ids
	  | genStm (ValDec (_, idDef, exp)) = (genExp exp; declareLocal idDef)
	  | genStm (RecDec (_, idDefExpVec)) =
	    let
		val unallocated = IdSet.set ()
		val forward = IdSet.set ()
	    in
		Vector.app (fn (IdDef id, _) =>
			       IdSet.insertDisjoint (unallocated, id)
			     | (Wildcard, _) => ()) idDefExpVec;
		genRec (Vector.toList idDefExpVec, unallocated, forward)
	    end
	  | genStm (RefDec (_, idDef, idRef)) =
	    (emitIdRef idRef; emitAwait (); emit (Castclass Alice.CellTy);
	     emit (Ldfld (Alice.Cell, "Value", ObjectTy));
	     declareLocal idDef)
	  | genStm (TupDec (_, idDefs, idRef)) =
	    (emitIdRef idRef; declareArgs (TupArgs idDefs, true))
	  | genStm (ProdDec (_, labelIdDefVec, idRef)) =
	    (emitIdRef idRef; declareArgs (ProdArgs labelIdDefVec, true))
	  | genStm (TryStm (_, tryBody, idDef1, idDef2, handleBody)) =
	    let
		val label1 = newLabel ()
		val label2 = newLabel ()
		val label3 = newLabel ()
		val oldHandlerCont = !handlerCont
	    in
		handlerCont := NONE;
		emit (Try (label1, label2, Alice.Exception, label2, label3));
		emit (Label label1); genBody tryBody;
		emit (Label label2);
		emit Dup; declareLocal idDef1;
		emit (Ldfld (Alice.Exception, "Value", ObjectTy));
		declareLocal idDef2; genBody handleBody;
		emit (Label label3);
		case !handlerCont of
		    SOME (label, contBody) =>
			(emit (Label label); genBody contBody)
		  | NONE => ();
		handlerCont := oldHandlerCont
	    end
	  | genStm (EndTryStm (_, body) | EndHandleStm (_, body)) =
	    (case !handlerCont of
		 SOME (label, _) => emit (Leave label)
	       | NONE =>
		     let
			 val label = newLabel ()
		     in
			 handlerCont := SOME (label, body); emit (Leave label)
		     end)
	  | genStm (stm as TestStm (_, idRef, tests, elseBody)) =
	    (emitIdRef idRef; emitAwait (); genTests (tests, elseBody))
	  | genStm (RaiseStm (((line, _), _), idRef)) =
	    (emitIdRef idRef; emit (LdcI4 line);
	     emit (Newobj (Alice.Exception, #[ObjectTy, Int32Ty]));
	     emit Throw)
	  | genStm (ReraiseStm (_, _)) = emit Rethrow
	  | genStm (SharedStm (_, body, stamp)) =
	    (case StampMap.lookup (sharedLabels, stamp) of
		 NONE =>
		     let
			 val label = newLabel ()
		     in
			 StampMap.insertDisjoint (sharedLabels, stamp, label);
			 emit (Label label); genBody body
		     end
	       | SOME label => emit (Br label))
	  | genStm (ReturnStm (_, VarAppExp (info, id, args))) =
	    (genVarAppExp (info, id, args, true); emit Ret)
	  | genStm (ReturnStm (_, DirectAppExp (info, id, args))) =
	    (genVarAppExp (info, id, args, true); emit Ret)
	  | genStm (ReturnStm (_, FunAppExp (info, id, _, args))) =
	    (genVarAppExp (info, id, args, true); emit Ret)
	  | genStm (ReturnStm (_, exp)) = (genExp exp; emit Ret)
	  | genStm (IndirectStm (_, ref bodyOpt)) = genBody (valOf bodyOpt)
	  | genStm (ExportStm (_, exp)) = (genExp exp; emit Ret)
	and genRec ((idDef, exp)::rest, unallocated, forward) =
	    let
		val toAllocate = IntermediateAux.getUsedVars (exp, unallocated)
	    in
		IdSet.app
		    (fn id =>
			(IdSet.removeExistent (unallocated, id);
			 IdSet.insertDisjoint (forward, id);
			 emit (Call (false, Builtins.lookupClass "Hole.hole",
				     "StaticApply", #[], ObjectTy));
			 declareLocal (IdDef id))) toAllocate;
		case idDef of
		    IdDef id =>
			(IdSet.remove (unallocated, id);
			 if IdSet.member (forward, id) then
			     (emitIdRef (IdRef id);
			      genExp exp;
			      emit (Call (false,
					  Builtins.lookupClass "Hole.fill",
					  "StaticApply",
					  #[ObjectTy, ObjectTy], ObjectTy));
			      emit Pop)
			 else (genExp exp; declareLocal idDef))
		  | Wildcard => (genExp exp; emit Pop);
		genRec (rest, unallocated, forward)
	    end
	  | genRec (nil, unallocated, _) =
	    assert (IdSet.isEmpty unallocated)
	and genTests (LitTests #[], elseBody) = genBody elseBody
	  | genTests (LitTests litBodyVec, elseBody) =
	    (case Vector.sub (litBodyVec, 0) of
		 (WordLit _, _) =>
		     let
			 fun toInt (WordLit (_, w), body) =
			     (LargeWord.toInt w, ignore, body)
			   | toInt (_, _) =
			     raise Crash.Crash "CodeGenPhase.genTests 1"
		     in
			 emit (Castclass System.Int32Ty);
			 emit (Unbox System.Int32); emit LdindI4;
			 genSwitchTestStm (Vector.map toInt litBodyVec,
					   fn () => genBody elseBody)
		     end
	       | (IntLit _, _) =>
		     let
			 fun toInt (IntLit (_, i), body) =
			     (LargeInt.toInt i, ignore, body)
			   | toInt (_, _) =
			     raise Crash.Crash "CodeGenPhase.genTests 2"
		     in
			 emit (Castclass System.Int32Ty);
			 emit (Unbox System.Int32); emit LdindI4;
			 genSwitchTestStm (Vector.map toInt litBodyVec,
					   fn () => genBody elseBody)
		     end
	       | (CharLit _, _) =>
		     let
			 fun toInt (CharLit (_, c), body) =
			     (WideChar.ord c, ignore, body)
			   | toInt (_, _) =
			     raise Crash.Crash "CodeGenPhase.genTests 3"
		     in
			 emit (Castclass System.CharTy);
			 emit (Unbox System.Char); emit LdindU2;
			 genSwitchTestStm (Vector.map toInt litBodyVec,
					   fn () => genBody elseBody)
		     end
	       | (StringLit _, _) =>
		     let
			 val max = Vector.length litBodyVec - 1
			 fun gen (i, (StringLit (_, s), body)) =
			     let
				 val elseLabel = newLabel ()
				 val regState = saveRegState ()
			     in
				 if i < max then emit Dup else ();
				 emit (Ldstr s);
				 emit (Call (false, System.String, "Equals",
					     #[StringTy, StringTy], BoolTy));
				 emit (B (FALSE, elseLabel));
				 if i < max then emit Pop else ();
				 genBody body; emit (Label elseLabel);
				 restoreRegState regState
			     end
			   | gen (_, (_, _)) =
			     raise Crash.Crash "CodeGenPhase.genTests 4"
		     in
			 emit (Castclass StringTy);
			 Vector.appi gen litBodyVec;
			 genBody elseBody
		     end
	       | (RealLit _, _) =>
		     let
			 val max = Vector.length litBodyVec - 1
			 fun gen (i, (RealLit (_, r), body)) =
			     let
				 val elseLabel = newLabel ()
				 val regState = saveRegState ()
			     in
				 if i < max then emit Dup else ();
				 emit (LdcR8 r); emit (B (NE_UN, elseLabel));
				 if i < max then emit Pop else ();
				 genBody body; emit (Label elseLabel);
				 restoreRegState regState
			     end
			   | gen (_, (_, _)) =
			     raise Crash.Crash "CodeGenPhase.genTests 4"
		     in
			 emit (Castclass System.DoubleTy);
			 emit (Unbox System.Double); emit LdindR8;
			 Vector.appi gen litBodyVec;
			 genBody elseBody
		     end)
	  | genTests (TagTests (_, tagBodyVec), elseBody) =
	    let
		fun toInt (n, TupArgs #[], body) =
		    (n, fn () => emit Pop, body)
		  | toInt (n, args, body) =
		    (n, fn () => (emit (Castclass Alice.TagValTy);
				  emit (Ldfld (Alice.TagVal, "Value",
					       ObjectTy));
				  declareArgs (args, true)), body)
		val thenLabel = newLabel ()
		val contLabel = newLabel ()
	    in
		emit Dup; emit Dup; emit (Isinst Alice.TagValTy);
		emit (B (TRUE, thenLabel)); emit (Castclass System.Int32Ty);
		emit (Unbox System.Int32); emit LdindI4; emit (Br contLabel);
		emit (Label thenLabel); emit (Castclass Alice.TagValTy);
		emit (Call (true, Alice.TagVal, "GetTag", #[], Int32Ty));
		emit (Label contLabel);
		genSwitchTestStm (Vector.map toInt tagBodyVec,
				  fn () => (emit Pop; genBody elseBody))
	    end
	  | genTests (ConTests conBodyVec, elseBody) =
	    let
		val max = Vector.length conBodyVec - 1
		fun gen (i, (idRef, args, body)) =
		    let
			val elseLabel = newLabel ()
			val regState = saveRegState ()
		    in
			if i < max then emit Dup else ();
			emitIdRef idRef; emitAwait ();
			emit (B (NE_UN, elseLabel));
			if i < max then emit Pop else ();
			case args of
			    TupArgs #[] => emit Pop
			  | _ =>
				(emit (Castclass Alice.ConValTy);
				 emit (Ldfld (Alice.ConVal, "Value",
					      ObjectTy));
				 declareArgs (args, true));
			genBody body; emit (Label elseLabel);
			restoreRegState regState
		    end
		val contLabel = newLabel ()
	    in
		emit Dup; emit Dup; emit (Isinst Alice.ConValTy);
		emit (B (FALSE, contLabel)); emit (Castclass Alice.ConValTy);
		emit (Call (true, Alice.ConVal, "GetId", #[], ObjectTy));
		emit (Label contLabel);
		Vector.appi gen conBodyVec;
		emit Pop; genBody elseBody
	    end
	  | genTests (VecTests vecBodyVec, elseBody) =
	    let
		fun toInt (idDefs, body) =
		    (Vector.length idDefs,
		     fn () => declareArgs (TupArgs idDefs, false), body)
	    in
		emit (Castclass (ArrayTy ObjectTy));
		emit Dup; emit Ldlen;
		genSwitchTestStm (Vector.map toInt vecBodyVec,
				  fn () => (emit Pop; genBody elseBody))
	    end
	and genSwitchTestStm (intGenBodyVec, elseBodyFun) =
	    let
		val map = IntMap.map ()
		val i = #1 (Vector.sub (intGenBodyVec, 0))
		val (min, max) =
		    parseTests (intGenBodyVec, map,
				Vector.length intGenBodyVec - 1, i, i)
	    in
		if IntMap.size map > 1
		    andalso max - min + 1 <= IntMap.size map * 4
		then
		    let
			val elseLabel = newLabel ()
			val labels =
			    Vector.tabulate
			    (max - min + 1,
			     fn i =>
			     case IntMap.lookup (map, i + min) of
				 SOME (label, _, _) => label
			       | NONE => elseLabel)
		    in
			if min = 0 then () else (emit (LdcI4 min); emit Sub);
			emit (Switch labels);
			let
			    val regState = saveRegState ()
			in
			    emit (Label elseLabel); elseBodyFun ();
			    restoreRegState regState
			end;
			IntMap.app (fn (label, gen, body) =>
				    let
					val regState = saveRegState ()
				    in
					emit (Label label);
					gen (); genBody body;
					restoreRegState regState
				    end) map
		    end
		else
		    let
			val intGenBodyList = Vector.toList intGenBodyVec
			val intGenBodyList = List.rev intGenBodyList
			val (i, gen, body) = List.hd intGenBodyList
			val intGenBodyList = List.rev (List.tl intGenBodyList)
		    in
			List.app (fn (i, gen, body) =>
				  let
				      val regState = saveRegState ()
				      val elseLabel = newLabel ()
				  in
				      emit Dup; emit (LdcI4 i);
				      emit (B (NE_UN, elseLabel)); emit Pop;
				      gen (); genBody body;
				      emit (Label elseLabel);
				      restoreRegState regState
				  end) intGenBodyList;
			let
			    val regState = saveRegState ()
			    val elseLabel = newLabel ()
			in
			    emit (LdcI4 i); emit (B (NE_UN, elseLabel));
			    gen (); genBody body; emit (Label elseLabel);
			    restoreRegState regState
			end;
			let
			    val regState = saveRegState ()
			in
			    elseBodyFun (); restoreRegState regState
			end
		    end
	    end
	and genExp (NewExp (_, _)) =
	    (emit (Call (false, System.Guid, "NewGuid", #[], System.GuidTy));
	     emit (Box System.Guid))
	  | genExp (VarExp (_, idRef)) = emitIdRef idRef
	  | genExp (TagExp (_, _, n, TupArgs #[])) =
	    (emit (LdcI4 n); emit (Box System.Int32))
	  | genExp (TagExp (_, _, n, args)) =
	    (emit (LdcI4 n); genArgs args;
	     emit (Newobj (Alice.TagVal, #[Int32Ty, ObjectTy])))
	  | genExp (ConExp (_, idRef, TupArgs #[])) = emitIdRef idRef
	  | genExp (ConExp (_, idRef, args)) =
	    (emitIdRef idRef; genArgs args;
	     emit (Newobj (Alice.ConVal, #[ObjectTy, ObjectTy])))
	  | genExp (RefExp (_, idRef)) =
	    (emitIdRef idRef; emit (Newobj (Alice.Cell, #[ObjectTy])))
	  | genExp (TupExp (info, #[])) = emitIdRef (Prim "unit")
	  | genExp (TupExp (_, idRefs)) =
	    (emit (LdcI4 (Vector.length idRefs)); emit (Newarr ObjectTy);
	     Vector.appi (fn (i, idRef) =>
			     (emit Dup; emit (LdcI4 i); emitIdRef idRef;
			      emit StelemRef)) idRefs)
	  | genExp (ProdExp (info, labelIdRefVec)) =
	    genExp (TupExp (info, Vector.map #2 labelIdRefVec))
	  | genExp (PolyProdExp (info, labelIdRefVec)) =
	    (emit (LdcI4 (Vector.length labelIdRefVec));
	     emit (Newarr ObjectTy);
	     Vector.appi (fn (i, (label, _)) =>
			     (emit Dup; emit (LdcI4 i);
			      emit (Ldstr (Label.toString label));
			      emit StelemRef)) labelIdRefVec;
	     emit (Newobj (Alice.Record, #[ArrayTy StringTy]));
	     Vector.app (fn (label, idRef) =>
			    (emit Dup;
			     emit (Ldstr (Label.toString label));
			     emitIdRef idRef;
			     emit (Call (true, Alice.Record, "Init",
					 #[StringTy, ObjectTy], VoidTy))))
			labelIdRefVec)
	  | genExp (VecExp (info, ids)) = genExp (TupExp (info, ids))
	  | genExp (FunExp (info, stamp, _, _, args, _, body)) =
	    (emitRegion ("FunExp", info);
	     emit (Newobj (className stamp, #[]));
	     case args of
		 TupArgs #[] =>
		     defineClass (stamp, Alice.Procedure0, #[])
	       | (TupArgs #[_, _] |
		  ProdArgs #[_, _]) =>
		     defineClass (stamp, Alice.Procedure2, #[])
	       | (TupArgs #[_, _, _] |
		  ProdArgs #[_, _, _]) =>
		     defineClass (stamp, Alice.Procedure3, #[])
	       | (TupArgs #[_, _, _, _] |
		  ProdArgs #[_, _, _, _]) =>
		     defineClass (stamp, Alice.Procedure4, #[])
	       | (TupArgs #[_, _, _, _, _] |
		  ProdArgs #[_, _, _, _, _]) =>
		     defineClass (stamp, Alice.Procedure5, #[])
	       | (TupArgs #[_, _, _, _, _, _] |
		  ProdArgs #[_, _, _, _, _, _]) =>
		     defineClass (stamp, Alice.Procedure6, #[])
	       | (TupArgs #[_, _, _, _, _, _, _] |
		  ProdArgs #[_, _, _, _, _, _, _]) =>
		     defineClass (stamp, Alice.Procedure7, #[])
	       | (TupArgs #[_, _, _, _, _, _, _, _] |
		  ProdArgs #[_, _, _, _, _, _, _, _]) =>
		     defineClass (stamp, Alice.Procedure8, #[])
	       | (TupArgs #[_, _, _, _, _, _, _, _, _] |
		  ProdArgs #[_, _, _, _, _, _, _, _, _]) =>
		     defineClass (stamp, Alice.Procedure9, #[])
	       | _ =>
		     defineClass (stamp, Alice.Procedure, #[]);
	     case args of
		 OneArg idDef =>
		     (defineMethod (stamp, "Apply", #[idDef]);
		      genBody body; closeMethod ())
	       | (TupArgs (idDefs as #[]) |
		  TupArgs (idDefs as #[_, _]) |
		  TupArgs (idDefs as #[_, _, _]) |
		  TupArgs (idDefs as #[_, _, _, _]) |
		  TupArgs (idDefs as #[_, _, _, _, _]) |
		  TupArgs (idDefs as #[_, _, _, _, _, _]) |
		  TupArgs (idDefs as #[_, _, _, _, _, _, _]) |
		  TupArgs (idDefs as #[_, _, _, _, _, _, _, _]) |
		  TupArgs (idDefs as #[_, _, _, _, _, _, _, _, _])) =>
		     (defineMethod (stamp, "Apply", idDefs);
		      genBody body; closeMethod ())
	       | (ProdArgs (labelIdDefVec as #[_, _]) |
		  ProdArgs (labelIdDefVec as #[_, _, _]) |
		  ProdArgs (labelIdDefVec as #[_, _, _, _]) |
		  ProdArgs (labelIdDefVec as #[_, _, _, _, _]) |
		  ProdArgs (labelIdDefVec as #[_, _, _, _, _, _]) |
		  ProdArgs (labelIdDefVec as #[_, _, _, _, _, _, _]) |
		  ProdArgs (labelIdDefVec as #[_, _, _, _, _, _, _, _]) |
		  ProdArgs (labelIdDefVec as #[_, _, _, _, _, _, _, _, _])) =>
		     (defineMethod (stamp, "Apply",
				    Vector.map (fn (_, id) => id)
				    labelIdDefVec);
		      genBody body; closeMethod ())
	       | _ =>
		     let
			 val info = Source.nowhere
			 val id = Id (info, Stamp.stamp (), Name.InId)
		     in
			 defineMethod (stamp, "Apply", #[IdDef id]);
			 emitIdRef (IdRef id); declareArgs (args, true);
			 genBody body; closeMethod ()
		     end)
	  | genExp (PrimAppExp (_, name, idRefs)) =
	    let
		val dottedname = Builtins.lookupClass name
	    in
		Vector.app emitIdRef idRefs;
		emit (Call (false, dottedname, "StaticApply",
			    Vector.map (fn _ => ObjectTy) idRefs, ObjectTy))
	    end
	  | genExp (VarAppExp (info, id, args)) =
	    genVarAppExp (info, id, args, false)
	  | genExp (DirectAppExp (info, id, args)) =
	    genVarAppExp (info, id, args, false)
	  | genExp (SelExp (_, _, _, n, idRef)) =
	    (emitIdRef idRef; emitAwait ();
	     emit (Castclass (ArrayTy ObjectTy));
	     emit (LdcI4 n); emit LdelemRef)
	  | genExp (LazyPolySelExp (_, label, idRef)) =
	    (emitIdRef idRef; emitAwait ();
	     emit (Castclass Alice.RecordTy);
	     emit (Ldstr (Label.toString label));
	     emit (Call (true, Alice.Record, "Sel", #[StringTy], ObjectTy)))
	  | genExp (FunAppExp (info, id, _, args)) =
	    genVarAppExp (info, id, args, false)
	  | genExp (FailExp _) =   (*--** implement *)
	    raise Crash.Crash "CodeGenPhase.genExp: FailExp"
	and genVarAppExp (_, idRef1, OneArg idRef2, isTail) =
	    (emitIdRef idRef1; emit (Castclass Alice.ProcedureTy);
	     emitIdRef idRef2; if isTail then emit Tail else ();
	     emit (Callvirt (Alice.Procedure, "Apply", #[ObjectTy], ObjectTy)))
	  | genVarAppExp (_, idRef,
			  (TupArgs (idRefs as #[]) |
			   TupArgs (idRefs as #[_, _]) |
			   TupArgs (idRefs as #[_, _, _]) |
			   TupArgs (idRefs as #[_, _, _, _]) |
			   TupArgs (idRefs as #[_, _, _, _, _]) |
			   TupArgs (idRefs as #[_, _, _, _, _, _]) |
			   TupArgs (idRefs as #[_, _, _, _, _, _, _]) |
			   TupArgs (idRefs as #[_, _, _, _, _, _, _, _]) |
			   TupArgs (idRefs as #[_, _, _, _, _, _, _, _, _])),
			  isTail)=
	    (emitIdRef idRef; emit (Castclass Alice.ProcedureTy);
	     Vector.app emitIdRef idRefs;
	     if isTail then emit Tail else ();
	     emit (Callvirt (Alice.Procedure, "Apply",
			     Vector.map (fn _ => ObjectTy) idRefs, ObjectTy)))
	  | genVarAppExp (info, idRef, TupArgs idRefs, isTail) =
	    (emitIdRef idRef; emit (Castclass Alice.ProcedureTy);
	     genExp (TupExp (info, idRefs));
	     if isTail then emit Tail else ();
	     emit (Callvirt (Alice.Procedure, "Apply", #[ObjectTy], ObjectTy)))
	  | genVarAppExp (info, idRef, ProdArgs labelIdRefVec, isTail) =
	    genVarAppExp (info, idRef, TupArgs (Vector.map #2 labelIdRefVec),
			  isTail)
	and genArgs (OneArg idRef) = emitIdRef idRef
	  | genArgs (TupArgs idRefs) = genExp (TupExp (Source.nowhere, idRefs))
	  | genArgs (ProdArgs labelIdRefVec) =
	    genExp (ProdExp (Source.nowhere, labelIdRefVec))
	and genBody body = List.app genStm body

	fun translate (desc, _, component as {imports, body, exports, sign}) =
	    (init #[];
	     Vector.app (fn (id, _, url, _) =>
			 (emit (Ldarg 0); emit (Castclass Alice.KomponistTy);
			  emit (Ldstr (Url.toString url));
			  emit (Call (true, Alice.Komponist, "Import",
				      #[StringTy], ObjectTy));
			  declareLocal (IdDef id))) imports;
	     genBody body;
	     ((), (close(), sign)))
    end
