(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2003
 *
 * Last change:
 *   $Date: 2003-07-18 14:23:24 $ by $Author: rossberg $
 *   $Revision: 1.33 $
 *)

import structure TextIO      from "../../lib/system/TextIO"
import structure IntMap      from "../infrastructure/IntMap"
import structure Crash       from "../infrastructure/Crash"
import structure FlatGrammar from "../backend-common/FlatGrammar"
import structure Skeleton    from "Skeleton"
import signature IL          from "IL-sig"

structure IL :> IL =
    struct
	type id = string

	type dottedname = id vector

	(* Class Attributes *)

	type isPublic = bool

	type classVisibility = isPublic

	datatype classInheritance =
	    AbstractClass
	  | InterfaceClass
	  | SealedClass
	  | ValueClass
	  | RegularClass

	type classAttr = classVisibility * classInheritance

	(* Method Attributes *)

	datatype memberVisibility =
	    Private
	  | Assembly
	  | Public
	  | FamilyAndAssembly
	  | Family
	  | FamilyOrAssembly
	datatype methKind =
	    Static
	  | Instance
	  | Abstract
	  | Virtual
	  | Final

	type methAttr = memberVisibility * methKind

	(* Field Attributes *)

	type static = bool
	type initonly = bool

	type fieldAttr = memberVisibility * static * initonly

	(* Types *)

	datatype ty =
	    ClassTy of dottedname
	  | ValueClassTy of dottedname
	  | ArrayTy of ty
	  | CharTy
	  | VoidTy
	  | BoolTy
	  | Int32Ty
	  | Float64Ty
	  | ObjectTy
	  | StringTy

	(* Instructions *)

	type label = int

	type isInstance = bool

	datatype cond =
	    EQ
	  | GE
	  | GE_UN
	  | GT
	  | GT_UN
	  | LE
	  | LE_UN
	  | LT
	  | LT_UN
	  | NE_UN
	  | TRUE
	  | FALSE

	datatype instr =
	    Add
	  | AddOvf
	  | And
	  | B of cond * label
	  | Box of dottedname
	  | Br of label
	  | Call of isInstance * dottedname * id * ty vector * ty
	  | Callvirt of dottedname * id * ty vector * ty
	  | Castclass of ty
	  | Ceq
	  | Cgt
	  | CgtUn
	  | Clt
	  | CltUn
	  | Comment of string
	  | Div
	  | DivUn
	  | Dup
	  | Isinst of ty
	  | Label of label
	  | Ldarg of int
	  | LdcI4 of int
	  | LdcR8 of LargeReal.real
	  | LdelemRef
	  | Ldfld of dottedname * id * ty
	  | LdindI4
	  | LdindU2
	  | LdindR8
	  | Ldlen
	  | Ldloc of int
	  | Ldloca of int
	  | Ldnull
	  | Ldsfld of dottedname * id * ty
	  | Ldstr of string
	  | Leave of label
	  | Newarr of ty
	  | Newobj of dottedname * ty vector
	  | Mul
	  | Neg
	  | Not
	  | Or
	  | Pop
	  | Rem
	  | RemUn
	  | Ret
	  | Rethrow
	  | Shl
	  | Shr
	  | ShrUn
	  | Starg of int
	  | StelemRef
	  | Stfld of dottedname * id * ty
	  | Stloc of int
	  | Stsfld of dottedname * id * ty
	  | Sub
	  | SubOvf
	  | Switch of label vector
	  | Tail
	  | Throw
	  | Try of label * label * dottedname * label * label
	  | Unbox of dottedname
	  | Xor

	(* Top-Level Declarations *)

	type extends = dottedname
	type implements = dottedname vector

	type locals = ty vector * bool   (* initialize *)

	datatype classDecl =
	    Field of id * fieldAttr * ty
	  | Method of id * methAttr * ty vector * ty * locals * instr list

	type isEntrypoint = bool

	datatype decl =
	    Class of
	    dottedname * classAttr * extends * implements * classDecl list
	  | GlobalMethod of
	    id * isPublic * ty vector * ty * isEntrypoint * locals * instr list

	type sign = FlatGrammar.sign
	type program = decl list * sign
	type t = program

	(* Output to File *)

	val output = TextIO.output
	val output1 = TextIO.output1

	val outputId = output

	(* Compute Stack Size, Peephole Optimizer, Dead Code Elimination *)

	structure Map = IntMap

	val size = ref 0
	val maxSize = ref 0
	val map: int Map.t = Map.map ()
	val returnSize = ref 0

	fun comment s =
	    (TextIO.print ("Warning: " ^ s ^ "\n"); [Comment ("--** " ^ s)])

	fun pop n =
	    let
		val i = !size - n
	    in
		if i < 0 then
		    comment ("stack underflow by " ^ Int.toString (~i))
		else (size := i; nil)
	    end

	fun push n =
	    let
		val i = !size + n
	    in
		size := i;
		if i > !maxSize then maxSize := i else ()
	    end

	fun branch label =
	    case Map.lookup (map, label) of
		SOME n =>
		    if !size = n then nil
		    else
			comment ("inconsistent stack size at L" ^
				 Int.toString label ^ ": " ^
				 Int.toString (!size) ^ " <> " ^
				 Int.toString n)
	      | NONE => (Map.insertDisjoint (map, label, !size); nil)

	fun return () =
	    if !size = !returnSize then nil
	    else
		comment ("non-empty stack on return: " ^
			 Int.toString (!size) ^ " <> " ^
			 Int.toString (!returnSize))

	fun eliminateDeadCode ((instr as Label label)::rest) =
	    (case Map.lookup (map, label) of
		 SOME n =>
		     if n = ~2 then instr::eliminateDeadCode rest
		     else (size := n; instr::peephole rest)
	       | NONE => (Map.insert (map, label, ~1); eliminateDeadCode rest))
	  | eliminateDeadCode (_::rest) = eliminateDeadCode rest
	  | eliminateDeadCode nil = nil
	and peephole (Dup::Pop::rest) = (push 1; pop 1; peephole rest)
	  | peephole (instr::rest) =
	    (case instr of
		 (Add | AddOvf) => (pop 2 before push 1) @ instr::peephole rest
	       | And => (pop 2 before push 1) @ And::peephole rest
	       | (B ((TRUE | FALSE), label)) =>
		     pop 1 @ branch label @ instr::peephole rest
	       | B (_, label) => pop 2 @ branch label @ instr::peephole rest
	       | Box _ => (pop 1 before push 1) @ instr::peephole rest
	       | Br label => branch label @ instr::eliminateDeadCode rest
	       | Call (isInstance, _, _, tys, ty) =>
		     (pop ((if isInstance then 1 else 0) + Vector.length tys)
		      before (case ty of VoidTy => () | _ => push 1)) @
		     instr::peephole rest
	       | Callvirt (_, _, tys, ty) =>
		     (pop (Vector.length tys + 1)
		      before (case ty of VoidTy => () | _ => push 1)) @
		     instr::peephole rest
	       | Castclass _ => (pop 1 before push 1) @ instr::peephole rest
	       | (Ceq | Cgt | CgtUn | Clt | CltUn) =>
		     (pop 2 before push 1) @ instr::peephole rest
	       | Comment _ => instr::peephole rest
	       | (Div | DivUn) => (pop 2 before push 1) @ instr::peephole rest
	       | Dup => (pop 1 before push 2) @ instr::peephole rest
	       | Isinst _ => (pop 1 before push 1) @ instr::peephole rest
	       | Label label => branch label @ instr::peephole rest
	       | Ldarg _ => (push 1; instr::peephole rest)
	       | LdcI4 _ => (push 1; instr::peephole rest)
	       | LdcR8 _ => (push 1; instr::peephole rest)
	       | LdelemRef => (pop 2 before push 1) @ instr::peephole rest
	       | Ldfld (_, _, _) =>
		     (pop 1 before push 1) @ instr::peephole rest
	       | LdindI4 => (pop 1 before push 1) @ instr::peephole rest
	       | LdindU2 => (pop 1 before push 1) @ instr::peephole rest
	       | LdindR8 => (pop 1 before push 1) @ instr::peephole rest
	       | Ldlen => (pop 1 before push 1) @ instr::peephole rest
	       | Ldloc _ => (push 1; instr::peephole rest)
	       | Ldloca _ => (push 1; instr::peephole rest)
	       | Ldnull => (push 1; instr::peephole rest)
	       | Ldsfld (_, _, _) => (push 1; instr::peephole rest)
	       | Ldstr _ => (push 1; instr::peephole rest)
	       | Leave label => branch label @ instr::eliminateDeadCode rest
	       | Newarr _ => (pop 1 before push 1) @ instr::peephole rest
	       | Newobj (_, tys) =>
		     (pop (Vector.length tys) before push 1) @
		     instr::peephole rest
	       | Mul => (pop 2 before push 1) @ instr::peephole rest
	       | Neg => (pop 2 before push 1) @ instr::peephole rest
	       | Not => (pop 2 before push 1) @ instr::peephole rest
	       | Or => (pop 2 before push 1) @ instr::peephole rest
	       | Pop => pop 1 @ instr::peephole rest
	       | (Rem | RemUn) => (pop 2 before push 1) @ instr::peephole rest
	       | Ret => return () @ instr::eliminateDeadCode rest
	       | Rethrow => instr::eliminateDeadCode rest
	       | (Shl | Shr | ShrUn) =>
		     (pop 2 before push 1) @ instr::peephole rest
	       | Starg _ => pop 2 @ instr::peephole rest
	       | StelemRef => pop 3 @ instr::peephole rest
	       | Stfld (_, _, _) => pop 2 @ instr::peephole rest
	       | Stloc _ => pop 1 @ instr::peephole rest
	       | Stsfld (_, _, _) => pop 1 @ instr::peephole rest
	       | (Sub | SubOvf) => (pop 2 before push 1) @ instr::peephole rest
	       | Switch labels =>
		     pop 1 @ Vector.foldr (fn (label, rest) =>
					   branch label @ rest) nil labels @
		     instr::peephole rest
	       | Tail => instr::peephole rest
	       | Throw => pop 1 @ instr::eliminateDeadCode rest
	       | Try (tryLabel, tryEndLabel, _, catchLabel, catchEndLabel) =>
		     (branch tryLabel before
		      (Map.insertDisjoint (map, catchLabel, 1);
		       if tryEndLabel <> catchLabel then
			   Map.insertDisjoint (map, tryEndLabel, ~1)
		       else ();
		       Map.insertDisjoint (map, catchEndLabel, ~2))) @
		     instr::peephole rest
	       | Unbox _ => (pop 1 before push 1) @ instr::peephole rest
	       | Xor => (pop 2 before push 1) @ instr::peephole rest)
	  | peephole nil = nil

	fun initPeephole ty =
	    (size := 0; maxSize := 0; Map.removeAll map;
	     returnSize := (case ty of VoidTy => 0 | _ => 1))

	(* Output IL Syntax *)

	fun outputSep _ (_, #[], _) = ()
	  | outputSep outputX (q, xs, sep) =
	    (outputX (q, Vector.sub (xs, 0));
	     VectorSlice.app (fn x => (output (q, sep); outputX (q, x)))
	     (VectorSlice.slice (xs, 1, NONE)))

	fun outputDottedname (q, dottedname) =
	    (case Vector.sub (dottedname, 0) of
		 "System" => output (q, "[mscorlib]")
	       | "Alice" => output (q, "[Alice]")
	       | _ => ();
	     outputSep outputId (q, dottedname, "."))

	fun outputClassAttr (q, (isPublic, inheritance)) =
	    (if isPublic then output (q, "public ")
	     else output (q, "private ");
	     case inheritance of
		 AbstractClass => output (q, "abstract ")
	       | InterfaceClass => output (q, "interface ")
	       | SealedClass => output (q, "sealed ")
	       | ValueClass => output (q, "value ")
	       | RegularClass => ())

	fun outputMemberVisibility (q, Private) = output (q, "private ")
	  | outputMemberVisibility (q, Assembly) = output (q, "assembly ")
	  | outputMemberVisibility (q, Public) = output (q, "public ")
	  | outputMemberVisibility (q, FamilyAndAssembly) =
	    output (q, "famandassem ")
	  | outputMemberVisibility (q, Family) = output (q, "family ")
	  | outputMemberVisibility (q, FamilyOrAssembly) =
	    output (q, "famorassem ")

	fun outputMethKind (q, Static) = output (q, "static ")
	  | outputMethKind (q, Instance) = ()
	  | outputMethKind (q, Abstract) = output (q, "abstract virtual ")
	  | outputMethKind (q, Virtual) = output (q, "virtual ")
	  | outputMethKind (q, Final) = output (q, "final virtual ")

	fun outputMethAttr (q, (vis, kind)) =
	    (outputMemberVisibility (q, vis);
	     outputMethKind (q, kind))

	fun outputFieldAttr (q, (vis, static, initonly)) =
	    (outputMemberVisibility (q, vis);
	     if static then output (q, "static ") else ();
	     if initonly then output (q, "initonly ") else ())

	fun outputTy (q, ClassTy dottedname) =
	    (output (q, "class "); outputDottedname (q, dottedname))
	  | outputTy (q, ValueClassTy dottedname) =
	    (output (q, "value class "); outputDottedname (q, dottedname))
	  | outputTy (q, ArrayTy ty) = (outputTy (q, ty); output (q, "[]"))
	  | outputTy (q, CharTy) = output (q, "wchar")
	  | outputTy (q, VoidTy) = output (q, "void")
	  | outputTy (q, BoolTy) = output (q, "bool")
	  | outputTy (q, Int32Ty) = output (q, "int32")
	  | outputTy (q, Float64Ty) = output (q, "float64")
	  | outputTy (q, ObjectTy) = output (q, "object")
	  | outputTy (q, StringTy) = output (q, "string")
	fun outputTys (q, tys) = outputSep outputTy (q, tys, ", ")

	fun outputLabel (q, i) = output (q, "L" ^ Int.toString i)
	fun outputLabels (q, labels) = outputSep outputLabel (q, labels, ", ")

	fun intToString i =
	    if i < 0 then "-" ^ Int.toString (~i)
	    else Int.toString i

	local
	    fun toOct i = String.str (Char.chr (i mod 8 + Char.ord #"0"))

	    fun charToCString #"\\" = "\\\\"
	      | charToCString #"\"" = "\\\""
	      | charToCString #"\a" = "\\a"
	      | charToCString #"\b" = "\\b"
	      | charToCString #"\t" = "\\t"
	      | charToCString #"\n" = "\\n"
	      | charToCString #"\v" = "\\v"
	      | charToCString #"\f" = "\\f"
	      | charToCString #"\r" = "\\r"
	      | charToCString c =
		let
		    val i = Char.ord c
		in
		    if i < 32 then "\\0" ^ toOct (i div 8) ^ toOct i
		    else String.str c
		end
	in
	    fun stringToCString s =
		List.foldr (fn (c, rest) => charToCString c ^ rest) ""
		(explode s)
	end

	fun outputInstr (q, Add) = output (q, "add")
	  | outputInstr (q, AddOvf) = output (q, "add.ovf")
	  | outputInstr (q, And) = output (q, "and")
	  | outputInstr (q, B (EQ, label)) =   (*--** short form? *)
	    (output (q, "beq "); outputLabel (q, label))
	  | outputInstr (q, B (GE, label)) =   (*--** short form? *)
	    (output (q, "bge "); outputLabel (q, label))
	  | outputInstr (q, B (GE_UN, label)) =   (*--** short form? *)
	    (output (q, "bge.un "); outputLabel (q, label))
	  | outputInstr (q, B (GT, label)) =   (*--** short form? *)
	    (output (q, "bgt "); outputLabel (q, label))
	  | outputInstr (q, B (GT_UN, label)) =   (*--** short form? *)
	    (output (q, "bgt.un "); outputLabel (q, label))
	  | outputInstr (q, B (LE, label)) =   (*--** short form? *)
	    (output (q, "ble "); outputLabel (q, label))
	  | outputInstr (q, B (LE_UN, label)) =   (*--** short form? *)
	    (output (q, "ble.un "); outputLabel (q, label))
	  | outputInstr (q, B (LT, label)) =   (*--** short form? *)
	    (output (q, "blt "); outputLabel (q, label))
	  | outputInstr (q, B (LT_UN, label)) =   (*--** short form? *)
	    (output (q, "blt.un "); outputLabel (q, label))
	  | outputInstr (q, B (NE_UN, label)) =   (*--** short form? *)
	    (output (q, "bne.un "); outputLabel (q, label))
	  | outputInstr (q, B (TRUE, label)) =   (*--** short form? *)
	    (output (q, "brtrue "); outputLabel (q, label))
	  | outputInstr (q, B (FALSE, label)) =   (*--** short form? *)
	    (output (q, "brfalse "); outputLabel (q, label))
	  | outputInstr (q, Box dottedname) =
	    (output (q, "box "); outputDottedname (q, dottedname))
	  | outputInstr (q, Br label) =   (*--** short form? *)
	    (output (q, "br "); outputLabel (q, label))
	  | outputInstr (q, Call (isInstance, dottedname, id, tys, ty)) =
	    (output (q, "call ");
	     if isInstance then output (q, "instance ") else ();
	     outputTy (q, ty); output1 (q, #" ");
	     outputDottedname (q, dottedname); output (q, "::");
	     outputId (q, id); output1 (q, #"(");
	     outputTys (q, tys); output1 (q, #")"))
	  | outputInstr (q, Callvirt (dottedname, id, tys, ty)) =
	    (output (q, "callvirt instance ");
	     outputTy (q, ty); output1 (q, #" ");
	     outputDottedname (q, dottedname); output (q, "::");
	     outputId (q, id); output1 (q, #"(");
	     outputTys (q, tys); output1 (q, #")"))
	  | outputInstr (q, Castclass ty) =
	    (output (q, "castclass "); outputTy (q, ty))
	  | outputInstr (q, Ceq) = output (q, "ceq")
	  | outputInstr (q, Cgt) = output (q, "cgt")
	  | outputInstr (q, CgtUn) = output (q, "cgt.un")
	  | outputInstr (q, Clt) = output (q, "clt")
	  | outputInstr (q, CltUn) = output (q, "clt.un")
	  | outputInstr (q, Comment s) = output (q, "// " ^ s)
	  | outputInstr (q, Div) = output (q, "div")
	  | outputInstr (q, DivUn) = output (q, "div.un")
	  | outputInstr (q, Dup) = output (q, "dup")
	  | outputInstr (q, Isinst ty) =
	    (output (q, "isinst "); outputTy (q, ty))
	  | outputInstr (q, Label label) = raise Crash.Crash "IL.outputInstr"
	  | outputInstr (q, Ldarg i) =
	    (output (q, "ldarg");
	     if i < 4 then (output1 (q, #"."); output (q, Int.toString i))
	     else if i < 256 then
		 (output (q, ".s "); output (q, Int.toString i))
	     else (output1 (q, #" "); output (q, Int.toString i)))
	  | outputInstr (q, LdcI4 i) =
	    (output (q, "ldc.i4");
	     if i >= 0 andalso i <= 8 then
		 (output1 (q, #"."); output (q, Int.toString i))
	     else if i = ~1 then output (q, ".M1")
	     else if i >= ~128 andalso i <= 127 then
		 (output (q, ".s "); output (q, intToString i))
	     else (output1 (q, #" "); output (q, intToString i)))
	  | outputInstr (q, LdcR8 r) =
	    (output (q, "ldc.r8 ");
	     output (q, (String.map (fn c => if c = #"~" then #"-" else c)
			 (LargeReal.toString r))))
	  | outputInstr (q, LdelemRef) = output (q, "ldelem.ref")
	  | outputInstr (q, Ldfld (dottedname, id, ty)) =
	    (output (q, "ldfld "); outputTy (q, ty); output1 (q, #" ");
	     outputDottedname (q, dottedname); output (q, "::");
	     outputId (q, id))
	  | outputInstr (q, LdindI4) = output (q, "ldind.i4")
	  | outputInstr (q, LdindU2) = output (q, "ldind.u2")
	  | outputInstr (q, LdindR8) = output (q, "ldind.r8")
	  | outputInstr (q, Ldlen) = output (q, "ldlen")
	  | outputInstr (q, Ldloc i) =
	    (output (q, "ldloc");
	     if i < 4 then (output1 (q, #"."); output (q, Int.toString i))
	     else if i < 256 then
		 (output (q, ".s "); output (q, Int.toString i))
	     else (output1 (q, #" "); output (q, Int.toString i)))
	  | outputInstr (q, Ldloca i) =
	    (output (q, "ldloca");
	     if i < 256 then
		 (output (q, ".s "); output (q, Int.toString i))
	     else (output1 (q, #" "); output (q, Int.toString i)))
	  | outputInstr (q, Ldnull) = output (q, "ldnull")
	  | outputInstr (q, Ldsfld (dottedname, id, ty)) =
	    (output (q, "ldsfld "); outputTy (q, ty); output1 (q, #" ");
	     outputDottedname (q, dottedname); output (q, "::");
	     outputId (q, id))
	  | outputInstr (q, Ldstr s) =
	    (output (q, "ldstr \""); output (q, stringToCString s);
	     output1 (q, #"\""))
	  | outputInstr (q, Leave label) =   (*--** short form? *)
	    (output (q, "leave "); outputLabel (q, label))
	  | outputInstr (q, Newarr ty) =
	    (output (q, "newarr "); outputTy (q, ty))
	  | outputInstr (q, Newobj (dottedname, tys)) =
	    (output (q, "newobj instance void ");
	     outputDottedname (q, dottedname);
	     output (q, "::.ctor("); outputTys (q, tys); output1 (q, #")"))
	  | outputInstr (q, Mul) = output (q, "mul")
	  | outputInstr (q, Neg) = output (q, "neg")
	  | outputInstr (q, Not) = output (q, "not")
	  | outputInstr (q, Or) = output (q, "or")
	  | outputInstr (q, Pop) = output (q, "pop")
	  | outputInstr (q, Rem) = output (q, "rem")
	  | outputInstr (q, RemUn) = output (q, "rem.un")
	  | outputInstr (q, Ret) = output (q, "ret")
	  | outputInstr (q, Rethrow) = output (q, "rethrow")
	  | outputInstr (q, Shl) = output (q, "shl")
	  | outputInstr (q, Shr) = output (q, "shr")
	  | outputInstr (q, ShrUn) = output (q, "shr.un")
	  | outputInstr (q, Starg i) =
	    (output (q, "starg");
	     if i < 4 then (output1 (q, #"."); output (q, Int.toString i))
	     else if i < 256 then
		 (output (q, ".s "); output (q, Int.toString i))
	     else (output1 (q, #" "); output (q, Int.toString i)))
	  | outputInstr (q, StelemRef) = output (q, "stelem.ref")
	  | outputInstr (q, Stfld (dottedname, id, ty)) =
	    (output (q, "stfld "); outputTy (q, ty); output1 (q, #" ");
	     outputDottedname (q, dottedname); output (q, "::");
	     outputId (q, id))
	  | outputInstr (q, Stloc i) =
	    (output (q, "stloc");
	     if i < 4 then (output1 (q, #"."); output (q, Int.toString i))
	     else if i < 256 then
		 (output (q, ".s "); output (q, Int.toString i))
	     else (output1 (q, #" "); output (q, Int.toString i)))
	  | outputInstr (q, Stsfld (dottedname, id, ty)) =
	    (output (q, "stsfld "); outputTy (q, ty); output1 (q, #" ");
	     outputDottedname (q, dottedname); output (q, "::");
	     outputId (q, id))
	  | outputInstr (q, Sub) = output (q, "sub")
	  | outputInstr (q, SubOvf) = output (q, "sub.ovf")
	  | outputInstr (q, Switch labels) =
	    (output (q, "switch("); outputLabels (q, labels);
	     output1 (q, #")"))
	  | outputInstr (q, Tail) = output (q, "tail.")
	  | outputInstr (q, Throw) = output (q, "throw")
	  | outputInstr (q, Try (label1, label2, dottedname, label3, label4)) =
	    (output (q, ".try "); outputLabel (q, label1);
	     output (q, " to "); outputLabel (q, label2);
	     output (q, " catch "); outputDottedname (q, dottedname);
	     output (q, " handler "); outputLabel (q, label3);
	     output (q, " to "); outputLabel (q, label4))
	  | outputInstr (q, Unbox dottedname) =
	    (output (q, "unbox "); outputDottedname (q, dottedname))
	  | outputInstr (q, Xor) = output (q, "xor")

	fun outputInstrs (q, (instr as Try (_, _, _, _, _))::instrr, trys) =
	    outputInstrs (q, instrr, trys @ [instr])
	  | outputInstrs (q, Label label::instrr, trys) =
	    (output (q, "  "); outputLabel (q, label); output (q, ":\n");
	     outputInstrs (q, instrr, trys))
	  | outputInstrs (q, instr::instrr, trys) =
	    (output (q, "    "); outputInstr (q, instr); output1 (q, #"\n");
	     outputInstrs (q, instrr, trys))
	  | outputInstrs (q, nil, instr::instrr) =
	    (output (q, "    "); outputInstr (q, instr); output1 (q, #"\n");
	     outputInstrs (q, nil, instrr))
	  | outputInstrs (_, nil, nil) = ()

	fun outputBody (q, instrs, ty) =
	    let
		val _ = initPeephole ty
		val instrs = peephole instrs
	    in
		Map.removeAll map;
		output (q, "    .maxstack ");
		output (q, Int.toString (!maxSize)); output (q, "\n");
		outputInstrs (q, instrs, nil)
	    end

	fun outputLocals (_, (#[], _)) = ()
	  | outputLocals (q, (tys, zeroinit)) =
	    (output (q, "    .locals("); outputSep outputTy (q, tys, ", ");
	     output (q, ")\n");
	     if zeroinit then output (q, "    .zeroinit\n") else ())

	fun outputClassDecl (q, Field (id, attr, ty)) =
	    (output (q, "  .field "); outputFieldAttr (q, attr);
	     outputTy (q, ty); output1 (q, #" "); outputId (q, id);
	     output1 (q, #"\n"))
	  | outputClassDecl (q, Method (id, attr, tys, ty, locals, instrs)) =
	    (output (q, "  .method "); outputMethAttr (q, attr);
	     outputTy (q, ty); output1 (q, #" "); outputId (q, id);
	     output1 (q, #"("); outputTys (q, tys); output (q, ") {\n");
	     outputLocals (q, locals);
	     outputBody (q, instrs, ty);
	     output (q, "  }\n"))

	fun outputClassDecls (q, decl::declr) =
	    (outputClassDecl (q, decl); outputClassDecls (q, declr))
	  | outputClassDecls (_, nil) = ()

	fun outputImplements (_, #[]) = ()
	  | outputImplements (q, dottednames) =
	    (output (q, "implements ");
	     outputSep outputDottedname (q, dottednames, ", ");
	     output1 (q, #" "))

	fun outputDecl (q, Class (name, attr, super, interfaces, members)) =
	    (output (q, ".class "); outputClassAttr (q, attr);
	     outputDottedname (q, name); output (q, " extends ");
	     outputDottedname (q, super);
	     outputImplements (q, interfaces);
	     output (q, " {\n");
	     outputClassDecls (q, members);
	     output (q, "}\n"))
	  | outputDecl (q, GlobalMethod (id, isPublic, tys, ty, isEntrypoint,
					 locals, instrs)) =
	    (output (q, ".method ");
	     output (q, if isPublic then "public " else "private ");
	     outputTy (q, ty); output1 (q, #" "); outputId (q, id);
	     output1 (q, #"("); outputTys (q, tys); output (q, ") {\n");
	     if isEntrypoint then output (q, ".entrypoint\n") else ();
	     outputLocals (q, locals);
	     outputBody (q, instrs, ty);
	     output (q, "}\n"))

	fun outputDecls (q, [decl]) = outputDecl (q, decl)
	  | outputDecls (q, decl::declr) =
	    (outputDecl (q, decl); output1 (q, #"\n"); outputDecls (q, declr))
	  | outputDecls (_, nil) = ()

	fun basename filename =   (*--** replace by OS.Path.splitBaseExt *)
	    let
		fun cutPath ((#"/" | #"\\")::rest) = nil
		  | cutPath (c::rest) = c::cutPath rest
		  | cutPath nil = nil
		val cs = cutPath (List.rev (String.explode filename))
		fun cutExtension (#"."::rest) =
		    (case rest of
			 (#"/" | #"\\")::_ => cs
		       | _::_ => rest
		       | nil => cs)
		  | cutExtension ((#"/" | #"\\")::_) = cs
		  | cutExtension (_::rest) = cutExtension rest
		  | cutExtension nil = cs
	    in
		String.implode (List.rev (case cs of
					      #"."::_ => cs
					    | _ => cutExtension cs))
	    end

	fun outputProgram (filename, (decls, _)) =
	    let
		val name = basename filename
		val q = TextIO.openOut filename
	    in
		output (q, Skeleton.module name);
		output (q, Skeleton.externals ());
		outputDecls (q, decls);
		TextIO.closeOut q
	    end
    end
