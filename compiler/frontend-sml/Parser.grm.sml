
functor MkLrVals(structure Token:        TOKEN
			  structure DerivedForms: DERIVED_FORMS
			 )
	 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* Author:									*)
(*   Andreas Rossberg <rossberg@ps.uni-sb.de>					*)
(*										*)
(* Copyright:									*)
(*   Andreas Rossberg, 2001-2007						*)
(*										*)
(* Last change:									*)
(*   $Date: 2007-04-02 12:11:28 $ by $Author: rossberg $				*)
(*   $Revision: 1.75 $							*)

(*										*)
(* Standard ML syntactic analysis						*)
(*										*)
(* Definition, sections 2, 3, and 8, Appendix A and B				*)
(*										*)
(* Extensions:									*)
(*   - allow = to be bound as vid (in a pattern it must be prefixed by op)	*)
(*   - extensible records:							*)
(*	  exprow ::= ... = exp <, exprow>					*)
(*	  patrow ::= ... <= pat> <, patrow>					*)
(*	  tyrow  ::= ... = ty <, tyrow>						*)
(*   - record update expressions:						*)
(*	  atexp ::= { atexp where exprow }					*)
(*   - vector expressions and patterns:						*)
(*	  atexp ::= #[ exp_1 , ... , exp_n ] 	(n>=0)				*)
(*	  atpat ::= #[ pat_1 , ... , pat_n ]	(n>=0)				*)
(*   - punning in record expressions (derived form):				*)
(*	  exprow ::= vid <: ty> <, exprow>					*)
(*   - recursive expressions (derived form):					*)
(*	  exp ::= rec pat => exp						*)
(*   - optional else branch (derived form):					*)
(*	  exp ::= if exp_1 then exp_2						*)
(*   - lazy expressions:							*)
(*	  exp ::= lazy exp							*)
(*   - spawn expressions:							*)
(*	  exp ::= spawn exp							*)
(*   - finalization:								*)
(*	  exp ::= exp_1 finally exp_1						*)
(*   - assertions:								*)
(*	  exp ::= assert<d> exp							*)
(*		  assert<d> exp of pat						*)
(*		  assert<d> exp raise pat					*)
(*		  assert<d> exp_1 do exp_2					*)
(*		  assert<d> exp_1 of pat do exp_2				*)
(*   - optional leading bars:							*)
(*	  exp ::= fn <|> match							*)
(*	      ::= exp handle <|> match						*)
(*	      ::= case exp of <|> match						*)
(*	  fvalbind ::= <|> ...							*)
(*        datbind ::= tyvarseq tycon = <|> conbind <and datbind>		*)
(*        datdesc ::= tyvarseq tycon = <|> condesc <and datdesc>		*)
(*   - lazy function declarations:						*)
(*        fvalbind ::= lazy <|> <op> vid atpat11...atpat1n <: ty1> = exp1 | ...	*)
(*   - concurrent function declarations:					*)
(*        fvalbind ::= spawn <|> <op> vid atpat11...atpat1n <: ty1> = exp1 |...	*)
(*   - do declarations:								*)
(*	  dec ::= do exp							*)
(*   - generalised open declarations:						*)
(*	  dec ::= open strexp							*)
(*   - more relaxed constructor pattern syntax:					*)
(*	  pat ::= pat atpat			(R)				*)
(*   - generalized layered patterns:						*)
(*	  pat ::= pat as pat			(R)				*)
(*   - alternative and guarded patterns:					*)
(*	  atpat ::= ( pat_1 | ... | pat_n )	(n>=2)				*)
(*	  pat   ::= pat if exp			(L)				*)
(*   - negated patterns:							*)
(*	  pat ::= non pat							*)
(*   - with patterns:								*)
(*	  pat ::= pat withval valbind end					*)
(*	      ::= pat withfun fvalbind end		(derived form)		*)
(*   - type wildcards:								*)
(*	  ty ::= _								*)
(*   - extensible datatypes (exception declarations become a derived form),	*)
(*     constructor synonym specifications:					*)
(*        dec      ::= exttype extbind						*)
(*		   ::= constructor econbind					*)
(*	  extbind  ::= tyvarseq tycon <and extbind>				*)
(*	  econbind ::= <op> vid <of ty> : tyvarseq longtycon <and econbind>	*)
(*		   ::= <op> vid = <op> longvid <and econbind>			*)
(*        spec     ::= exttype extdesc						*)
(*                 ::= constructor econdesc					*)
(*	  extdesc  ::= tyvarseq tycon <and extdesc>				*)
(*	  econdesc ::= vid <of ty> : tyvarseq longtycon <and econdesc>		*)
(*		   ::= vid = longvid <and econdesc>				*)
(*   - abstract type declarations:						*)
(*	  typbind  ::= tyvarseq tycon						*)
(*	  dec      ::= eqtype typbind						*)
(*   - higher-order functors:							*)
(*        strexp ::= strexp atstrexp						*)
(*               ::= fct strpat => strexp					*)
(*        strexp ::= fct strpat -> sigexp					*)
(*	         ::= sigexp -> sigexp	 (derived form)				*)
(*	  strpat  ::= strid : sigexp						*)
(*	          ::= _ : sigexp	 (derived form)				*)
(*	          ::= ( strid : sigexp ) (derived form)				*)
(*	          ::= ( _ : sigexp )	 (derived form)				*)
(*	          ::= ( spec )	         (derived form)				*)
(*   - structure wildcards (derived form):					*)
(*        strbind ::= _ <: sigexp> = strexp <and strbind>			*)
(*   - curried functor declarations (derived forms):				*)
(*        funbind ::= strid strpat_1 ... strpat_n <: sigexp> = strexp		*)
(*			 <and funbind>					(n>=1)	*)
(*                ::= strid strpat_1 ... strpat_n <:> sigexp> = strexp		*)
(*			 <and funbind>					(n>=1)	*)
(*   - top signature:								*)
(*	  sigexp ::= any							*)
(*   - parenthesised structure and signature expressions (derived forms):	*)
(*        strexp ::= ( strexp )							*)
(*        sigexp ::= ( sigexp )							*)
(*   - long signature identifiers:						*)
(*	  sigexp  ::= longsigid							*)
(*	  spec    ::= include longsigid_1 ... longsigid_n			*)
(*   - parameterized signatures and signature specifications:			*)
(*	  sigbind ::= sigid strpat_1 ... strpat_n = sigexp <and sigbind> (n>=0)	*)
(*	  spec    ::= signature sigdesc						*)
(*	  sigdesc ::= sigid strpat_1 ... strpat_n <and sigdesc>	(n>=0)		*)
(*		  ::= sigid strpat_1 ... strpat_n = sigexp <and sigdesc> (n>=0)	*)
(*   - fun keyword in signatures (derived form):				*)
(*	  spec ::= fun valdesc							*)
(*   - op keyword in signatures:						*)
(*	  valdesc  ::= <op> vid : ty <and valdesc>				*)
(*	  condesc  ::= <op> vid <of ty> <| condesc>				*)
(*	  exdesc   ::= <op> vid <of ty> <and exdesc>				*)
(*	  econdesc ::= <op> vid <of ty> : tyvarseq longtycon <and econdesc>	*)
(*		   ::= <op> vid = <op> longvid <and econdesc>			*)
(*   - straightified type specifications:					*)
(*	  typdesc ::= tyvarseq tycon						*)
(*		      tyvarseq tycon = ty					*)
(*   - withtype in signatures (derived form):					*)
(*	  spec ::= datatype datdesc <withtype syndesc>				*)
(*   - fixity directives in signatures:						*)
(*	  spec ::= infix <d> vid_1 ... vid_n	(n>=1)				*)
(*		   infixr <d> vid_1 ... vid_n	(n>=1)				*)
(*		   nonfix vid_1 ... vid_n	(n>=1)				*)
(*   - definitional structure specifications:					*)
(*	  strdesc ::= strid <: sigexp> = longstrid <and strdesc>		*)
(*   - functor specifications (derived forms):					*)
(*	  spec    ::= functor fundesc						*)
(*	  fundesc ::= strid strpat_1 ... strpat_n : sigexp <and fundesc> (n>=0)	*)
(*   - sharing for signatures:							*)
(*	  spec   ::= spec sharing signature longsigid_1 = ... = longsigid_n	*)
(*   - generalized where constraints:						*)
(*	  sigexp ::= sigexp where rea						*)
(*	  rea    ::= sig spec end <and rea>					*)
(*		 ::= val <op> longvid = <op> longvid <and rea>			*)
(*		 ::= fun <op> longvid = <op> longvid <and rea> (derived form)	*)
(*		 ::= constructor <op> longvid = <op> longvid <and rea>		*)
(*		 ::= exception <op> longvid = <op> longvid <and rea> (derived)	*)
(*		 ::= type tyvarseq longtycon = ty <and rea>			*)
(*		 ::= eqtype tyvarseq longtycon <and rea>			*)
(*		 ::= __eqeqtype tyvarseq longtycon <and rea>			*)
(*		 ::= structure longstrid <: sigexp> = longstrid <and rea>	*)
(*		 ::= functor longstrid <: sigexp> = longstrid <and rea>(derived)*)
(*		 ::= signature longsigid strpat_1 ... strpat_n = longstrid	*)
(*			<and rea>					(n>=0)	*)
(*   - no distinction between dec, strdec, and topdec				*)
(*   - packages:								*)
(*	  exp    ::= pack atstrexp : atsigexp					*)
(*	         ::= pack atstrexp :> atsigexp					*)
(*	  strexp ::= unpack infexp : sigexp					*)
(*   - lazy expressions:							*)
(*	  strexp ::= lazy strexp							*)
(*   - spawn expressions:							*)
(*	  strexp ::= spawn strexp							*)
(*   - programs:								*)
(*	  program   ::= topdec							*)
(*   - components:								*)
(*	  component ::= ann <program>						*)
(*	  ann       ::=	import imp from string					*)
(*	  		import string						*)
(*			<>							*)
(*			ann <;> ann						*)
(*	  imp       ::=	val valitem						*)
(*			type typitem						*)
(*			datatype datitem					*)
(*			exttype extitem						*)
(*			constructor econitem					*)
(*			structure stritem					*)
(*			signature sigitem					*)
(*			infix <d> vid_1 ... vid_n	(n>=1)			*)
(*			infixr <d> vid_1 ... vid_n	(n>=1)			*)
(*			nonfix vid_1 ... vid_n		(n>=1)			*)
(*			<>							*)
(*			imp <;> imp						*)
(*	  valitem   ::=	<op> vid <and valitem>					*)
(*			<op> vid : ty <and valitem>				*)
(*	  typitem   ::=	tycon <and typitem>					*)
(*			tyvarseq tycon <and typitem>				*)
(*	  datitem   ::=	tycon <and datitem>					*)
(*			tyvarseq tycon = <|> conitem <and datitem>			*)
(*	  conitem   ::=	<op> vid <of ty> <| conitem>				*)
(*	  extitem   ::=	tycon <and extitem>					*)
(*			tyvarseq tycon <and extitem>				*)
(*	  econitem  ::=	<op> vid <and econitem>					*)
(*			<op> vid <of ty> : tyvarseq longtycon <and econitem>	*)
(*	  stritem   ::=	strid <and stritem>					*)
(*			strid : sigexp <and stritem>				*)
(*	  sigitem   ::=	sigid <and sigitem>					*)
(*			sigid strpat_1 ... strpat_n <and sigitem>	(n>=1)	*)
(*   - component derived forms:							*)
(*	  imp       ::=	fun valitem						*)
(*			exception exitem					*)
(*			functor funitem						*)
(*	  exitem    ::=	<op> vid <and exitem>					*)
(*			<op> vid of ty <and exitem>				*)
(*	  funitem   ::=	strid <and funitem>					*)
(*			strid strpat_1 ... strpat_n : sigexp <and funitem>	*)
(*										*)
(* We did NOT introduce a sharing signature ... and signature ... derived form	*)
(* similar to types, because we consider that completely broken anyway.		*)
(*										*)
(* To avoid hardwiring library issues, we further added the following		*)
(* low-level constructs:							*)
(*	  dec     ::= __eqeqtype typbind					*)
(*                ::= __primitive val <op> vid : ty = string			*)
(*                ::= __primitive fun <op> vid : ty = string		(DF)	*)
(*                ::= __primitive type tyvarseq tycon = string			*)
(*                ::= __primitive eqtype tyvarseq tycon = string		*)
(*                ::= __primitive __eqeqtype tyvarseq tycon = string		*)
(*                ::= __primitive exttype tyvarseq tycon = string		*)
(*                ::= __primitive __reftype tyvar tycon = <op> vid of tyvar	*)
(*	          ::= __primitive constructor <op> vid <of ty> : ty = string	*)
(*	          ::= __primitive exception <op> vid <of ty> = string	(DF)	*)
(*	          ::= __primitive structure strid : sigexp = string		*)
(*	          ::= __primitive functor strid strpat_1 ... strpat_n	(n>=1)	*)
(*					: sigexp = string		(DF)	*)
(*	          ::= __primitive signature sigid strpat_1 ... strpat_n	(n>=0)	*)
(*					= string				*)
(*		  ::= __overload tyvar <op>vid : ty = longvid			*)
(*		  ::= __overload longtyconseq as tyvar <op>vid : ty =longvidseq	*)
(*	  spec    ::= __eqeqtype typdesc					*)
(*	  ann     ::= import __primitive imp from string			*)
(*	  	      import __primitive string					*)
(*										*)
(* Notes:									*)
(*   - Two phrases named Fmatch and Fmrule have been added to factorize		*)
(*     Fvalbind.								*)
(*   - A phrase named SynDesc has been added to factorize type synonym		*)
(*     specifications. Similarly, a phrase named Rea has been added to		*)
(*     factorize realisation signature expressions.				*)
(*   - Infix expressions [Definition, section 2.6] are resolved during		*)
(*     elaboration because we allow fixity specifications in signatures that	*)
(*     come into effect by an open declaration. Infix status is completely	*)
(*     ignored here.								*)
(*   - Syntactic restrictions [Definition, sections 2.9 and 3.5] are checked	*)
(*     during elaboration, as well as the Fvalbind derived form.		*)
(*   - The Definition is not clear about whether `=' should also be legal as	*)
(*     a tycon. Since this would result in massive conflicts, and a type named	*)
(*     `=' could only be used legally if an implementation would be mad enough	*)
(*     to predefine it anyway, we simply disallow it.				*)
(*   - Datatype replication requires rules for datatype to be duplicated to	*)
(*     avoid conflicts on empty tyvarseqs.					*)
(*   - The messy `sigexp where type ... and type ...' syntax requires some	*)
(*     really ugly transformations (in absence of a lookahead of 2), watch out	*)
(*     for non-terminals of the form xxx__AND_yyybind_opt.			*)
(*   - We do NOT support declarations like					*)
(*	  fun f p1 = case e1 of p2 => e2					*)
(*	    | f p3 = e3								*)
(*     (without parentheses around the case) because the transformations	*)
(*     required to support this would be even a magnitude uglier than those	*)
(*     above. In fact, no compiler I know of supports this.			*)
(*   - ML-Yacc does not seem to like comments that stretch over several		*)
(*     lines... Similarly, comments in semantic actions make it puke...		*)
(*										*)



    (* Import *)

    open InputGrammar
    open DerivedForms


    (* Helper to build position fields *)

    fun I(left, right) = (left, right)



end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\015\007\002\000\015\007\003\000\015\007\004\000\015\007\
\\005\000\015\007\007\000\015\007\008\000\015\007\009\000\015\007\
\\010\000\015\007\011\000\015\007\013\000\015\007\014\000\015\007\
\\015\000\015\007\016\000\015\007\017\000\015\007\018\000\015\007\
\\019\000\015\007\020\000\015\007\021\000\015\007\022\000\015\007\
\\023\000\015\007\024\000\015\007\025\000\015\007\026\000\015\007\
\\028\000\015\007\029\000\015\007\030\000\015\007\031\000\015\007\
\\034\000\015\007\035\000\015\007\036\000\015\007\037\000\015\007\
\\038\000\015\007\039\000\015\007\040\000\015\007\041\000\015\007\
\\042\000\015\007\044\000\015\007\045\000\015\007\046\000\015\007\
\\047\000\015\007\049\000\015\007\050\000\021\007\051\000\015\007\
\\052\000\015\007\054\000\015\007\055\000\015\007\056\000\015\007\
\\057\000\015\007\059\000\015\007\060\000\015\007\063\000\015\007\
\\064\000\015\007\065\000\015\007\066\000\015\007\068\000\015\007\
\\070\000\015\007\071\000\015\007\072\000\015\007\078\000\015\007\
\\079\000\015\007\080\000\015\007\081\000\015\007\082\000\015\007\
\\084\000\015\007\085\000\015\007\086\000\015\007\087\000\015\007\
\\088\000\015\007\089\000\015\007\090\000\015\007\091\000\015\007\
\\092\000\015\007\093\000\015\007\094\000\015\007\095\000\015\007\000\000\
\\001\000\001\000\018\007\002\000\018\007\003\000\018\007\004\000\018\007\
\\005\000\018\007\007\000\018\007\008\000\018\007\009\000\018\007\
\\010\000\018\007\011\000\018\007\013\000\018\007\014\000\018\007\
\\015\000\018\007\016\000\018\007\017\000\018\007\018\000\018\007\
\\020\000\018\007\021\000\018\007\022\000\018\007\024\000\018\007\
\\025\000\018\007\026\000\018\007\028\000\018\007\029\000\018\007\
\\030\000\018\007\031\000\018\007\032\000\018\007\035\000\018\007\
\\037\000\018\007\039\000\018\007\040\000\018\007\041\000\018\007\
\\042\000\018\007\045\000\018\007\046\000\018\007\047\000\018\007\
\\048\000\018\007\050\000\021\007\052\000\018\007\056\000\018\007\
\\057\000\018\007\059\000\018\007\060\000\018\007\063\000\018\007\
\\064\000\018\007\065\000\018\007\066\000\018\007\068\000\018\007\
\\070\000\018\007\071\000\018\007\072\000\018\007\078\000\018\007\
\\080\000\018\007\081\000\018\007\082\000\018\007\084\000\018\007\
\\093\000\018\007\094\000\018\007\095\000\018\007\000\000\
\\001\000\001\000\023\007\002\000\023\007\003\000\023\007\004\000\023\007\
\\007\000\023\007\008\000\023\007\009\000\023\007\010\000\023\007\
\\011\000\023\007\013\000\023\007\014\000\023\007\016\000\023\007\
\\017\000\023\007\018\000\023\007\019\000\023\007\020\000\023\007\
\\021\000\023\007\022\000\023\007\024\000\023\007\025\000\023\007\
\\026\000\023\007\028\000\023\007\029\000\023\007\030\000\023\007\
\\031\000\023\007\034\000\023\007\035\000\023\007\037\000\023\007\
\\039\000\023\007\040\000\023\007\041\000\023\007\042\000\023\007\
\\045\000\023\007\046\000\023\007\047\000\023\007\048\000\023\007\
\\050\000\021\007\052\000\023\007\056\000\023\007\057\000\023\007\
\\063\000\023\007\064\000\023\007\065\000\023\007\066\000\023\007\
\\068\000\023\007\069\000\023\007\070\000\023\007\071\000\023\007\
\\072\000\023\007\078\000\023\007\080\000\023\007\081\000\023\007\
\\082\000\023\007\084\000\023\007\093\000\023\007\000\000\
\\001\000\001\000\238\007\002\000\238\007\003\000\238\007\004\000\238\007\
\\005\000\238\007\007\000\238\007\008\000\238\007\009\000\238\007\
\\010\000\238\007\011\000\238\007\013\000\238\007\014\000\238\007\
\\015\000\238\007\016\000\238\007\017\000\238\007\018\000\238\007\
\\020\000\238\007\021\000\238\007\022\000\238\007\024\000\238\007\
\\025\000\238\007\026\000\238\007\028\000\238\007\029\000\238\007\
\\030\000\238\007\031\000\238\007\032\000\238\007\035\000\238\007\
\\037\000\238\007\039\000\238\007\040\000\238\007\041\000\238\007\
\\042\000\238\007\045\000\238\007\046\000\238\007\047\000\238\007\
\\048\000\238\007\052\000\238\007\056\000\238\007\057\000\238\007\
\\059\000\238\007\060\000\238\007\063\000\238\007\064\000\238\007\
\\065\000\238\007\066\000\238\007\068\000\238\007\070\000\238\007\
\\071\000\238\007\072\000\238\007\078\000\238\007\080\000\238\007\
\\081\000\238\007\082\000\238\007\084\000\251\007\093\000\251\007\
\\094\000\251\007\095\000\223\001\000\000\
\\001\000\001\000\045\008\002\000\045\008\003\000\124\003\007\000\045\008\
\\008\000\045\008\010\000\045\008\011\000\045\008\013\000\045\008\
\\016\000\045\008\017\000\045\008\018\000\045\008\019\000\145\000\
\\020\000\045\008\021\000\045\008\024\000\045\008\029\000\045\008\
\\030\000\045\008\034\000\144\000\035\000\045\008\041\000\025\008\
\\042\000\045\008\056\000\045\008\057\000\045\008\063\000\045\008\
\\064\000\045\008\068\000\045\008\069\000\143\000\070\000\045\008\
\\072\000\025\008\080\000\045\008\081\000\045\008\082\000\045\008\
\\084\000\034\000\093\000\142\000\000\000\
\\001\000\001\000\045\008\002\000\045\008\003\000\124\003\007\000\045\008\
\\008\000\045\008\010\000\045\008\011\000\045\008\013\000\045\008\
\\016\000\045\008\017\000\045\008\018\000\045\008\020\000\045\008\
\\021\000\045\008\024\000\045\008\029\000\045\008\030\000\045\008\
\\035\000\045\008\041\000\081\008\042\000\045\008\056\000\045\008\
\\057\000\045\008\063\000\045\008\064\000\045\008\068\000\045\008\
\\070\000\045\008\071\000\081\008\072\000\081\008\080\000\045\008\
\\081\000\045\008\082\000\045\008\000\000\
\\001\000\001\000\045\008\002\000\045\008\003\000\074\006\007\000\045\008\
\\008\000\045\008\010\000\045\008\011\000\045\008\013\000\045\008\
\\016\000\045\008\017\000\045\008\018\000\045\008\019\000\145\000\
\\020\000\045\008\021\000\045\008\024\000\045\008\029\000\045\008\
\\030\000\045\008\034\000\144\000\035\000\045\008\041\000\122\008\
\\042\000\045\008\056\000\045\008\057\000\045\008\063\000\045\008\
\\064\000\045\008\068\000\045\008\069\000\143\000\070\000\045\008\
\\071\000\122\008\072\000\122\008\080\000\045\008\081\000\045\008\
\\082\000\045\008\084\000\034\000\093\000\142\000\000\000\
\\001\000\001\000\045\008\002\000\045\008\003\000\074\006\007\000\045\008\
\\008\000\045\008\010\000\045\008\011\000\045\008\013\000\045\008\
\\016\000\045\008\017\000\045\008\018\000\045\008\020\000\045\008\
\\021\000\045\008\024\000\045\008\029\000\045\008\030\000\045\008\
\\035\000\045\008\041\000\122\008\042\000\045\008\050\000\097\001\
\\056\000\045\008\057\000\045\008\063\000\045\008\064\000\045\008\
\\068\000\045\008\070\000\045\008\071\000\122\008\072\000\122\008\
\\080\000\045\008\081\000\045\008\082\000\045\008\000\000\
\\001\000\001\000\045\008\002\000\045\008\003\000\074\006\007\000\045\008\
\\008\000\045\008\010\000\045\008\011\000\045\008\013\000\045\008\
\\016\000\045\008\017\000\045\008\018\000\045\008\020\000\045\008\
\\021\000\045\008\024\000\045\008\029\000\045\008\030\000\045\008\
\\035\000\045\008\041\000\122\008\042\000\045\008\056\000\045\008\
\\057\000\045\008\063\000\045\008\064\000\045\008\068\000\045\008\
\\070\000\045\008\071\000\122\008\072\000\122\008\080\000\045\008\
\\081\000\045\008\082\000\045\008\000\000\
\\001\000\001\000\091\008\002\000\091\008\003\000\133\003\007\000\091\008\
\\008\000\091\008\010\000\091\008\011\000\091\008\013\000\091\008\
\\016\000\091\008\017\000\091\008\018\000\091\008\020\000\091\008\
\\021\000\091\008\024\000\091\008\029\000\091\008\030\000\091\008\
\\035\000\091\008\042\000\091\008\056\000\091\008\057\000\091\008\
\\063\000\091\008\064\000\091\008\068\000\091\008\070\000\091\008\
\\071\000\081\008\080\000\091\008\081\000\091\008\082\000\091\008\000\000\
\\001\000\001\000\091\008\002\000\091\008\003\000\142\005\007\000\091\008\
\\008\000\091\008\010\000\091\008\011\000\091\008\013\000\091\008\
\\016\000\091\008\017\000\091\008\018\000\091\008\019\000\145\000\
\\020\000\091\008\021\000\091\008\024\000\091\008\029\000\091\008\
\\030\000\091\008\034\000\144\000\035\000\091\008\042\000\091\008\
\\056\000\091\008\057\000\091\008\063\000\091\008\064\000\091\008\
\\068\000\091\008\069\000\143\000\070\000\091\008\071\000\122\008\
\\080\000\091\008\081\000\091\008\082\000\091\008\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\001\000\091\008\002\000\091\008\003\000\142\005\007\000\091\008\
\\008\000\091\008\010\000\091\008\011\000\091\008\013\000\091\008\
\\016\000\091\008\017\000\091\008\018\000\091\008\020\000\091\008\
\\021\000\091\008\024\000\091\008\029\000\091\008\030\000\091\008\
\\035\000\091\008\042\000\091\008\050\000\097\001\056\000\091\008\
\\057\000\091\008\063\000\091\008\064\000\091\008\068\000\091\008\
\\070\000\091\008\071\000\122\008\080\000\091\008\081\000\091\008\
\\082\000\091\008\000\000\
\\001\000\001\000\091\008\002\000\091\008\003\000\142\005\007\000\091\008\
\\008\000\091\008\010\000\091\008\011\000\091\008\013\000\091\008\
\\016\000\091\008\017\000\091\008\018\000\091\008\020\000\091\008\
\\021\000\091\008\024\000\091\008\029\000\091\008\030\000\091\008\
\\035\000\091\008\042\000\091\008\056\000\091\008\057\000\091\008\
\\063\000\091\008\064\000\091\008\068\000\091\008\070\000\091\008\
\\071\000\122\008\080\000\091\008\081\000\091\008\082\000\091\008\000\000\
\\001\000\001\000\129\008\002\000\129\008\003\000\153\004\007\000\129\008\
\\008\000\129\008\010\000\129\008\011\000\129\008\013\000\129\008\
\\016\000\129\008\017\000\129\008\018\000\129\008\019\000\145\000\
\\020\000\129\008\021\000\129\008\024\000\129\008\029\000\129\008\
\\030\000\129\008\034\000\144\000\035\000\129\008\041\000\025\008\
\\042\000\129\008\056\000\129\008\057\000\129\008\063\000\129\008\
\\064\000\129\008\068\000\129\008\069\000\143\000\070\000\129\008\
\\072\000\025\008\080\000\129\008\081\000\129\008\082\000\129\008\
\\084\000\034\000\093\000\142\000\000\000\
\\001\000\001\000\129\008\002\000\129\008\003\000\153\004\007\000\129\008\
\\008\000\129\008\010\000\129\008\011\000\129\008\013\000\129\008\
\\016\000\129\008\017\000\129\008\018\000\129\008\020\000\129\008\
\\021\000\129\008\024\000\129\008\029\000\129\008\030\000\129\008\
\\035\000\129\008\041\000\081\008\042\000\129\008\056\000\129\008\
\\057\000\129\008\063\000\129\008\064\000\129\008\068\000\129\008\
\\070\000\129\008\071\000\081\008\072\000\081\008\080\000\129\008\
\\081\000\129\008\082\000\129\008\000\000\
\\001\000\001\000\129\008\002\000\129\008\003\000\208\006\007\000\129\008\
\\008\000\129\008\010\000\129\008\011\000\129\008\013\000\129\008\
\\016\000\129\008\017\000\129\008\018\000\129\008\019\000\145\000\
\\020\000\129\008\021\000\129\008\024\000\129\008\029\000\129\008\
\\030\000\129\008\034\000\144\000\035\000\129\008\041\000\122\008\
\\042\000\129\008\056\000\129\008\057\000\129\008\063\000\129\008\
\\064\000\129\008\068\000\129\008\069\000\143\000\070\000\129\008\
\\071\000\122\008\072\000\122\008\080\000\129\008\081\000\129\008\
\\082\000\129\008\084\000\034\000\093\000\142\000\000\000\
\\001\000\001\000\129\008\002\000\129\008\003\000\208\006\007\000\129\008\
\\008\000\129\008\010\000\129\008\011\000\129\008\013\000\129\008\
\\016\000\129\008\017\000\129\008\018\000\129\008\020\000\129\008\
\\021\000\129\008\024\000\129\008\029\000\129\008\030\000\129\008\
\\035\000\129\008\041\000\122\008\042\000\129\008\050\000\097\001\
\\056\000\129\008\057\000\129\008\063\000\129\008\064\000\129\008\
\\068\000\129\008\070\000\129\008\071\000\122\008\072\000\122\008\
\\080\000\129\008\081\000\129\008\082\000\129\008\000\000\
\\001\000\001\000\129\008\002\000\129\008\003\000\208\006\007\000\129\008\
\\008\000\129\008\010\000\129\008\011\000\129\008\013\000\129\008\
\\016\000\129\008\017\000\129\008\018\000\129\008\020\000\129\008\
\\021\000\129\008\024\000\129\008\029\000\129\008\030\000\129\008\
\\035\000\129\008\041\000\122\008\042\000\129\008\056\000\129\008\
\\057\000\129\008\063\000\129\008\064\000\129\008\068\000\129\008\
\\070\000\129\008\071\000\122\008\072\000\122\008\080\000\129\008\
\\081\000\129\008\082\000\129\008\000\000\
\\001\000\003\000\202\001\008\000\083\009\011\000\083\009\013\000\083\009\
\\017\000\083\009\018\000\083\009\021\000\083\009\029\000\083\009\
\\030\000\083\009\056\000\083\009\057\000\083\009\063\000\083\009\
\\064\000\083\009\068\000\083\009\070\000\083\009\071\000\081\008\
\\078\000\083\009\082\000\083\009\000\000\
\\001\000\003\000\208\001\008\000\109\009\011\000\109\009\013\000\109\009\
\\017\000\109\009\018\000\109\009\021\000\109\009\029\000\109\009\
\\030\000\109\009\034\000\109\001\041\000\089\008\056\000\109\009\
\\057\000\109\009\063\000\109\009\064\000\109\009\068\000\109\009\
\\070\000\109\009\078\000\109\009\082\000\109\009\000\000\
\\001\000\003\000\208\001\008\000\109\009\011\000\109\009\013\000\109\009\
\\017\000\109\009\018\000\109\009\021\000\109\009\029\000\109\009\
\\030\000\109\009\056\000\109\009\057\000\109\009\063\000\109\009\
\\064\000\109\009\068\000\109\009\070\000\109\009\071\000\081\008\
\\078\000\109\009\082\000\109\009\000\000\
\\001\000\003\000\145\002\008\000\075\009\011\000\075\009\013\000\075\009\
\\017\000\075\009\018\000\075\009\021\000\075\009\022\000\064\002\
\\029\000\075\009\030\000\075\009\041\000\185\007\056\000\075\009\
\\057\000\075\009\063\000\075\009\064\000\075\009\068\000\075\009\
\\070\000\075\009\078\000\075\009\082\000\075\009\000\000\
\\001\000\003\000\080\003\008\000\248\008\010\000\248\008\011\000\248\008\
\\013\000\248\008\017\000\248\008\018\000\248\008\021\000\248\008\
\\029\000\248\008\030\000\248\008\031\000\248\008\035\000\248\008\
\\042\000\248\008\056\000\248\008\057\000\248\008\063\000\248\008\
\\064\000\248\008\065\000\248\008\066\000\248\008\068\000\248\008\
\\070\000\248\008\071\000\081\008\078\000\248\008\082\000\248\008\000\000\
\\001\000\003\000\200\003\008\000\226\008\010\000\226\008\011\000\226\008\
\\013\000\226\008\017\000\226\008\018\000\226\008\021\000\226\008\
\\029\000\226\008\030\000\226\008\031\000\226\008\035\000\226\008\
\\042\000\226\008\046\000\081\008\056\000\226\008\057\000\226\008\
\\063\000\226\008\064\000\226\008\065\000\226\008\066\000\226\008\
\\068\000\226\008\070\000\226\008\071\000\081\008\078\000\226\008\
\\082\000\226\008\000\000\
\\001\000\003\000\114\004\008\000\013\009\010\000\013\009\011\000\013\009\
\\013\000\013\009\017\000\013\009\018\000\013\009\021\000\013\009\
\\029\000\013\009\030\000\013\009\031\000\013\009\035\000\013\009\
\\042\000\013\009\056\000\013\009\057\000\013\009\063\000\013\009\
\\064\000\013\009\065\000\013\009\066\000\013\009\068\000\013\009\
\\070\000\013\009\071\000\081\008\078\000\013\009\082\000\013\009\000\000\
\\001\000\003\000\046\005\008\000\083\009\011\000\083\009\013\000\083\009\
\\017\000\083\009\018\000\083\009\019\000\145\000\021\000\083\009\
\\029\000\083\009\030\000\083\009\034\000\144\000\056\000\083\009\
\\057\000\083\009\063\000\083\009\064\000\083\009\068\000\083\009\
\\069\000\143\000\070\000\083\009\071\000\122\008\078\000\083\009\
\\082\000\083\009\084\000\034\000\093\000\142\000\000\000\
\\001\000\003\000\046\005\008\000\083\009\011\000\083\009\013\000\083\009\
\\017\000\083\009\018\000\083\009\021\000\083\009\029\000\083\009\
\\030\000\083\009\050\000\097\001\056\000\083\009\057\000\083\009\
\\063\000\083\009\064\000\083\009\068\000\083\009\070\000\083\009\
\\071\000\122\008\078\000\083\009\082\000\083\009\000\000\
\\001\000\003\000\046\005\008\000\083\009\011\000\083\009\013\000\083\009\
\\017\000\083\009\018\000\083\009\021\000\083\009\029\000\083\009\
\\030\000\083\009\056\000\083\009\057\000\083\009\063\000\083\009\
\\064\000\083\009\068\000\083\009\070\000\083\009\071\000\122\008\
\\078\000\083\009\082\000\083\009\000\000\
\\001\000\003\000\173\005\008\000\109\009\011\000\109\009\013\000\109\009\
\\017\000\109\009\018\000\109\009\019\000\145\000\021\000\109\009\
\\029\000\109\009\030\000\109\009\034\000\144\000\056\000\109\009\
\\057\000\109\009\063\000\109\009\064\000\109\009\068\000\109\009\
\\069\000\143\000\070\000\109\009\071\000\122\008\078\000\109\009\
\\082\000\109\009\084\000\034\000\093\000\142\000\000\000\
\\001\000\003\000\173\005\008\000\109\009\011\000\109\009\013\000\109\009\
\\017\000\109\009\018\000\109\009\021\000\109\009\029\000\109\009\
\\030\000\109\009\050\000\097\001\056\000\109\009\057\000\109\009\
\\063\000\109\009\064\000\109\009\068\000\109\009\070\000\109\009\
\\071\000\122\008\078\000\109\009\082\000\109\009\000\000\
\\001\000\003\000\173\005\008\000\109\009\011\000\109\009\013\000\109\009\
\\017\000\109\009\018\000\109\009\021\000\109\009\029\000\109\009\
\\030\000\109\009\056\000\109\009\057\000\109\009\063\000\109\009\
\\064\000\109\009\068\000\109\009\070\000\109\009\071\000\122\008\
\\078\000\109\009\082\000\109\009\000\000\
\\001\000\003\000\188\005\008\000\226\008\010\000\226\008\011\000\226\008\
\\013\000\226\008\017\000\226\008\018\000\226\008\019\000\145\000\
\\021\000\226\008\029\000\226\008\030\000\226\008\031\000\226\008\
\\034\000\144\000\035\000\226\008\042\000\226\008\046\000\122\008\
\\056\000\226\008\057\000\226\008\063\000\226\008\064\000\226\008\
\\065\000\226\008\066\000\226\008\068\000\226\008\069\000\143\000\
\\070\000\226\008\071\000\122\008\078\000\226\008\082\000\226\008\
\\084\000\034\000\093\000\142\000\000\000\
\\001\000\003\000\188\005\008\000\226\008\010\000\226\008\011\000\226\008\
\\013\000\226\008\017\000\226\008\018\000\226\008\021\000\226\008\
\\029\000\226\008\030\000\226\008\031\000\226\008\035\000\226\008\
\\042\000\226\008\046\000\122\008\050\000\097\001\056\000\226\008\
\\057\000\226\008\063\000\226\008\064\000\226\008\065\000\226\008\
\\066\000\226\008\068\000\226\008\070\000\226\008\071\000\122\008\
\\078\000\226\008\082\000\226\008\000\000\
\\001\000\003\000\188\005\008\000\226\008\010\000\226\008\011\000\226\008\
\\013\000\226\008\017\000\226\008\018\000\226\008\021\000\226\008\
\\029\000\226\008\030\000\226\008\031\000\226\008\035\000\226\008\
\\042\000\226\008\046\000\122\008\056\000\226\008\057\000\226\008\
\\063\000\226\008\064\000\226\008\065\000\226\008\066\000\226\008\
\\068\000\226\008\070\000\226\008\071\000\122\008\078\000\226\008\
\\082\000\226\008\000\000\
\\001\000\003\000\043\006\008\000\248\008\010\000\248\008\011\000\248\008\
\\013\000\248\008\017\000\248\008\018\000\248\008\019\000\145\000\
\\021\000\248\008\029\000\248\008\030\000\248\008\031\000\248\008\
\\034\000\144\000\035\000\248\008\042\000\248\008\056\000\248\008\
\\057\000\248\008\063\000\248\008\064\000\248\008\065\000\248\008\
\\066\000\248\008\068\000\248\008\069\000\143\000\070\000\248\008\
\\071\000\122\008\078\000\248\008\082\000\248\008\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\003\000\043\006\008\000\248\008\010\000\248\008\011\000\248\008\
\\013\000\248\008\017\000\248\008\018\000\248\008\021\000\248\008\
\\029\000\248\008\030\000\248\008\031\000\248\008\035\000\248\008\
\\042\000\248\008\050\000\097\001\056\000\248\008\057\000\248\008\
\\063\000\248\008\064\000\248\008\065\000\248\008\066\000\248\008\
\\068\000\248\008\070\000\248\008\071\000\122\008\078\000\248\008\
\\082\000\248\008\000\000\
\\001\000\003\000\043\006\008\000\248\008\010\000\248\008\011\000\248\008\
\\013\000\248\008\017\000\248\008\018\000\248\008\021\000\248\008\
\\029\000\248\008\030\000\248\008\031\000\248\008\035\000\248\008\
\\042\000\248\008\056\000\248\008\057\000\248\008\063\000\248\008\
\\064\000\248\008\065\000\248\008\066\000\248\008\068\000\248\008\
\\070\000\248\008\071\000\122\008\078\000\248\008\082\000\248\008\000\000\
\\001\000\003\000\060\006\008\000\013\009\010\000\013\009\011\000\013\009\
\\013\000\013\009\017\000\013\009\018\000\013\009\019\000\145\000\
\\021\000\013\009\029\000\013\009\030\000\013\009\031\000\013\009\
\\034\000\144\000\035\000\013\009\042\000\013\009\056\000\013\009\
\\057\000\013\009\063\000\013\009\064\000\013\009\065\000\013\009\
\\066\000\013\009\068\000\013\009\069\000\143\000\070\000\013\009\
\\071\000\122\008\078\000\013\009\082\000\013\009\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\003\000\060\006\008\000\013\009\010\000\013\009\011\000\013\009\
\\013\000\013\009\017\000\013\009\018\000\013\009\021\000\013\009\
\\029\000\013\009\030\000\013\009\031\000\013\009\035\000\013\009\
\\042\000\013\009\050\000\097\001\056\000\013\009\057\000\013\009\
\\063\000\013\009\064\000\013\009\065\000\013\009\066\000\013\009\
\\068\000\013\009\070\000\013\009\071\000\122\008\078\000\013\009\
\\082\000\013\009\000\000\
\\001\000\003\000\060\006\008\000\013\009\010\000\013\009\011\000\013\009\
\\013\000\013\009\017\000\013\009\018\000\013\009\021\000\013\009\
\\029\000\013\009\030\000\013\009\031\000\013\009\035\000\013\009\
\\042\000\013\009\056\000\013\009\057\000\013\009\063\000\013\009\
\\064\000\013\009\065\000\013\009\066\000\013\009\068\000\013\009\
\\070\000\013\009\071\000\122\008\078\000\013\009\082\000\013\009\000\000\
\\001\000\004\000\105\000\007\000\130\001\014\000\104\000\025\000\103\000\
\\041\000\102\000\052\000\100\000\000\000\
\\001\000\004\000\105\000\014\000\104\000\022\000\192\001\025\000\103\000\
\\041\000\102\000\052\000\100\000\000\000\
\\001\000\004\000\105\000\014\000\104\000\025\000\103\000\028\000\173\001\
\\041\000\102\000\052\000\100\000\000\000\
\\001\000\005\000\015\007\039\000\015\007\040\000\015\007\041\000\015\007\
\\046\000\008\007\000\000\
\\001\000\005\000\016\007\039\000\016\007\040\000\016\007\041\000\016\007\
\\046\000\009\007\071\000\016\007\000\000\
\\001\000\005\000\017\007\039\000\017\007\040\000\017\007\041\000\017\007\
\\046\000\010\007\071\000\017\007\000\000\
\\001\000\005\000\054\001\000\000\
\\001\000\005\000\138\001\015\000\137\001\035\000\100\002\040\000\099\002\
\\041\000\136\001\045\000\135\001\059\000\133\001\060\000\132\001\000\000\
\\001\000\005\000\138\001\015\000\137\001\041\000\136\001\045\000\135\001\
\\046\000\134\001\059\000\133\001\060\000\132\001\000\000\
\\001\000\005\000\138\001\015\000\137\001\041\000\136\001\045\000\135\001\
\\047\000\156\001\059\000\133\001\060\000\132\001\000\000\
\\001\000\005\000\138\001\015\000\137\001\041\000\136\001\045\000\135\001\
\\047\000\118\002\059\000\133\001\060\000\132\001\000\000\
\\001\000\006\000\075\000\012\000\071\000\015\000\069\000\019\000\066\000\
\\023\000\063\000\026\000\061\000\027\000\060\000\033\000\057\000\
\\034\000\056\000\035\000\189\000\036\000\055\000\038\000\054\000\
\\046\000\053\000\049\000\052\000\051\000\051\000\053\000\050\000\
\\054\000\049\000\055\000\048\000\061\000\045\000\062\000\044\000\
\\075\000\039\000\079\000\038\000\084\000\034\000\085\000\033\000\
\\086\000\032\000\087\000\031\000\088\000\030\000\089\000\029\000\
\\090\000\028\000\091\000\027\000\092\000\026\000\093\000\025\000\
\\094\000\024\000\095\000\023\000\000\000\
\\001\000\006\000\075\000\012\000\071\000\015\000\069\000\019\000\066\000\
\\023\000\063\000\026\000\061\000\027\000\060\000\033\000\057\000\
\\034\000\056\000\036\000\055\000\038\000\054\000\046\000\053\000\
\\049\000\052\000\051\000\051\000\053\000\050\000\054\000\049\000\
\\055\000\048\000\061\000\045\000\062\000\044\000\075\000\039\000\
\\079\000\038\000\084\000\034\000\085\000\033\000\086\000\032\000\
\\087\000\031\000\088\000\030\000\089\000\029\000\090\000\028\000\
\\091\000\027\000\092\000\026\000\093\000\025\000\094\000\024\000\
\\095\000\023\000\000\000\
\\001\000\008\000\066\007\011\000\066\007\013\000\066\007\016\000\137\009\
\\017\000\066\007\018\000\066\007\021\000\066\007\029\000\066\007\
\\030\000\066\007\031\000\066\007\042\000\139\000\056\000\066\007\
\\057\000\066\007\063\000\066\007\064\000\066\007\065\000\066\007\
\\066\000\066\007\068\000\066\007\070\000\066\007\077\000\138\000\
\\082\000\066\007\000\000\
\\001\000\010\000\048\002\000\000\
\\001\000\010\000\252\002\000\000\
\\001\000\010\000\253\002\000\000\
\\001\000\010\000\011\003\000\000\
\\001\000\010\000\012\003\000\000\
\\001\000\010\000\068\003\000\000\
\\001\000\010\000\103\003\000\000\
\\001\000\010\000\120\003\041\000\158\001\072\000\157\001\000\000\
\\001\000\010\000\158\003\000\000\
\\001\000\010\000\104\004\000\000\
\\001\000\010\000\112\004\071\000\196\002\000\000\
\\001\000\010\000\168\004\000\000\
\\001\000\010\000\025\005\000\000\
\\001\000\010\000\060\005\000\000\
\\001\000\010\000\077\005\000\000\
\\001\000\010\000\202\005\000\000\
\\001\000\010\000\221\005\000\000\
\\001\000\010\000\234\005\000\000\
\\001\000\010\000\165\006\000\000\
\\001\000\011\000\134\000\013\000\133\000\029\000\132\000\030\000\131\000\
\\056\000\130\000\057\000\129\000\063\000\128\000\064\000\127\000\
\\068\000\126\000\070\000\125\000\082\000\124\000\083\000\123\000\000\000\
\\001\000\011\000\097\003\013\000\096\003\029\000\095\003\030\000\094\003\
\\057\000\093\003\063\000\092\003\064\000\091\003\067\000\090\003\
\\068\000\089\003\070\000\088\003\082\000\087\003\000\000\
\\001\000\011\000\097\003\013\000\096\003\029\000\095\003\030\000\094\003\
\\057\000\093\003\063\000\092\003\064\000\091\003\067\000\090\003\
\\068\000\089\003\070\000\088\003\082\000\087\003\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\011\000\170\003\013\000\169\003\029\000\168\003\030\000\167\003\
\\057\000\166\003\063\000\165\003\064\000\164\003\067\000\163\003\
\\068\000\162\003\070\000\161\003\082\000\160\003\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\011\000\014\004\013\000\013\004\029\000\012\004\030\000\011\004\
\\057\000\010\004\063\000\009\004\064\000\008\004\067\000\007\004\
\\068\000\006\004\070\000\005\004\082\000\004\004\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\011\000\014\004\013\000\013\004\029\000\012\004\030\000\011\004\
\\057\000\010\004\063\000\009\004\064\000\008\004\067\000\007\004\
\\068\000\006\004\070\000\005\004\082\000\004\004\093\000\151\000\000\000\
\\001\000\011\000\060\004\013\000\059\004\029\000\058\004\030\000\057\004\
\\057\000\056\004\063\000\055\004\064\000\054\004\067\000\053\004\
\\068\000\052\004\070\000\051\004\082\000\050\004\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\011\000\089\004\013\000\088\004\029\000\087\004\030\000\086\004\
\\057\000\085\004\063\000\084\004\064\000\083\004\067\000\082\004\
\\068\000\081\004\070\000\080\004\082\000\079\004\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\011\000\219\004\013\000\218\004\029\000\217\004\030\000\216\004\
\\057\000\215\004\063\000\214\004\064\000\213\004\067\000\212\004\
\\068\000\211\004\070\000\210\004\082\000\209\004\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\011\000\219\004\013\000\218\004\029\000\217\004\030\000\216\004\
\\057\000\215\004\063\000\214\004\064\000\213\004\067\000\212\004\
\\068\000\211\004\070\000\210\004\082\000\209\004\093\000\151\000\000\000\
\\001\000\011\000\249\004\013\000\248\004\029\000\247\004\030\000\246\004\
\\057\000\245\004\063\000\244\004\064\000\243\004\067\000\242\004\
\\068\000\241\004\070\000\240\004\082\000\239\004\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\011\000\018\005\013\000\017\005\029\000\016\005\030\000\015\005\
\\044\000\148\000\057\000\014\005\063\000\013\005\064\000\012\005\
\\067\000\011\005\068\000\010\005\070\000\009\005\082\000\008\005\
\\084\000\034\000\093\000\142\000\000\000\
\\001\000\011\000\018\005\013\000\017\005\029\000\016\005\030\000\015\005\
\\057\000\014\005\063\000\013\005\064\000\012\005\067\000\011\005\
\\068\000\010\005\070\000\009\005\082\000\008\005\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\011\000\007\006\013\000\006\006\029\000\005\006\030\000\004\006\
\\057\000\003\006\063\000\002\006\064\000\001\006\067\000\000\006\
\\068\000\255\005\070\000\254\005\082\000\253\005\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\016\000\072\001\000\000\
\\001\000\016\000\169\001\000\000\
\\001\000\016\000\170\001\000\000\
\\001\000\016\000\051\002\000\000\
\\001\000\016\000\106\003\000\000\
\\001\000\019\000\066\000\023\000\063\000\034\000\056\000\036\000\055\000\
\\038\000\054\000\046\000\053\000\049\000\052\000\051\000\051\000\
\\054\000\049\000\055\000\048\000\079\000\038\000\084\000\034\000\
\\085\000\033\000\086\000\032\000\087\000\031\000\088\000\030\000\
\\089\000\029\000\090\000\028\000\091\000\027\000\092\000\026\000\
\\093\000\025\000\094\000\024\000\095\000\023\000\000\000\
\\001\000\019\000\145\000\034\000\144\000\061\000\216\000\062\000\215\000\
\\069\000\143\000\074\000\214\000\076\000\213\000\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\019\000\145\000\034\000\144\000\061\000\228\002\062\000\227\002\
\\069\000\143\000\074\000\226\002\076\000\225\002\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\019\000\145\000\034\000\144\000\061\000\026\004\062\000\025\004\
\\069\000\143\000\074\000\024\004\076\000\023\004\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\019\000\145\000\034\000\144\000\069\000\143\000\084\000\034\000\
\\093\000\142\000\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\020\002\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\137\002\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\235\002\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\037\003\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\077\003\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\208\003\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\235\003\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\252\003\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\074\000\037\005\084\000\034\000\093\000\019\002\000\000\
\\001\000\019\000\024\002\034\000\023\002\067\000\022\002\073\000\021\002\
\\084\000\034\000\093\000\019\002\000\000\
\\001\000\022\000\070\004\000\000\
\\001\000\023\000\205\000\027\000\204\000\034\000\203\000\036\000\202\000\
\\038\000\201\000\044\000\200\000\051\000\199\000\058\000\198\000\
\\084\000\034\000\085\000\033\000\086\000\032\000\087\000\031\000\
\\088\000\030\000\089\000\029\000\090\000\028\000\091\000\027\000\
\\092\000\026\000\093\000\025\000\094\000\024\000\095\000\023\000\
\\096\000\112\000\000\000\
\\001\000\023\000\205\000\027\000\204\000\034\000\208\000\036\000\202\000\
\\038\000\201\000\044\000\200\000\051\000\199\000\058\000\198\000\
\\084\000\034\000\085\000\033\000\086\000\032\000\087\000\031\000\
\\088\000\030\000\089\000\029\000\090\000\028\000\091\000\027\000\
\\092\000\026\000\093\000\025\000\094\000\024\000\095\000\023\000\000\000\
\\001\000\023\000\205\000\034\000\203\000\036\000\202\000\038\000\201\000\
\\044\000\200\000\045\000\242\000\051\000\199\000\058\000\198\000\
\\061\000\241\000\062\000\240\000\084\000\034\000\085\000\033\000\
\\086\000\032\000\087\000\031\000\088\000\030\000\089\000\029\000\
\\090\000\028\000\091\000\027\000\092\000\026\000\093\000\025\000\
\\094\000\024\000\095\000\023\000\096\000\112\000\000\000\
\\001\000\023\000\205\000\034\000\208\000\035\000\153\001\036\000\202\000\
\\038\000\201\000\044\000\200\000\051\000\199\000\058\000\198\000\
\\084\000\034\000\085\000\033\000\086\000\032\000\087\000\031\000\
\\088\000\030\000\089\000\029\000\090\000\028\000\091\000\027\000\
\\092\000\026\000\093\000\025\000\094\000\024\000\095\000\023\000\000\000\
\\001\000\023\000\205\000\034\000\208\000\035\000\153\001\036\000\202\000\
\\038\000\201\000\044\000\200\000\051\000\199\000\058\000\198\000\
\\084\000\034\000\085\000\033\000\086\000\032\000\087\000\031\000\
\\088\000\030\000\089\000\029\000\090\000\028\000\091\000\027\000\
\\092\000\026\000\093\000\025\000\094\000\024\000\095\000\023\000\
\\096\000\112\000\000\000\
\\001\000\023\000\205\000\034\000\208\000\036\000\202\000\038\000\201\000\
\\044\000\200\000\045\000\242\000\051\000\199\000\058\000\198\000\
\\061\000\241\000\062\000\240\000\084\000\034\000\085\000\033\000\
\\086\000\032\000\087\000\031\000\088\000\030\000\089\000\029\000\
\\090\000\028\000\091\000\027\000\092\000\026\000\093\000\025\000\
\\094\000\024\000\095\000\023\000\000\000\
\\001\000\023\000\205\000\034\000\208\000\036\000\202\000\038\000\201\000\
\\044\000\200\000\051\000\199\000\058\000\198\000\084\000\034\000\
\\085\000\033\000\086\000\032\000\087\000\031\000\088\000\030\000\
\\089\000\029\000\090\000\028\000\091\000\027\000\092\000\026\000\
\\093\000\025\000\094\000\024\000\095\000\023\000\000\000\
\\001\000\029\000\011\002\068\000\010\002\084\000\034\000\093\000\142\000\000\000\
\\001\000\029\000\185\002\068\000\184\002\084\000\034\000\093\000\142\000\000\000\
\\001\000\031\000\001\002\000\000\
\\001\000\031\000\129\002\000\000\
\\001\000\034\000\113\000\093\000\251\000\094\000\120\000\096\000\112\000\000\000\
\\001\000\034\000\109\001\000\000\
\\001\000\034\000\109\001\044\000\164\001\084\000\034\000\093\000\142\000\000\000\
\\001\000\034\000\109\001\044\000\203\002\084\000\034\000\093\000\142\000\000\000\
\\001\000\035\000\128\001\000\000\
\\001\000\035\000\129\001\000\000\
\\001\000\035\000\235\001\000\000\
\\001\000\035\000\240\001\000\000\
\\001\000\035\000\049\002\041\000\158\001\072\000\157\001\000\000\
\\001\000\035\000\050\002\000\000\
\\001\000\035\000\078\002\000\000\
\\001\000\035\000\101\002\000\000\
\\001\000\035\000\162\002\000\000\
\\001\000\035\000\164\002\040\000\163\002\000\000\
\\001\000\035\000\236\002\000\000\
\\001\000\035\000\104\003\000\000\
\\001\000\035\000\105\003\071\000\196\002\000\000\
\\001\000\035\000\018\004\071\000\196\002\000\000\
\\001\000\035\000\019\004\071\000\196\002\000\000\
\\001\000\035\000\029\006\000\000\
\\001\000\037\000\117\001\000\000\
\\001\000\037\000\124\001\000\000\
\\001\000\037\000\091\002\000\000\
\\001\000\037\000\098\002\000\000\
\\001\000\039\000\015\007\040\000\015\007\041\000\015\007\046\000\008\007\
\\050\000\021\007\071\000\015\007\000\000\
\\001\000\039\000\219\007\040\000\219\007\041\000\121\001\071\000\026\007\000\000\
\\001\000\039\000\118\001\000\000\
\\001\000\039\000\092\002\000\000\
\\001\000\039\000\159\002\000\000\
\\001\000\039\000\246\002\000\000\
\\001\000\041\000\096\001\072\000\095\001\000\000\
\\001\000\041\000\244\001\000\000\
\\001\000\041\000\105\002\000\000\
\\001\000\041\000\107\002\000\000\
\\001\000\041\000\108\002\000\000\
\\001\000\041\000\141\002\000\000\
\\001\000\041\000\160\002\000\000\
\\001\000\041\000\161\002\000\000\
\\001\000\041\000\169\002\000\000\
\\001\000\041\000\175\002\000\000\
\\001\000\041\000\179\002\000\000\
\\001\000\041\000\181\002\000\000\
\\001\000\041\000\237\002\000\000\
\\001\000\041\000\238\002\000\000\
\\001\000\041\000\241\002\000\000\
\\001\000\041\000\038\003\000\000\
\\001\000\041\000\060\003\000\000\
\\001\000\041\000\101\003\000\000\
\\001\000\041\000\102\003\000\000\
\\001\000\041\000\107\003\000\000\
\\001\000\041\000\113\003\046\000\112\003\000\000\
\\001\000\041\000\122\003\072\000\121\003\000\000\
\\001\000\041\000\187\003\000\000\
\\001\000\041\000\236\003\000\000\
\\001\000\041\000\000\004\000\000\
\\001\000\041\000\151\004\072\000\150\004\000\000\
\\001\000\041\000\041\005\000\000\
\\001\000\043\000\184\000\086\000\173\000\087\000\172\000\093\000\148\001\
\\094\000\180\000\095\000\179\000\000\000\
\\001\000\043\000\149\001\086\000\173\000\087\000\172\000\093\000\148\001\
\\094\000\180\000\095\000\179\000\000\000\
\\001\000\043\000\228\001\086\000\173\000\087\000\172\000\093\000\171\000\
\\094\000\170\000\095\000\169\000\000\000\
\\001\000\044\000\148\000\084\000\034\000\093\000\142\000\000\000\
\\001\000\046\000\011\007\071\000\255\006\000\000\
\\001\000\046\000\012\007\071\000\000\007\000\000\
\\001\000\046\000\053\000\084\000\034\000\093\000\025\000\094\000\024\000\
\\095\000\023\000\000\000\
\\001\000\046\000\222\000\084\000\034\000\093\000\025\000\094\000\024\000\
\\095\000\023\000\000\000\
\\001\000\046\000\222\000\093\000\221\000\094\000\024\000\095\000\023\000\000\000\
\\001\000\046\000\122\001\000\000\
\\001\000\046\000\123\001\000\000\
\\001\000\046\000\175\001\000\000\
\\001\000\046\000\191\001\000\000\
\\001\000\046\000\052\002\000\000\
\\001\000\046\000\055\002\000\000\
\\001\000\046\000\056\002\000\000\
\\001\000\046\000\094\002\000\000\
\\001\000\046\000\123\002\000\000\
\\001\000\046\000\128\002\000\000\
\\001\000\046\000\154\002\000\000\
\\001\000\046\000\171\002\000\000\
\\001\000\046\000\172\002\000\000\
\\001\000\046\000\174\002\000\000\
\\001\000\046\000\176\002\000\000\
\\001\000\046\000\178\002\000\000\
\\001\000\046\000\180\002\000\000\
\\001\000\046\000\191\002\050\000\097\001\000\000\
\\001\000\046\000\219\002\000\000\
\\001\000\046\000\229\002\071\000\196\002\000\000\
\\001\000\046\000\056\003\071\000\196\002\000\000\
\\001\000\046\000\065\003\000\000\
\\001\000\046\000\072\003\000\000\
\\001\000\046\000\083\003\000\000\
\\001\000\046\000\084\003\000\000\
\\001\000\046\000\117\003\000\000\
\\001\000\046\000\139\003\000\000\
\\001\000\046\000\188\003\000\000\
\\001\000\046\000\191\003\071\000\196\002\000\000\
\\001\000\046\000\193\003\000\000\
\\001\000\046\000\194\003\000\000\
\\001\000\046\000\215\003\050\000\097\001\000\000\
\\001\000\046\000\027\004\071\000\196\002\000\000\
\\001\000\046\000\192\004\000\000\
\\001\000\046\000\194\004\000\000\
\\001\000\046\000\227\004\000\000\
\\001\000\046\000\228\004\000\000\
\\001\000\046\000\230\004\000\000\
\\001\000\046\000\232\004\000\000\
\\001\000\046\000\233\004\000\000\
\\001\000\046\000\234\004\000\000\
\\001\000\046\000\235\004\000\000\
\\001\000\046\000\236\004\000\000\
\\001\000\046\000\047\005\000\000\
\\001\000\046\000\048\005\000\000\
\\001\000\046\000\050\005\000\000\
\\001\000\046\000\052\005\000\000\
\\001\000\046\000\053\005\000\000\
\\001\000\046\000\054\005\000\000\
\\001\000\046\000\055\005\000\000\
\\001\000\046\000\056\005\000\000\
\\001\000\046\000\143\005\000\000\
\\001\000\046\000\144\005\000\000\
\\001\000\046\000\146\005\000\000\
\\001\000\046\000\148\005\000\000\
\\001\000\046\000\149\005\000\000\
\\001\000\046\000\150\005\000\000\
\\001\000\046\000\151\005\000\000\
\\001\000\046\000\152\005\000\000\
\\001\000\046\000\174\005\000\000\
\\001\000\046\000\175\005\000\000\
\\001\000\046\000\177\005\000\000\
\\001\000\046\000\179\005\000\000\
\\001\000\046\000\180\005\000\000\
\\001\000\046\000\181\005\000\000\
\\001\000\046\000\182\005\000\000\
\\001\000\046\000\183\005\000\000\
\\001\000\046\000\189\005\000\000\
\\001\000\046\000\190\005\000\000\
\\001\000\046\000\192\005\000\000\
\\001\000\046\000\194\005\000\000\
\\001\000\046\000\195\005\000\000\
\\001\000\046\000\196\005\000\000\
\\001\000\046\000\197\005\000\000\
\\001\000\046\000\198\005\000\000\
\\001\000\046\000\229\005\000\000\
\\001\000\046\000\044\006\000\000\
\\001\000\046\000\045\006\000\000\
\\001\000\046\000\047\006\000\000\
\\001\000\046\000\049\006\000\000\
\\001\000\046\000\050\006\000\000\
\\001\000\046\000\051\006\000\000\
\\001\000\046\000\052\006\000\000\
\\001\000\046\000\053\006\000\000\
\\001\000\046\000\061\006\000\000\
\\001\000\046\000\062\006\000\000\
\\001\000\046\000\064\006\000\000\
\\001\000\046\000\066\006\000\000\
\\001\000\046\000\067\006\000\000\
\\001\000\046\000\068\006\000\000\
\\001\000\046\000\069\006\000\000\
\\001\000\046\000\070\006\000\000\
\\001\000\046\000\075\006\000\000\
\\001\000\046\000\076\006\000\000\
\\001\000\046\000\078\006\000\000\
\\001\000\046\000\080\006\000\000\
\\001\000\046\000\081\006\000\000\
\\001\000\046\000\082\006\000\000\
\\001\000\046\000\083\006\000\000\
\\001\000\046\000\084\006\000\000\
\\001\000\046\000\209\006\000\000\
\\001\000\046\000\210\006\000\000\
\\001\000\046\000\212\006\000\000\
\\001\000\046\000\214\006\000\000\
\\001\000\046\000\215\006\000\000\
\\001\000\046\000\216\006\000\000\
\\001\000\046\000\217\006\000\000\
\\001\000\046\000\218\006\000\000\
\\001\000\047\000\106\002\000\000\
\\001\000\047\000\001\004\000\000\
\\001\000\047\000\042\005\000\000\
\\001\000\048\000\100\003\000\000\
\\001\000\048\000\173\003\000\000\
\\001\000\048\000\017\004\000\000\
\\001\000\048\000\063\004\000\000\
\\001\000\048\000\092\004\000\000\
\\001\000\048\000\222\004\000\000\
\\001\000\048\000\252\004\000\000\
\\001\000\048\000\021\005\000\000\
\\001\000\048\000\010\006\000\000\
\\001\000\050\000\107\000\000\000\
\\001\000\050\000\055\001\000\000\
\\001\000\050\000\199\002\000\000\
\\001\000\071\000\119\001\000\000\
\\001\000\071\000\030\003\000\000\
\\001\000\071\000\134\003\000\000\
\\001\000\071\000\175\003\000\000\
\\001\000\071\000\094\004\000\000\
\\001\000\071\000\115\004\000\000\
\\001\000\078\000\001\001\000\000\
\\001\000\078\000\199\001\000\000\
\\001\000\078\000\045\002\000\000\
\\001\000\084\000\034\000\093\000\121\000\094\000\120\000\000\000\
\\001\000\084\000\034\000\093\000\142\000\000\000\
\\001\000\084\000\034\000\093\000\019\002\000\000\
\\001\000\086\000\173\000\087\000\172\000\093\000\171\000\094\000\170\000\
\\095\000\169\000\000\000\
\\001\000\091\000\195\001\000\000\
\\001\000\091\000\132\002\000\000\
\\001\000\091\000\220\002\000\000\
\\001\000\091\000\055\003\000\000\
\\001\000\091\000\057\003\000\000\
\\001\000\091\000\059\003\000\000\
\\001\000\091\000\061\003\000\000\
\\001\000\091\000\063\003\000\000\
\\001\000\091\000\190\003\000\000\
\\001\000\091\000\195\003\000\000\
\\001\000\091\000\071\004\000\000\
\\001\000\091\000\073\004\000\000\
\\001\000\091\000\074\004\000\000\
\\001\000\091\000\073\005\000\000\
\\001\000\093\000\151\000\000\000\
\\001\000\093\000\251\000\094\000\120\000\000\000\
\\001\000\096\000\112\000\000\000\
\\254\006\000\000\
\\255\006\000\000\
\\000\007\000\000\
\\001\007\000\000\
\\002\007\000\000\
\\003\007\000\000\
\\004\007\000\000\
\\005\007\000\000\
\\006\007\000\000\
\\007\007\000\000\
\\008\007\000\000\
\\009\007\000\000\
\\010\007\000\000\
\\011\007\000\000\
\\012\007\000\000\
\\013\007\000\000\
\\014\007\000\000\
\\015\007\000\000\
\\016\007\000\000\
\\017\007\000\000\
\\018\007\000\000\
\\019\007\000\000\
\\020\007\000\000\
\\021\007\000\000\
\\022\007\000\000\
\\023\007\000\000\
\\024\007\000\000\
\\025\007\000\000\
\\026\007\000\000\
\\027\007\000\000\
\\028\007\000\000\
\\029\007\000\000\
\\030\007\000\000\
\\031\007\000\000\
\\032\007\000\000\
\\033\007\000\000\
\\034\007\000\000\
\\035\007\023\000\161\000\000\000\
\\036\007\000\000\
\\037\007\000\000\
\\038\007\011\000\007\006\013\000\006\006\029\000\005\006\030\000\004\006\
\\057\000\003\006\061\000\155\000\062\000\154\000\063\000\002\006\
\\064\000\001\006\067\000\000\006\068\000\255\005\070\000\254\005\
\\082\000\253\005\000\000\
\\038\007\061\000\155\000\062\000\154\000\000\000\
\\039\007\000\000\
\\040\007\000\000\
\\041\007\000\000\
\\042\007\000\000\
\\043\007\000\000\
\\044\007\000\000\
\\045\007\000\000\
\\046\007\000\000\
\\047\007\000\000\
\\048\007\000\000\
\\049\007\000\000\
\\050\007\000\000\
\\051\007\000\000\
\\052\007\000\000\
\\053\007\000\000\
\\054\007\000\000\
\\055\007\000\000\
\\056\007\006\000\075\000\012\000\071\000\015\000\069\000\019\000\066\000\
\\023\000\063\000\026\000\061\000\027\000\060\000\033\000\057\000\
\\034\000\056\000\036\000\055\000\038\000\054\000\046\000\053\000\
\\049\000\052\000\051\000\051\000\053\000\050\000\054\000\049\000\
\\055\000\048\000\061\000\045\000\062\000\044\000\075\000\039\000\
\\079\000\038\000\084\000\034\000\085\000\033\000\086\000\032\000\
\\087\000\031\000\088\000\030\000\089\000\029\000\090\000\028\000\
\\091\000\027\000\092\000\026\000\093\000\025\000\094\000\024\000\
\\095\000\023\000\000\000\
\\057\007\000\000\
\\058\007\004\000\105\000\014\000\104\000\025\000\103\000\040\000\116\001\
\\041\000\102\000\052\000\100\000\000\000\
\\059\007\000\000\
\\060\007\000\000\
\\061\007\000\000\
\\062\007\000\000\
\\063\007\006\000\075\000\012\000\071\000\015\000\069\000\019\000\066\000\
\\023\000\063\000\026\000\061\000\027\000\060\000\033\000\057\000\
\\034\000\056\000\036\000\055\000\038\000\054\000\046\000\053\000\
\\049\000\052\000\051\000\051\000\053\000\050\000\054\000\049\000\
\\055\000\048\000\061\000\045\000\062\000\044\000\075\000\039\000\
\\079\000\038\000\084\000\034\000\085\000\033\000\086\000\032\000\
\\087\000\031\000\088\000\030\000\089\000\029\000\090\000\028\000\
\\091\000\027\000\092\000\026\000\093\000\025\000\094\000\024\000\
\\095\000\023\000\000\000\
\\064\007\004\000\105\000\014\000\104\000\025\000\103\000\040\000\127\001\
\\041\000\102\000\042\000\126\001\052\000\100\000\000\000\
\\064\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\042\000\251\002\052\000\100\000\000\000\
\\065\007\000\000\
\\067\007\000\000\
\\068\007\000\000\
\\069\007\000\000\
\\070\007\000\000\
\\071\007\004\000\105\000\014\000\104\000\025\000\103\000\040\000\074\002\
\\041\000\102\000\052\000\100\000\000\000\
\\071\007\040\000\074\002\000\000\
\\072\007\000\000\
\\073\007\019\000\066\000\023\000\063\000\034\000\056\000\036\000\055\000\
\\038\000\054\000\043\000\184\000\046\000\053\000\049\000\052\000\
\\051\000\051\000\054\000\049\000\055\000\048\000\079\000\038\000\
\\084\000\034\000\085\000\033\000\086\000\183\000\087\000\182\000\
\\088\000\030\000\089\000\029\000\090\000\028\000\091\000\027\000\
\\092\000\026\000\093\000\181\000\094\000\180\000\095\000\179\000\000\000\
\\074\007\000\000\
\\075\007\000\000\
\\076\007\019\000\066\000\023\000\063\000\034\000\056\000\036\000\055\000\
\\038\000\054\000\046\000\053\000\049\000\052\000\051\000\051\000\
\\054\000\049\000\055\000\048\000\079\000\038\000\084\000\034\000\
\\085\000\033\000\086\000\032\000\087\000\031\000\088\000\030\000\
\\089\000\029\000\090\000\028\000\091\000\027\000\092\000\026\000\
\\093\000\025\000\094\000\024\000\095\000\023\000\000\000\
\\077\007\000\000\
\\078\007\000\000\
\\079\007\004\000\105\000\041\000\102\000\000\000\
\\080\007\004\000\105\000\025\000\103\000\041\000\102\000\000\000\
\\081\007\004\000\105\000\025\000\103\000\041\000\102\000\000\000\
\\082\007\000\000\
\\083\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\084\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\085\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\086\007\000\000\
\\087\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\088\007\000\000\
\\089\007\000\000\
\\090\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\091\007\000\000\
\\092\007\000\000\
\\093\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\094\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\095\007\004\000\105\000\007\000\115\001\014\000\104\000\022\000\114\001\
\\025\000\103\000\026\000\113\001\041\000\102\000\052\000\100\000\000\000\
\\096\007\005\000\138\001\007\000\245\002\015\000\137\001\041\000\136\001\
\\059\000\133\001\060\000\132\001\000\000\
\\097\007\005\000\138\001\015\000\137\001\041\000\136\001\059\000\133\001\
\\060\000\132\001\000\000\
\\098\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\099\007\004\000\105\000\009\000\014\003\014\000\104\000\025\000\103\000\
\\041\000\102\000\052\000\100\000\000\000\
\\100\007\000\000\
\\101\007\000\000\
\\102\007\008\000\126\002\045\000\244\000\000\000\
\\102\007\008\000\119\003\045\000\244\000\000\000\
\\102\007\045\000\244\000\000\000\
\\103\007\000\000\
\\104\007\045\000\120\002\000\000\
\\105\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\106\007\002\000\076\000\007\000\074\000\008\000\073\000\011\000\072\000\
\\013\000\070\000\017\000\068\000\018\000\067\000\020\000\065\000\
\\021\000\064\000\024\000\062\000\029\000\059\000\030\000\058\000\
\\042\000\226\000\056\000\047\000\057\000\046\000\063\000\043\000\
\\064\000\042\000\068\000\041\000\070\000\040\000\080\000\037\000\
\\081\000\036\000\082\000\035\000\000\000\
\\107\007\002\000\076\000\007\000\074\000\008\000\073\000\011\000\072\000\
\\013\000\070\000\017\000\068\000\018\000\067\000\019\000\145\000\
\\020\000\065\000\021\000\064\000\024\000\062\000\029\000\059\000\
\\030\000\058\000\034\000\144\000\042\000\226\000\056\000\047\000\
\\057\000\046\000\061\000\216\000\062\000\215\000\063\000\043\000\
\\064\000\042\000\068\000\041\000\069\000\143\000\070\000\040\000\
\\074\000\214\000\076\000\213\000\080\000\037\000\081\000\036\000\
\\082\000\035\000\084\000\034\000\093\000\142\000\000\000\
\\107\007\002\000\076\000\007\000\074\000\008\000\073\000\011\000\072\000\
\\013\000\070\000\017\000\068\000\018\000\067\000\020\000\065\000\
\\021\000\064\000\024\000\062\000\029\000\059\000\030\000\058\000\
\\042\000\226\000\056\000\047\000\057\000\046\000\063\000\043\000\
\\064\000\042\000\068\000\041\000\070\000\040\000\080\000\037\000\
\\081\000\036\000\082\000\035\000\000\000\
\\108\007\000\000\
\\109\007\002\000\076\000\007\000\074\000\008\000\073\000\011\000\072\000\
\\013\000\070\000\017\000\068\000\018\000\067\000\020\000\065\000\
\\021\000\064\000\024\000\062\000\029\000\059\000\030\000\058\000\
\\056\000\047\000\057\000\046\000\063\000\043\000\064\000\042\000\
\\068\000\041\000\070\000\040\000\080\000\037\000\081\000\036\000\
\\082\000\035\000\000\000\
\\110\007\000\000\
\\111\007\000\000\
\\112\007\002\000\076\000\007\000\074\000\008\000\073\000\011\000\072\000\
\\013\000\070\000\017\000\068\000\018\000\067\000\020\000\065\000\
\\021\000\064\000\024\000\062\000\029\000\059\000\030\000\058\000\
\\056\000\047\000\057\000\046\000\063\000\043\000\064\000\042\000\
\\068\000\041\000\070\000\040\000\080\000\037\000\081\000\036\000\
\\082\000\035\000\000\000\
\\113\007\000\000\
\\114\007\000\000\
\\115\007\000\000\
\\116\007\000\000\
\\117\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\118\007\000\000\
\\119\007\000\000\
\\120\007\000\000\
\\121\007\000\000\
\\122\007\000\000\
\\123\007\000\000\
\\124\007\000\000\
\\125\007\000\000\
\\126\007\000\000\
\\127\007\000\000\
\\128\007\000\000\
\\129\007\000\000\
\\130\007\000\000\
\\131\007\000\000\
\\132\007\000\000\
\\133\007\041\000\158\001\072\000\157\001\000\000\
\\134\007\000\000\
\\135\007\000\000\
\\136\007\000\000\
\\137\007\000\000\
\\138\007\000\000\
\\139\007\000\000\
\\140\007\000\000\
\\141\007\000\000\
\\142\007\000\000\
\\143\007\000\000\
\\144\007\000\000\
\\145\007\000\000\
\\146\007\000\000\
\\147\007\000\000\
\\148\007\000\000\
\\149\007\000\000\
\\150\007\000\000\
\\151\007\000\000\
\\152\007\032\000\189\001\000\000\
\\153\007\000\000\
\\154\007\046\000\222\000\093\000\221\000\094\000\024\000\095\000\023\000\000\000\
\\155\007\000\000\
\\156\007\085\000\231\000\086\000\230\000\000\000\
\\157\007\000\000\
\\158\007\000\000\
\\159\007\000\000\
\\160\007\003\000\255\002\004\000\105\000\014\000\104\000\025\000\103\000\
\\041\000\102\000\052\000\100\000\000\000\
\\161\007\000\000\
\\162\007\000\000\
\\163\007\000\000\
\\164\007\000\000\
\\165\007\000\000\
\\166\007\003\000\179\001\000\000\
\\167\007\000\000\
\\168\007\000\000\
\\169\007\045\000\177\001\000\000\
\\170\007\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\052\000\100\000\000\000\
\\171\007\005\000\138\001\015\000\137\001\041\000\136\001\045\000\135\001\
\\059\000\133\001\060\000\132\001\000\000\
\\172\007\000\000\
\\173\007\000\000\
\\174\007\000\000\
\\175\007\003\000\234\001\000\000\
\\175\007\003\000\234\001\046\000\233\001\000\000\
\\176\007\000\000\
\\177\007\000\000\
\\178\007\000\000\
\\179\007\000\000\
\\180\007\003\000\155\003\000\000\
\\181\007\000\000\
\\182\007\000\000\
\\183\007\045\000\164\004\000\000\
\\184\007\000\000\
\\185\007\022\000\064\002\000\000\
\\185\007\022\000\064\002\046\000\063\002\000\000\
\\185\007\022\000\064\002\046\000\122\002\000\000\
\\185\007\022\000\064\002\046\000\109\003\000\000\
\\185\007\022\000\064\002\046\000\115\003\000\000\
\\186\007\000\000\
\\187\007\000\000\
\\188\007\003\000\066\002\000\000\
\\189\007\000\000\
\\190\007\000\000\
\\191\007\000\000\
\\192\007\003\000\030\004\000\000\
\\193\007\000\000\
\\194\007\000\000\
\\195\007\000\000\
\\196\007\003\000\020\003\000\000\
\\197\007\000\000\
\\198\007\000\000\
\\199\007\000\000\
\\200\007\000\000\
\\201\007\000\000\
\\202\007\000\000\
\\203\007\000\000\
\\204\007\000\000\
\\205\007\000\000\
\\206\007\000\000\
\\207\007\000\000\
\\208\007\023\000\205\000\034\000\208\000\036\000\202\000\038\000\201\000\
\\044\000\200\000\051\000\199\000\058\000\198\000\084\000\034\000\
\\085\000\033\000\086\000\032\000\087\000\031\000\088\000\030\000\
\\089\000\029\000\090\000\028\000\091\000\027\000\092\000\026\000\
\\093\000\025\000\094\000\024\000\095\000\023\000\000\000\
\\209\007\000\000\
\\210\007\005\000\138\001\015\000\137\001\040\000\090\002\041\000\136\001\
\\045\000\135\001\059\000\133\001\060\000\132\001\000\000\
\\211\007\000\000\
\\212\007\000\000\
\\213\007\000\000\
\\214\007\000\000\
\\215\007\000\000\
\\216\007\000\000\
\\217\007\005\000\138\001\015\000\137\001\040\000\097\002\041\000\136\001\
\\045\000\135\001\059\000\133\001\060\000\132\001\000\000\
\\217\007\040\000\097\002\000\000\
\\217\007\040\000\097\002\046\000\096\002\000\000\
\\218\007\000\000\
\\219\007\041\000\121\001\000\000\
\\220\007\005\000\138\001\015\000\137\001\041\000\136\001\045\000\135\001\
\\059\000\133\001\060\000\132\001\000\000\
\\221\007\005\000\002\003\000\000\
\\222\007\000\000\
\\223\007\043\000\149\001\086\000\173\000\087\000\172\000\093\000\148\001\
\\094\000\180\000\095\000\179\000\000\000\
\\224\007\000\000\
\\225\007\000\000\
\\226\007\023\000\205\000\034\000\208\000\036\000\202\000\038\000\201\000\
\\044\000\200\000\051\000\199\000\084\000\034\000\085\000\033\000\
\\086\000\032\000\087\000\031\000\088\000\030\000\089\000\029\000\
\\090\000\028\000\091\000\027\000\092\000\026\000\093\000\025\000\
\\094\000\024\000\095\000\023\000\000\000\
\\227\007\000\000\
\\228\007\041\000\136\001\000\000\
\\229\007\005\000\138\001\041\000\136\001\000\000\
\\230\007\005\000\138\001\041\000\136\001\059\000\133\001\060\000\132\001\000\000\
\\231\007\000\000\
\\232\007\000\000\
\\233\007\000\000\
\\234\007\048\000\224\001\000\000\
\\235\007\000\000\
\\236\007\000\000\
\\237\007\000\000\
\\239\007\000\000\
\\240\007\000\000\
\\241\007\000\000\
\\242\007\000\000\
\\243\007\000\000\
\\244\007\000\000\
\\245\007\000\000\
\\246\007\000\000\
\\247\007\000\000\
\\248\007\040\000\185\003\000\000\
\\249\007\000\000\
\\250\007\043\000\228\001\086\000\173\000\087\000\172\000\093\000\171\000\
\\094\000\170\000\095\000\169\000\000\000\
\\252\007\034\000\045\001\038\000\044\001\044\000\043\001\096\000\112\000\000\000\
\\253\007\000\000\
\\254\007\000\000\
\\255\007\040\000\163\002\000\000\
\\000\008\000\000\
\\001\008\034\000\113\000\096\000\112\000\000\000\
\\002\008\000\000\
\\003\008\000\000\
\\004\008\000\000\
\\005\008\040\000\236\001\000\000\
\\006\008\000\000\
\\007\008\034\000\122\000\084\000\034\000\093\000\121\000\094\000\120\000\
\\096\000\112\000\000\000\
\\008\008\000\000\
\\009\008\000\000\
\\010\008\000\000\
\\011\008\040\000\241\001\000\000\
\\012\008\000\000\
\\013\008\034\000\072\005\046\000\053\000\084\000\034\000\093\000\025\000\
\\094\000\024\000\095\000\023\000\000\000\
\\014\008\000\000\
\\015\008\000\000\
\\016\008\000\000\
\\017\008\040\000\030\006\000\000\
\\018\008\000\000\
\\019\008\050\000\097\001\000\000\
\\020\008\000\000\
\\021\008\000\000\
\\022\008\000\000\
\\023\008\000\000\
\\024\008\000\000\
\\025\008\019\000\145\000\034\000\144\000\069\000\143\000\084\000\034\000\
\\093\000\142\000\000\000\
\\026\008\071\000\196\002\000\000\
\\026\008\071\000\130\004\000\000\
\\026\008\071\000\154\005\000\000\
\\027\008\071\000\196\002\000\000\
\\027\008\071\000\130\004\000\000\
\\027\008\071\000\154\005\000\000\
\\028\008\041\000\158\001\072\000\157\001\000\000\
\\029\008\071\000\196\002\000\000\
\\029\008\071\000\130\004\000\000\
\\029\008\071\000\154\005\000\000\
\\030\008\041\000\158\001\072\000\157\001\000\000\
\\031\008\041\000\158\001\072\000\157\001\000\000\
\\032\008\000\000\
\\033\008\000\000\
\\034\008\000\000\
\\035\008\000\000\
\\036\008\071\000\196\002\000\000\
\\037\008\071\000\196\002\000\000\
\\038\008\000\000\
\\039\008\000\000\
\\040\008\000\000\
\\041\008\000\000\
\\042\008\000\000\
\\043\008\000\000\
\\044\008\000\000\
\\046\008\000\000\
\\047\008\000\000\
\\048\008\000\000\
\\049\008\000\000\
\\050\008\000\000\
\\051\008\000\000\
\\052\008\000\000\
\\053\008\000\000\
\\054\008\000\000\
\\055\008\000\000\
\\056\008\000\000\
\\057\008\000\000\
\\058\008\000\000\
\\059\008\000\000\
\\060\008\000\000\
\\061\008\000\000\
\\062\008\000\000\
\\063\008\000\000\
\\064\008\000\000\
\\065\008\000\000\
\\066\008\000\000\
\\067\008\000\000\
\\068\008\000\000\
\\069\008\000\000\
\\070\008\000\000\
\\071\008\071\000\196\002\000\000\
\\071\008\071\000\201\003\000\000\
\\072\008\041\000\104\001\000\000\
\\072\008\041\000\104\001\050\000\097\001\000\000\
\\072\008\041\000\104\001\072\000\103\001\000\000\
\\072\008\041\000\104\001\072\000\240\002\000\000\
\\072\008\041\000\189\002\000\000\
\\073\008\000\000\
\\074\008\000\000\
\\075\008\000\000\
\\076\008\000\000\
\\077\008\000\000\
\\078\008\000\000\
\\079\008\000\000\
\\079\008\048\000\198\002\000\000\
\\079\008\048\000\031\003\000\000\
\\079\008\048\000\135\003\000\000\
\\079\008\048\000\176\003\000\000\
\\079\008\048\000\202\003\000\000\
\\079\008\048\000\095\004\000\000\
\\079\008\048\000\116\004\000\000\
\\079\008\048\000\131\004\000\000\
\\079\008\048\000\155\005\000\000\
\\080\008\000\000\
\\081\008\000\000\
\\082\008\071\000\196\002\000\000\
\\082\008\071\000\201\003\000\000\
\\082\008\071\000\130\004\000\000\
\\082\008\071\000\154\005\000\000\
\\083\008\071\000\196\002\000\000\
\\083\008\071\000\201\003\000\000\
\\083\008\071\000\130\004\000\000\
\\083\008\071\000\154\005\000\000\
\\084\008\000\000\
\\085\008\019\000\145\000\034\000\144\000\069\000\143\000\084\000\034\000\
\\093\000\142\000\000\000\
\\086\008\050\000\097\001\000\000\
\\087\008\000\000\
\\088\008\000\000\
\\089\008\034\000\109\001\000\000\
\\090\008\000\000\
\\092\008\000\000\
\\093\008\000\000\
\\094\008\000\000\
\\095\008\000\000\
\\096\008\000\000\
\\097\008\000\000\
\\098\008\000\000\
\\099\008\000\000\
\\100\008\000\000\
\\101\008\000\000\
\\102\008\000\000\
\\103\008\000\000\
\\104\008\000\000\
\\105\008\000\000\
\\106\008\000\000\
\\107\008\000\000\
\\108\008\000\000\
\\109\008\000\000\
\\110\008\000\000\
\\111\008\000\000\
\\112\008\000\000\
\\113\008\000\000\
\\114\008\000\000\
\\115\008\000\000\
\\116\008\000\000\
\\117\008\000\000\
\\118\008\000\000\
\\119\008\000\000\
\\120\008\000\000\
\\121\008\000\000\
\\122\008\003\000\226\004\000\000\
\\122\008\003\000\226\004\019\000\145\000\034\000\144\000\069\000\143\000\
\\084\000\034\000\093\000\142\000\000\000\
\\122\008\003\000\226\004\050\000\097\001\000\000\
\\123\008\000\000\
\\124\008\000\000\
\\125\008\000\000\
\\126\008\034\000\109\001\000\000\
\\127\008\000\000\
\\128\008\000\000\
\\130\008\000\000\
\\131\008\000\000\
\\132\008\000\000\
\\133\008\000\000\
\\134\008\000\000\
\\135\008\000\000\
\\136\008\000\000\
\\137\008\000\000\
\\138\008\000\000\
\\139\008\000\000\
\\140\008\000\000\
\\141\008\000\000\
\\142\008\000\000\
\\143\008\000\000\
\\144\008\000\000\
\\145\008\000\000\
\\146\008\000\000\
\\147\008\000\000\
\\148\008\000\000\
\\149\008\000\000\
\\150\008\000\000\
\\151\008\000\000\
\\152\008\000\000\
\\153\008\000\000\
\\154\008\000\000\
\\155\008\008\000\093\001\011\000\092\001\013\000\091\001\017\000\090\001\
\\018\000\089\001\021\000\088\001\029\000\087\001\030\000\086\001\
\\042\000\000\002\056\000\084\001\057\000\083\001\063\000\082\001\
\\064\000\081\001\065\000\080\001\066\000\255\001\068\000\078\001\
\\070\000\077\001\082\000\076\001\000\000\
\\156\008\008\000\093\001\011\000\092\001\013\000\091\001\017\000\090\001\
\\018\000\089\001\019\000\024\002\021\000\088\001\029\000\087\001\
\\030\000\086\001\034\000\023\002\042\000\085\001\056\000\084\001\
\\057\000\083\001\063\000\082\001\064\000\081\001\065\000\080\001\
\\066\000\079\001\067\000\022\002\068\000\078\001\070\000\077\001\
\\073\000\021\002\074\000\020\002\082\000\076\001\084\000\034\000\
\\093\000\019\002\000\000\
\\156\008\008\000\093\001\011\000\092\001\013\000\091\001\017\000\090\001\
\\018\000\089\001\021\000\088\001\029\000\087\001\030\000\086\001\
\\042\000\085\001\044\000\060\002\056\000\084\001\057\000\083\001\
\\063\000\082\001\064\000\081\001\065\000\080\001\066\000\079\001\
\\068\000\078\001\070\000\077\001\082\000\076\001\084\000\034\000\
\\093\000\142\000\000\000\
\\156\008\008\000\093\001\011\000\092\001\013\000\091\001\017\000\090\001\
\\018\000\089\001\021\000\088\001\029\000\087\001\030\000\086\001\
\\042\000\085\001\056\000\084\001\057\000\083\001\063\000\082\001\
\\064\000\081\001\065\000\080\001\066\000\079\001\068\000\078\001\
\\070\000\077\001\082\000\076\001\000\000\
\\157\008\000\000\
\\158\008\000\000\
\\159\008\000\000\
\\160\008\000\000\
\\161\008\000\000\
\\162\008\000\000\
\\163\008\000\000\
\\164\008\000\000\
\\165\008\000\000\
\\166\008\000\000\
\\167\008\000\000\
\\168\008\000\000\
\\169\008\000\000\
\\170\008\000\000\
\\171\008\000\000\
\\172\008\000\000\
\\173\008\000\000\
\\174\008\000\000\
\\175\008\000\000\
\\176\008\000\000\
\\177\008\000\000\
\\178\008\000\000\
\\179\008\000\000\
\\180\008\000\000\
\\181\008\071\000\196\002\000\000\
\\182\008\000\000\
\\183\008\000\000\
\\184\008\000\000\
\\185\008\000\000\
\\186\008\032\000\216\002\000\000\
\\187\008\000\000\
\\188\008\046\000\099\004\000\000\
\\189\008\000\000\
\\190\008\000\000\
\\191\008\046\000\098\004\000\000\
\\192\008\000\000\
\\193\008\000\000\
\\194\008\046\000\210\003\050\000\097\001\000\000\
\\195\008\000\000\
\\196\008\000\000\
\\197\008\000\000\
\\198\008\000\000\
\\199\008\003\000\122\004\000\000\
\\200\008\000\000\
\\201\008\000\000\
\\202\008\000\000\
\\203\008\003\000\071\003\000\000\
\\203\008\003\000\071\003\046\000\070\003\000\000\
\\204\008\000\000\
\\205\008\000\000\
\\206\008\000\000\
\\207\008\000\000\
\\208\008\003\000\127\004\000\000\
\\209\008\000\000\
\\210\008\000\000\
\\211\008\045\000\126\005\000\000\
\\212\008\000\000\
\\213\008\000\000\
\\214\008\003\000\111\003\000\000\
\\215\008\000\000\
\\216\008\000\000\
\\217\008\000\000\
\\218\008\003\000\255\004\000\000\
\\219\008\000\000\
\\220\008\000\000\
\\221\008\000\000\
\\222\008\003\000\242\003\000\000\
\\223\008\000\000\
\\224\008\000\000\
\\225\008\000\000\
\\226\008\003\000\200\003\050\000\097\001\000\000\
\\227\008\000\000\
\\228\008\000\000\
\\229\008\000\000\
\\230\008\000\000\
\\231\008\000\000\
\\232\008\000\000\
\\233\008\000\000\
\\234\008\000\000\
\\235\008\000\000\
\\236\008\000\000\
\\237\008\000\000\
\\238\008\000\000\
\\239\008\000\000\
\\240\008\000\000\
\\241\008\000\000\
\\242\008\000\000\
\\243\008\000\000\
\\244\008\000\000\
\\245\008\000\000\
\\246\008\000\000\
\\247\008\000\000\
\\248\008\003\000\080\003\046\000\079\003\000\000\
\\249\008\000\000\
\\250\008\000\000\
\\251\008\000\000\
\\252\008\000\000\
\\253\008\000\000\
\\254\008\000\000\
\\255\008\000\000\
\\000\009\000\000\
\\001\009\000\000\
\\002\009\000\000\
\\003\009\000\000\
\\004\009\000\000\
\\005\009\000\000\
\\006\009\000\000\
\\007\009\000\000\
\\008\009\000\000\
\\009\009\000\000\
\\010\009\000\000\
\\011\009\000\000\
\\012\009\000\000\
\\014\009\000\000\
\\015\009\000\000\
\\016\009\000\000\
\\017\009\000\000\
\\018\009\000\000\
\\019\009\000\000\
\\020\009\000\000\
\\021\009\000\000\
\\022\009\000\000\
\\023\009\000\000\
\\024\009\000\000\
\\025\009\000\000\
\\026\009\000\000\
\\027\009\000\000\
\\028\009\000\000\
\\029\009\000\000\
\\030\009\000\000\
\\031\009\000\000\
\\032\009\008\000\097\000\011\000\096\000\013\000\095\000\017\000\094\000\
\\018\000\093\000\021\000\092\000\029\000\091\000\030\000\090\000\
\\056\000\088\000\057\000\087\000\063\000\086\000\064\000\085\000\
\\068\000\084\000\070\000\083\000\082\000\081\000\000\000\
\\033\009\008\000\097\000\011\000\096\000\013\000\095\000\017\000\094\000\
\\018\000\093\000\021\000\092\000\029\000\091\000\030\000\090\000\
\\042\000\089\000\056\000\088\000\057\000\087\000\063\000\086\000\
\\064\000\085\000\068\000\084\000\070\000\083\000\080\000\082\000\
\\082\000\081\000\091\000\080\000\000\000\
\\033\009\008\000\097\000\011\000\096\000\013\000\095\000\017\000\094\000\
\\018\000\093\000\021\000\092\000\029\000\091\000\030\000\090\000\
\\042\000\089\000\056\000\088\000\057\000\087\000\063\000\086\000\
\\064\000\085\000\068\000\084\000\070\000\083\000\082\000\081\000\
\\091\000\006\001\000\000\
\\034\009\000\000\
\\035\009\000\000\
\\036\009\000\000\
\\037\009\000\000\
\\038\009\000\000\
\\039\009\000\000\
\\040\009\000\000\
\\041\009\000\000\
\\042\009\000\000\
\\043\009\000\000\
\\044\009\000\000\
\\045\009\000\000\
\\046\009\000\000\
\\047\009\000\000\
\\048\009\000\000\
\\049\009\000\000\
\\050\009\000\000\
\\051\009\000\000\
\\052\009\000\000\
\\053\009\000\000\
\\054\009\000\000\
\\055\009\003\000\150\002\000\000\
\\055\009\003\000\150\002\041\000\149\002\000\000\
\\056\009\000\000\
\\057\009\000\000\
\\058\009\000\000\
\\059\009\003\000\198\001\000\000\
\\060\009\000\000\
\\061\009\000\000\
\\062\009\000\000\
\\063\009\000\000\
\\064\009\003\000\220\001\000\000\
\\064\009\003\000\220\001\046\000\219\001\000\000\
\\065\009\000\000\
\\066\009\000\000\
\\067\009\045\000\191\004\000\000\
\\068\009\000\000\
\\069\009\000\000\
\\070\009\000\000\
\\071\009\003\000\212\001\000\000\
\\072\009\000\000\
\\073\009\000\000\
\\074\009\000\000\
\\075\009\003\000\145\002\000\000\
\\076\009\000\000\
\\077\009\000\000\
\\078\009\000\000\
\\079\009\003\000\153\002\000\000\
\\079\009\003\000\153\002\022\000\152\002\000\000\
\\080\009\000\000\
\\081\009\000\000\
\\082\009\000\000\
\\083\009\003\000\202\001\041\000\201\001\000\000\
\\084\009\000\000\
\\085\009\000\000\
\\086\009\000\000\
\\087\009\000\000\
\\088\009\000\000\
\\089\009\000\000\
\\090\009\000\000\
\\091\009\000\000\
\\092\009\000\000\
\\093\009\000\000\
\\094\009\000\000\
\\095\009\000\000\
\\096\009\000\000\
\\097\009\000\000\
\\098\009\000\000\
\\099\009\000\000\
\\100\009\000\000\
\\101\009\000\000\
\\102\009\000\000\
\\103\009\000\000\
\\104\009\000\000\
\\105\009\003\000\205\001\000\000\
\\105\009\003\000\205\001\034\000\109\001\000\000\
\\106\009\000\000\
\\107\009\000\000\
\\108\009\000\000\
\\110\009\000\000\
\\111\009\000\000\
\\112\009\000\000\
\\113\009\000\000\
\\114\009\000\000\
\\115\009\000\000\
\\116\009\000\000\
\\117\009\000\000\
\\118\009\000\000\
\\119\009\000\000\
\\120\009\000\000\
\\121\009\000\000\
\\122\009\000\000\
\\123\009\000\000\
\\124\009\000\000\
\\125\009\000\000\
\\126\009\000\000\
\\127\009\000\000\
\\128\009\042\000\006\000\077\000\005\000\000\000\
\\129\009\042\000\006\000\077\000\005\000\000\000\
\\130\009\000\000\
\\131\009\000\000\
\\132\009\000\000\
\\133\009\000\000\
\\134\009\077\000\005\000\000\000\
\\135\009\000\000\
\\136\009\042\000\139\000\077\000\138\000\000\000\
\\138\009\000\000\
\\139\009\077\000\138\000\000\000\
\\140\009\000\000\
\\141\009\002\000\076\000\007\000\074\000\008\000\073\000\011\000\072\000\
\\013\000\070\000\017\000\068\000\018\000\067\000\020\000\065\000\
\\021\000\064\000\024\000\062\000\029\000\059\000\030\000\058\000\
\\042\000\099\000\056\000\047\000\057\000\046\000\063\000\043\000\
\\064\000\042\000\068\000\041\000\070\000\040\000\080\000\037\000\
\\081\000\036\000\082\000\035\000\000\000\
\\142\009\004\000\105\000\014\000\104\000\025\000\103\000\041\000\102\000\
\\042\000\101\000\052\000\100\000\000\000\
\\143\009\000\000\
\\144\009\000\000\
\\145\009\000\000\
\\146\009\002\000\076\000\006\000\075\000\007\000\074\000\008\000\073\000\
\\011\000\072\000\012\000\071\000\013\000\070\000\015\000\069\000\
\\017\000\068\000\018\000\067\000\019\000\066\000\020\000\065\000\
\\021\000\064\000\023\000\063\000\024\000\062\000\026\000\061\000\
\\027\000\060\000\029\000\059\000\030\000\058\000\033\000\057\000\
\\034\000\056\000\036\000\055\000\038\000\054\000\042\000\033\001\
\\046\000\053\000\049\000\052\000\051\000\051\000\053\000\050\000\
\\054\000\049\000\055\000\048\000\056\000\047\000\057\000\046\000\
\\061\000\045\000\062\000\044\000\063\000\043\000\064\000\042\000\
\\068\000\041\000\070\000\040\000\075\000\039\000\079\000\038\000\
\\080\000\037\000\081\000\036\000\082\000\035\000\084\000\034\000\
\\085\000\033\000\086\000\032\000\087\000\031\000\088\000\030\000\
\\089\000\029\000\090\000\028\000\091\000\027\000\092\000\026\000\
\\093\000\025\000\094\000\024\000\095\000\023\000\000\000\
\\146\009\002\000\076\000\006\000\075\000\007\000\074\000\008\000\073\000\
\\011\000\072\000\012\000\071\000\013\000\070\000\015\000\069\000\
\\017\000\068\000\018\000\067\000\019\000\066\000\020\000\065\000\
\\021\000\064\000\023\000\063\000\024\000\062\000\026\000\061\000\
\\027\000\060\000\029\000\059\000\030\000\058\000\033\000\057\000\
\\034\000\056\000\036\000\055\000\038\000\054\000\046\000\053\000\
\\049\000\052\000\051\000\051\000\053\000\050\000\054\000\049\000\
\\055\000\048\000\056\000\047\000\057\000\046\000\061\000\045\000\
\\062\000\044\000\063\000\043\000\064\000\042\000\068\000\041\000\
\\070\000\040\000\075\000\039\000\079\000\038\000\080\000\037\000\
\\081\000\036\000\082\000\035\000\084\000\034\000\085\000\033\000\
\\086\000\032\000\087\000\031\000\088\000\030\000\089\000\029\000\
\\090\000\028\000\091\000\027\000\092\000\026\000\093\000\025\000\
\\094\000\024\000\095\000\023\000\000\000\
\\147\009\000\000\
\\148\009\000\000\
\\149\009\000\000\
\"
val actionRowNumbers =
"\255\003\254\003\016\004\155\003\
\\005\004\004\004\019\004\014\004\
\\203\001\198\001\010\004\011\004\
\\164\001\163\001\161\001\050\001\
\\109\001\128\001\115\001\111\001\
\\125\001\102\001\101\001\001\000\
\\089\001\088\001\090\001\087\001\
\\086\001\085\001\084\001\083\001\
\\107\001\096\002\102\002\074\000\
\\054\000\097\000\180\000\080\001\
\\124\001\096\002\053\000\053\000\
\\120\001\096\002\127\001\126\001\
\\053\000\142\001\065\001\110\001\
\\160\001\142\001\052\000\053\000\
\\109\000\096\002\115\000\053\000\
\\094\000\183\000\185\000\197\001\
\\197\001\246\001\246\001\053\000\
\\111\000\191\001\120\001\120\000\
\\053\000\053\000\096\002\157\003\
\\154\003\059\001\001\004\120\000\
\\156\003\063\001\080\001\063\001\
\\120\000\120\001\120\000\159\003\
\\120\001\120\000\185\000\246\001\
\\246\001\120\001\120\001\120\000\
\\199\001\015\004\053\000\015\004\
\\091\002\053\000\191\001\053\000\
\\162\001\184\000\095\002\081\001\
\\212\001\097\002\105\001\082\001\
\\101\002\047\000\051\001\103\002\
\\120\001\113\001\104\001\002\000\
\\062\001\082\001\096\002\063\001\
\\080\001\063\001\096\002\120\001\
\\096\002\120\001\096\002\120\001\
\\120\001\006\004\088\000\022\003\
\\022\003\009\004\150\000\114\002\
\\106\001\197\001\196\001\197\001\
\\220\001\175\002\173\002\221\001\
\\209\002\108\001\222\001\063\001\
\\122\001\121\001\211\001\172\001\
\\171\001\218\001\185\000\119\001\
\\081\001\217\001\182\001\144\001\
\\141\001\140\000\132\001\095\001\
\\094\001\093\001\097\001\096\001\
\\146\000\159\001\053\001\145\000\
\\186\000\046\000\045\000\144\000\
\\182\000\181\000\187\000\141\000\
\\150\001\124\000\125\000\133\001\
\\041\000\110\000\049\000\067\002\
\\065\002\205\001\037\002\039\002\
\\115\000\047\002\036\002\064\002\
\\047\002\113\000\110\000\183\000\
\\210\001\050\000\112\000\170\001\
\\223\001\120\002\118\002\093\000\
\\122\000\094\000\094\000\129\001\
\\226\001\098\001\244\001\100\001\
\\099\001\200\001\195\001\089\000\
\\201\001\090\000\185\000\245\001\
\\092\001\091\001\185\000\043\000\
\\114\000\005\002\188\000\003\002\
\\000\002\208\001\191\001\191\001\
\\115\000\115\000\188\001\219\001\
\\185\000\081\001\242\001\242\001\
\\189\000\103\001\207\001\042\000\
\\081\001\242\001\158\003\066\001\
\\164\003\081\001\183\003\060\001\
\\003\004\169\003\209\003\170\003\
\\232\003\171\003\020\000\163\003\
\\167\003\185\000\166\003\081\001\
\\196\003\160\003\185\000\162\003\
\\174\003\185\000\185\000\161\003\
\\168\003\185\000\165\003\081\001\
\\189\003\012\004\017\004\015\004\
\\168\001\013\004\062\001\079\002\
\\004\000\077\002\075\002\165\001\
\\082\002\081\002\090\002\091\002\
\\167\001\115\000\166\001\116\001\
\\112\001\010\002\126\000\100\002\
\\082\001\062\001\185\000\127\000\
\\106\002\081\001\081\001\151\000\
\\209\002\209\002\081\001\185\000\
\\081\001\185\000\081\001\185\000\
\\185\000\008\004\152\001\023\003\
\\019\003\118\000\096\002\063\001\
\\080\001\116\000\098\000\063\001\
\\096\002\120\001\096\002\024\003\
\\120\001\096\002\185\000\246\001\
\\246\001\120\001\120\001\120\000\
\\061\001\107\000\107\000\063\001\
\\055\000\128\000\129\000\091\000\
\\190\000\098\000\098\000\191\000\
\\208\002\192\000\247\002\021\003\
\\121\000\021\002\027\002\115\000\
\\115\000\053\000\053\000\136\001\
\\130\001\177\000\158\001\091\002\
\\053\000\053\000\135\001\130\000\
\\149\001\053\000\137\001\134\001\
\\053\000\206\001\110\000\114\000\
\\053\000\115\000\091\002\093\000\
\\115\000\066\002\069\002\049\002\
\\046\002\142\000\147\000\063\002\
\\060\002\193\000\044\000\058\002\
\\143\000\048\000\131\000\041\002\
\\248\001\038\002\053\000\098\000\
\\098\000\119\002\152\000\038\001\
\\136\002\153\000\154\000\132\002\
\\131\002\243\001\202\001\197\001\
\\053\000\225\001\224\001\053\000\
\\209\001\053\000\001\002\115\000\
\\251\001\114\000\115\000\115\000\
\\000\002\051\000\193\001\176\001\
\\022\002\194\000\214\001\096\002\
\\213\001\189\001\191\001\195\000\
\\119\000\000\004\183\003\180\003\
\\120\000\067\001\206\003\099\000\
\\063\001\228\003\231\003\080\001\
\\233\003\155\000\063\001\022\000\
\\196\003\193\003\120\000\179\003\
\\173\003\172\003\205\003\196\000\
\\184\003\191\001\120\000\018\004\
\\080\002\091\002\091\002\148\000\
\\089\002\156\000\157\000\132\000\
\\133\000\169\001\006\002\091\002\
\\096\002\098\002\082\001\120\001\
\\114\001\158\000\104\002\062\001\
\\197\000\198\000\098\000\199\000\
\\159\000\200\000\020\002\201\000\
\\160\000\202\000\161\000\020\002\
\\025\003\117\000\026\003\197\001\
\\037\003\081\001\044\003\177\002\
\\045\003\209\002\031\003\203\000\
\\064\001\062\001\195\002\047\003\
\\205\002\185\002\180\002\052\001\
\\117\001\003\000\123\000\178\002\
\\022\003\020\003\197\001\046\003\
\\209\002\036\003\042\003\185\000\
\\041\003\081\001\033\003\185\000\
\\035\003\050\003\185\000\185\000\
\\034\003\043\003\185\000\052\003\
\\052\003\081\001\204\000\068\001\
\\179\001\178\001\113\002\115\002\
\\116\002\094\000\095\000\205\000\
\\171\002\095\000\100\000\248\002\
\\134\000\162\000\163\000\176\002\
\\164\000\120\001\091\002\025\002\
\\096\002\184\001\183\001\180\001\
\\143\001\149\000\060\002\155\001\
\\177\000\059\002\157\001\157\001\
\\140\001\151\001\148\001\145\001\
\\174\001\056\000\057\000\250\001\
\\071\002\068\002\072\002\070\002\
\\115\000\044\002\040\002\062\002\
\\115\000\051\002\115\000\178\000\
\\043\002\115\000\045\002\042\002\
\\177\001\124\002\121\002\098\000\
\\094\000\098\000\098\000\058\000\
\\059\000\186\001\004\002\002\002\
\\255\001\000\002\000\002\252\001\
\\053\000\187\001\115\000\035\002\
\\120\001\191\001\241\001\120\001\
\\062\001\115\000\191\001\197\001\
\\181\003\182\003\002\004\207\003\
\\019\000\054\001\186\002\123\000\
\\208\003\229\003\230\003\101\000\
\\235\003\197\003\165\000\120\001\
\\194\003\195\003\175\003\091\002\
\\120\001\201\003\091\002\120\001\
\\191\001\120\001\187\003\078\002\
\\076\002\083\002\091\002\091\002\
\\092\002\091\002\084\002\009\002\
\\008\002\099\002\185\000\091\002\
\\105\002\120\001\069\001\206\000\
\\070\001\098\000\071\001\166\000\
\\072\001\091\002\073\001\091\002\
\\207\000\032\003\064\001\062\001\
\\060\000\070\003\208\000\102\000\
\\115\003\063\001\029\003\209\000\
\\027\003\210\000\076\000\194\002\
\\098\000\064\001\041\001\139\002\
\\167\000\168\000\061\000\135\000\
\\136\000\092\000\169\000\023\002\
\\081\003\170\000\049\003\048\003\
\\024\002\039\003\096\002\038\003\
\\211\000\190\001\007\004\062\000\
\\142\002\171\000\005\000\093\000\
\\122\000\095\000\095\000\095\000\
\\144\002\207\002\010\000\055\001\
\\187\002\123\000\135\002\098\000\
\\098\000\212\000\098\000\096\002\
\\183\000\019\002\026\002\053\000\
\\131\001\156\001\153\001\154\001\
\\147\001\149\001\073\002\074\002\
\\247\001\110\000\048\002\057\002\
\\115\000\056\002\056\002\055\002\
\\050\002\128\002\127\002\137\002\
\\138\002\204\001\138\001\173\001\
\\053\000\254\001\253\001\194\001\
\\192\001\032\002\120\001\183\000\
\\120\001\015\002\185\000\215\001\
\\175\001\120\001\063\000\210\003\
\\077\000\099\000\042\001\234\003\
\\021\000\056\001\188\002\123\000\
\\096\002\199\003\178\003\177\003\
\\204\003\203\003\120\001\188\003\
\\185\000\088\002\088\002\093\002\
\\094\002\007\002\172\000\213\000\
\\185\000\233\001\074\001\240\001\
\\214\000\232\001\096\002\234\001\
\\215\000\231\001\216\000\075\001\
\\030\003\028\003\139\001\066\003\
\\091\002\096\002\063\001\090\003\
\\024\000\172\002\189\002\123\000\
\\112\003\103\000\080\001\061\003\
\\060\003\064\001\062\001\204\002\
\\217\000\096\002\063\001\064\001\
\\022\003\063\001\096\002\120\001\
\\120\001\096\002\120\001\120\001\
\\200\002\118\001\098\000\107\000\
\\107\000\179\002\183\002\182\002\
\\098\000\104\000\173\000\120\001\
\\079\003\096\002\120\001\091\002\
\\089\003\120\001\051\003\191\001\
\\120\001\062\001\117\002\105\000\
\\105\000\146\002\180\000\174\000\
\\039\001\152\002\171\000\151\002\
\\171\000\143\002\211\002\080\001\
\\078\000\100\000\043\001\137\000\
\\138\000\096\000\218\000\062\001\
\\031\002\181\001\146\001\249\001\
\\054\002\061\002\053\002\052\002\
\\185\001\034\002\035\002\015\002\
\\012\002\096\002\020\002\015\002\
\\216\001\213\003\096\002\063\001\
\\064\001\022\003\063\001\096\002\
\\120\001\120\001\096\002\120\001\
\\120\001\212\003\054\001\099\000\
\\236\003\080\000\101\000\044\001\
\\062\001\176\003\202\003\188\003\
\\185\003\020\002\085\002\179\000\
\\086\002\091\002\183\000\108\000\
\\238\001\076\001\062\001\077\001\
\\078\001\237\001\069\003\068\003\
\\093\003\094\003\063\001\081\000\
\\102\000\045\001\113\003\023\000\
\\057\001\190\002\123\000\114\003\
\\063\001\058\003\057\003\055\003\
\\054\003\063\001\062\001\174\002\
\\209\002\064\000\174\002\062\001\
\\183\000\183\000\062\001\183\000\
\\183\000\196\002\140\002\141\002\
\\065\000\134\003\025\000\058\001\
\\191\002\123\000\096\002\183\000\
\\080\003\183\000\065\003\086\003\
\\120\001\183\000\120\001\075\003\
\\185\000\040\003\006\000\125\002\
\\192\002\148\002\123\000\122\002\
\\147\002\145\002\105\000\095\000\
\\210\002\214\002\096\002\063\001\
\\064\001\022\003\063\001\096\002\
\\120\001\120\001\096\002\120\001\
\\120\001\213\002\055\001\100\000\
\\133\002\134\002\245\002\175\000\
\\014\000\093\000\122\000\096\000\
\\096\000\096\000\031\002\029\002\
\\120\001\033\002\013\002\014\002\
\\018\002\011\002\062\001\174\002\
\\209\002\066\000\174\002\062\001\
\\183\000\183\000\062\001\183\000\
\\183\000\211\003\054\001\239\003\
\\096\002\063\001\064\001\022\003\
\\063\001\096\002\120\001\120\001\
\\096\002\120\001\120\001\238\003\
\\056\001\101\000\200\003\186\003\
\\192\003\087\002\219\000\228\001\
\\082\001\239\001\220\000\229\001\
\\230\001\067\003\091\003\092\003\
\\097\003\096\002\063\001\064\001\
\\022\003\063\001\096\002\120\001\
\\120\001\096\002\120\001\120\001\
\\096\003\201\002\102\000\116\003\
\\082\000\103\000\046\001\059\003\
\\064\001\062\001\206\002\241\002\
\\221\000\222\000\241\002\223\000\
\\241\002\224\000\225\000\226\000\
\\227\000\228\000\181\002\136\003\
\\063\001\084\000\104\000\047\001\
\\062\001\085\003\065\003\062\003\
\\120\001\088\003\089\003\075\003\
\\072\003\096\002\020\002\153\002\
\\086\000\105\000\048\001\129\002\
\\150\002\149\002\171\000\062\001\
\\174\002\209\002\067\000\174\002\
\\062\001\183\000\183\000\062\001\
\\183\000\183\000\212\002\055\001\
\\106\000\106\000\250\002\124\001\
\\176\000\040\001\000\003\175\000\
\\255\002\175\000\246\002\028\002\
\\030\002\016\002\120\001\028\000\
\\229\000\230\000\028\000\231\000\
\\028\000\232\000\233\000\234\000\
\\235\000\236\000\062\001\174\002\
\\209\002\068\000\174\002\062\001\
\\183\000\183\000\062\001\183\000\
\\183\000\237\003\056\001\198\003\
\\190\003\120\001\108\002\235\001\
\\079\001\062\001\174\002\209\002\
\\069\000\174\002\062\001\183\000\
\\183\000\062\001\183\000\183\000\
\\095\003\197\002\119\003\096\002\
\\063\001\064\001\022\003\063\001\
\\096\002\120\001\120\001\096\002\
\\120\001\120\001\118\003\057\001\
\\103\000\056\003\053\003\236\002\
\\075\000\063\001\107\000\229\002\
\\063\001\235\002\120\001\120\001\
\\091\002\120\001\120\001\135\003\
\\139\003\096\002\063\001\064\001\
\\022\003\063\001\096\002\120\001\
\\120\001\096\002\120\001\120\001\
\\138\003\058\001\104\000\085\003\
\\083\003\120\001\063\003\064\003\
\\087\003\073\003\074\003\081\001\
\\078\003\156\002\096\002\063\001\
\\064\001\022\003\063\001\096\002\
\\120\001\120\001\096\002\120\001\
\\120\001\202\002\155\002\105\000\
\\013\000\237\000\238\000\013\000\
\\239\000\013\000\240\000\241\000\
\\242\000\243\000\244\000\252\002\
\\015\000\126\002\193\002\123\000\
\\251\002\123\002\249\002\106\000\
\\096\000\017\002\221\003\225\003\
\\077\000\063\001\107\000\214\003\
\\063\001\220\003\120\001\120\001\
\\091\002\120\001\120\001\031\000\
\\245\000\246\000\031\000\247\000\
\\031\000\248\000\249\000\250\000\
\\251\000\252\000\191\003\107\002\
\\227\001\109\002\183\000\236\001\
\\034\000\253\000\254\000\034\000\
\\255\000\034\000\000\001\001\001\
\\002\001\003\001\004\001\062\001\
\\174\002\209\002\070\000\174\002\
\\062\001\183\000\183\000\062\001\
\\183\000\183\000\117\003\057\001\
\\240\002\243\002\239\002\242\002\
\\184\002\243\002\183\000\183\000\
\\241\002\183\000\183\000\062\001\
\\174\002\209\002\071\000\174\002\
\\062\001\183\000\183\000\062\001\
\\183\000\183\000\137\003\058\001\
\\082\003\084\003\005\001\076\003\
\\120\001\062\001\174\002\209\002\
\\072\000\174\002\062\001\183\000\
\\183\000\062\001\183\000\183\000\
\\198\002\154\002\222\002\226\002\
\\079\000\063\001\107\000\215\002\
\\063\001\221\002\120\001\120\001\
\\091\002\120\001\120\001\001\003\
\\087\000\106\000\049\001\254\002\
\\130\002\253\002\175\000\226\003\
\\027\000\224\003\026\000\027\000\
\\183\000\183\000\028\000\183\000\
\\183\000\247\003\251\003\080\000\
\\063\001\107\000\240\003\063\001\
\\246\003\120\001\120\001\091\002\
\\120\001\120\001\139\000\112\002\
\\105\003\109\003\081\000\063\001\
\\107\000\098\003\063\001\104\003\
\\120\001\120\001\091\002\120\001\
\\120\001\037\000\006\001\007\001\
\\037\000\008\001\037\000\009\001\
\\010\001\011\001\012\001\013\001\
\\237\002\244\002\238\002\241\002\
\\241\002\234\002\241\002\241\002\
\\040\000\014\001\015\001\040\000\
\\016\001\040\000\017\001\018\001\
\\019\001\020\001\021\001\191\001\
\\077\003\009\000\022\001\023\001\
\\009\000\024\001\009\000\025\001\
\\026\001\027\001\028\001\029\001\
\\227\002\012\000\225\002\011\000\
\\012\000\183\000\183\000\013\000\
\\183\000\183\000\004\003\096\002\
\\063\001\064\001\022\003\063\001\
\\096\002\120\001\120\001\096\002\
\\120\001\120\001\003\003\203\002\
\\106\000\222\003\227\003\223\003\
\\028\000\028\000\219\003\028\000\
\\028\000\252\003\030\000\250\003\
\\029\000\030\000\183\000\183\000\
\\031\000\183\000\183\000\110\002\
\\183\000\110\003\033\000\108\003\
\\032\000\033\000\183\000\183\000\
\\034\000\183\000\183\000\127\003\
\\131\003\083\000\063\001\107\000\
\\120\003\063\001\126\003\120\001\
\\120\001\091\002\120\001\120\001\
\\232\002\230\002\231\002\233\002\
\\147\003\151\003\084\000\063\001\
\\107\000\140\003\063\001\146\003\
\\120\001\120\001\091\002\120\001\
\\120\001\120\001\164\002\168\002\
\\085\000\063\001\107\000\157\002\
\\063\001\163\002\120\001\120\001\
\\091\002\120\001\120\001\223\002\
\\228\002\224\002\013\000\013\000\
\\220\002\013\000\013\000\062\001\
\\174\002\209\002\073\000\174\002\
\\062\001\183\000\183\000\062\001\
\\183\000\183\000\002\003\199\002\
\\217\003\215\003\216\003\218\003\
\\248\003\253\003\249\003\031\000\
\\031\000\245\003\031\000\031\000\
\\111\002\106\003\111\003\107\003\
\\034\000\034\000\103\003\034\000\
\\034\000\132\003\036\000\130\003\
\\035\000\036\000\183\000\183\000\
\\037\000\183\000\183\000\152\003\
\\039\000\150\003\038\000\039\000\
\\183\000\183\000\040\000\183\000\
\\183\000\075\003\169\002\008\000\
\\007\000\167\002\008\000\183\000\
\\183\000\009\000\183\000\183\000\
\\218\002\216\002\217\002\219\002\
\\018\000\030\001\031\001\018\000\
\\032\001\018\000\033\001\034\001\
\\035\001\036\001\037\001\243\003\
\\241\003\242\003\244\003\101\003\
\\099\003\100\003\102\003\128\003\
\\133\003\129\003\037\000\037\000\
\\125\003\037\000\037\000\148\003\
\\153\003\149\003\040\000\040\000\
\\145\003\040\000\040\000\071\003\
\\165\002\170\002\166\002\009\000\
\\009\000\162\002\009\000\009\000\
\\012\003\016\003\123\001\063\001\
\\107\000\005\003\063\001\011\003\
\\120\001\120\001\091\002\120\001\
\\120\001\123\003\121\003\122\003\
\\124\003\143\003\141\003\142\003\
\\144\003\160\002\158\002\159\002\
\\161\002\017\003\017\000\015\003\
\\016\000\017\000\183\000\183\000\
\\018\000\183\000\183\000\013\003\
\\018\003\014\003\018\000\018\000\
\\010\003\018\000\018\000\008\003\
\\006\003\007\003\009\003\000\000"
val gotoT =
"\
\\208\000\002\000\209\000\001\000\215\000\251\006\000\000\
\\209\000\005\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\011\000\037\000\010\000\039\000\009\000\
\\040\000\008\000\212\000\007\000\213\000\006\000\000\000\
\\177\000\077\000\178\000\076\000\179\000\075\000\000\000\
\\000\000\
\\209\000\005\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\037\000\096\000\039\000\009\000\040\000\008\000\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\104\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\052\000\108\000\088\000\107\000\089\000\106\000\000\000\
\\006\000\117\000\007\000\116\000\008\000\018\000\012\000\115\000\
\\013\000\114\000\091\000\113\000\092\000\112\000\000\000\
\\000\000\
\\024\000\135\000\210\000\134\000\211\000\133\000\000\000\
\\008\000\018\000\013\000\139\000\097\000\138\000\000\000\
\\008\000\145\000\103\000\144\000\000\000\
\\009\000\148\000\115\000\147\000\000\000\
\\016\000\151\000\125\000\150\000\000\000\
\\007\000\109\000\052\000\154\000\088\000\107\000\089\000\106\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\155\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\156\000\000\000\
\\015\000\158\000\063\000\157\000\000\000\
\\007\000\109\000\061\000\161\000\088\000\160\000\089\000\106\000\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\162\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\018\000\165\000\
\\019\000\164\000\028\000\013\000\029\000\012\000\030\000\163\000\000\000\
\\003\000\166\000\000\000\
\\000\000\
\\001\000\020\000\003\000\176\000\005\000\175\000\008\000\018\000\
\\010\000\017\000\011\000\016\000\013\000\015\000\017\000\174\000\
\\025\000\173\000\026\000\172\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\018\000\183\000\
\\019\000\164\000\028\000\013\000\029\000\012\000\030\000\163\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\020\000\186\000\
\\022\000\185\000\028\000\013\000\029\000\012\000\030\000\184\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\188\000\000\000\
\\001\000\195\000\005\000\019\000\007\000\109\000\008\000\018\000\
\\011\000\194\000\013\000\015\000\044\000\193\000\067\000\192\000\
\\076\000\191\000\077\000\190\000\089\000\189\000\000\000\
\\007\000\109\000\052\000\204\000\088\000\107\000\089\000\106\000\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\205\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\207\000\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\209\000\
\\099\000\208\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\215\000\011\000\016\000\
\\013\000\015\000\000\000\
\\004\000\218\000\005\000\217\000\042\000\216\000\000\000\
\\036\000\223\000\038\000\222\000\039\000\221\000\040\000\008\000\000\000\
\\036\000\225\000\038\000\222\000\039\000\221\000\040\000\008\000\000\000\
\\002\000\227\000\043\000\226\000\000\000\
\\002\000\227\000\043\000\230\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\231\000\000\000\
\\001\000\195\000\005\000\019\000\007\000\109\000\008\000\018\000\
\\011\000\194\000\013\000\015\000\046\000\237\000\048\000\236\000\
\\050\000\235\000\051\000\234\000\067\000\192\000\076\000\191\000\
\\077\000\233\000\089\000\232\000\000\000\
\\033\000\241\000\000\000\
\\015\000\244\000\065\000\243\000\000\000\
\\006\000\248\000\007\000\109\000\055\000\247\000\056\000\246\000\
\\089\000\245\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\250\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\251\000\000\000\
\\007\000\109\000\054\000\253\000\088\000\252\000\089\000\106\000\000\000\
\\000\000\
\\179\000\254\000\000\000\
\\000\000\
\\000\000\
\\006\000\002\001\007\000\109\000\089\000\001\001\182\000\000\001\000\000\
\\177\000\003\001\178\000\076\000\179\000\075\000\000\000\
\\008\000\006\001\194\000\005\001\000\000\
\\009\000\008\001\200\000\007\001\000\000\
\\008\000\010\001\202\000\009\001\000\000\
\\006\000\002\001\007\000\109\000\089\000\001\001\182\000\011\001\000\000\
\\015\000\013\001\190\000\012\001\000\000\
\\006\000\016\001\007\000\109\000\089\000\015\001\188\000\014\001\000\000\
\\000\000\
\\015\000\018\001\180\000\017\001\000\000\
\\006\000\002\001\007\000\109\000\089\000\001\001\182\000\019\001\000\000\
\\004\000\218\000\005\000\217\000\042\000\020\001\000\000\
\\002\000\227\000\043\000\021\001\000\000\
\\002\000\227\000\043\000\022\001\000\000\
\\015\000\018\001\180\000\023\001\000\000\
\\015\000\025\001\192\000\024\001\000\000\
\\006\000\028\001\007\000\109\000\089\000\027\001\184\000\026\001\000\000\
\\037\000\096\000\039\000\009\000\040\000\008\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\011\000\037\000\010\000\039\000\009\000\
\\040\000\008\000\212\000\007\000\213\000\030\001\214\000\029\001\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\032\001\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\011\000\037\000\010\000\039\000\009\000\
\\040\000\008\000\212\000\007\000\213\000\030\001\214\000\033\001\000\000\
\\007\000\040\001\078\000\039\001\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\044\001\000\000\
\\033\000\045\001\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\046\001\000\000\
\\000\000\
\\004\000\048\001\005\000\217\000\008\000\047\001\000\000\
\\000\000\
\\006\000\049\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\051\001\090\000\050\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\054\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\056\001\013\000\114\000\
\\093\000\055\001\000\000\
\\007\000\057\001\000\000\
\\007\000\109\000\088\000\058\001\089\000\106\000\000\000\
\\008\000\059\001\000\000\
\\009\000\060\001\000\000\
\\008\000\061\001\000\000\
\\007\000\109\000\088\000\062\001\089\000\106\000\000\000\
\\015\000\063\001\000\000\
\\007\000\109\000\088\000\064\001\089\000\106\000\000\000\
\\015\000\065\001\000\000\
\\007\000\109\000\088\000\066\001\089\000\106\000\000\000\
\\015\000\067\001\000\000\
\\015\000\068\001\000\000\
\\211\000\069\001\000\000\
\\000\000\
\\133\000\073\001\134\000\072\001\135\000\071\001\000\000\
\\133\000\092\001\134\000\072\001\135\000\071\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\096\001\038\000\222\000\039\000\221\000\040\000\008\000\000\000\
\\008\000\018\000\013\000\139\000\036\000\098\001\038\000\222\000\
\\039\000\221\000\040\000\008\000\097\000\210\000\098\000\209\000\
\\099\000\097\001\000\000\
\\036\000\099\001\038\000\222\000\039\000\221\000\040\000\008\000\000\000\
\\000\000\
\\110\000\100\001\000\000\
\\110\000\103\001\000\000\
\\000\000\
\\100\000\106\001\116\000\105\001\126\000\104\001\000\000\
\\000\000\
\\000\000\
\\008\000\108\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\109\001\005\000\217\000\000\000\
\\000\000\
\\006\000\110\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\074\000\118\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\123\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\044\000\129\001\067\000\192\000\076\000\191\000\
\\077\000\190\000\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\137\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\138\001\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\068\000\141\001\069\000\140\001\
\\076\000\191\000\077\000\139\001\000\000\
\\000\000\
\\003\000\145\001\005\000\144\001\071\000\143\001\072\000\142\001\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\068\000\148\001\069\000\140\001\
\\076\000\191\000\077\000\139\001\000\000\
\\001\000\195\000\005\000\019\000\007\000\051\001\008\000\018\000\
\\011\000\194\000\013\000\015\000\067\000\192\000\070\000\150\001\
\\076\000\191\000\077\000\149\001\090\000\050\001\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\044\000\152\001\067\000\192\000\076\000\191\000\
\\077\000\190\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\153\001\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\070\000\150\001\076\000\191\000\
\\077\000\149\001\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\157\001\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\158\001\000\000\
\\008\000\161\001\100\000\160\001\101\000\159\001\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\209\000\
\\099\000\163\001\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\209\000\
\\099\000\164\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\218\000\005\000\217\000\042\000\165\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\166\001\039\000\221\000\040\000\008\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\218\000\005\000\217\000\042\000\169\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\218\000\005\000\217\000\042\000\170\001\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\046\000\172\001\048\000\236\000\050\000\235\000\
\\051\000\234\000\067\000\192\000\076\000\191\000\077\000\233\000\000\000\
\\000\000\
\\000\000\
\\049\000\174\001\000\000\
\\047\000\176\001\000\000\
\\000\000\
\\033\000\178\001\000\000\
\\033\000\179\001\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\048\000\180\001\050\000\235\000\051\000\234\000\
\\067\000\192\000\076\000\191\000\077\000\233\000\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\032\000\183\001\035\000\182\001\067\000\192\000\
\\076\000\191\000\077\000\181\001\000\000\
\\000\000\
\\000\000\
\\004\000\184\001\005\000\217\000\000\000\
\\006\000\185\001\000\000\
\\041\000\186\001\000\000\
\\041\000\188\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\191\001\000\000\
\\041\000\192\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\194\001\000\000\
\\183\000\195\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\195\000\198\001\000\000\
\\000\000\
\\100\000\106\001\126\000\202\001\201\000\201\001\000\000\
\\000\000\
\\100\000\106\001\116\000\205\001\126\000\104\001\203\000\204\001\000\000\
\\000\000\
\\000\000\
\\004\000\207\001\005\000\217\000\000\000\
\\000\000\
\\006\000\208\001\000\000\
\\189\000\209\001\000\000\
\\000\000\
\\004\000\211\001\005\000\217\000\000\000\
\\000\000\
\\000\000\
\\004\000\218\000\005\000\217\000\042\000\212\001\000\000\
\\004\000\218\000\005\000\217\000\042\000\213\001\000\000\
\\000\000\
\\000\000\
\\004\000\214\001\005\000\217\000\000\000\
\\000\000\
\\006\000\215\001\000\000\
\\185\000\216\001\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\011\000\037\000\010\000\039\000\009\000\
\\040\000\008\000\212\000\007\000\213\000\030\001\214\000\219\001\000\000\
\\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\220\001\013\000\114\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\225\001\083\000\224\001\084\000\223\001\000\000\
\\007\000\040\001\078\000\228\001\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\087\000\227\001\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\032\000\229\001\035\000\182\001\067\000\192\000\
\\076\000\191\000\077\000\181\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\053\000\230\001\000\000\
\\000\000\
\\000\000\
\\007\000\235\001\000\000\
\\006\000\236\001\008\000\047\001\000\000\
\\004\000\237\001\005\000\217\000\000\000\
\\000\000\
\\000\000\
\\006\000\240\001\000\000\
\\006\000\241\001\000\000\
\\000\000\
\\100\000\106\001\116\000\243\001\126\000\104\001\000\000\
\\100\000\106\001\116\000\244\001\126\000\104\001\000\000\
\\006\000\245\001\000\000\
\\004\000\246\001\005\000\217\000\000\000\
\\006\000\247\001\000\000\
\\004\000\248\001\005\000\217\000\000\000\
\\006\000\249\001\000\000\
\\004\000\250\001\005\000\217\000\000\000\
\\004\000\251\001\005\000\217\000\000\000\
\\211\000\069\001\000\000\
\\000\000\
\\000\000\
\\135\000\252\001\000\000\
\\000\000\
\\007\000\109\000\088\000\001\002\089\000\106\000\145\000\000\002\000\000\
\\008\000\003\002\159\000\002\002\000\000\
\\009\000\005\002\165\000\004\002\000\000\
\\008\000\018\000\013\000\007\002\142\000\006\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\011\002\114\000\010\002\000\000\
\\008\000\024\002\171\000\023\002\000\000\
\\007\000\109\000\088\000\001\002\089\000\106\000\145\000\025\002\000\000\
\\015\000\027\002\155\000\026\002\000\000\
\\007\000\109\000\088\000\029\002\089\000\106\000\153\000\028\002\000\000\
\\000\000\
\\015\000\031\002\143\000\030\002\000\000\
\\007\000\109\000\088\000\001\002\089\000\106\000\145\000\032\002\000\000\
\\004\000\218\000\005\000\217\000\042\000\033\002\000\000\
\\002\000\227\000\043\000\034\002\000\000\
\\002\000\227\000\043\000\035\002\000\000\
\\015\000\031\002\143\000\036\002\000\000\
\\015\000\038\002\157\000\037\002\000\000\
\\006\000\042\002\007\000\109\000\089\000\041\002\148\000\040\002\
\\149\000\039\002\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\044\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\045\002\000\000\
\\008\000\047\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\051\002\114\000\010\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\052\002\114\000\010\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\100\000\106\001\126\000\055\002\000\000\
\\008\000\057\002\133\000\056\002\134\000\072\001\135\000\071\001\000\000\
\\100\000\106\001\126\000\059\002\000\000\
\\060\000\060\002\000\000\
\\062\000\063\002\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\065\002\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\066\002\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\067\002\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\019\000\068\002\
\\028\000\013\000\029\000\012\000\030\000\163\000\000\000\
\\000\000\
\\000\000\
\\003\000\176\000\005\000\070\002\025\000\069\002\000\000\
\\027\000\071\002\000\000\
\\007\000\040\001\078\000\073\002\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\074\002\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\075\002\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\021\000\078\002\
\\028\000\013\000\029\000\012\000\030\000\077\002\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\019\000\079\002\
\\028\000\013\000\029\000\012\000\030\000\163\000\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\080\002\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\044\000\081\002\067\000\192\000\076\000\191\000\
\\077\000\190\000\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\046\000\082\002\048\000\236\000\050\000\235\000\
\\051\000\234\000\067\000\192\000\076\000\191\000\077\000\233\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\083\002\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\084\002\000\000\
\\007\000\040\001\078\000\085\002\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\086\002\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\087\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\074\000\091\002\000\000\
\\000\000\
\\000\000\
\\073\000\093\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\100\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\101\002\114\000\010\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\102\002\114\000\010\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\166\001\039\000\221\000\040\000\008\000\000\000\
\\036\000\107\002\038\000\222\000\039\000\221\000\040\000\008\000\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\021\000\108\002\
\\028\000\013\000\029\000\012\000\030\000\077\002\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\109\002\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\110\002\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\048\000\111\002\050\000\235\000\051\000\234\000\
\\067\000\192\000\076\000\191\000\077\000\233\000\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\046\000\112\002\048\000\236\000\050\000\235\000\
\\051\000\234\000\067\000\192\000\076\000\191\000\077\000\233\000\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\048\000\113\002\050\000\235\000\051\000\234\000\
\\067\000\192\000\076\000\191\000\077\000\233\000\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\048\000\114\002\050\000\235\000\051\000\234\000\
\\067\000\192\000\076\000\191\000\077\000\233\000\000\000\
\\047\000\115\002\000\000\
\\000\000\
\\034\000\117\002\000\000\
\\000\000\
\\060\000\119\002\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\052\000\122\002\088\000\107\000\089\000\106\000\000\000\
\\000\000\
\\033\000\123\002\000\000\
\\033\000\125\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\183\000\128\002\000\000\
\\000\000\
\\006\000\002\001\007\000\109\000\089\000\001\001\182\000\129\002\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\134\002\112\000\012\002\113\000\133\002\114\000\132\002\
\\196\000\131\002\000\000\
\\008\000\006\001\194\000\136\002\000\000\
\\000\000\
\\201\000\137\002\000\000\
\\009\000\008\001\200\000\138\002\000\000\
\\000\000\
\\000\000\
\\008\000\010\001\202\000\140\002\000\000\
\\060\000\142\002\191\000\141\002\000\000\
\\189\000\144\002\000\000\
\\000\000\
\\006\000\016\001\007\000\109\000\089\000\015\001\188\000\145\002\000\000\
\\181\000\146\002\000\000\
\\000\000\
\\000\000\
\\193\000\149\002\000\000\
\\000\000\
\\000\000\
\\033\000\153\002\000\000\
\\006\000\028\001\007\000\109\000\089\000\027\001\184\000\154\002\000\000\
\\000\000\
\\000\000\
\\007\000\040\001\080\000\155\002\081\000\036\001\082\000\035\001\
\\086\000\034\001\000\000\
\\007\000\040\001\078\000\156\002\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\040\001\078\000\163\002\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\007\000\109\000\052\000\164\002\088\000\107\000\089\000\106\000\000\000\
\\000\000\
\\007\000\051\001\090\000\165\002\000\000\
\\015\000\166\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\056\001\013\000\114\000\
\\093\000\168\002\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\171\002\114\000\010\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\175\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\180\002\000\000\
\\000\000\
\\008\000\018\000\013\000\007\002\142\000\181\002\000\000\
\\000\000\
\\036\000\184\002\038\000\222\000\039\000\221\000\040\000\008\000\000\000\
\\000\000\
\\006\000\185\002\000\000\
\\000\000\
\\110\000\186\002\000\000\
\\000\000\
\\100\000\106\001\116\000\188\002\126\000\104\001\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\191\002\
\\140\000\190\002\000\000\
\\006\000\117\000\008\000\018\000\012\000\193\002\013\000\114\000\
\\138\000\192\002\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\198\002\000\000\
\\000\000\
\\133\000\202\002\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\204\002\114\000\010\002\
\\133\000\203\002\134\000\072\001\135\000\071\001\000\000\
\\036\000\205\002\038\000\222\000\039\000\221\000\040\000\008\000\000\000\
\\000\000\
\\100\000\106\001\116\000\206\002\126\000\104\001\000\000\
\\000\000\
\\000\000\
\\004\000\207\002\005\000\217\000\000\000\
\\000\000\
\\006\000\208\002\000\000\
\\000\000\
\\004\000\209\002\005\000\217\000\000\000\
\\000\000\
\\000\000\
\\004\000\218\000\005\000\217\000\042\000\210\002\000\000\
\\004\000\218\000\005\000\217\000\042\000\211\002\000\000\
\\000\000\
\\000\000\
\\004\000\212\002\005\000\217\000\000\000\
\\136\000\213\002\000\000\
\\136\000\215\002\000\000\
\\006\000\216\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\209\000\
\\099\000\219\002\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\222\002\
\\099\000\221\002\105\000\220\002\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\222\002\
\\099\000\221\002\105\000\228\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\232\002\112\000\012\002\113\000\231\002\114\000\230\002\
\\118\000\229\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\110\000\237\002\000\000\
\\000\000\
\\015\000\240\002\000\000\
\\007\000\040\001\078\000\241\002\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\000\000\
\\007\000\109\000\061\000\242\002\088\000\160\000\089\000\106\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\074\000\118\001\000\000\
\\000\000\
\\003\000\176\000\005\000\070\002\025\000\245\002\000\000\
\\000\000\
\\027\000\246\002\000\000\
\\027\000\247\002\000\000\
\\000\000\
\\023\000\248\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\045\000\252\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\069\000\254\002\076\000\191\000\
\\077\000\139\001\000\000\
\\000\000\
\\000\000\
\\075\000\255\002\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\001\003\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\002\003\000\000\
\\003\000\145\001\005\000\144\001\071\000\003\003\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\069\000\004\003\076\000\191\000\
\\077\000\139\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\005\003\114\000\010\002\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\209\000\
\\099\000\006\003\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\007\003\114\000\010\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\008\003\114\000\010\002\000\000\
\\000\000\
\\000\000\
\\031\000\011\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\047\000\013\003\000\000\
\\047\000\014\003\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\015\003\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\032\000\016\003\035\000\182\001\067\000\192\000\
\\076\000\191\000\077\000\181\001\000\000\
\\066\000\017\003\000\000\
\\015\000\019\003\000\000\
\\033\000\020\003\000\000\
\\000\000\
\\015\000\022\003\058\000\021\003\000\000\
\\006\000\117\000\008\000\018\000\012\000\023\003\013\000\114\000\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\032\000\024\003\035\000\182\001\067\000\192\000\
\\076\000\191\000\077\000\181\001\000\000\
\\033\000\025\003\000\000\
\\036\000\026\003\038\000\222\000\039\000\221\000\040\000\008\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\195\000\027\003\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\030\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\034\003\112\000\012\002\113\000\033\003\114\000\032\003\
\\204\000\031\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\013\001\190\000\037\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\040\001\078\000\038\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\018\001\180\000\039\003\000\000\
\\000\000\
\\007\000\040\001\078\000\040\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\025\001\192\000\041\003\000\000\
\\033\000\042\003\000\000\
\\015\000\044\003\186\000\043\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\040\001\078\000\045\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\007\000\040\001\078\000\046\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\000\000\
\\007\000\040\001\078\000\048\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\087\000\047\003\000\000\
\\000\000\
\\053\000\049\003\000\000\
\\000\000\
\\000\000\
\\004\000\050\003\005\000\217\000\000\000\
\\007\000\040\001\078\000\051\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\000\000\
\\015\000\052\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\056\003\114\000\010\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\040\001\078\000\060\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\000\000\
\\007\000\040\001\078\000\062\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\191\002\
\\140\000\064\003\000\000\
\\006\000\117\000\008\000\018\000\012\000\193\002\013\000\114\000\
\\138\000\065\003\000\000\
\\000\000\
\\146\000\067\003\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\074\003\112\000\012\002\113\000\073\003\114\000\072\003\
\\161\000\071\003\000\000\
\\166\000\076\003\000\000\
\\008\000\018\000\013\000\080\003\141\000\079\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\084\003\122\000\083\003\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\096\003\114\000\010\002\000\000\
\\008\000\047\001\009\000\097\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\106\003\000\000\
\\154\000\108\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\060\000\112\003\000\000\
\\000\000\
\\007\000\109\000\088\000\001\002\089\000\106\000\145\000\114\003\000\000\
\\000\000\
\\000\000\
\\033\000\116\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\157\001\104\000\121\003\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\123\003\000\000\
\\008\000\161\001\100\000\160\001\101\000\124\003\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\222\002\
\\099\000\126\003\105\000\125\003\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\222\002\
\\099\000\128\003\105\000\127\003\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\222\002\
\\099\000\221\002\105\000\129\003\000\000\
\\000\000\
\\000\000\
\\117\000\130\003\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\134\003\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\135\003\114\000\010\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\136\003\114\000\010\002\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\138\003\114\000\010\002\000\000\
\\007\000\109\000\088\000\139\003\089\000\106\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\140\003\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\141\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\021\000\142\003\
\\028\000\013\000\029\000\012\000\030\000\077\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\044\000\143\003\067\000\192\000\076\000\191\000\
\\077\000\190\000\000\000\
\\000\000\
\\073\000\144\003\000\000\
\\001\000\195\000\005\000\019\000\008\000\018\000\011\000\194\000\
\\013\000\015\000\067\000\192\000\076\000\191\000\077\000\145\003\000\000\
\\073\000\146\003\000\000\
\\073\000\147\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\012\000\030\000\148\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\244\000\065\000\149\003\000\000\
\\005\000\019\000\008\000\018\000\010\000\150\003\011\000\016\000\
\\013\000\015\000\000\000\
\\015\000\022\003\058\000\151\003\000\000\
\\057\000\152\003\000\000\
\\004\000\154\003\005\000\217\000\000\000\
\\000\000\
\\000\000\
\\015\000\022\003\058\000\155\003\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\084\003\122\000\083\003\197\000\157\003\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\134\002\112\000\012\002\113\000\170\003\114\000\132\002\
\\196\000\169\003\000\000\
\\000\000\
\\000\000\
\\203\000\172\003\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\175\003\000\000\
\\007\000\109\000\088\000\176\003\089\000\106\000\000\000\
\\000\000\
\\181\000\177\003\000\000\
\\000\000\
\\193\000\178\003\000\000\
\\000\000\
\\015\000\044\003\186\000\179\003\000\000\
\\185\000\180\003\000\000\
\\004\000\181\003\005\000\217\000\000\000\
\\085\000\182\003\000\000\
\\085\000\184\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\187\003\005\000\217\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\088\000\190\003\089\000\106\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\040\001\078\000\194\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\007\000\109\000\088\000\001\002\089\000\106\000\145\000\195\003\000\000\
\\008\000\018\000\013\000\196\003\000\000\
\\000\000\
\\160\000\197\003\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\201\003\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\205\003\112\000\012\002\113\000\204\003\114\000\203\003\
\\167\000\202\003\000\000\
\\009\000\005\002\165\000\207\003\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\210\003\
\\139\000\209\003\000\000\
\\006\000\117\000\008\000\018\000\012\000\212\003\013\000\114\000\
\\137\000\211\003\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\088\000\214\003\089\000\106\000\000\000\
\\008\000\018\000\013\000\215\003\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\216\003\000\000\
\\133\000\217\003\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\218\003\000\000\
\\007\000\109\000\088\000\219\003\089\000\106\000\000\000\
\\015\000\220\003\000\000\
\\015\000\221\003\000\000\
\\007\000\109\000\088\000\222\003\089\000\106\000\000\000\
\\015\000\223\003\000\000\
\\015\000\224\003\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\225\003\114\000\010\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\226\003\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\227\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\013\002\112\000\012\002\113\000\228\003\114\000\010\002\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\232\003\112\000\012\002\113\000\231\003\114\000\230\003\
\\173\000\229\003\000\000\
\\000\000\
\\015\000\235\003\000\000\
\\000\000\
\\007\000\109\000\088\000\029\002\089\000\106\000\153\000\236\003\000\000\
\\015\000\237\003\000\000\
\\007\000\040\001\078\000\238\003\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\158\000\239\003\000\000\
\\015\000\241\003\000\000\
\\000\000\
\\033\000\242\003\000\000\
\\015\000\244\003\151\000\243\003\000\000\
\\006\000\117\000\008\000\018\000\012\000\245\003\013\000\114\000\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\106\000\249\003\111\000\248\003\112\000\012\002\113\000\247\003\
\\114\000\246\003\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\106\000\252\003\111\000\248\003\112\000\012\002\113\000\251\003\
\\114\000\246\003\000\000\
\\000\000\
\\008\000\145\000\103\000\253\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\148\000\115\000\000\004\000\000\
\\008\000\018\000\013\000\084\003\119\000\001\004\122\000\083\003\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\232\002\112\000\012\002\113\000\014\004\114\000\230\002\
\\118\000\013\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\020\004\
\\099\000\019\004\128\000\018\004\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\026\004\013\000\114\000\000\000\
\\064\000\027\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\066\000\029\004\000\000\
\\057\000\030\004\000\000\
\\000\000\
\\007\000\109\000\054\000\031\004\088\000\252\000\089\000\106\000\000\000\
\\060\000\032\004\000\000\
\\057\000\033\004\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\088\000\034\004\089\000\106\000\000\000\
\\008\000\018\000\013\000\035\004\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\036\004\000\000\
\\133\000\037\004\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\038\004\000\000\
\\007\000\109\000\088\000\039\004\089\000\106\000\000\000\
\\015\000\040\004\000\000\
\\015\000\041\004\000\000\
\\007\000\109\000\088\000\042\004\089\000\106\000\000\000\
\\015\000\043\004\000\000\
\\015\000\044\004\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\134\002\112\000\012\002\113\000\046\004\114\000\132\002\
\\196\000\045\004\000\000\
\\000\000\
\\008\000\018\000\013\000\084\003\122\000\083\003\205\000\047\004\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\034\003\112\000\012\002\113\000\060\004\114\000\032\003\
\\204\000\059\004\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\062\004\013\000\114\000\000\000\
\\000\000\
\\000\000\
\\185\000\063\004\000\000\
\\000\000\
\\060\000\064\004\000\000\
\\000\000\
\\003\000\225\001\083\000\065\004\000\000\
\\000\000\
\\007\000\040\001\078\000\066\004\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\005\000\019\000\008\000\018\000\010\000\067\004\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\070\004\013\000\114\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\146\000\073\004\000\000\
\\000\000\
\\160\000\074\004\000\000\
\\000\000\
\\008\000\003\002\159\000\075\004\000\000\
\\008\000\018\000\013\000\084\003\122\000\083\003\162\000\076\004\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\074\003\112\000\012\002\113\000\089\004\114\000\072\003\
\\161\000\088\004\000\000\
\\000\000\
\\000\000\
\\166\000\091\004\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\094\004\000\000\
\\000\000\
\\008\000\018\000\013\000\080\003\141\000\095\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\098\004\000\000\
\\006\000\117\000\008\000\018\000\012\000\099\004\013\000\114\000\000\000\
\\110\000\100\004\000\000\
\\100\000\106\001\116\000\101\004\126\000\104\001\000\000\
\\000\000\
\\110\000\103\004\000\000\
\\006\000\117\000\008\000\018\000\012\000\104\004\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\105\004\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\106\004\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\107\004\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\108\004\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\109\004\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\172\000\111\004\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\115\004\000\000\
\\007\000\109\000\088\000\116\004\089\000\106\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\117\004\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\005\000\019\000\008\000\018\000\010\000\118\004\011\000\016\000\
\\013\000\015\000\000\000\
\\144\000\119\004\000\000\
\\000\000\
\\015\000\038\002\157\000\121\004\000\000\
\\005\000\019\000\008\000\018\000\010\000\122\004\011\000\016\000\
\\013\000\015\000\000\000\
\\015\000\244\003\151\000\123\004\000\000\
\\150\000\124\004\000\000\
\\004\000\126\004\005\000\217\000\000\000\
\\000\000\
\\104\000\127\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\130\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\106\000\132\004\111\000\248\003\112\000\012\002\113\000\131\004\
\\114\000\246\003\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\222\002\
\\099\000\134\004\105\000\133\004\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\088\000\135\004\089\000\106\000\000\000\
\\008\000\018\000\013\000\136\004\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\137\004\000\000\
\\133\000\138\004\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\139\004\000\000\
\\007\000\109\000\088\000\140\004\089\000\106\000\000\000\
\\015\000\141\004\000\000\
\\015\000\142\004\000\000\
\\007\000\109\000\088\000\143\004\089\000\106\000\000\000\
\\015\000\144\004\000\000\
\\015\000\145\004\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\232\002\112\000\012\002\113\000\147\004\114\000\230\002\
\\118\000\146\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\157\001\127\000\150\004\000\000\
\\001\000\020\000\005\000\019\000\008\000\018\000\010\000\017\000\
\\011\000\016\000\013\000\015\000\017\000\014\000\028\000\013\000\
\\029\000\152\004\000\000\
\\008\000\161\001\100\000\160\001\101\000\153\004\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\020\004\
\\099\000\155\004\128\000\154\004\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\020\004\
\\099\000\157\004\128\000\156\004\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\020\004\
\\099\000\019\004\128\000\158\004\000\000\
\\064\000\159\004\000\000\
\\000\000\
\\015\000\158\000\063\000\160\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\059\000\161\004\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\163\004\013\000\114\000\000\000\
\\110\000\164\004\000\000\
\\100\000\106\001\116\000\165\004\126\000\104\001\000\000\
\\000\000\
\\110\000\167\004\000\000\
\\006\000\117\000\008\000\018\000\012\000\168\004\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\169\004\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\170\004\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\171\004\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\172\004\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\173\004\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\088\000\174\004\089\000\106\000\000\000\
\\008\000\018\000\013\000\175\004\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\176\004\000\000\
\\133\000\177\004\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\178\004\000\000\
\\007\000\109\000\088\000\179\004\089\000\106\000\000\000\
\\015\000\180\004\000\000\
\\015\000\181\004\000\000\
\\007\000\109\000\088\000\182\004\089\000\106\000\000\000\
\\015\000\183\004\000\000\
\\015\000\184\004\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\034\003\112\000\012\002\113\000\186\004\114\000\032\003\
\\204\000\185\004\000\000\
\\191\000\187\004\000\000\
\\000\000\
\\187\000\188\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\191\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\088\000\193\004\089\000\106\000\000\000\
\\008\000\018\000\013\000\194\004\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\195\004\000\000\
\\133\000\196\004\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\197\004\000\000\
\\007\000\109\000\088\000\198\004\089\000\106\000\000\000\
\\015\000\199\004\000\000\
\\015\000\200\004\000\000\
\\007\000\109\000\088\000\201\004\089\000\106\000\000\000\
\\015\000\202\004\000\000\
\\015\000\203\004\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\074\003\112\000\012\002\113\000\205\004\114\000\072\003\
\\161\000\204\004\000\000\
\\000\000\
\\008\000\018\000\013\000\084\003\122\000\083\003\168\000\206\004\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\205\003\112\000\012\002\113\000\219\004\114\000\203\003\
\\167\000\218\004\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\210\003\
\\139\000\221\004\000\000\
\\006\000\117\000\008\000\018\000\012\000\212\003\013\000\114\000\
\\137\000\222\004\000\000\
\\000\000\
\\123\000\223\004\000\000\
\\000\000\
\\000\000\
\\123\000\227\004\000\000\
\\000\000\
\\123\000\229\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\024\002\171\000\235\004\000\000\
\\008\000\018\000\013\000\084\003\122\000\083\003\174\000\236\004\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\232\003\112\000\012\002\113\000\249\004\114\000\230\003\
\\173\000\248\004\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\251\004\013\000\114\000\000\000\
\\156\000\252\004\000\000\
\\144\000\254\004\000\000\
\\000\000\
\\015\000\031\002\143\000\255\004\000\000\
\\000\000\
\\158\000\000\005\000\000\
\\150\000\001\005\000\000\
\\000\000\
\\007\000\109\000\088\000\003\005\089\000\106\000\147\000\002\005\000\000\
\\060\000\004\005\000\000\
\\000\000\
\\008\000\018\000\013\000\084\003\107\000\005\005\122\000\083\003\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\106\000\018\005\111\000\248\003\112\000\012\002\113\000\017\005\
\\114\000\246\003\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\020\005\013\000\114\000\000\000\
\\110\000\021\005\000\000\
\\100\000\106\001\116\000\022\005\126\000\104\001\000\000\
\\000\000\
\\110\000\024\005\000\000\
\\006\000\117\000\008\000\018\000\012\000\025\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\026\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\027\005\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\028\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\029\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\030\005\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\034\005\112\000\012\002\113\000\033\005\114\000\032\005\
\\129\000\031\005\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\034\005\112\000\012\002\113\000\037\005\114\000\032\005\
\\129\000\036\005\000\000\
\\000\000\
\\016\000\151\000\125\000\038\005\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\022\003\058\000\041\005\000\000\
\\123\000\223\004\195\000\043\005\198\000\042\005\000\000\
\\000\000\
\\000\000\
\\123\000\227\004\195\000\043\005\198\000\047\005\000\000\
\\000\000\
\\123\000\229\004\195\000\043\005\198\000\049\005\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\055\005\013\000\114\000\000\000\
\\110\000\056\005\000\000\
\\100\000\106\001\116\000\057\005\126\000\104\001\000\000\
\\000\000\
\\110\000\059\005\000\000\
\\006\000\117\000\008\000\018\000\012\000\060\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\061\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\062\005\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\063\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\064\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\065\005\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\044\003\186\000\066\005\000\000\
\\005\000\019\000\008\000\018\000\010\000\069\005\011\000\016\000\
\\013\000\015\000\094\000\068\005\095\000\067\005\000\000\
\\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\072\005\013\000\114\000\000\000\
\\110\000\073\005\000\000\
\\100\000\106\001\116\000\074\005\126\000\104\001\000\000\
\\000\000\
\\110\000\076\005\000\000\
\\006\000\117\000\008\000\018\000\012\000\077\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\078\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\079\005\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\080\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\081\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\082\005\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\088\000\083\005\089\000\106\000\000\000\
\\008\000\018\000\013\000\084\005\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\085\005\000\000\
\\133\000\086\005\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\087\005\000\000\
\\007\000\109\000\088\000\088\005\089\000\106\000\000\000\
\\015\000\089\005\000\000\
\\015\000\090\005\000\000\
\\007\000\109\000\088\000\091\005\089\000\106\000\000\000\
\\015\000\092\005\000\000\
\\015\000\093\005\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\205\003\112\000\012\002\113\000\095\005\114\000\203\003\
\\167\000\094\005\000\000\
\\000\000\
\\000\000\
\\000\000\
\\122\000\096\005\000\000\
\\008\000\018\000\013\000\097\005\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\100\005\112\000\099\005\124\000\098\005\000\000\
\\000\000\
\\008\000\018\000\013\000\101\005\000\000\
\\000\000\
\\015\000\102\005\000\000\
\\015\000\103\005\000\000\
\\007\000\040\001\078\000\104\005\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\105\005\000\000\
\\015\000\106\005\000\000\
\\000\000\
\\000\000\
\\007\000\109\000\088\000\107\005\089\000\106\000\000\000\
\\008\000\018\000\013\000\108\005\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\109\005\000\000\
\\133\000\110\005\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\111\005\000\000\
\\007\000\109\000\088\000\112\005\089\000\106\000\000\000\
\\015\000\113\005\000\000\
\\015\000\114\005\000\000\
\\007\000\109\000\088\000\115\005\089\000\106\000\000\000\
\\015\000\116\005\000\000\
\\015\000\117\005\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\232\003\112\000\012\002\113\000\119\005\114\000\230\003\
\\173\000\118\005\000\000\
\\156\000\120\005\000\000\
\\000\000\
\\015\000\027\002\155\000\121\005\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\122\005\000\000\
\\152\000\123\005\000\000\
\\000\000\
\\007\000\109\000\088\000\125\005\089\000\106\000\000\000\
\\008\000\018\000\013\000\126\005\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\127\005\000\000\
\\133\000\128\005\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\129\005\000\000\
\\007\000\109\000\088\000\130\005\089\000\106\000\000\000\
\\015\000\131\005\000\000\
\\015\000\132\005\000\000\
\\007\000\109\000\088\000\133\005\089\000\106\000\000\000\
\\015\000\134\005\000\000\
\\015\000\135\005\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\106\000\137\005\111\000\248\003\112\000\012\002\113\000\136\005\
\\114\000\246\003\000\000\
\\117\000\139\005\120\000\138\005\123\000\223\004\000\000\
\\000\000\
\\000\000\
\\117\000\139\005\120\000\143\005\123\000\227\004\000\000\
\\000\000\
\\117\000\139\005\120\000\145\005\123\000\229\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\127\000\151\005\000\000\
\\000\000\
\\000\000\
\\008\000\200\002\100\000\199\002\102\000\154\005\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\034\005\112\000\012\002\113\000\156\005\114\000\032\005\
\\129\000\155\005\000\000\
\\008\000\018\000\013\000\139\000\097\000\210\000\098\000\020\004\
\\099\000\158\005\128\000\157\005\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\006\001\122\000\096\005\194\000\136\002\197\000\159\005\000\000\
\\008\000\018\000\013\000\160\005\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\100\005\112\000\162\005\124\000\098\005\199\000\161\005\000\000\
\\000\000\
\\008\000\018\000\013\000\163\005\000\000\
\\000\000\
\\015\000\164\005\000\000\
\\015\000\165\005\000\000\
\\007\000\040\001\078\000\166\005\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\167\005\000\000\
\\015\000\168\005\000\000\
\\123\000\223\004\203\000\170\005\206\000\169\005\000\000\
\\000\000\
\\000\000\
\\123\000\227\004\203\000\170\005\206\000\174\005\000\000\
\\000\000\
\\123\000\229\004\203\000\170\005\206\000\176\005\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\005\000\019\000\008\000\018\000\010\000\183\005\011\000\016\000\
\\013\000\015\000\096\000\182\005\000\000\
\\000\000\
\\123\000\223\004\160\000\185\005\163\000\184\005\000\000\
\\000\000\
\\000\000\
\\123\000\227\004\160\000\185\005\163\000\189\005\000\000\
\\000\000\
\\123\000\229\004\160\000\185\005\163\000\191\005\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\117\000\008\000\018\000\012\000\197\005\013\000\114\000\000\000\
\\110\000\198\005\000\000\
\\100\000\106\001\116\000\199\005\126\000\104\001\000\000\
\\000\000\
\\110\000\201\005\000\000\
\\006\000\117\000\008\000\018\000\012\000\202\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\203\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\204\005\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\205\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\206\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\207\005\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\208\005\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\123\000\209\005\000\000\
\\000\000\
\\123\000\210\005\000\000\
\\005\000\019\000\008\000\018\000\010\000\211\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\212\005\011\000\016\000\
\\013\000\015\000\000\000\
\\123\000\213\005\000\000\
\\005\000\019\000\008\000\018\000\010\000\214\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\215\005\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\216\005\013\000\114\000\000\000\
\\110\000\217\005\000\000\
\\100\000\106\001\116\000\218\005\126\000\104\001\000\000\
\\000\000\
\\110\000\220\005\000\000\
\\006\000\117\000\008\000\018\000\012\000\221\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\222\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\223\005\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\224\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\225\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\226\005\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\244\003\151\000\228\005\000\000\
\\006\000\117\000\008\000\018\000\012\000\229\005\013\000\114\000\000\000\
\\110\000\230\005\000\000\
\\100\000\106\001\116\000\231\005\126\000\104\001\000\000\
\\000\000\
\\110\000\233\005\000\000\
\\006\000\117\000\008\000\018\000\012\000\234\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\235\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\236\005\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\237\005\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\238\005\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\239\005\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\148\000\115\000\000\004\119\000\240\005\122\000\096\005\000\000\
\\008\000\018\000\013\000\241\005\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\100\005\112\000\243\005\121\000\242\005\124\000\098\005\000\000\
\\000\000\
\\008\000\018\000\013\000\244\005\000\000\
\\000\000\
\\015\000\245\005\000\000\
\\015\000\246\005\000\000\
\\007\000\040\001\078\000\247\005\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\248\005\000\000\
\\015\000\249\005\000\000\
\\000\000\
\\008\000\018\000\013\000\084\003\122\000\083\003\130\000\250\005\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\034\005\112\000\012\002\113\000\007\006\114\000\032\005\
\\129\000\006\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\208\005\195\000\043\005\198\000\009\006\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\123\000\209\005\
\\195\000\043\005\198\000\010\006\000\000\
\\123\000\210\005\195\000\043\005\198\000\011\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\012\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\013\006\011\000\016\000\
\\013\000\015\000\000\000\
\\123\000\213\005\195\000\043\005\198\000\014\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\015\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\016\006\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\008\000\010\001\122\000\096\005\202\000\140\002\205\000\017\006\000\000\
\\008\000\018\000\013\000\018\006\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\100\005\112\000\020\006\124\000\098\005\207\000\019\006\000\000\
\\000\000\
\\008\000\018\000\013\000\021\006\000\000\
\\000\000\
\\015\000\022\006\000\000\
\\015\000\023\006\000\000\
\\007\000\040\001\078\000\024\006\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\025\006\000\000\
\\015\000\026\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\003\002\122\000\096\005\159\000\075\004\162\000\029\006\000\000\
\\008\000\018\000\013\000\030\006\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\100\005\112\000\032\006\124\000\098\005\164\000\031\006\000\000\
\\000\000\
\\008\000\018\000\013\000\033\006\000\000\
\\000\000\
\\015\000\034\006\000\000\
\\015\000\035\006\000\000\
\\007\000\040\001\078\000\036\006\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\037\006\000\000\
\\015\000\038\006\000\000\
\\123\000\223\004\166\000\040\006\169\000\039\006\000\000\
\\000\000\
\\000\000\
\\123\000\227\004\166\000\040\006\169\000\044\006\000\000\
\\000\000\
\\123\000\229\004\166\000\040\006\169\000\046\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\052\006\000\000\
\\123\000\053\006\000\000\
\\000\000\
\\123\000\054\006\000\000\
\\123\000\055\006\000\000\
\\123\000\223\004\172\000\057\006\175\000\056\006\000\000\
\\000\000\
\\000\000\
\\123\000\227\004\172\000\057\006\175\000\061\006\000\000\
\\000\000\
\\123\000\229\004\172\000\057\006\175\000\063\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\033\000\069\006\000\000\
\\000\000\
\\104\000\071\006\108\000\070\006\123\000\223\004\000\000\
\\000\000\
\\000\000\
\\104\000\071\006\108\000\075\006\123\000\227\004\000\000\
\\000\000\
\\104\000\071\006\108\000\077\006\123\000\229\004\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\117\000\139\005\120\000\083\006\123\000\208\005\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\117\000\139\005\
\\120\000\084\006\123\000\209\005\000\000\
\\117\000\139\005\120\000\085\006\123\000\210\005\000\000\
\\005\000\019\000\008\000\018\000\010\000\086\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\087\006\011\000\016\000\
\\013\000\015\000\000\000\
\\117\000\139\005\120\000\088\006\123\000\213\005\000\000\
\\005\000\019\000\008\000\018\000\010\000\089\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\090\006\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\007\000\109\000\088\000\091\006\089\000\106\000\000\000\
\\008\000\018\000\013\000\092\006\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\093\006\000\000\
\\133\000\094\006\134\000\072\001\135\000\071\001\000\000\
\\008\000\018\000\013\000\095\006\000\000\
\\007\000\109\000\088\000\096\006\089\000\106\000\000\000\
\\015\000\097\006\000\000\
\\015\000\098\006\000\000\
\\007\000\109\000\088\000\099\006\089\000\106\000\000\000\
\\015\000\100\006\000\000\
\\015\000\101\006\000\000\
\\000\000\
\\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\034\005\112\000\012\002\113\000\103\006\114\000\032\005\
\\129\000\102\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\052\006\195\000\043\005\198\000\104\006\000\000\
\\123\000\053\006\195\000\043\005\198\000\105\006\000\000\
\\000\000\
\\123\000\054\006\195\000\043\005\198\000\106\006\000\000\
\\123\000\055\006\195\000\043\005\198\000\107\006\000\000\
\\000\000\
\\123\000\208\005\203\000\170\005\206\000\108\006\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\123\000\209\005\
\\203\000\170\005\206\000\109\006\000\000\
\\123\000\210\005\203\000\170\005\206\000\110\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\111\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\112\006\011\000\016\000\
\\013\000\015\000\000\000\
\\123\000\213\005\203\000\170\005\206\000\113\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\114\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\115\006\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\005\000\019\000\008\000\018\000\010\000\183\005\011\000\016\000\
\\013\000\015\000\096\000\116\006\000\000\
\\000\000\
\\123\000\208\005\160\000\185\005\163\000\117\006\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\123\000\209\005\
\\160\000\185\005\163\000\118\006\000\000\
\\123\000\210\005\160\000\185\005\163\000\119\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\120\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\121\006\011\000\016\000\
\\013\000\015\000\000\000\
\\123\000\213\005\160\000\185\005\163\000\122\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\123\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\124\006\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\009\000\005\002\122\000\096\005\165\000\207\003\168\000\125\006\000\000\
\\008\000\018\000\013\000\126\006\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\100\005\112\000\128\006\124\000\098\005\170\000\127\006\000\000\
\\000\000\
\\008\000\018\000\013\000\129\006\000\000\
\\000\000\
\\015\000\130\006\000\000\
\\015\000\131\006\000\000\
\\007\000\040\001\078\000\132\006\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\133\006\000\000\
\\015\000\134\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\024\002\122\000\096\005\171\000\235\004\174\000\135\006\000\000\
\\008\000\018\000\013\000\136\006\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\100\005\112\000\138\006\124\000\098\005\176\000\137\006\000\000\
\\000\000\
\\008\000\018\000\013\000\139\006\000\000\
\\000\000\
\\015\000\140\006\000\000\
\\015\000\141\006\000\000\
\\007\000\040\001\078\000\142\006\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\143\006\000\000\
\\015\000\144\006\000\000\
\\015\000\244\003\151\000\145\006\000\000\
\\000\000\
\\000\000\
\\008\000\145\000\103\000\253\003\107\000\146\006\122\000\096\005\000\000\
\\008\000\018\000\013\000\147\006\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\109\000\149\006\111\000\100\005\112\000\148\006\124\000\098\005\000\000\
\\000\000\
\\008\000\018\000\013\000\150\006\000\000\
\\000\000\
\\015\000\151\006\000\000\
\\015\000\152\006\000\000\
\\007\000\040\001\078\000\153\006\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\154\006\000\000\
\\015\000\155\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\117\000\139\005\120\000\156\006\123\000\052\006\000\000\
\\117\000\139\005\120\000\157\006\123\000\053\006\000\000\
\\000\000\
\\117\000\139\005\120\000\158\006\123\000\054\006\000\000\
\\117\000\139\005\120\000\159\006\123\000\055\006\000\000\
\\006\000\117\000\008\000\018\000\012\000\160\006\013\000\114\000\000\000\
\\110\000\161\006\000\000\
\\100\000\106\001\116\000\162\006\126\000\104\001\000\000\
\\000\000\
\\110\000\164\006\000\000\
\\006\000\117\000\008\000\018\000\012\000\165\006\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\166\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\167\006\011\000\016\000\
\\013\000\015\000\000\000\
\\006\000\117\000\008\000\018\000\012\000\168\006\013\000\114\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\169\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\170\006\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\052\006\203\000\170\005\206\000\171\006\000\000\
\\123\000\053\006\203\000\170\005\206\000\172\006\000\000\
\\000\000\
\\123\000\054\006\203\000\170\005\206\000\173\006\000\000\
\\123\000\055\006\203\000\170\005\206\000\174\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\052\006\160\000\185\005\163\000\175\006\000\000\
\\123\000\053\006\160\000\185\005\163\000\176\006\000\000\
\\000\000\
\\123\000\054\006\160\000\185\005\163\000\177\006\000\000\
\\123\000\055\006\160\000\185\005\163\000\178\006\000\000\
\\000\000\
\\123\000\208\005\166\000\040\006\169\000\179\006\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\123\000\209\005\
\\166\000\040\006\169\000\180\006\000\000\
\\123\000\210\005\166\000\040\006\169\000\181\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\182\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\183\006\011\000\016\000\
\\013\000\015\000\000\000\
\\123\000\213\005\166\000\040\006\169\000\184\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\185\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\186\006\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\123\000\208\005\172\000\057\006\175\000\187\006\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\123\000\209\005\
\\172\000\057\006\175\000\188\006\000\000\
\\123\000\210\005\172\000\057\006\175\000\189\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\190\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\191\006\011\000\016\000\
\\013\000\015\000\000\000\
\\123\000\213\005\172\000\057\006\175\000\192\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\193\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\194\006\011\000\016\000\
\\013\000\015\000\000\000\
\\150\000\195\006\000\000\
\\000\000\
\\104\000\071\006\108\000\196\006\123\000\208\005\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\104\000\071\006\
\\108\000\197\006\123\000\209\005\000\000\
\\000\000\
\\104\000\071\006\108\000\198\006\123\000\210\005\000\000\
\\005\000\019\000\008\000\018\000\010\000\199\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\200\006\011\000\016\000\
\\013\000\015\000\000\000\
\\104\000\071\006\108\000\201\006\123\000\213\005\000\000\
\\005\000\019\000\008\000\018\000\010\000\202\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\203\006\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\223\004\127\000\205\006\131\000\204\006\000\000\
\\000\000\
\\000\000\
\\123\000\227\004\127\000\205\006\131\000\209\006\000\000\
\\000\000\
\\123\000\229\004\127\000\205\006\131\000\211\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\052\006\166\000\040\006\169\000\217\006\000\000\
\\123\000\053\006\166\000\040\006\169\000\218\006\000\000\
\\000\000\
\\123\000\054\006\166\000\040\006\169\000\219\006\000\000\
\\123\000\055\006\166\000\040\006\169\000\220\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\052\006\172\000\057\006\175\000\221\006\000\000\
\\123\000\053\006\172\000\057\006\175\000\222\006\000\000\
\\000\000\
\\123\000\054\006\172\000\057\006\175\000\223\006\000\000\
\\123\000\055\006\172\000\057\006\175\000\224\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\104\000\071\006\108\000\225\006\123\000\052\006\000\000\
\\104\000\071\006\108\000\226\006\123\000\053\006\000\000\
\\000\000\
\\104\000\071\006\108\000\227\006\123\000\054\006\000\000\
\\104\000\071\006\108\000\228\006\123\000\055\006\000\000\
\\000\000\
\\000\000\
\\016\000\151\000\122\000\096\005\125\000\038\005\130\000\229\006\000\000\
\\008\000\018\000\013\000\230\006\000\000\
\\008\000\018\000\009\000\016\002\013\000\015\002\014\000\014\002\
\\111\000\100\005\112\000\232\006\124\000\098\005\132\000\231\006\000\000\
\\000\000\
\\008\000\018\000\013\000\233\006\000\000\
\\000\000\
\\015\000\234\006\000\000\
\\015\000\235\006\000\000\
\\007\000\040\001\078\000\236\006\079\000\038\001\080\000\037\001\
\\081\000\036\001\082\000\035\001\086\000\034\001\000\000\
\\015\000\237\006\000\000\
\\015\000\238\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\208\005\127\000\205\006\131\000\239\006\000\000\
\\000\000\
\\008\000\018\000\013\000\139\000\097\000\195\002\123\000\209\005\
\\127\000\205\006\131\000\240\006\000\000\
\\123\000\210\005\127\000\205\006\131\000\241\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\242\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\243\006\011\000\016\000\
\\013\000\015\000\000\000\
\\123\000\213\005\127\000\205\006\131\000\244\006\000\000\
\\005\000\019\000\008\000\018\000\010\000\245\006\011\000\016\000\
\\013\000\015\000\000\000\
\\005\000\019\000\008\000\018\000\010\000\246\006\011\000\016\000\
\\013\000\015\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\123\000\052\006\127\000\205\006\131\000\247\006\000\000\
\\123\000\053\006\127\000\205\006\131\000\248\006\000\000\
\\000\000\
\\123\000\054\006\127\000\205\006\131\000\249\006\000\000\
\\123\000\055\006\127\000\205\006\131\000\250\006\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 1788
val numrules = 664
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = Source.pos
type arg = Source.desc
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | ETYVAR of unit ->  (string) | TYVAR of unit ->  (string)
 | SYMBOL of unit ->  (string) | ALPHA of unit ->  (string)
 | CHAR of unit ->  (WideChar.char)
 | STRING of unit ->  (WideString.string)
 | REAL of unit ->  (LargeReal.real)
 | WORD of unit ->  (LargeWord.word) | INT of unit ->  (LargeInt.int)
 | NUMERIC of unit ->  (LargeInt.int) | DIGIT of unit ->  (int)
 | ASSERT of unit ->  (int option) | component of unit ->  (Component)
 | program_opt' of unit ->  (Program option)
 | program_opt of unit ->  (Program option)
 | program of unit ->  (Program) | localann1 of unit ->  (LocalAnn)
 | localann of unit ->  (LocalAnn) | ann1 of unit ->  (Ann)
 | ann0 of unit ->  (Ann)
 | sigexp__AND_rea_opt__AND_funitem_opt of unit ->  (SigExp*Rea option*FunItem option)
 | AND_rea_opt__AND_funitem_opt of unit ->  (Rea option*FunItem option)
 | rea__AND_funitem_opt of unit ->  (Rea*FunItem option)
 | sigexp__AND_funitem_opt of unit ->  (SigExp*FunItem option)
 | AND_funitem_opt of unit ->  (FunItem option)
 | funitem of unit ->  (FunItem)
 | AND_sigitem_opt of unit ->  (SigItem option)
 | sigitem of unit ->  (SigItem)
 | sigexp__AND_rea_opt__AND_stritem_opt of unit ->  (SigExp*Rea option*StrItem option)
 | AND_rea_opt__AND_stritem_opt of unit ->  (Rea option*StrItem option)
 | rea__AND_stritem_opt of unit ->  (Rea*StrItem option)
 | sigexp__AND_stritem_opt of unit ->  (SigExp*StrItem option)
 | AND_stritem_opt of unit ->  (StrItem option)
 | stritem of unit ->  (StrItem)
 | AND_exitem_opt of unit ->  (ExItem option)
 | exitem of unit ->  (ExItem)
 | AND_econitem_opt of unit ->  (EconItem option)
 | econitem of unit ->  (EconItem)
 | AND_extitem_opt of unit ->  (ExtItem option)
 | extitem of unit ->  (ExtItem)
 | BAR_conitem_opt of unit ->  (ConItem option)
 | conitem of unit ->  (ConItem)
 | AND_datitem_opt of unit ->  (DatItem option)
 | datitem of unit ->  (DatItem)
 | AND_typitem_opt of unit ->  (TypItem option)
 | typitem of unit ->  (TypItem)
 | AND_valitem_opt of unit ->  (ValItem option)
 | valitem of unit ->  (ValItem) | imp1' of unit ->  (Imp)
 | imp1 of unit ->  (Imp) | imp of unit ->  (Imp)
 | sigexp__AND_rea_opt__AND_fundesc_opt of unit ->  (SigExp*Rea option*FunDesc option)
 | AND_rea_opt__AND_fundesc_opt of unit ->  (Rea option*FunDesc option)
 | rea__AND_fundesc_opt of unit ->  (Rea*FunDesc option)
 | sigexp__AND_fundesc_opt of unit ->  (SigExp*FunDesc option)
 | AND_fundesc_opt of unit ->  (FunDesc option)
 | fundesc of unit ->  (FunDesc)
 | sigexp__AND_rea_opt__AND_sigdesc_opt of unit ->  (SigExp*Rea option*SigDesc option)
 | AND_rea_opt__AND_sigdesc_opt of unit ->  (Rea option*SigDesc option)
 | rea__AND_sigdesc_opt of unit ->  (Rea*SigDesc option)
 | sigexp__AND_sigdesc_opt of unit ->  (SigExp*SigDesc option)
 | AND_sigdesc_opt of unit ->  (SigDesc option)
 | sigdesc of unit ->  (SigDesc)
 | sigexp__AND_rea_opt__AND_strdesc_opt of unit ->  (SigExp*Rea option*StrDesc option)
 | AND_rea_opt__AND_strdesc_opt of unit ->  (Rea option*StrDesc option)
 | rea__AND_strdesc_opt of unit ->  (Rea*StrDesc option)
 | sigexp__AND_strdesc_opt of unit ->  (SigExp*StrDesc option)
 | AND_strdesc_opt of unit ->  (StrDesc option)
 | strdesc of unit ->  (StrDesc)
 | AND_exdesc_opt of unit ->  (ExDesc option)
 | exdesc of unit ->  (ExDesc)
 | AND_econdesc_opt of unit ->  (EconDesc option)
 | econdesc of unit ->  (EconDesc)
 | AND_extdesc_opt of unit ->  (ExtDesc option)
 | extdesc of unit ->  (ExtDesc)
 | BAR_condesc_opt of unit ->  (ConDesc option)
 | condesc of unit ->  (ConDesc)
 | AND_datdesc_opt of unit ->  (DatDesc option)
 | datdesc1 of unit ->  (DatDesc) | datdesc0 of unit ->  (DatDesc)
 | datdesc of unit ->  (DatDesc)
 | AND_typdesc_opt of unit ->  (TypDesc option)
 | typdesc of unit ->  (TypDesc)
 | AND_valdesc_opt of unit ->  (ValDesc option)
 | valdesc of unit ->  (ValDesc)
 | longstrid_EQUALS_list2 of unit ->  (LongStrId list)
 | longstrid_EQUALS_list1 of unit ->  (LongStrId list)
 | longsigid_EQUALS_list2 of unit ->  (LongSigId list)
 | longsigid_EQUALS_list1 of unit ->  (LongSigId list)
 | longtycon_EQUALS_list2 of unit ->  (LongTyCon list)
 | longtycon_EQUALS_list1 of unit ->  (LongTyCon list)
 | WITHTYPE_typdesc_opt of unit ->  (TypDesc option)
 | spec1' of unit ->  (Spec) | spec1 of unit ->  (Spec)
 | spec of unit ->  (Spec)
 | sigexp__AND_rea_opt__AND_funbind_opt of unit ->  (SigExp*Rea option*FunBind option)
 | AND_rea_opt__AND_funbind_opt of unit ->  (Rea option*FunBind option)
 | rea__AND_funbind_opt of unit ->  (Rea*FunBind option)
 | sigexp__AND_funbind_opt of unit ->  (SigExp*FunBind option)
 | strexp__AND_funbind_opt of unit ->  (StrExp*FunBind option)
 | AND_funbind_opt of unit ->  (FunBind option)
 | atstrpat_list1 of unit ->  (StrPat list)
 | funbind of unit ->  (FunBind)
 | sigexp__AND_rea_opt of unit ->  (SigExp*Rea option)
 | AND_rea_opt of unit ->  (Rea option) | rea of unit ->  (Rea)
 | sigexp__AND_rea_opt__AND_sigbind_opt of unit ->  (SigExp*Rea option*SigBind option)
 | AND_rea_opt__AND_sigbind_opt of unit ->  (Rea option*SigBind option)
 | rea__AND_sigbind_opt of unit ->  (Rea*SigBind option)
 | sigexp__AND_sigbind_opt of unit ->  (SigExp*SigBind option)
 | AND_sigbind_opt of unit ->  (SigBind option)
 | atstrpat_list0 of unit ->  (StrPat list)
 | sigbind of unit ->  (SigBind) | sigexp' of unit ->  (SigExp)
 | sigexp of unit ->  (SigExp) | appsigexp of unit ->  (AppSigExp)
 | atsigexp of unit ->  (AtSigExp)
 | COLON_sigexp_opt of unit ->  (SigExp option)
 | sigexp__AND_rea_opt__AND_strbind_opt of unit ->  (SigExp*Rea option*StrBind option)
 | AND_rea_opt__AND_strbind_opt of unit ->  (Rea option*StrBind option)
 | rea__AND_strbind_opt of unit ->  (Rea*StrBind option)
 | sigexp__AND_strbind_opt of unit ->  (SigExp*StrBind option)
 | strexp__AND_strbind_opt of unit ->  (StrExp*StrBind option)
 | AND_strbind_opt of unit ->  (StrBind option)
 | strbind of unit ->  (StrBind) | strpat' of unit ->  (StrPat)
 | strpat of unit ->  (StrPat) | atstrpat of unit ->  (StrPat)
 | strexp of unit ->  (StrExp) | appstrexp of unit ->  (AppStrExp)
 | atstrexp of unit ->  (AtStrExp)
 | longvid_COMMA_list1 of unit ->  (LongVId list)
 | longvidseq1 of unit ->  (LongVIdSeq)
 | longvidseq of unit ->  (LongVIdSeq)
 | longtycon_COMMA_list1 of unit ->  (LongTyCon list)
 | longtyconseq1 of unit ->  (LongTyConSeq)
 | longtyconseq of unit ->  (LongTyConSeq)
 | tyvar_COMMA_list1 of unit ->  (TyVar list)
 | tyvarseq1 of unit ->  (TyVarSeq) | tyvarseq of unit ->  (TyVarSeq)
 | ty_COMMA_list2 of unit ->  (Ty list) | tyseq of unit ->  (TySeq)
 | COMMA_tyrow_opt of unit ->  (TyRow option)
 | tyrow_opt of unit ->  (TyRow option) | tyrow of unit ->  (TyRow)
 | atty of unit ->  (Ty) | consty of unit ->  (Ty)
 | ty_STAR_list of unit ->  (Ty list) | tupty of unit ->  (Ty)
 | ty of unit ->  (Ty) | pat of unit ->  (Pat)
 | infpat of unit ->  (Pat) | AS_pat_opt of unit ->  (Pat option)
 | COLON_ty_opt of unit ->  (Ty option)
 | COMMA_patrow_opt of unit ->  (PatRow option)
 | patrow_opt of unit ->  (PatRow option)
 | patrow of unit ->  (PatRow)
 | pat_COMMA_list2 of unit ->  (Pat list)
 | pat_COMMA_list1 of unit ->  (Pat list)
 | pat_COMMA_list0 of unit ->  (Pat list) | atpat of unit ->  (AtPat)
 | AND_exbind_opt of unit ->  (ExBind option)
 | exbind of unit ->  (ExBind)
 | AND_econbind_opt of unit ->  (EconBind option)
 | econbind of unit ->  (EconBind)
 | AND_extbind_opt of unit ->  (ExtBind option)
 | extbind of unit ->  (ExtBind) | OF_ty_opt of unit ->  (Ty option)
 | BAR_conbind_opt of unit ->  (ConBind option)
 | conbind of unit ->  (ConBind)
 | AND_datbind_opt of unit ->  (DatBind option)
 | datbind1 of unit ->  (DatBind) | datbind0 of unit ->  (DatBind)
 | datbind of unit ->  (DatBind)
 | AND_typbind_opt of unit ->  (TypBind option)
 | typbind of unit ->  (TypBind) | fpat of unit ->  (Fpat)
 | fmrule of unit ->  (Fmrule)
 | BAR_fmatch_opt of unit ->  (Fmatch option)
 | fmatch of unit ->  (Fmatch)
 | AND_fvalbind_opt of unit ->  (FvalBind option)
 | fvalbind of unit ->  (FvalBind)
 | AND_valbind_opt of unit ->  (ValBind option)
 | valbind of unit ->  (ValBind) | d_opt of unit ->  (int option)
 | vid_list1 of unit ->  (VId list)
 | WITHTYPE_typbind_opt of unit ->  (TypBind option)
 | dec1'' of unit ->  (Dec) | dec1' of unit ->  (Dec)
 | dec1 of unit ->  (Dec) | dec' of unit ->  (Dec)
 | dec of unit ->  (Dec) | mrule of unit ->  (Mrule)
 | BAR_match_opt of unit ->  (Match option)
 | BAR_opt of unit ->  (unit) | match of unit ->  (Match)
 | ELSE_exp_opt of unit ->  (Exp option) | exp of unit ->  (Exp)
 | infexp of unit ->  (InfExp) | appexp of unit ->  (AppExp)
 | COMMA_exprow_opt of unit ->  (ExpRow option)
 | exprow_opt of unit ->  (ExpRow option)
 | exprow of unit ->  (ExpRow)
 | localann_IN_opt of unit ->  (LocalAnn option)
 | SEMICOLON_opt of unit ->  (unit)
 | exp_SEMICOLON_list2 of unit ->  (Exp list)
 | exp_SEMICOLON_list1 of unit ->  (Exp list)
 | exp_COMMA_list2 of unit ->  (Exp list)
 | exp_COMMA_list1 of unit ->  (Exp list)
 | exp_COMMA_list0 of unit ->  (Exp list) | atexp of unit ->  (AtExp)
 | LAZY_SPAWN_opt of unit ->  (Lazy) | OP_opt of unit ->  (Op)
 | longsigid of unit ->  (LongSigId)
 | longstrid of unit ->  (LongStrId)
 | longtycon of unit ->  (LongTyCon) | longvid' of unit ->  (LongVId)
 | longvid of unit ->  (LongVId) | sigid of unit ->  (SigId)
 | strid of unit ->  (StrId) | tyvar of unit ->  (TyVar)
 | tycon of unit ->  (TyCon) | vid' of unit ->  (VId)
 | vid of unit ->  (VId) | lab of unit ->  (Lab) | d of unit ->  (int)
 | scon of unit ->  (SCon)
end
type svalue = MlyValue.svalue
type result = Component
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 1) => true | (T 2) => true | (T 3) => true | (T 4) => true | (T 
5) => true | (T 6) => true | (T 7) => true | (T 8) => true | (T 9)
 => true | (T 10) => true | (T 11) => true | (T 12) => true | (T 13)
 => true | (T 14) => true | (T 15) => true | (T 16) => true | (T 17)
 => true | (T 18) => true | (T 19) => true | (T 20) => true | (T 21)
 => true | (T 22) => true | (T 23) => true | (T 24) => true | (T 25)
 => true | (T 26) => true | (T 27) => true | (T 28) => true | (T 29)
 => true | (T 30) => true | (T 31) => true | (T 32) => true | (T 62)
 => true | (T 63) => true | (T 64) => true | (T 65) => true | (T 66)
 => true | (T 67) => true | (T 68) => true | (T 69) => true | (T 70)
 => true | (T 51) => true | (T 55) => true | (T 56) => true | (T 57)
 => true | (T 58) => true | (T 59) => true | (T 52) => true | (T 53)
 => true | (T 54) => true | (T 60) => true | (T 61) => true | (T 72)
 => true | (T 73) => true | (T 74) => true | (T 75) => true | (T 76)
 => true | (T 77) => true | (T 78) => true | (T 79) => true | (T 80)
 => true | (T 81) => true | (T 82) => true | (T 83) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ABSTYPE"
  | (T 2) => "AND"
  | (T 3) => "ANDALSO"
  | (T 4) => "AS"
  | (T 5) => "CASE"
  | (T 6) => "DO"
  | (T 7) => "DATATYPE"
  | (T 8) => "ELSE"
  | (T 9) => "END"
  | (T 10) => "EXCEPTION"
  | (T 11) => "FN"
  | (T 12) => "FUN"
  | (T 13) => "HANDLE"
  | (T 14) => "IF"
  | (T 15) => "IN"
  | (T 16) => "INFIX"
  | (T 17) => "INFIXR"
  | (T 18) => "LET"
  | (T 19) => "LOCAL"
  | (T 20) => "NONFIX"
  | (T 21) => "OF"
  | (T 22) => "OP"
  | (T 23) => "OPEN"
  | (T 24) => "ORELSE"
  | (T 25) => "RAISE"
  | (T 26) => "REC"
  | (T 27) => "THEN"
  | (T 28) => "TYPE"
  | (T 29) => "VAL"
  | (T 30) => "WITH"
  | (T 31) => "WITHTYPE"
  | (T 32) => "WHILE"
  | (T 33) => "LPAR"
  | (T 34) => "RPAR"
  | (T 35) => "LBRACK"
  | (T 36) => "RBRACK"
  | (T 37) => "LBRACE"
  | (T 38) => "RBRACE"
  | (T 39) => "COMMA"
  | (T 40) => "COLON"
  | (T 41) => "SEMICOLON"
  | (T 42) => "DOTS"
  | (T 43) => "UNDERBAR"
  | (T 44) => "BAR"
  | (T 45) => "EQUALS"
  | (T 46) => "DARROW"
  | (T 47) => "ARROW"
  | (T 48) => "HASH"
  | (T 49) => "DOT"
  | (T 50) => "HASHBRACK"
  | (T 51) => "FINALLY"
  | (T 52) => "ASSERT"
  | (T 53) => "FILE"
  | (T 54) => "LINE"
  | (T 55) => "EXTTYPE"
  | (T 56) => "CONSTRUCTOR"
  | (T 57) => "NON"
  | (T 58) => "WITHFUN"
  | (T 59) => "WITHVAL"
  | (T 60) => "LAZY"
  | (T 61) => "SPAWN"
  | (T 62) => "EQTYPE"
  | (T 63) => "FUNCTOR"
  | (T 64) => "INCLUDE"
  | (T 65) => "SHARING"
  | (T 66) => "SIG"
  | (T 67) => "SIGNATURE"
  | (T 68) => "STRUCT"
  | (T 69) => "STRUCTURE"
  | (T 70) => "WHERE"
  | (T 71) => "COLONGREATER"
  | (T 72) => "ANY"
  | (T 73) => "FCT"
  | (T 74) => "PACK"
  | (T 75) => "UNPACK"
  | (T 76) => "IMPORT"
  | (T 77) => "FROM"
  | (T 78) => "COMP"
  | (T 79) => "PRIMITIVE"
  | (T 80) => "OVERLOAD"
  | (T 81) => "EQEQTYPE"
  | (T 82) => "REFTYPE"
  | (T 83) => "PERVASIVE"
  | (T 84) => "ZERO"
  | (T 85) => "DIGIT"
  | (T 86) => "NUMERIC"
  | (T 87) => "INT"
  | (T 88) => "WORD"
  | (T 89) => "REAL"
  | (T 90) => "STRING"
  | (T 91) => "CHAR"
  | (T 92) => "ALPHA"
  | (T 93) => "SYMBOL"
  | (T 94) => "STAR"
  | (T 95) => "TYVAR"
  | (T 96) => "ETYVAR"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 94) $$ (T 84) $$ (T 83) $$ (T 82) $$ (T 81) $$ (T 80) $$ (T 79)
 $$ (T 78) $$ (T 77) $$ (T 76) $$ (T 75) $$ (T 74) $$ (T 73) $$ (T 72)
 $$ (T 71) $$ (T 70) $$ (T 69) $$ (T 68) $$ (T 67) $$ (T 66) $$ (T 65)
 $$ (T 64) $$ (T 63) $$ (T 62) $$ (T 61) $$ (T 60) $$ (T 59) $$ (T 58)
 $$ (T 57) $$ (T 56) $$ (T 55) $$ (T 54) $$ (T 53) $$ (T 51) $$ (T 50)
 $$ (T 49) $$ (T 48) $$ (T 47) $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43)
 $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36)
 $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29)
 $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22)
 $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15)
 $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8)
 $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 1) $$ (T 
0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (sourceDesc):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( _, (ZEROleft as ZERO1left), (ZEROright as ZERO1right
))) :: rest671)) => let val  result = MlyValue.scon (fn _ => (
 SCon(I(ZEROleft,ZEROright),
				SCon.INT(LargeInt.fromInt 0)) ))
 in ( LrTable.NT 0, ( result, ZERO1left, ZERO1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.DIGIT DIGIT1, (DIGITleft as DIGIT1left), (
DIGITright as DIGIT1right))) :: rest671)) => let val  result = 
MlyValue.scon (fn _ => let val  (DIGIT as DIGIT1) = DIGIT1 ()
 in (
 SCon(I(DIGITleft,DIGITright),
				SCon.INT(LargeInt.fromInt DIGIT)) )

end)
 in ( LrTable.NT 0, ( result, DIGIT1left, DIGIT1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.NUMERIC NUMERIC1, (NUMERICleft as 
NUMERIC1left), (NUMERICright as NUMERIC1right))) :: rest671)) => let
 val  result = MlyValue.scon (fn _ => let val  (NUMERIC as NUMERIC1) =
 NUMERIC1 ()
 in ( SCon(I(NUMERICleft,NUMERICright),
							SCon.INT NUMERIC) )
end
)
 in ( LrTable.NT 0, ( result, NUMERIC1left, NUMERIC1right), rest671)

end
|  ( 3, ( ( _, ( MlyValue.INT INT1, (INTleft as INT1left), (INTright
 as INT1right))) :: rest671)) => let val  result = MlyValue.scon (fn _
 => let val  (INT as INT1) = INT1 ()
 in ( SCon(I(INTleft,INTright),     SCon.INT INT) )
end)
 in ( LrTable.NT 0, ( result, INT1left, INT1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.WORD WORD1, (WORDleft as WORD1left), (
WORDright as WORD1right))) :: rest671)) => let val  result = 
MlyValue.scon (fn _ => let val  (WORD as WORD1) = WORD1 ()
 in ( SCon(I(WORDleft,WORDright),   SCon.WORD WORD) )
end)
 in ( LrTable.NT 0, ( result, WORD1left, WORD1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left),
 (STRINGright as STRING1right))) :: rest671)) => let val  result = 
MlyValue.scon (fn _ => let val  (STRING as STRING1) = STRING1 ()
 in ( SCon(I(STRINGleft,STRINGright),
							SCon.STRING STRING))
end)
 in ( LrTable.NT 0, ( result, STRING1left, STRING1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.CHAR CHAR1, (CHARleft as CHAR1left), (
CHARright as CHAR1right))) :: rest671)) => let val  result = 
MlyValue.scon (fn _ => let val  (CHAR as CHAR1) = CHAR1 ()
 in ( SCon(I(CHARleft,CHARright),   SCon.CHAR CHAR) )
end)
 in ( LrTable.NT 0, ( result, CHAR1left, CHAR1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.REAL REAL1, (REALleft as REAL1left), (
REALright as REAL1right))) :: rest671)) => let val  result = 
MlyValue.scon (fn _ => let val  (REAL as REAL1) = REAL1 ()
 in ( SCon(I(REALleft,REALright),   SCon.REAL REAL) )
end)
 in ( LrTable.NT 0, ( result, REAL1left, REAL1right), rest671)
end
|  ( 8, ( ( _, ( _, ZERO1left, ZERO1right)) :: rest671)) => let val  
result = MlyValue.d (fn _ => ( 0 ))
 in ( LrTable.NT 1, ( result, ZERO1left, ZERO1right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.DIGIT DIGIT1, DIGIT1left, DIGIT1right)) :: 
rest671)) => let val  result = MlyValue.d (fn _ => let val  (DIGIT as 
DIGIT1) = DIGIT1 ()
 in ( DIGIT )
end)
 in ( LrTable.NT 1, ( result, DIGIT1left, DIGIT1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.ALPHA ALPHA1, (ALPHAleft as ALPHA1left), (
ALPHAright as ALPHA1right))) :: rest671)) => let val  result = 
MlyValue.lab (fn _ => let val  (ALPHA as ALPHA1) = ALPHA1 ()
 in ( Lab(I(ALPHAleft,ALPHAright),   Lab.fromString ALPHA) )
end)
 in ( LrTable.NT 2, ( result, ALPHA1left, ALPHA1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.SYMBOL SYMBOL1, (SYMBOLleft as SYMBOL1left)
, (SYMBOLright as SYMBOL1right))) :: rest671)) => let val  result = 
MlyValue.lab (fn _ => let val  (SYMBOL as SYMBOL1) = SYMBOL1 ()
 in ( Lab(I(SYMBOLleft,SYMBOLright), Lab.fromString SYMBOL))
end)
 in ( LrTable.NT 2, ( result, SYMBOL1left, SYMBOL1right), rest671)
end
|  ( 12, ( ( _, ( _, (STARleft as STAR1left), (STARright as STAR1right
))) :: rest671)) => let val  result = MlyValue.lab (fn _ => (
 Lab(I(STARleft,STARright),     Lab.fromString "*") ))
 in ( LrTable.NT 2, ( result, STAR1left, STAR1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.DIGIT DIGIT1, (DIGITleft as DIGIT1left), (
DIGITright as DIGIT1right))) :: rest671)) => let val  result = 
MlyValue.lab (fn _ => let val  (DIGIT as DIGIT1) = DIGIT1 ()
 in ( Lab(I(DIGITleft,DIGITright),   Lab.fromInt DIGIT) )
end)
 in ( LrTable.NT 2, ( result, DIGIT1left, DIGIT1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.NUMERIC NUMERIC1, (NUMERICleft as 
NUMERIC1left), (NUMERICright as NUMERIC1right))) :: rest671)) => let
 val  result = MlyValue.lab (fn _ => let val  (NUMERIC as NUMERIC1) = 
NUMERIC1 ()
 in ( Lab(I(NUMERICleft,NUMERICright),
						Lab.fromLargeInt NUMERIC)
)
end)
 in ( LrTable.NT 2, ( result, NUMERIC1left, NUMERIC1right), rest671)

end
|  ( 15, ( ( _, ( MlyValue.vid' vid'1, vid'1left, vid'1right)) :: 
rest671)) => let val  result = MlyValue.vid (fn _ => let val  (vid'
 as vid'1) = vid'1 ()
 in ( vid' )
end)
 in ( LrTable.NT 3, ( result, vid'1left, vid'1right), rest671)
end
|  ( 16, ( ( _, ( _, (EQUALSleft as EQUALS1left), (EQUALSright as 
EQUALS1right))) :: rest671)) => let val  result = MlyValue.vid (fn _
 => ( VId(I(EQUALSleft,EQUALSright), VId.fromString "=") ))
 in ( LrTable.NT 3, ( result, EQUALS1left, EQUALS1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.ALPHA ALPHA1, (ALPHAleft as ALPHA1left), (
ALPHAright as ALPHA1right))) :: rest671)) => let val  result = 
MlyValue.vid' (fn _ => let val  (ALPHA as ALPHA1) = ALPHA1 ()
 in ( VId(I(ALPHAleft,ALPHAright),   VId.fromString ALPHA) )
end)
 in ( LrTable.NT 4, ( result, ALPHA1left, ALPHA1right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.SYMBOL SYMBOL1, (SYMBOLleft as SYMBOL1left)
, (SYMBOLright as SYMBOL1right))) :: rest671)) => let val  result = 
MlyValue.vid' (fn _ => let val  (SYMBOL as SYMBOL1) = SYMBOL1 ()
 in ( VId(I(SYMBOLleft,SYMBOLright), VId.fromString SYMBOL))
end)
 in ( LrTable.NT 4, ( result, SYMBOL1left, SYMBOL1right), rest671)
end
|  ( 19, ( ( _, ( _, (STARleft as STAR1left), (STARright as STAR1right
))) :: rest671)) => let val  result = MlyValue.vid' (fn _ => (
 VId(I(STARleft,STARright),     VId.fromString "*") ))
 in ( LrTable.NT 4, ( result, STAR1left, STAR1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.ALPHA ALPHA1, (ALPHAleft as ALPHA1left), (
ALPHAright as ALPHA1right))) :: rest671)) => let val  result = 
MlyValue.tycon (fn _ => let val  (ALPHA as ALPHA1) = ALPHA1 ()
 in ( TyCon(I(ALPHAleft,ALPHAright),
				TyCon.fromString ALPHA) )
end
)
 in ( LrTable.NT 5, ( result, ALPHA1left, ALPHA1right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.SYMBOL SYMBOL1, (SYMBOLleft as SYMBOL1left)
, (SYMBOLright as SYMBOL1right))) :: rest671)) => let val  result = 
MlyValue.tycon (fn _ => let val  (SYMBOL as SYMBOL1) = SYMBOL1 ()
 in ( TyCon(I(SYMBOLleft,SYMBOLright),
				TyCon.fromString SYMBOL) )

end)
 in ( LrTable.NT 5, ( result, SYMBOL1left, SYMBOL1right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.TYVAR TYVAR1, (TYVARleft as TYVAR1left), (
TYVARright as TYVAR1right))) :: rest671)) => let val  result = 
MlyValue.tyvar (fn _ => let val  (TYVAR as TYVAR1) = TYVAR1 ()
 in ( TyVar(I(TYVARleft,TYVARright),
				TyVar.fromString TYVAR) )
end
)
 in ( LrTable.NT 6, ( result, TYVAR1left, TYVAR1right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.ALPHA ALPHA1, (ALPHAleft as ALPHA1left), (
ALPHAright as ALPHA1right))) :: rest671)) => let val  result = 
MlyValue.strid (fn _ => let val  (ALPHA as ALPHA1) = ALPHA1 ()
 in ( StrId(I(ALPHAleft,ALPHAright),
				StrId.fromString ALPHA) )
end
)
 in ( LrTable.NT 7, ( result, ALPHA1left, ALPHA1right), rest671)
end
|  ( 24, ( ( _, ( _, (PERVASIVEleft as PERVASIVE1left), (
PERVASIVEright as PERVASIVE1right))) :: rest671)) => let val  result =
 MlyValue.strid (fn _ => (
 StrId(I(PERVASIVEleft,PERVASIVEright),
				StrId.fromString "__pervasive") 
))
 in ( LrTable.NT 7, ( result, PERVASIVE1left, PERVASIVE1right), 
rest671)
end
|  ( 25, ( ( _, ( MlyValue.ALPHA ALPHA1, (ALPHAleft as ALPHA1left), (
ALPHAright as ALPHA1right))) :: rest671)) => let val  result = 
MlyValue.sigid (fn _ => let val  (ALPHA as ALPHA1) = ALPHA1 ()
 in ( SigId(I(ALPHAleft,ALPHAright),
				SigId.fromString ALPHA) )
end
)
 in ( LrTable.NT 8, ( result, ALPHA1left, ALPHA1right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.longvid' longvid'1, longvid'1left, 
longvid'1right)) :: rest671)) => let val  result = MlyValue.longvid
 (fn _ => let val  (longvid' as longvid'1) = longvid'1 ()
 in ( longvid' )
end)
 in ( LrTable.NT 9, ( result, longvid'1left, longvid'1right), rest671)

end
|  ( 27, ( ( _, ( _, (EQUALSleft as EQUALS1left), (EQUALSright as 
EQUALS1right))) :: rest671)) => let val  result = MlyValue.longvid (fn
 _ => (
 SHORTLong(I(EQUALSleft,EQUALSright),
					    VId(I(EQUALSleft,EQUALSright),
						VId.fromString "=")) 
))
 in ( LrTable.NT 9, ( result, EQUALS1left, EQUALS1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.vid' vid'1, (vid'left as vid'1left), (
vid'right as vid'1right))) :: rest671)) => let val  result = 
MlyValue.longvid' (fn _ => let val  (vid' as vid'1) = vid'1 ()
 in ( SHORTLong(I(vid'left,vid'right), vid') )
end)
 in ( LrTable.NT 10, ( result, vid'1left, vid'1right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.vid vid1, _, (vidright as vid1right))) :: _
 :: ( _, ( MlyValue.longstrid longstrid1, (longstridleft as 
longstrid1left), _)) :: rest671)) => let val  result = 
MlyValue.longvid' (fn _ => let val  (longstrid as longstrid1) = 
longstrid1 ()
 val  (vid as vid1) = vid1 ()
 in ( DOTLong(I(longstridleft,vidright),
					  longstrid, vid) )
end)
 in ( LrTable.NT 10, ( result, longstrid1left, vid1right), rest671)

end
|  ( 30, ( ( _, ( MlyValue.tycon tycon1, (tyconleft as tycon1left), (
tyconright as tycon1right))) :: rest671)) => let val  result = 
MlyValue.longtycon (fn _ => let val  (tycon as tycon1) = tycon1 ()
 in ( SHORTLong(I(tyconleft,tyconright), tycon) )
end)
 in ( LrTable.NT 11, ( result, tycon1left, tycon1right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.tycon tycon1, _, (tyconright as tycon1right
))) :: _ :: ( _, ( MlyValue.longstrid longstrid1, (longstridleft as 
longstrid1left), _)) :: rest671)) => let val  result = 
MlyValue.longtycon (fn _ => let val  (longstrid as longstrid1) = 
longstrid1 ()
 val  (tycon as tycon1) = tycon1 ()
 in ( DOTLong(I(longstridleft,tyconright),
					  longstrid, tycon) )

end)
 in ( LrTable.NT 11, ( result, longstrid1left, tycon1right), rest671)

end
|  ( 32, ( ( _, ( MlyValue.strid strid1, (stridleft as strid1left), (
stridright as strid1right))) :: rest671)) => let val  result = 
MlyValue.longstrid (fn _ => let val  (strid as strid1) = strid1 ()
 in ( SHORTLong(I(stridleft,stridright), strid) )
end)
 in ( LrTable.NT 12, ( result, strid1left, strid1right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.strid strid1, _, (stridright as strid1right
))) :: _ :: ( _, ( MlyValue.longstrid longstrid1, (longstridleft as 
longstrid1left), _)) :: rest671)) => let val  result = 
MlyValue.longstrid (fn _ => let val  (longstrid as longstrid1) = 
longstrid1 ()
 val  (strid as strid1) = strid1 ()
 in ( DOTLong(I(longstridleft,stridright),
					  longstrid, strid) )

end)
 in ( LrTable.NT 12, ( result, longstrid1left, strid1right), rest671)

end
|  ( 34, ( ( _, ( MlyValue.sigid sigid1, (sigidleft as sigid1left), (
sigidright as sigid1right))) :: rest671)) => let val  result = 
MlyValue.longsigid (fn _ => let val  (sigid as sigid1) = sigid1 ()
 in ( SHORTLong(I(sigidleft,sigidright), sigid) )
end)
 in ( LrTable.NT 13, ( result, sigid1left, sigid1right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.sigid sigid1, _, (sigidright as sigid1right
))) :: _ :: ( _, ( MlyValue.longstrid longstrid1, (longstridleft as 
longstrid1left), _)) :: rest671)) => let val  result = 
MlyValue.longsigid (fn _ => let val  (longstrid as longstrid1) = 
longstrid1 ()
 val  (sigid as sigid1) = sigid1 ()
 in ( DOTLong(I(longstridleft,sigidright),
					  longstrid, sigid) )

end)
 in ( LrTable.NT 13, ( result, longstrid1left, sigid1right), rest671)

end
|  ( 36, ( ( _, ( _, OP1left, OP1right)) :: rest671)) => let val  
result = MlyValue.OP_opt (fn _ => ( WITHOp ))
 in ( LrTable.NT 14, ( result, OP1left, OP1right), rest671)
end
|  ( 37, ( rest671)) => let val  result = MlyValue.OP_opt (fn _ => (
 SANSOp ))
 in ( LrTable.NT 14, ( result, defaultPos, defaultPos), rest671)
end
|  ( 38, ( ( _, ( _, LAZY1left, LAZY1right)) :: rest671)) => let val  
result = MlyValue.LAZY_SPAWN_opt (fn _ => ( WITHLazy ))
 in ( LrTable.NT 15, ( result, LAZY1left, LAZY1right), rest671)
end
|  ( 39, ( ( _, ( _, SPAWN1left, SPAWN1right)) :: rest671)) => let
 val  result = MlyValue.LAZY_SPAWN_opt (fn _ => ( WITHSpawn ))
 in ( LrTable.NT 15, ( result, SPAWN1left, SPAWN1right), rest671)
end
|  ( 40, ( rest671)) => let val  result = MlyValue.LAZY_SPAWN_opt (fn
 _ => ( SANSLazy ))
 in ( LrTable.NT 15, ( result, defaultPos, defaultPos), rest671)
end
|  ( 41, ( ( _, ( MlyValue.scon scon1, (sconleft as scon1left), (
sconright as scon1right))) :: rest671)) => let val  result = 
MlyValue.atexp (fn _ => let val  (scon as scon1) = scon1 ()
 in ( SCONAtExp(I(sconleft,sconright), scon) )
end)
 in ( LrTable.NT 16, ( result, scon1left, scon1right), rest671)
end
|  ( 42, ( ( _, ( _, (FILEleft as FILE1left), (FILEright as FILE1right
))) :: rest671)) => let val  result = MlyValue.atexp (fn _ => (
 FILEAtExp(I(FILEleft,FILEright), sourceDesc) ))
 in ( LrTable.NT 16, ( result, FILE1left, FILE1right), rest671)
end
|  ( 43, ( ( _, ( _, (LINEleft as LINE1left), (LINEright as LINE1right
))) :: rest671)) => let val  result = MlyValue.atexp (fn _ => (
 LINEAtExp(I(LINEleft,LINEright), sourceDesc) ))
 in ( LrTable.NT 16, ( result, LINE1left, LINE1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.longvid longvid1, (longvidleft as 
longvid1left), (longvidright as longvid1right))) :: rest671)) => let
 val  result = MlyValue.atexp (fn _ => let val  (longvid as longvid1)
 = longvid1 ()
 in (
 LONGVIDAtExp(I(longvidleft,longvidright),
				       SANSOp, longvid) 
)
end)
 in ( LrTable.NT 16, ( result, longvid1left, longvid1right), rest671)

end
|  ( 45, ( ( _, ( MlyValue.longvid longvid1, _, (longvidright as 
longvid1right))) :: ( _, ( _, (OPleft as OP1left), _)) :: rest671)) =>
 let val  result = MlyValue.atexp (fn _ => let val  (longvid as 
longvid1) = longvid1 ()
 in (
 LONGVIDAtExp(I(OPleft,longvidright),
				       WITHOp, longvid) )

end)
 in ( LrTable.NT 16, ( result, OP1left, longvid1right), rest671)
end
|  ( 46, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.exprow_opt exprow_opt1, _, _)) :: ( _, ( _, (LBRACEleft as 
LBRACE1left), _)) :: rest671)) => let val  result = MlyValue.atexp (fn
 _ => let val  (exprow_opt as exprow_opt1) = exprow_opt1 ()
 in ( RECORDAtExp(I(LBRACEleft,RBRACEright), exprow_opt) )
end)
 in ( LrTable.NT 16, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 47, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.exprow exprow1, _, _)) :: _ :: ( _, ( MlyValue.atexp atexp1,
 _, _)) :: ( _, ( _, (LBRACEleft as LBRACE1left), _)) :: rest671)) =>
 let val  result = MlyValue.atexp (fn _ => let val  (atexp as atexp1)
 = atexp1 ()
 val  (exprow as exprow1) = exprow1 ()
 in ( UPDATEAtExp(I(LBRACEleft,RBRACEright), atexp, exprow))
end)
 in ( LrTable.NT 16, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 48, ( ( _, ( MlyValue.lab lab1, _, (labright as lab1right))) :: (
 _, ( _, (HASHleft as HASH1left), _)) :: rest671)) => let val  result
 = MlyValue.atexp (fn _ => let val  (lab as lab1) = lab1 ()
 in ( HASHAtExp(I(HASHleft,labright), lab) )
end)
 in ( LrTable.NT 16, ( result, HASH1left, lab1right), rest671)
end
|  ( 49, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( _, (
LPARleft as LPAR1left), _)) :: rest671)) => let val  result = 
MlyValue.atexp (fn _ => ( UNITAtExp(I(LPARleft,RPARright)) ))
 in ( LrTable.NT 16, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 50, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.exp_COMMA_list2 exp_COMMA_list21, _, _)) :: ( _, ( _, (
LPARleft as LPAR1left), _)) :: rest671)) => let val  result = 
MlyValue.atexp (fn _ => let val  (exp_COMMA_list2 as exp_COMMA_list21)
 = exp_COMMA_list21 ()
 in ( TUPLEAtExp(I(LPARleft,RPARright), exp_COMMA_list2) )
end)
 in ( LrTable.NT 16, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 51, ( ( _, ( _, _, (RBRACKright as RBRACK1right))) :: ( _, ( 
MlyValue.exp_COMMA_list0 exp_COMMA_list01, _, _)) :: ( _, ( _, (
LBRACKleft as LBRACK1left), _)) :: rest671)) => let val  result = 
MlyValue.atexp (fn _ => let val  (exp_COMMA_list0 as exp_COMMA_list01)
 = exp_COMMA_list01 ()
 in ( LISTAtExp(I(LBRACKleft,RBRACKright),
				    exp_COMMA_list0 ))

end)
 in ( LrTable.NT 16, ( result, LBRACK1left, RBRACK1right), rest671)

end
|  ( 52, ( ( _, ( _, _, (RBRACKright as RBRACK1right))) :: ( _, ( 
MlyValue.exp_COMMA_list0 exp_COMMA_list01, _, _)) :: ( _, ( _, (
HASHBRACKleft as HASHBRACK1left), _)) :: rest671)) => let val  result
 = MlyValue.atexp (fn _ => let val  (exp_COMMA_list0 as 
exp_COMMA_list01) = exp_COMMA_list01 ()
 in (
 VECTORAtExp(I(HASHBRACKleft,RBRACKright),
				    exp_COMMA_list0 ))

end)
 in ( LrTable.NT 16, ( result, HASHBRACK1left, RBRACK1right), rest671)

end
|  ( 53, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.exp_SEMICOLON_list2 exp_SEMICOLON_list21, _, _)) :: ( _, ( _,
 (LPARleft as LPAR1left), _)) :: rest671)) => let val  result = 
MlyValue.atexp (fn _ => let val  (exp_SEMICOLON_list2 as 
exp_SEMICOLON_list21) = exp_SEMICOLON_list21 ()
 in ( SEQAtExp(I(LPARleft,RPARright), exp_SEMICOLON_list2) )
end)
 in ( LrTable.NT 16, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 54, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.exp_SEMICOLON_list1 exp_SEMICOLON_list11, _, _)) :: _ :: ( _,
 ( MlyValue.dec dec1, _, _)) :: ( _, ( _, (LETleft as LET1left), _))
 :: rest671)) => let val  result = MlyValue.atexp (fn _ => let val  (
dec as dec1) = dec1 ()
 val  (exp_SEMICOLON_list1 as exp_SEMICOLON_list11) = 
exp_SEMICOLON_list11 ()
 in ( LETAtExp(I(LETleft,ENDright),
				   dec, exp_SEMICOLON_list1) )

end)
 in ( LrTable.NT 16, ( result, LET1left, END1right), rest671)
end
|  ( 55, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.dec dec1, _, _)) :: _ :: ( _, ( MlyValue.spec spec1, _, _))
 :: ( _, ( MlyValue.localann_IN_opt localann_IN_opt1, _, _)) :: ( _, (
 _, (COMPleft as COMP1left), _)) :: rest671)) => let val  result = 
MlyValue.atexp (fn _ => let val  (localann_IN_opt as localann_IN_opt1)
 = localann_IN_opt1 ()
 val  (spec as spec1) = spec1 ()
 val  (dec as dec1) = dec1 ()
 in (
 COMPAtExp(I(COMPleft,ENDright),
				    localann_IN_opt, spec, dec) )

end)
 in ( LrTable.NT 16, ( result, COMP1left, END1right), rest671)
end
|  ( 56, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.SEMICOLON_opt SEMICOLON_opt1, _, _)) :: ( _, ( MlyValue.exp 
exp1, _, _)) :: ( _, ( _, (LPARleft as LPAR1left), _)) :: rest671)) =>
 let val  result = MlyValue.atexp (fn _ => let val  (exp as exp1) = 
exp1 ()
 val  SEMICOLON_opt1 = SEMICOLON_opt1 ()
 in ( PARAtExp(I(LPARleft,RPARright), exp) )
end)
 in ( LrTable.NT 16, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.exp_COMMA_list1 exp_COMMA_list11, 
exp_COMMA_list11left, exp_COMMA_list11right)) :: rest671)) => let val 
 result = MlyValue.exp_COMMA_list0 (fn _ => let val  (exp_COMMA_list1
 as exp_COMMA_list11) = exp_COMMA_list11 ()
 in ( exp_COMMA_list1 )
end)
 in ( LrTable.NT 17, ( result, exp_COMMA_list11left, 
exp_COMMA_list11right), rest671)
end
|  ( 58, ( rest671)) => let val  result = MlyValue.exp_COMMA_list0 (fn
 _ => ( [] ))
 in ( LrTable.NT 17, ( result, defaultPos, defaultPos), rest671)
end
|  ( 59, ( ( _, ( MlyValue.exp_COMMA_list1 exp_COMMA_list11, _, 
exp_COMMA_list11right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)
) :: rest671)) => let val  result = MlyValue.exp_COMMA_list1 (fn _ =>
 let val  (exp as exp1) = exp1 ()
 val  (exp_COMMA_list1 as exp_COMMA_list11) = exp_COMMA_list11 ()
 in ( exp::exp_COMMA_list1 )
end)
 in ( LrTable.NT 18, ( result, exp1left, exp_COMMA_list11right), 
rest671)
end
|  ( 60, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.exp_COMMA_list1 (fn _ => let val  (exp
 as exp1) = exp1 ()
 in ( exp::[] )
end)
 in ( LrTable.NT 18, ( result, exp1left, exp1right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.exp_COMMA_list1 exp_COMMA_list11, _, 
exp_COMMA_list11right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)
) :: rest671)) => let val  result = MlyValue.exp_COMMA_list2 (fn _ =>
 let val  (exp as exp1) = exp1 ()
 val  (exp_COMMA_list1 as exp_COMMA_list11) = exp_COMMA_list11 ()
 in ( exp::exp_COMMA_list1 )
end)
 in ( LrTable.NT 19, ( result, exp1left, exp_COMMA_list11right), 
rest671)
end
|  ( 62, ( ( _, ( MlyValue.exp_SEMICOLON_list1 exp_SEMICOLON_list11, _
, exp_SEMICOLON_list11right)) :: _ :: ( _, ( MlyValue.exp exp1, 
exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp_SEMICOLON_list1 (fn _ => let val  (exp as exp1) = exp1 ()
 val  (exp_SEMICOLON_list1 as exp_SEMICOLON_list11) = 
exp_SEMICOLON_list11 ()
 in ( exp::exp_SEMICOLON_list1 )
end)
 in ( LrTable.NT 20, ( result, exp1left, exp_SEMICOLON_list11right), 
rest671)
end
|  ( 63, ( ( _, ( MlyValue.SEMICOLON_opt SEMICOLON_opt1, _, 
SEMICOLON_opt1right)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: 
rest671)) => let val  result = MlyValue.exp_SEMICOLON_list1 (fn _ =>
 let val  (exp as exp1) = exp1 ()
 val  SEMICOLON_opt1 = SEMICOLON_opt1 ()
 in ( exp::[] )
end)
 in ( LrTable.NT 20, ( result, exp1left, SEMICOLON_opt1right), rest671
)
end
|  ( 64, ( ( _, ( MlyValue.exp_SEMICOLON_list1 exp_SEMICOLON_list11, _
, exp_SEMICOLON_list11right)) :: _ :: ( _, ( MlyValue.exp exp1, 
exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp_SEMICOLON_list2 (fn _ => let val  (exp as exp1) = exp1 ()
 val  (exp_SEMICOLON_list1 as exp_SEMICOLON_list11) = 
exp_SEMICOLON_list11 ()
 in ( exp::exp_SEMICOLON_list1 )
end)
 in ( LrTable.NT 21, ( result, exp1left, exp_SEMICOLON_list11right), 
rest671)
end
|  ( 65, ( ( _, ( _, SEMICOLON1left, SEMICOLON1right)) :: rest671)) =>
 let val  result = MlyValue.SEMICOLON_opt (fn _ => ( () ))
 in ( LrTable.NT 22, ( result, SEMICOLON1left, SEMICOLON1right), 
rest671)
end
|  ( 66, ( rest671)) => let val  result = MlyValue.SEMICOLON_opt (fn _
 => ( () ))
 in ( LrTable.NT 22, ( result, defaultPos, defaultPos), rest671)
end
|  ( 67, ( ( _, ( _, _, IN1right)) :: ( _, ( MlyValue.localann 
localann1, localann1left, _)) :: rest671)) => let val  result = 
MlyValue.localann_IN_opt (fn _ => let val  (localann as localann1) = 
localann1 ()
 in ( SOME localann )
end)
 in ( LrTable.NT 23, ( result, localann1left, IN1right), rest671)
end
|  ( 68, ( rest671)) => let val  result = MlyValue.localann_IN_opt (fn
 _ => ( NONE ))
 in ( LrTable.NT 23, ( result, defaultPos, defaultPos), rest671)
end
|  ( 69, ( ( _, ( MlyValue.COMMA_exprow_opt COMMA_exprow_opt1, _, (
COMMA_exprow_optright as COMMA_exprow_opt1right))) :: ( _, ( 
MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.lab lab1, (lableft
 as lab1left), _)) :: rest671)) => let val  result = MlyValue.exprow
 (fn _ => let val  (lab as lab1) = lab1 ()
 val  (exp as exp1) = exp1 ()
 val  (COMMA_exprow_opt as COMMA_exprow_opt1) = COMMA_exprow_opt1 ()
 in (
 ROWExpRow(I(lableft,COMMA_exprow_optright),
	  				    lab, exp, COMMA_exprow_opt) 
)
end)
 in ( LrTable.NT 24, ( result, lab1left, COMMA_exprow_opt1right), 
rest671)
end
|  ( 70, ( ( _, ( MlyValue.COMMA_exprow_opt COMMA_exprow_opt1, _, (
COMMA_exprow_optright as COMMA_exprow_opt1right))) :: ( _, ( 
MlyValue.exp exp1, _, _)) :: _ :: ( _, ( _, (DOTSleft as DOTS1left), _
)) :: rest671)) => let val  result = MlyValue.exprow (fn _ => let val 
 (exp as exp1) = exp1 ()
 val  (COMMA_exprow_opt as COMMA_exprow_opt1) = COMMA_exprow_opt1 ()
 in (
 DOTSExpRow(I(DOTSleft,COMMA_exprow_optright),
	  				     exp, COMMA_exprow_opt) 
)
end)
 in ( LrTable.NT 24, ( result, DOTS1left, COMMA_exprow_opt1right), 
rest671)
end
|  ( 71, ( ( _, ( MlyValue.COMMA_exprow_opt COMMA_exprow_opt1, _, (
COMMA_exprow_optright as COMMA_exprow_opt1right))) :: ( _, ( 
MlyValue.COLON_ty_opt COLON_ty_opt1, _, _)) :: ( _, ( MlyValue.vid' 
vid'1, (vid'left as vid'1left), _)) :: rest671)) => let val  result = 
MlyValue.exprow (fn _ => let val  (vid' as vid'1) = vid'1 ()
 val  (COLON_ty_opt as COLON_ty_opt1) = COLON_ty_opt1 ()
 val  (COMMA_exprow_opt as COMMA_exprow_opt1) = COMMA_exprow_opt1 ()
 in (
 VIDExpRow(I(vid'left,COMMA_exprow_optright),
	  				    vid', COLON_ty_opt,
					    COMMA_exprow_opt) 
)
end)
 in ( LrTable.NT 24, ( result, vid'1left, COMMA_exprow_opt1right), 
rest671)
end
|  ( 72, ( ( _, ( MlyValue.exprow exprow1, _, exprow1right)) :: ( _, (
 _, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.COMMA_exprow_opt (fn _ => let val  (exprow as exprow1) = 
exprow1 ()
 in ( SOME exprow )
end)
 in ( LrTable.NT 26, ( result, COMMA1left, exprow1right), rest671)
end
|  ( 73, ( rest671)) => let val  result = MlyValue.COMMA_exprow_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 26, ( result, defaultPos, defaultPos), rest671)
end
|  ( 74, ( ( _, ( MlyValue.exprow exprow1, exprow1left, exprow1right))
 :: rest671)) => let val  result = MlyValue.exprow_opt (fn _ => let
 val  (exprow as exprow1) = exprow1 ()
 in ( SOME exprow )
end)
 in ( LrTable.NT 25, ( result, exprow1left, exprow1right), rest671)

end
|  ( 75, ( rest671)) => let val  result = MlyValue.exprow_opt (fn _ =>
 ( NONE ))
 in ( LrTable.NT 25, ( result, defaultPos, defaultPos), rest671)
end
|  ( 76, ( ( _, ( MlyValue.atexp atexp1, (atexpleft as atexp1left), (
atexpright as atexp1right))) :: rest671)) => let val  result = 
MlyValue.appexp (fn _ => let val  (atexp as atexp1) = atexp1 ()
 in ( ATEXPExp(I(atexpleft,atexpright), atexp) )
end)
 in ( LrTable.NT 27, ( result, atexp1left, atexp1right), rest671)
end
|  ( 77, ( ( _, ( MlyValue.atexp atexp1, _, (atexpright as atexp1right
))) :: ( _, ( MlyValue.appexp appexp1, (appexpleft as appexp1left), _)
) :: rest671)) => let val  result = MlyValue.appexp (fn _ => let val 
 (appexp as appexp1) = appexp1 ()
 val  (atexp as atexp1) = atexp1 ()
 in ( APPExp(I(appexpleft,atexpright),
					 appexp, atexp) )
end)
 in ( LrTable.NT 27, ( result, appexp1left, atexp1right), rest671)
end
|  ( 78, ( ( _, ( MlyValue.appexp appexp1, appexp1left, appexp1right))
 :: rest671)) => let val  result = MlyValue.infexp (fn _ => let val  (
appexp as appexp1) = appexp1 ()
 in ( appexp )
end)
 in ( LrTable.NT 28, ( result, appexp1left, appexp1right), rest671)

end
|  ( 79, ( ( _, ( MlyValue.infexp infexp1, infexp1left, infexp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
infexp as infexp1) = infexp1 ()
 in ( infexp )
end)
 in ( LrTable.NT 29, ( result, infexp1left, infexp1right), rest671)

end
|  ( 80, ( ( _, ( MlyValue.ty ty1, _, (tyright as ty1right))) :: _ :: 
( _, ( MlyValue.exp exp1, (expleft as exp1left), _)) :: rest671)) =>
 let val  result = MlyValue.exp (fn _ => let val  (exp as exp1) = exp1
 ()
 val  (ty as ty1) = ty1 ()
 in ( TYPEDExp(I(expleft,tyright), exp, ty) )
end)
 in ( LrTable.NT 29, ( result, exp1left, ty1right), rest671)
end
|  ( 81, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( ANDALSOExp(I(exp1left,exp2right), exp1, exp2))
end)
 in ( LrTable.NT 29, ( result, exp1left, exp2right), rest671)
end
|  ( 82, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( ORELSEExp(I(exp1left,exp2right), exp1, exp2) )
end)
 in ( LrTable.NT 29, ( result, exp1left, exp2right), rest671)
end
|  ( 83, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ( FINALLYExp(I(exp1left,exp2right), exp1, exp2))
end)
 in ( LrTable.NT 29, ( result, exp1left, exp2right), rest671)
end
|  ( 84, ( ( _, ( MlyValue.match match1, _, (matchright as match1right
))) :: ( _, ( MlyValue.BAR_opt BAR_opt1, _, _)) :: _ :: ( _, ( 
MlyValue.exp exp1, (expleft as exp1left), _)) :: rest671)) => let val 
 result = MlyValue.exp (fn _ => let val  (exp as exp1) = exp1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (match as match1) = match1 ()
 in ( HANDLEExp(I(expleft,matchright), exp, match) )
end)
 in ( LrTable.NT 29, ( result, exp1left, match1right), rest671)
end
|  ( 85, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: (
 _, ( _, (RAISEleft as RAISE1left), _)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => let val  (exp as exp1) = exp1 ()
 in ( RAISEExp(I(RAISEleft,expright), exp) )
end)
 in ( LrTable.NT 29, ( result, RAISE1left, exp1right), rest671)
end
|  ( 86, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: (
 _, ( _, (LAZYleft as LAZY1left), _)) :: rest671)) => let val  result
 = MlyValue.exp (fn _ => let val  (exp as exp1) = exp1 ()
 in ( LAZYExp(I(LAZYleft,expright), exp) )
end)
 in ( LrTable.NT 29, ( result, LAZY1left, exp1right), rest671)
end
|  ( 87, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: (
 _, ( _, (SPAWNleft as SPAWN1left), _)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => let val  (exp as exp1) = exp1 ()
 in ( SPAWNExp(I(SPAWNleft,expright), exp) )
end)
 in ( LrTable.NT 29, ( result, SPAWN1left, exp1right), rest671)
end
|  ( 88, ( ( _, ( MlyValue.ELSE_exp_opt ELSE_exp_opt1, _, (
ELSE_exp_optright as ELSE_exp_opt1right))) :: ( _, ( MlyValue.exp exp2
, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft
 as IF1left), _)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  (ELSE_exp_opt as ELSE_exp_opt1) = ELSE_exp_opt1 ()
 in (
 IFExp(I(IFleft,ELSE_exp_optright),
					exp1, exp2, ELSE_exp_opt) )

end)
 in ( LrTable.NT 29, ( result, IF1left, ELSE_exp_opt1right), rest671)

end
|  ( 89, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  exp1
 = exp1 ()
 val  exp2 = exp2 ()
 in ( WHILEExp(I(WHILEleft,exp2right), exp1, exp2) )
end)
 in ( LrTable.NT 29, ( result, WHILE1left, exp2right), rest671)
end
|  ( 90, ( ( _, ( MlyValue.match match1, _, (matchright as match1right
))) :: ( _, ( MlyValue.BAR_opt BAR_opt1, _, _)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (CASEleft as CASE1left), _)) ::
 rest671)) => let val  result = MlyValue.exp (fn _ => let val  (exp
 as exp1) = exp1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (match as match1) = match1 ()
 in ( CASEExp(I(CASEleft,matchright), exp, match) )
end)
 in ( LrTable.NT 29, ( result, CASE1left, match1right), rest671)
end
|  ( 91, ( ( _, ( MlyValue.match match1, _, (matchright as match1right
))) :: ( _, ( MlyValue.BAR_opt BAR_opt1, _, _)) :: ( _, ( _, (FNleft
 as FN1left), _)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  BAR_opt1 = BAR_opt1 ()
 val  (match as match1) = match1 ()
 in ( FNExp(I(FNleft,matchright), match) )
end)
 in ( LrTable.NT 29, ( result, FN1left, match1right), rest671)
end
|  ( 92, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: _
 :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, ( _, (RECleft as REC1left
), _)) :: rest671)) => let val  result = MlyValue.exp (fn _ => let
 val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 in ( RECExp(I(RECleft,expright), pat, exp) )
end)
 in ( LrTable.NT 29, ( result, REC1left, exp1right), rest671)
end
|  ( 93, ( ( _, ( MlyValue.atsigexp atsigexp1, _, (atsigexpright as 
atsigexp1right))) :: _ :: ( _, ( MlyValue.atstrexp atstrexp1, _, _))
 :: ( _, ( _, (PACKleft as PACK1left), _)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => let val  (atstrexp as atstrexp1) = 
atstrexp1 ()
 val  (atsigexp as atsigexp1) = atsigexp1 ()
 in (
 TRANSPACKExp(I(PACKleft,atsigexpright),
					       atstrexp, atsigexp) 
)
end)
 in ( LrTable.NT 29, ( result, PACK1left, atsigexp1right), rest671)

end
|  ( 94, ( ( _, ( MlyValue.atsigexp atsigexp1, _, (atsigexpright as 
atsigexp1right))) :: _ :: ( _, ( MlyValue.atstrexp atstrexp1, _, _))
 :: ( _, ( _, (PACKleft as PACK1left), _)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => let val  (atstrexp as atstrexp1) = 
atstrexp1 ()
 val  (atsigexp as atsigexp1) = atsigexp1 ()
 in (
 OPAQPACKExp(I(PACKleft,atsigexpright),
					      atstrexp, atsigexp) 
)
end)
 in ( LrTable.NT 29, ( result, PACK1left, atsigexp1right), rest671)

end
|  ( 95, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( MlyValue.ASSERT ASSERT1, (
ASSERTleft as ASSERT1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (ASSERT as ASSERT1) = ASSERT1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
 ASSERTDOExp(I(ASSERTleft, exp2right),
					      sourceDesc, ASSERT, exp1, exp2) 
)
end)
 in ( LrTable.NT 29, ( result, ASSERT1left, exp2right), rest671)
end
|  ( 96, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.pat pat1, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( MlyValue.ASSERT ASSERT1, (ASSERTleft as ASSERT1left), _)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (ASSERT
 as ASSERT1) = ASSERT1 ()
 val  exp1 = exp1 ()
 val  (pat as pat1) = pat1 ()
 val  exp2 = exp2 ()
 in (
 ASSERTOFDOExp(I(ASSERTleft, exp2right),
						sourceDesc, ASSERT, exp1, pat,
						exp2) 
)
end)
 in ( LrTable.NT 29, ( result, ASSERT1left, exp2right), rest671)
end
|  ( 97, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: (
 _, ( MlyValue.ASSERT ASSERT1, (ASSERTleft as ASSERT1left), _)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (ASSERT
 as ASSERT1) = ASSERT1 ()
 val  (exp as exp1) = exp1 ()
 in (
 ASSERTExp(I(ASSERTleft, expright), 
					    sourceDesc, ASSERT, exp) 
)
end)
 in ( LrTable.NT 29, ( result, ASSERT1left, exp1right), rest671)
end
|  ( 98, ( ( _, ( MlyValue.pat pat1, _, (patright as pat1right))) :: _
 :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( MlyValue.ASSERT ASSERT1
, (ASSERTleft as ASSERT1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (ASSERT as ASSERT1) = ASSERT1 ()
 val  (exp as exp1) = exp1 ()
 val  (pat as pat1) = pat1 ()
 in (
 ASSERTOFExp(I(ASSERTleft, patright),
					      sourceDesc, ASSERT, exp, pat) 
)
end)
 in ( LrTable.NT 29, ( result, ASSERT1left, pat1right), rest671)
end
|  ( 99, ( ( _, ( MlyValue.pat pat1, _, (patright as pat1right))) :: _
 :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( MlyValue.ASSERT ASSERT1
, (ASSERTleft as ASSERT1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (ASSERT as ASSERT1) = ASSERT1 ()
 val  (exp as exp1) = exp1 ()
 val  (pat as pat1) = pat1 ()
 in (
 ASSERTRAISEExp(I(ASSERTleft, patright), 
						 sourceDesc, ASSERT, exp, pat) 
)
end)
 in ( LrTable.NT 29, ( result, ASSERT1left, pat1right), rest671)
end
|  ( 100, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
ELSE1left, _)) :: rest671)) => let val  result = MlyValue.ELSE_exp_opt
 (fn _ => let val  (exp as exp1) = exp1 ()
 in ( SOME exp )
end)
 in ( LrTable.NT 30, ( result, ELSE1left, exp1right), rest671)
end
|  ( 101, ( rest671)) => let val  result = MlyValue.ELSE_exp_opt (fn _
 => ( NONE ))
 in ( LrTable.NT 30, ( result, defaultPos, defaultPos), rest671)
end
|  ( 102, ( ( _, ( MlyValue.BAR_match_opt BAR_match_opt1, _, (
BAR_match_optright as BAR_match_opt1right))) :: ( _, ( MlyValue.mrule 
mrule1, (mruleleft as mrule1left), _)) :: rest671)) => let val  result
 = MlyValue.match (fn _ => let val  (mrule as mrule1) = mrule1 ()
 val  (BAR_match_opt as BAR_match_opt1) = BAR_match_opt1 ()
 in (
 Match(I(mruleleft,BAR_match_optright),
					mrule, BAR_match_opt) )

end)
 in ( LrTable.NT 31, ( result, mrule1left, BAR_match_opt1right), 
rest671)
end
|  ( 103, ( ( _, ( _, BAR1left, BAR1right)) :: rest671)) => let val  
result = MlyValue.BAR_opt (fn _ => ( () ))
 in ( LrTable.NT 32, ( result, BAR1left, BAR1right), rest671)
end
|  ( 104, ( rest671)) => let val  result = MlyValue.BAR_opt (fn _ => (
 () ))
 in ( LrTable.NT 32, ( result, defaultPos, defaultPos), rest671)
end
|  ( 105, ( ( _, ( MlyValue.match match1, _, match1right)) :: ( _, ( _
, BAR1left, _)) :: rest671)) => let val  result = 
MlyValue.BAR_match_opt (fn _ => let val  (match as match1) = match1 ()
 in ( SOME match )
end)
 in ( LrTable.NT 33, ( result, BAR1left, match1right), rest671)
end
|  ( 106, ( rest671)) => let val  result = MlyValue.BAR_match_opt (fn
 _ => ( NONE ))
 in ( LrTable.NT 33, ( result, defaultPos, defaultPos), rest671)
end
|  ( 107, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) ::
 _ :: ( _, ( MlyValue.pat pat1, (patleft as pat1left), _)) :: rest671)
) => let val  result = MlyValue.mrule (fn _ => let val  (pat as pat1)
 = pat1 ()
 val  (exp as exp1) = exp1 ()
 in ( Mrule(I(patleft,expright), pat, exp) )
end)
 in ( LrTable.NT 34, ( result, pat1left, exp1right), rest671)
end
|  ( 108, ( ( _, ( MlyValue.dec1 dec11, dec11left, dec11right)) :: 
rest671)) => let val  result = MlyValue.dec (fn _ => let val  (dec1
 as dec11) = dec11 ()
 in ( dec1 )
end)
 in ( LrTable.NT 35, ( result, dec11left, dec11right), rest671)
end
|  ( 109, ( rest671)) => let val  result = MlyValue.dec (fn _ => (
 EMPTYDec(I(defaultPos,defaultPos)) ))
 in ( LrTable.NT 35, ( result, defaultPos, defaultPos), rest671)
end
|  ( 110, ( ( _, ( MlyValue.dec1' dec1'1, dec1'1left, dec1'1right)) ::
 rest671)) => let val  result = MlyValue.dec' (fn _ => let val  (dec1'
 as dec1'1) = dec1'1 ()
 in ( dec1' )
end)
 in ( LrTable.NT 36, ( result, dec1'1left, dec1'1right), rest671)
end
|  ( 111, ( ( _, ( MlyValue.dec' dec'2, _, dec'2right)) :: ( _, ( 
MlyValue.dec' dec'1, dec'1left, _)) :: rest671)) => let val  result = 
MlyValue.dec' (fn _ => let val  dec'1 = dec'1 ()
 val  dec'2 = dec'2 ()
 in ( SEQDec(I(dec'1left,dec'2right), dec'1, dec'2) )
end)
 in ( LrTable.NT 36, ( result, dec'1left, dec'2right), rest671)
end
|  ( 112, ( ( _, ( MlyValue.dec1' dec1'1, dec1'1left, dec1'1right)) ::
 rest671)) => let val  result = MlyValue.dec1 (fn _ => let val  (dec1'
 as dec1'1) = dec1'1 ()
 in ( dec1' )
end)
 in ( LrTable.NT 37, ( result, dec1'1left, dec1'1right), rest671)
end
|  ( 113, ( ( _, ( _, (SEMICOLONleft as SEMICOLON1left), 
SEMICOLON1right)) :: rest671)) => let val  result = MlyValue.dec1 (fn
 _ => ( EMPTYDec(I(SEMICOLONleft,SEMICOLONleft)) ))
 in ( LrTable.NT 37, ( result, SEMICOLON1left, SEMICOLON1right), 
rest671)
end
|  ( 114, ( ( _, ( MlyValue.dec1 dec12, _, dec12right)) :: ( _, ( 
MlyValue.dec1 dec11, dec11left, _)) :: rest671)) => let val  result = 
MlyValue.dec1 (fn _ => let val  dec11 = dec11 ()
 val  dec12 = dec12 ()
 in ( SEQDec(I(dec11left,dec12right), dec11, dec12) )
end)
 in ( LrTable.NT 37, ( result, dec11left, dec12right), rest671)
end
|  ( 115, ( ( _, ( MlyValue.dec1'' dec1''1, dec1''1left, dec1''1right)
) :: rest671)) => let val  result = MlyValue.dec1' (fn _ => let val  (
dec1'' as dec1''1) = dec1''1 ()
 in ( dec1'' )
end)
 in ( LrTable.NT 38, ( result, dec1''1left, dec1''1right), rest671)

end
|  ( 116, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.dec dec2, _, _)) :: _ :: ( _, ( MlyValue.dec dec1, _, _)) :: 
( _, ( _, (LOCALleft as LOCAL1left), _)) :: rest671)) => let val  
result = MlyValue.dec1' (fn _ => let val  dec1 = dec1 ()
 val  dec2 = dec2 ()
 in ( LOCALDec(I(LOCALleft,ENDright), dec1, dec2) )
end)
 in ( LrTable.NT 38, ( result, LOCAL1left, END1right), rest671)
end
|  ( 117, ( ( _, ( MlyValue.valbind valbind1, _, (valbindright as 
valbind1right))) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.dec1'' (fn _ => let val  (valbind as 
valbind1) = valbind1 ()
 in (
 VALDec(I(VALleft,valbindright),
				 Seq(I(defaultPos,defaultPos), []), valbind) 
)
end)
 in ( LrTable.NT 39, ( result, VAL1left, valbind1right), rest671)
end
|  ( 118, ( ( _, ( MlyValue.valbind valbind1, _, (valbindright as 
valbind1right))) :: ( _, ( MlyValue.tyvarseq1 tyvarseq11, _, _)) :: (
 _, ( _, (VALleft as VAL1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (tyvarseq1 as tyvarseq11) = 
tyvarseq11 ()
 val  (valbind as valbind1) = valbind1 ()
 in ( VALDec(I(VALleft,valbindright), tyvarseq1, valbind) )
end)
 in ( LrTable.NT 39, ( result, VAL1left, valbind1right), rest671)
end
|  ( 119, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: 
( _, ( _, (DOleft as DO1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (exp as exp1) = exp1 ()
 in ( DODec(I(DOleft,expright), exp) )
end)
 in ( LrTable.NT 39, ( result, DO1left, exp1right), rest671)
end
|  ( 120, ( ( _, ( MlyValue.fvalbind fvalbind1, _, (fvalbindright as 
fvalbind1right))) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.dec1'' (fn _ => let val  (fvalbind as 
fvalbind1) = fvalbind1 ()
 in (
 FUNDec(I(FUNleft,fvalbindright),
				 Seq(I(defaultPos,defaultPos), []), fvalbind) 
)
end)
 in ( LrTable.NT 39, ( result, FUN1left, fvalbind1right), rest671)
end
|  ( 121, ( ( _, ( MlyValue.fvalbind fvalbind1, _, (fvalbindright as 
fvalbind1right))) :: ( _, ( MlyValue.tyvarseq1 tyvarseq11, _, _)) :: (
 _, ( _, (FUNleft as FUN1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (tyvarseq1 as tyvarseq11) = 
tyvarseq11 ()
 val  (fvalbind as fvalbind1) = fvalbind1 ()
 in ( FUNDec(I(FUNleft,fvalbindright), tyvarseq1, fvalbind))
end)
 in ( LrTable.NT 39, ( result, FUN1left, fvalbind1right), rest671)
end
|  ( 122, ( ( _, ( MlyValue.typbind typbind1, _, (typbindright as 
typbind1right))) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: rest671)
) => let val  result = MlyValue.dec1'' (fn _ => let val  (typbind as 
typbind1) = typbind1 ()
 in ( TYPEDec(I(TYPEleft,typbindright), typbind) )
end)
 in ( LrTable.NT 39, ( result, TYPE1left, typbind1right), rest671)
end
|  ( 123, ( ( _, ( MlyValue.typbind typbind1, _, (typbindright as 
typbind1right))) :: ( _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
typbind as typbind1) = typbind1 ()
 in ( EQTYPEDec(I(EQTYPEleft,typbindright), typbind) )
end)
 in ( LrTable.NT 39, ( result, EQTYPE1left, typbind1right), rest671)

end
|  ( 124, ( ( _, ( MlyValue.typbind typbind1, _, (typbindright as 
typbind1right))) :: ( _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
typbind as typbind1) = typbind1 ()
 in ( EQEQTYPEDec(I(EQEQTYPEleft,typbindright), typbind) )
end)
 in ( LrTable.NT 39, ( result, EQEQTYPE1left, typbind1right), rest671)

end
|  ( 125, ( ( _, ( MlyValue.WITHTYPE_typbind_opt WITHTYPE_typbind_opt1
, _, (WITHTYPE_typbind_optright as WITHTYPE_typbind_opt1right))) :: (
 _, ( MlyValue.datbind0 datbind01, _, _)) :: ( _, ( _, (DATATYPEleft
 as DATATYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (datbind0 as datbind01) = datbind01
 ()
 val  (WITHTYPE_typbind_opt as WITHTYPE_typbind_opt1) = 
WITHTYPE_typbind_opt1 ()
 in (
 DATATYPEDec(I(DATATYPEleft,WITHTYPE_typbind_optright),
				      datbind0, WITHTYPE_typbind_opt) 
)
end)
 in ( LrTable.NT 39, ( result, DATATYPE1left, 
WITHTYPE_typbind_opt1right), rest671)
end
|  ( 126, ( ( _, ( MlyValue.WITHTYPE_typbind_opt WITHTYPE_typbind_opt1
, _, (WITHTYPE_typbind_optright as WITHTYPE_typbind_opt1right))) :: (
 _, ( MlyValue.datbind1 datbind11, _, _)) :: ( _, ( _, (DATATYPEleft
 as DATATYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (datbind1 as datbind11) = datbind11
 ()
 val  (WITHTYPE_typbind_opt as WITHTYPE_typbind_opt1) = 
WITHTYPE_typbind_opt1 ()
 in (
 DATATYPEDec(I(DATATYPEleft,WITHTYPE_typbind_optright),
				      datbind1, WITHTYPE_typbind_opt) 
)
end)
 in ( LrTable.NT 39, ( result, DATATYPE1left, 
WITHTYPE_typbind_opt1right), rest671)
end
|  ( 127, ( ( _, ( MlyValue.longtycon longtycon1, _, (longtyconright
 as longtycon1right))) :: _ :: _ :: ( _, ( MlyValue.tycon tycon1, _, _
)) :: ( _, ( _, (DATATYPEleft as DATATYPE1left), _)) :: rest671)) =>
 let val  result = MlyValue.dec1'' (fn _ => let val  (tycon as tycon1)
 = tycon1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 in (
 REPLICATIONDec(I(DATATYPEleft,longtyconright),
					 tycon, longtycon) 
)
end)
 in ( LrTable.NT 39, ( result, DATATYPE1left, longtycon1right), 
rest671)
end
|  ( 128, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.dec dec1, _, _)) :: _ :: ( _, ( MlyValue.WITHTYPE_typbind_opt
 WITHTYPE_typbind_opt1, _, _)) :: ( _, ( MlyValue.datbind datbind1, _,
 _)) :: ( _, ( _, (ABSTYPEleft as ABSTYPE1left), _)) :: rest671)) =>
 let val  result = MlyValue.dec1'' (fn _ => let val  (datbind as 
datbind1) = datbind1 ()
 val  (WITHTYPE_typbind_opt as WITHTYPE_typbind_opt1) = 
WITHTYPE_typbind_opt1 ()
 val  (dec as dec1) = dec1 ()
 in (
 ABSTYPEDec(I(ABSTYPEleft,ENDright), datbind,
				     WITHTYPE_typbind_opt, dec) 
)
end)
 in ( LrTable.NT 39, ( result, ABSTYPE1left, END1right), rest671)
end
|  ( 129, ( ( _, ( MlyValue.extbind extbind1, _, (extbindright as 
extbind1right))) :: ( _, ( _, (EXTTYPEleft as EXTTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
extbind as extbind1) = extbind1 ()
 in ( EXTTYPEDec(I(EXTTYPEleft,extbindright), extbind) )
end)
 in ( LrTable.NT 39, ( result, EXTTYPE1left, extbind1right), rest671)

end
|  ( 130, ( ( _, ( MlyValue.econbind econbind1, _, (econbindright as 
econbind1right))) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left),
 _)) :: rest671)) => let val  result = MlyValue.dec1'' (fn _ => let
 val  (econbind as econbind1) = econbind1 ()
 in (
 CONSTRUCTORDec(I(CONSTRUCTORleft,econbindright),
					 econbind) )

end)
 in ( LrTable.NT 39, ( result, CONSTRUCTOR1left, econbind1right), 
rest671)
end
|  ( 131, ( ( _, ( MlyValue.exbind exbind1, _, (exbindright as 
exbind1right))) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
exbind as exbind1) = exbind1 ()
 in ( EXCEPTIONDec(I(EXCEPTIONleft,exbindright), exbind) )
end)
 in ( LrTable.NT 39, ( result, EXCEPTION1left, exbind1right), rest671)

end
|  ( 132, ( ( _, ( MlyValue.strbind strbind1, _, (strbindright as 
strbind1right))) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _))
 :: rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
strbind as strbind1) = strbind1 ()
 in ( STRUCTUREDec(I(STRUCTUREleft,strbindright), strbind) )
end)
 in ( LrTable.NT 39, ( result, STRUCTURE1left, strbind1right), rest671
)
end
|  ( 133, ( ( _, ( MlyValue.sigbind sigbind1, _, (sigbindright as 
sigbind1right))) :: ( _, ( _, (SIGNATUREleft as SIGNATURE1left), _))
 :: rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
sigbind as sigbind1) = sigbind1 ()
 in ( SIGNATUREDec(I(SIGNATUREleft,sigbindright), sigbind) )
end)
 in ( LrTable.NT 39, ( result, SIGNATURE1left, sigbind1right), rest671
)
end
|  ( 134, ( ( _, ( MlyValue.funbind funbind1, _, (funbindright as 
funbind1right))) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: 
rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
funbind as funbind1) = funbind1 ()
 in ( FUNCTORDec(I(FUNCTORleft,funbindright), funbind) )
end)
 in ( LrTable.NT 39, ( result, FUNCTOR1left, funbind1right), rest671)

end
|  ( 135, ( ( _, ( MlyValue.strexp strexp1, _, (strexpright as 
strexp1right))) :: ( _, ( _, (OPENleft as OPEN1left), _)) :: rest671))
 => let val  result = MlyValue.dec1'' (fn _ => let val  (strexp as 
strexp1) = strexp1 ()
 in ( OPENDec(I(OPENleft,strexpright), strexp) )
end)
 in ( LrTable.NT 39, ( result, OPEN1left, strexp1right), rest671)
end
|  ( 136, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( MlyValue.d_opt d_opt1, _, _)) :: ( _,
 ( _, (INFIXleft as INFIX1left), _)) :: rest671)) => let val  result =
 MlyValue.dec1'' (fn _ => let val  (d_opt as d_opt1) = d_opt1 ()
 val  (vid_list1 as vid_list11) = vid_list11 ()
 in (
 INFIXMULTIDec(I(INFIXleft,vid_list1right),
					d_opt, vid_list1) )

end)
 in ( LrTable.NT 39, ( result, INFIX1left, vid_list11right), rest671)

end
|  ( 137, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( MlyValue.d_opt d_opt1, _, _)) :: ( _,
 ( _, (INFIXRleft as INFIXR1left), _)) :: rest671)) => let val  result
 = MlyValue.dec1'' (fn _ => let val  (d_opt as d_opt1) = d_opt1 ()
 val  (vid_list1 as vid_list11) = vid_list11 ()
 in (
 INFIXRMULTIDec(I(INFIXRleft,vid_list1right),
					 d_opt, vid_list1) 
)
end)
 in ( LrTable.NT 39, ( result, INFIXR1left, vid_list11right), rest671)

end
|  ( 138, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( _, (NONFIXleft as NONFIX1left), _))
 :: rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
vid_list1 as vid_list11) = vid_list11 ()
 in ( NONFIXMULTIDec(I(NONFIXleft,vid_list1right),
					 vid_list1) )

end)
 in ( LrTable.NT 39, ( result, NONFIX1left, vid_list11right), rest671)

end
|  ( 139, ( ( _, ( MlyValue.longvidseq longvidseq1, _, (
longvidseqright as longvidseq1right))) :: _ :: ( _, ( MlyValue.ty ty1,
 _, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, _, _)) :: ( _, ( MlyValue.tyvar tyvar1, _, _)
) :: _ :: ( _, ( MlyValue.longtyconseq longtyconseq1, _, _)) :: ( _, (
 _, (OVERLOADleft as OVERLOAD1left), _)) :: rest671)) => let val  
result = MlyValue.dec1'' (fn _ => let val  (longtyconseq as 
longtyconseq1) = longtyconseq1 ()
 val  (tyvar as tyvar1) = tyvar1 ()
 val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (ty as ty1) = ty1 ()
 val  (longvidseq as longvidseq1) = longvidseq1 ()
 in (
 OVERLOADDec(I(OVERLOADleft,longvidseqright),
				      tyvar, longtyconseq,
				      OP_opt, vid, ty, longvidseq) 
)
end)
 in ( LrTable.NT 39, ( result, OVERLOAD1left, longvidseq1right), 
rest671)
end
|  ( 140, ( ( _, ( MlyValue.longvid longvid1, _, (longvidright as 
longvid1right))) :: _ :: ( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, (
 MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1, _, _))
 :: ( _, ( MlyValue.tyvar tyvar1, _, _)) :: ( _, ( _, (OVERLOADleft
 as OVERLOAD1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (tyvar as tyvar1) = tyvar1 ()
 val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (ty as ty1) = ty1 ()
 val  (longvid as longvid1) = longvid1 ()
 in (
 OVERLOADALLDec(I(OVERLOADleft,longvidright),
				      tyvar, OP_opt, vid, ty, longvid) 
)
end)
 in ( LrTable.NT 39, ( result, OVERLOAD1left, longvid1right), rest671)

end
|  ( 141, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( 
MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1, _, _)) ::
 _ :: ( _, ( _, (PRIMITIVEleft as PRIMITIVE1left), _)) :: rest671)) =>
 let val  result = MlyValue.dec1'' (fn _ => let val  (OP_opt as 
OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (ty as ty1) = ty1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVEVALDec(I(PRIMITIVEleft,STRINGright),
					  OP_opt, vid, ty, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 142, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( 
MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1, _, _)) ::
 _ :: ( _, ( _, (PRIMITIVEleft as PRIMITIVE1left), _)) :: rest671)) =>
 let val  result = MlyValue.dec1'' (fn _ => let val  (OP_opt as 
OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (ty as ty1) = ty1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVEFUNDec(I(PRIMITIVEleft,STRINGright),
					  OP_opt, vid, ty, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 143, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, (
 MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _, ( _, (PRIMITIVEleft
 as PRIMITIVE1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVETYPEDec(I(PRIMITIVEleft,STRINGright),
					   tyvarseq, tycon, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 144, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, (
 MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _, ( _, (PRIMITIVEleft
 as PRIMITIVE1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVEEQTYPEDec(I(PRIMITIVEleft,STRINGright),
					     tyvarseq, tycon, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 145, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, (
 MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _, ( _, (PRIMITIVEleft
 as PRIMITIVE1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVEEQEQTYPEDec(I(PRIMITIVEleft,STRINGright),
					       tyvarseq, tycon, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 146, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, (
 MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _, ( _, (PRIMITIVEleft
 as PRIMITIVE1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVEEXTTYPEDec(I(PRIMITIVEleft,STRINGright),
					      tyvarseq, tycon, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 147, ( ( _, ( MlyValue.tyvar tyvar2, _, tyvar2right)) :: _ :: ( _
, ( MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1, _, _)
) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, ( 
MlyValue.tyvar tyvar1, _, _)) :: _ :: ( _, ( _, (PRIMITIVEleft as 
PRIMITIVE1left), _)) :: rest671)) => let val  result = MlyValue.dec1''
 (fn _ => let val  tyvar1 = tyvar1 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  tyvar2 = tyvar2 ()
 in (
 PRIMITIVEREFTYPEDec(I(PRIMITIVEleft,tyvar2right),
					      tyvar1, tycon, OP_opt, vid,
					      tyvar2) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, tyvar2right), rest671)

end
|  ( 148, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _))
 :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: _ :: ( _, ( 
MlyValue.OF_ty_opt OF_ty_opt1, _, _)) :: ( _, ( MlyValue.vid vid1, _,
 _)) :: ( _, ( MlyValue.OP_opt OP_opt1, _, _)) :: _ :: ( _, ( _, (
PRIMITIVEleft as PRIMITIVE1left), _)) :: rest671)) => let val  result
 = MlyValue.dec1'' (fn _ => let val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVECONSTRUCTORDec(I(PRIMITIVEleft,STRINGright),
						  OP_opt, vid, OF_ty_opt,
						  tyvarseq, longtycon, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 149, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.OF_ty_opt OF_ty_opt1, _, _))
 :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1
, _, _)) :: _ :: ( _, ( _, (PRIMITIVEleft as PRIMITIVE1left), _)) :: 
rest671)) => let val  result = MlyValue.dec1'' (fn _ => let val  (
OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVEEXCEPTIONDec(I(PRIMITIVEleft,STRINGright),
						OP_opt, vid, OF_ty_opt, STRING)
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 150, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.sigexp sigexp1, _, _)) :: _ ::
 ( _, ( MlyValue.strid strid1, _, _)) :: _ :: ( _, ( _, (PRIMITIVEleft
 as PRIMITIVE1left), _)) :: rest671)) => let val  result = 
MlyValue.dec1'' (fn _ => let val  (strid as strid1) = strid1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVESTRUCTUREDec(I(PRIMITIVEleft,STRINGright),
						strid, sigexp, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 151, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.sigexp sigexp1, _, _)) :: _ ::
 ( _, ( MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.strid strid1, _, _)) :: _ :: ( _, ( _, (PRIMITIVEleft as 
PRIMITIVE1left), _)) :: rest671)) => let val  result = MlyValue.dec1''
 (fn _ => let val  (strid as strid1) = strid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVEFUNCTORDec(I(PRIMITIVEleft,STRINGright),
					      strid, atstrpat_list0, sigexp,
					      STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 152, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.atstrpat_list0 atstrpat_list01
, _, _)) :: ( _, ( MlyValue.sigid sigid1, _, _)) :: _ :: ( _, ( _, (
PRIMITIVEleft as PRIMITIVE1left), _)) :: rest671)) => let val  result
 = MlyValue.dec1'' (fn _ => let val  (sigid as sigid1) = sigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVESIGNATUREDec(I(PRIMITIVEleft,STRINGright),
						sigid, atstrpat_list0, STRING) 
)
end)
 in ( LrTable.NT 39, ( result, PRIMITIVE1left, STRING1right), rest671)

end
|  ( 153, ( ( _, ( MlyValue.typbind typbind1, _, typbind1right)) :: (
 _, ( _, WITHTYPE1left, _)) :: rest671)) => let val  result = 
MlyValue.WITHTYPE_typbind_opt (fn _ => let val  (typbind as typbind1)
 = typbind1 ()
 in ( SOME typbind )
end)
 in ( LrTable.NT 40, ( result, WITHTYPE1left, typbind1right), rest671)

end
|  ( 154, ( rest671)) => let val  result = 
MlyValue.WITHTYPE_typbind_opt (fn _ => ( NONE ))
 in ( LrTable.NT 40, ( result, defaultPos, defaultPos), rest671)
end
|  ( 155, ( ( _, ( MlyValue.vid_list1 vid_list11, _, vid_list11right))
 :: ( _, ( MlyValue.vid vid1, vid1left, _)) :: rest671)) => let val  
result = MlyValue.vid_list1 (fn _ => let val  (vid as vid1) = vid1 ()
 val  (vid_list1 as vid_list11) = vid_list11 ()
 in ( vid::vid_list1 )
end)
 in ( LrTable.NT 41, ( result, vid1left, vid_list11right), rest671)

end
|  ( 156, ( ( _, ( MlyValue.vid vid1, vid1left, vid1right)) :: rest671
)) => let val  result = MlyValue.vid_list1 (fn _ => let val  (vid as 
vid1) = vid1 ()
 in ( vid::[] )
end)
 in ( LrTable.NT 41, ( result, vid1left, vid1right), rest671)
end
|  ( 157, ( ( _, ( MlyValue.d d1, d1left, d1right)) :: rest671)) =>
 let val  result = MlyValue.d_opt (fn _ => let val  (d as d1) = d1 ()
 in ( SOME d )
end)
 in ( LrTable.NT 42, ( result, d1left, d1right), rest671)
end
|  ( 158, ( rest671)) => let val  result = MlyValue.d_opt (fn _ => (
 NONE ))
 in ( LrTable.NT 42, ( result, defaultPos, defaultPos), rest671)
end
|  ( 159, ( ( _, ( MlyValue.AND_valbind_opt AND_valbind_opt1, _, (
AND_valbind_optright as AND_valbind_opt1right))) :: ( _, ( 
MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.pat pat1, (patleft
 as pat1left), _)) :: rest671)) => let val  result = MlyValue.valbind
 (fn _ => let val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 val  (AND_valbind_opt as AND_valbind_opt1) = AND_valbind_opt1 ()
 in (
 PLAINValBind(I(patleft,AND_valbind_optright),
				       pat, exp, AND_valbind_opt) 
)
end)
 in ( LrTable.NT 43, ( result, pat1left, AND_valbind_opt1right), 
rest671)
end
|  ( 160, ( ( _, ( MlyValue.valbind valbind1, _, (valbindright as 
valbind1right))) :: ( _, ( _, (RECleft as REC1left), _)) :: rest671))
 => let val  result = MlyValue.valbind (fn _ => let val  (valbind as 
valbind1) = valbind1 ()
 in ( RECValBind(I(RECleft,valbindright), valbind) )
end)
 in ( LrTable.NT 43, ( result, REC1left, valbind1right), rest671)
end
|  ( 161, ( ( _, ( MlyValue.valbind valbind1, _, valbind1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_valbind_opt (fn _ => let val  (valbind as valbind1) = 
valbind1 ()
 in ( SOME valbind )
end)
 in ( LrTable.NT 44, ( result, AND1left, valbind1right), rest671)
end
|  ( 162, ( rest671)) => let val  result = MlyValue.AND_valbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 44, ( result, defaultPos, defaultPos), rest671)
end
|  ( 163, ( ( _, ( MlyValue.AND_fvalbind_opt AND_fvalbind_opt1, _, (
AND_fvalbind_optright as AND_fvalbind_opt1right))) :: ( _, ( 
MlyValue.fmatch fmatch1, (fmatchleft as fmatch1left), _)) :: rest671))
 => let val  result = MlyValue.fvalbind (fn _ => let val  (fmatch as 
fmatch1) = fmatch1 ()
 val  (AND_fvalbind_opt as AND_fvalbind_opt1) = AND_fvalbind_opt1 ()
 in (
 FvalBind(I(fmatchleft,AND_fvalbind_optright),
				     SANSLazy, fmatch, AND_fvalbind_opt) 
)
end)
 in ( LrTable.NT 45, ( result, fmatch1left, AND_fvalbind_opt1right), 
rest671)
end
|  ( 164, ( ( _, ( MlyValue.AND_fvalbind_opt AND_fvalbind_opt1, _, (
AND_fvalbind_optright as AND_fvalbind_opt1right))) :: ( _, ( 
MlyValue.fmatch fmatch1, fmatchleft, _)) :: ( _, ( _, BAR1left, _)) ::
 rest671)) => let val  result = MlyValue.fvalbind (fn _ => let val  (
fmatch as fmatch1) = fmatch1 ()
 val  (AND_fvalbind_opt as AND_fvalbind_opt1) = AND_fvalbind_opt1 ()
 in (
 FvalBind(I(fmatchleft,AND_fvalbind_optright),
				     SANSLazy, fmatch, AND_fvalbind_opt) 
)
end)
 in ( LrTable.NT 45, ( result, BAR1left, AND_fvalbind_opt1right), 
rest671)
end
|  ( 165, ( ( _, ( MlyValue.AND_fvalbind_opt AND_fvalbind_opt1, _, (
AND_fvalbind_optright as AND_fvalbind_opt1right))) :: ( _, ( 
MlyValue.fmatch fmatch1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1, _
, _)) :: ( _, ( _, (LAZYleft as LAZY1left), _)) :: rest671)) => let
 val  result = MlyValue.fvalbind (fn _ => let val  BAR_opt1 = BAR_opt1
 ()
 val  (fmatch as fmatch1) = fmatch1 ()
 val  (AND_fvalbind_opt as AND_fvalbind_opt1) = AND_fvalbind_opt1 ()
 in (
 FvalBind(I(LAZYleft,AND_fvalbind_optright),
				     WITHLazy, fmatch, AND_fvalbind_opt) 
)
end)
 in ( LrTable.NT 45, ( result, LAZY1left, AND_fvalbind_opt1right), 
rest671)
end
|  ( 166, ( ( _, ( MlyValue.AND_fvalbind_opt AND_fvalbind_opt1, _, (
AND_fvalbind_optright as AND_fvalbind_opt1right))) :: ( _, ( 
MlyValue.fmatch fmatch1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1, _
, _)) :: ( _, ( _, (SPAWNleft as SPAWN1left), _)) :: rest671)) => let
 val  result = MlyValue.fvalbind (fn _ => let val  BAR_opt1 = BAR_opt1
 ()
 val  (fmatch as fmatch1) = fmatch1 ()
 val  (AND_fvalbind_opt as AND_fvalbind_opt1) = AND_fvalbind_opt1 ()
 in (
 FvalBind(I(SPAWNleft,AND_fvalbind_optright),
				     WITHSpawn, fmatch, AND_fvalbind_opt) 
)
end)
 in ( LrTable.NT 45, ( result, SPAWN1left, AND_fvalbind_opt1right), 
rest671)
end
|  ( 167, ( ( _, ( MlyValue.fvalbind fvalbind1, _, fvalbind1right)) ::
 ( _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_fvalbind_opt (fn _ => let val  (fvalbind as fvalbind1) = 
fvalbind1 ()
 in ( SOME fvalbind )
end)
 in ( LrTable.NT 46, ( result, AND1left, fvalbind1right), rest671)
end
|  ( 168, ( rest671)) => let val  result = MlyValue.AND_fvalbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 46, ( result, defaultPos, defaultPos), rest671)
end
|  ( 169, ( ( _, ( MlyValue.BAR_fmatch_opt BAR_fmatch_opt1, _, (
BAR_fmatch_optright as BAR_fmatch_opt1right))) :: ( _, ( 
MlyValue.fmrule fmrule1, (fmruleleft as fmrule1left), _)) :: rest671))
 => let val  result = MlyValue.fmatch (fn _ => let val  (fmrule as 
fmrule1) = fmrule1 ()
 val  (BAR_fmatch_opt as BAR_fmatch_opt1) = BAR_fmatch_opt1 ()
 in (
 Fmatch(I(fmruleleft,BAR_fmatch_optright),
				 fmrule, BAR_fmatch_opt) 
)
end)
 in ( LrTable.NT 47, ( result, fmrule1left, BAR_fmatch_opt1right), 
rest671)
end
|  ( 170, ( ( _, ( MlyValue.fmatch fmatch1, _, fmatch1right)) :: ( _, 
( _, BAR1left, _)) :: rest671)) => let val  result = 
MlyValue.BAR_fmatch_opt (fn _ => let val  (fmatch as fmatch1) = 
fmatch1 ()
 in ( SOME fmatch )
end)
 in ( LrTable.NT 48, ( result, BAR1left, fmatch1right), rest671)
end
|  ( 171, ( rest671)) => let val  result = MlyValue.BAR_fmatch_opt (fn
 _ => ( NONE ))
 in ( LrTable.NT 48, ( result, defaultPos, defaultPos), rest671)
end
|  ( 172, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) ::
 _ :: ( _, ( MlyValue.fpat fpat1, (fpatleft as fpat1left), _)) :: 
rest671)) => let val  result = MlyValue.fmrule (fn _ => let val  (fpat
 as fpat1) = fpat1 ()
 val  (exp as exp1) = exp1 ()
 in ( Fmrule(I(fpatleft,expright), fpat, exp) )
end)
 in ( LrTable.NT 49, ( result, fpat1left, exp1right), rest671)
end
|  ( 173, ( ( _, ( MlyValue.pat pat1, pat1left, pat1right)) :: rest671
)) => let val  result = MlyValue.fpat (fn _ => let val  (pat as pat1)
 = pat1 ()
 in ( pat )
end)
 in ( LrTable.NT 50, ( result, pat1left, pat1right), rest671)
end
|  ( 174, ( ( _, ( MlyValue.AND_typbind_opt AND_typbind_opt1, _, (
AND_typbind_optright as AND_typbind_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, (
tyvarseqleft as tyvarseq1left), _)) :: rest671)) => let val  result = 
MlyValue.typbind (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (AND_typbind_opt as AND_typbind_opt1) = AND_typbind_opt1 ()
 in (
 NEWTypBind(I(tyvarseqleft,AND_typbind_optright),
				     tyvarseq, tycon, AND_typbind_opt) 
)
end)
 in ( LrTable.NT 51, ( result, tyvarseq1left, AND_typbind_opt1right), 
rest671)
end
|  ( 175, ( ( _, ( MlyValue.AND_typbind_opt AND_typbind_opt1, _, (
AND_typbind_optright as AND_typbind_opt1right))) :: ( _, ( MlyValue.ty
 ty1, _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, (tyvarseqleft as tyvarseq1left), _)) :: 
rest671)) => let val  result = MlyValue.typbind (fn _ => let val  (
tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_typbind_opt as AND_typbind_opt1) = AND_typbind_opt1 ()
 in (
 EQUALTypBind(I(tyvarseqleft,AND_typbind_optright),
				  tyvarseq, tycon, ty, AND_typbind_opt) 
)
end)
 in ( LrTable.NT 51, ( result, tyvarseq1left, AND_typbind_opt1right), 
rest671)
end
|  ( 176, ( ( _, ( MlyValue.typbind typbind1, _, typbind1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_typbind_opt (fn _ => let val  (typbind as typbind1) = 
typbind1 ()
 in ( SOME typbind )
end)
 in ( LrTable.NT 52, ( result, AND1left, typbind1right), rest671)
end
|  ( 177, ( rest671)) => let val  result = MlyValue.AND_typbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 52, ( result, defaultPos, defaultPos), rest671)
end
|  ( 178, ( ( _, ( MlyValue.AND_datbind_opt AND_datbind_opt1, _, (
AND_datbind_optright as AND_datbind_opt1right))) :: ( _, ( 
MlyValue.conbind conbind1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1,
 _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, (tyvarseqleft as tyvarseq1left), _)) :: 
rest671)) => let val  result = MlyValue.datbind (fn _ => let val  (
tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (tycon as tycon1) = tycon1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (conbind as conbind1) = conbind1 ()
 val  (AND_datbind_opt as AND_datbind_opt1) = AND_datbind_opt1 ()
 in (
 DatBind(I(tyvarseqleft,AND_datbind_optright),
				  tyvarseq, tycon, conbind, AND_datbind_opt)
)
end)
 in ( LrTable.NT 53, ( result, tyvarseq1left, AND_datbind_opt1right), 
rest671)
end
|  ( 179, ( ( _, ( MlyValue.AND_datbind_opt AND_datbind_opt1, _, (
AND_datbind_optright as AND_datbind_opt1right))) :: ( _, ( 
MlyValue.conbind conbind1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1,
 _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, (tyconleft as tycon1left
), _)) :: rest671)) => let val  result = MlyValue.datbind0 (fn _ =>
 let val  (tycon as tycon1) = tycon1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (conbind as conbind1) = conbind1 ()
 val  (AND_datbind_opt as AND_datbind_opt1) = AND_datbind_opt1 ()
 in (
 DatBind(I(tyconleft,AND_datbind_optright),
				  Seq(I(defaultPos,defaultPos), []),
				  tycon, conbind, AND_datbind_opt) 
)
end)
 in ( LrTable.NT 54, ( result, tycon1left, AND_datbind_opt1right), 
rest671)
end
|  ( 180, ( ( _, ( MlyValue.AND_datbind_opt AND_datbind_opt1, _, (
AND_datbind_optright as AND_datbind_opt1right))) :: ( _, ( 
MlyValue.conbind conbind1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1,
 _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq1 tyvarseq11, (tyvarseq1left as tyvarseq11left), _))
 :: rest671)) => let val  result = MlyValue.datbind1 (fn _ => let val 
 (tyvarseq1 as tyvarseq11) = tyvarseq11 ()
 val  (tycon as tycon1) = tycon1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (conbind as conbind1) = conbind1 ()
 val  (AND_datbind_opt as AND_datbind_opt1) = AND_datbind_opt1 ()
 in (
 DatBind(I(tyvarseq1left,AND_datbind_optright),
				  tyvarseq1, tycon, conbind, AND_datbind_opt) 
)
end)
 in ( LrTable.NT 55, ( result, tyvarseq11left, AND_datbind_opt1right),
 rest671)
end
|  ( 181, ( ( _, ( MlyValue.datbind datbind1, _, datbind1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_datbind_opt (fn _ => let val  (datbind as datbind1) = 
datbind1 ()
 in ( SOME datbind )
end)
 in ( LrTable.NT 56, ( result, AND1left, datbind1right), rest671)
end
|  ( 182, ( rest671)) => let val  result = MlyValue.AND_datbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 56, ( result, defaultPos, defaultPos), rest671)
end
|  ( 183, ( ( _, ( MlyValue.BAR_conbind_opt BAR_conbind_opt1, _, (
BAR_conbind_optright as BAR_conbind_opt1right))) :: ( _, ( 
MlyValue.OF_ty_opt OF_ty_opt1, _, _)) :: ( _, ( MlyValue.vid vid1, _,
 _)) :: ( _, ( MlyValue.OP_opt OP_opt1, (OP_optleft as OP_opt1left), _
)) :: rest671)) => let val  result = MlyValue.conbind (fn _ => let
 val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (BAR_conbind_opt as BAR_conbind_opt1) = BAR_conbind_opt1 ()
 in (
 ConBind(I(OP_optleft,BAR_conbind_optright),
				  OP_opt, vid, OF_ty_opt, BAR_conbind_opt) 
)
end)
 in ( LrTable.NT 57, ( result, OP_opt1left, BAR_conbind_opt1right), 
rest671)
end
|  ( 184, ( ( _, ( MlyValue.conbind conbind1, _, conbind1right)) :: (
 _, ( _, BAR1left, _)) :: rest671)) => let val  result = 
MlyValue.BAR_conbind_opt (fn _ => let val  (conbind as conbind1) = 
conbind1 ()
 in ( SOME conbind )
end)
 in ( LrTable.NT 58, ( result, BAR1left, conbind1right), rest671)
end
|  ( 185, ( rest671)) => let val  result = MlyValue.BAR_conbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 58, ( result, defaultPos, defaultPos), rest671)
end
|  ( 186, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: ( _, ( _, OF1left
, _)) :: rest671)) => let val  result = MlyValue.OF_ty_opt (fn _ =>
 let val  (ty as ty1) = ty1 ()
 in ( SOME ty )
end)
 in ( LrTable.NT 59, ( result, OF1left, ty1right), rest671)
end
|  ( 187, ( rest671)) => let val  result = MlyValue.OF_ty_opt (fn _ =>
 ( NONE ))
 in ( LrTable.NT 59, ( result, defaultPos, defaultPos), rest671)
end
|  ( 188, ( ( _, ( MlyValue.AND_extbind_opt AND_extbind_opt1, _, (
AND_extbind_optright as AND_extbind_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, (
tyvarseqleft as tyvarseq1left), _)) :: rest671)) => let val  result = 
MlyValue.extbind (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (AND_extbind_opt as AND_extbind_opt1) = AND_extbind_opt1 ()
 in (
 ExtBind(I(tyvarseqleft,AND_extbind_optright),
				  tyvarseq, tycon, AND_extbind_opt) 
)
end)
 in ( LrTable.NT 60, ( result, tyvarseq1left, AND_extbind_opt1right), 
rest671)
end
|  ( 189, ( ( _, ( MlyValue.extbind extbind1, _, extbind1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_extbind_opt (fn _ => let val  (extbind as extbind1) = 
extbind1 ()
 in ( SOME extbind )
end)
 in ( LrTable.NT 61, ( result, AND1left, extbind1right), rest671)
end
|  ( 190, ( rest671)) => let val  result = MlyValue.AND_extbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 61, ( result, defaultPos, defaultPos), rest671)
end
|  ( 191, ( ( _, ( MlyValue.AND_econbind_opt AND_econbind_opt1, _, (
AND_econbind_optright as AND_econbind_opt1right))) :: ( _, ( 
MlyValue.longtycon longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq 
tyvarseq1, _, _)) :: _ :: ( _, ( MlyValue.OF_ty_opt OF_ty_opt1, _, _))
 :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1
, (OP_optleft as OP_opt1left), _)) :: rest671)) => let val  result = 
MlyValue.econbind (fn _ => let val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_econbind_opt as AND_econbind_opt1) = AND_econbind_opt1 ()
 in (
 NEWEconBind(I(OP_optleft,AND_econbind_optright),
				      OP_opt, vid, OF_ty_opt, tyvarseq,
				      longtycon, AND_econbind_opt) 
)
end)
 in ( LrTable.NT 62, ( result, OP_opt1left, AND_econbind_opt1right), 
rest671)
end
|  ( 192, ( ( _, ( MlyValue.AND_econbind_opt AND_econbind_opt1, _, (
AND_econbind_optright as AND_econbind_opt1right))) :: ( _, ( 
MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _
, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, OP_opt1left, _)) :: rest671)) => let val  
result = MlyValue.econbind (fn _ => let val  OP_opt1 = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  (longvid as longvid1) = longvid1 ()
 val  (AND_econbind_opt as AND_econbind_opt1) = AND_econbind_opt1 ()
 in (
 EQUALEconBind(I(OP_opt1left,AND_econbind_optright),
					OP_opt1, vid,
					OP_opt2, longvid, AND_econbind_opt) 
)
end)
 in ( LrTable.NT 62, ( result, OP_opt1left, AND_econbind_opt1right), 
rest671)
end
|  ( 193, ( ( _, ( MlyValue.econbind econbind1, _, econbind1right)) ::
 ( _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_econbind_opt (fn _ => let val  (econbind as econbind1) = 
econbind1 ()
 in ( SOME econbind )
end)
 in ( LrTable.NT 63, ( result, AND1left, econbind1right), rest671)
end
|  ( 194, ( rest671)) => let val  result = MlyValue.AND_econbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 63, ( result, defaultPos, defaultPos), rest671)
end
|  ( 195, ( ( _, ( MlyValue.AND_exbind_opt AND_exbind_opt1, _, (
AND_exbind_optright as AND_exbind_opt1right))) :: ( _, ( 
MlyValue.OF_ty_opt OF_ty_opt1, _, _)) :: ( _, ( MlyValue.vid vid1, _,
 _)) :: ( _, ( MlyValue.OP_opt OP_opt1, (OP_optleft as OP_opt1left), _
)) :: rest671)) => let val  result = MlyValue.exbind (fn _ => let val 
 (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (AND_exbind_opt as AND_exbind_opt1) = AND_exbind_opt1 ()
 in (
 NEWExBind(I(OP_optleft,AND_exbind_optright),
				    OP_opt, vid, OF_ty_opt, AND_exbind_opt) 
)
end)
 in ( LrTable.NT 64, ( result, OP_opt1left, AND_exbind_opt1right), 
rest671)
end
|  ( 196, ( ( _, ( MlyValue.AND_exbind_opt AND_exbind_opt1, _, (
AND_exbind_optright as AND_exbind_opt1right))) :: ( _, ( 
MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _
, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, OP_opt1left, _)) :: rest671)) => let val  
result = MlyValue.exbind (fn _ => let val  OP_opt1 = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  (longvid as longvid1) = longvid1 ()
 val  (AND_exbind_opt as AND_exbind_opt1) = AND_exbind_opt1 ()
 in (
 EQUALExBind(I(OP_opt1left,AND_exbind_optright),
				      OP_opt1, vid,
				      OP_opt2, longvid, AND_exbind_opt) 
)
end)
 in ( LrTable.NT 64, ( result, OP_opt1left, AND_exbind_opt1right), 
rest671)
end
|  ( 197, ( ( _, ( MlyValue.exbind exbind1, _, exbind1right)) :: ( _, 
( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_exbind_opt (fn _ => let val  (exbind as exbind1) = 
exbind1 ()
 in ( SOME exbind )
end)
 in ( LrTable.NT 65, ( result, AND1left, exbind1right), rest671)
end
|  ( 198, ( rest671)) => let val  result = MlyValue.AND_exbind_opt (fn
 _ => ( NONE ))
 in ( LrTable.NT 65, ( result, defaultPos, defaultPos), rest671)
end
|  ( 199, ( ( _, ( _, (UNDERBARleft as UNDERBAR1left), (UNDERBARright
 as UNDERBAR1right))) :: rest671)) => let val  result = MlyValue.atpat
 (fn _ => ( WILDCARDAtPat(I(UNDERBARleft,UNDERBARright)) ))
 in ( LrTable.NT 66, ( result, UNDERBAR1left, UNDERBAR1right), rest671
)
end
|  ( 200, ( ( _, ( MlyValue.longvid' longvid'1, (longvid'left as 
longvid'1left), (longvid'right as longvid'1right))) :: rest671)) =>
 let val  result = MlyValue.atpat (fn _ => let val  (longvid' as 
longvid'1) = longvid'1 ()
 in (
 LONGVIDAtPat(I(longvid'left,longvid'right),
				       SANSOp, longvid') 
)
end)
 in ( LrTable.NT 66, ( result, longvid'1left, longvid'1right), rest671
)
end
|  ( 201, ( ( _, ( MlyValue.longvid longvid1, _, (longvidright as 
longvid1right))) :: ( _, ( _, (OPleft as OP1left), _)) :: rest671)) =>
 let val  result = MlyValue.atpat (fn _ => let val  (longvid as 
longvid1) = longvid1 ()
 in (
 LONGVIDAtPat(I(OPleft,longvidright),
				       WITHOp, longvid) )

end)
 in ( LrTable.NT 66, ( result, OP1left, longvid1right), rest671)
end
|  ( 202, ( ( _, ( MlyValue.scon scon1, (sconleft as scon1left), (
sconright as scon1right))) :: rest671)) => let val  result = 
MlyValue.atpat (fn _ => let val  (scon as scon1) = scon1 ()
 in ( SCONAtPat(I(sconleft,sconright), scon) )
end)
 in ( LrTable.NT 66, ( result, scon1left, scon1right), rest671)
end
|  ( 203, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.patrow_opt patrow_opt1, _, _)) :: ( _, ( _, (LBRACEleft as 
LBRACE1left), _)) :: rest671)) => let val  result = MlyValue.atpat (fn
 _ => let val  (patrow_opt as patrow_opt1) = patrow_opt1 ()
 in ( RECORDAtPat(I(LBRACEleft,RBRACEright), patrow_opt) )
end)
 in ( LrTable.NT 66, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 204, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( _, (
LPARleft as LPAR1left), _)) :: rest671)) => let val  result = 
MlyValue.atpat (fn _ => ( UNITAtPat(I(LPARleft,RPARright)) ))
 in ( LrTable.NT 66, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 205, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.pat_COMMA_list2 pat_COMMA_list21, _, _)) :: ( _, ( _, (
LPARleft as LPAR1left), _)) :: rest671)) => let val  result = 
MlyValue.atpat (fn _ => let val  (pat_COMMA_list2 as pat_COMMA_list21)
 = pat_COMMA_list21 ()
 in ( TUPLEAtPat(I(LPARleft,RPARright), pat_COMMA_list2) )
end)
 in ( LrTable.NT 66, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 206, ( ( _, ( _, _, (RBRACKright as RBRACK1right))) :: ( _, ( 
MlyValue.pat_COMMA_list0 pat_COMMA_list01, _, _)) :: ( _, ( _, (
LBRACKleft as LBRACK1left), _)) :: rest671)) => let val  result = 
MlyValue.atpat (fn _ => let val  (pat_COMMA_list0 as pat_COMMA_list01)
 = pat_COMMA_list01 ()
 in ( LISTAtPat(I(LBRACKleft,RBRACKright),
				    pat_COMMA_list0) )

end)
 in ( LrTable.NT 66, ( result, LBRACK1left, RBRACK1right), rest671)

end
|  ( 207, ( ( _, ( _, _, (RBRACKright as RBRACK1right))) :: ( _, ( 
MlyValue.pat_COMMA_list0 pat_COMMA_list01, _, _)) :: ( _, ( _, (
HASHBRACKleft as HASHBRACK1left), _)) :: rest671)) => let val  result
 = MlyValue.atpat (fn _ => let val  (pat_COMMA_list0 as 
pat_COMMA_list01) = pat_COMMA_list01 ()
 in (
 VECTORAtPat(I(HASHBRACKleft,RBRACKright),
				    pat_COMMA_list0) )

end)
 in ( LrTable.NT 66, ( result, HASHBRACK1left, RBRACK1right), rest671)

end
|  ( 208, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.pat pat1, _, _)) :: ( _, ( _, (LPARleft as LPAR1left), _)) ::
 rest671)) => let val  result = MlyValue.atpat (fn _ => let val  (pat
 as pat1) = pat1 ()
 in ( PARAtPat(I(LPARleft,RPARright), pat) )
end)
 in ( LrTable.NT 66, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 209, ( ( _, ( MlyValue.pat_COMMA_list1 pat_COMMA_list11, 
pat_COMMA_list11left, pat_COMMA_list11right)) :: rest671)) => let val 
 result = MlyValue.pat_COMMA_list0 (fn _ => let val  (pat_COMMA_list1
 as pat_COMMA_list11) = pat_COMMA_list11 ()
 in ( pat_COMMA_list1 )
end)
 in ( LrTable.NT 67, ( result, pat_COMMA_list11left, 
pat_COMMA_list11right), rest671)
end
|  ( 210, ( rest671)) => let val  result = MlyValue.pat_COMMA_list0
 (fn _ => ( [] ))
 in ( LrTable.NT 67, ( result, defaultPos, defaultPos), rest671)
end
|  ( 211, ( ( _, ( MlyValue.pat_COMMA_list1 pat_COMMA_list11, _, 
pat_COMMA_list11right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)
) :: rest671)) => let val  result = MlyValue.pat_COMMA_list1 (fn _ =>
 let val  (pat as pat1) = pat1 ()
 val  (pat_COMMA_list1 as pat_COMMA_list11) = pat_COMMA_list11 ()
 in ( pat::pat_COMMA_list1 )
end)
 in ( LrTable.NT 68, ( result, pat1left, pat_COMMA_list11right), 
rest671)
end
|  ( 212, ( ( _, ( MlyValue.pat pat1, pat1left, pat1right)) :: rest671
)) => let val  result = MlyValue.pat_COMMA_list1 (fn _ => let val  (
pat as pat1) = pat1 ()
 in ( pat::[] )
end)
 in ( LrTable.NT 68, ( result, pat1left, pat1right), rest671)
end
|  ( 213, ( ( _, ( MlyValue.pat_COMMA_list1 pat_COMMA_list11, _, 
pat_COMMA_list11right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)
) :: rest671)) => let val  result = MlyValue.pat_COMMA_list2 (fn _ =>
 let val  (pat as pat1) = pat1 ()
 val  (pat_COMMA_list1 as pat_COMMA_list11) = pat_COMMA_list11 ()
 in ( pat::pat_COMMA_list1 )
end)
 in ( LrTable.NT 69, ( result, pat1left, pat_COMMA_list11right), 
rest671)
end
|  ( 214, ( ( _, ( MlyValue.COMMA_patrow_opt COMMA_patrow_opt1, _, 
COMMA_patrow_opt1right)) :: ( _, ( _, (DOTSleft as DOTS1left), 
DOTSright)) :: rest671)) => let val  result = MlyValue.patrow (fn _ =>
 let val  (COMMA_patrow_opt as COMMA_patrow_opt1) = COMMA_patrow_opt1
 ()
 in (
 DOTSPatRow(I(DOTSleft,DOTSright),
				     NONE, COMMA_patrow_opt) )

end)
 in ( LrTable.NT 70, ( result, DOTS1left, COMMA_patrow_opt1right), 
rest671)
end
|  ( 215, ( ( _, ( MlyValue.COMMA_patrow_opt COMMA_patrow_opt1, _, 
COMMA_patrow_opt1right)) :: ( _, ( MlyValue.pat pat1, _, _)) :: _ :: (
 _, ( _, (DOTSleft as DOTS1left), DOTSright)) :: rest671)) => let val 
 result = MlyValue.patrow (fn _ => let val  (pat as pat1) = pat1 ()
 val  (COMMA_patrow_opt as COMMA_patrow_opt1) = COMMA_patrow_opt1 ()
 in (
 DOTSPatRow(I(DOTSleft,DOTSright),
				     SOME pat, COMMA_patrow_opt) 
)
end)
 in ( LrTable.NT 70, ( result, DOTS1left, COMMA_patrow_opt1right), 
rest671)
end
|  ( 216, ( ( _, ( MlyValue.COMMA_patrow_opt COMMA_patrow_opt1, _, (
COMMA_patrow_optright as COMMA_patrow_opt1right))) :: ( _, ( 
MlyValue.pat pat1, _, _)) :: _ :: ( _, ( MlyValue.lab lab1, (lableft
 as lab1left), _)) :: rest671)) => let val  result = MlyValue.patrow
 (fn _ => let val  (lab as lab1) = lab1 ()
 val  (pat as pat1) = pat1 ()
 val  (COMMA_patrow_opt as COMMA_patrow_opt1) = COMMA_patrow_opt1 ()
 in (
 ROWPatRow(I(lableft,COMMA_patrow_optright),
				      lab, pat, COMMA_patrow_opt) 
)
end)
 in ( LrTable.NT 70, ( result, lab1left, COMMA_patrow_opt1right), 
rest671)
end
|  ( 217, ( ( _, ( MlyValue.COMMA_patrow_opt COMMA_patrow_opt1, _, (
COMMA_patrow_optright as COMMA_patrow_opt1right))) :: ( _, ( 
MlyValue.AS_pat_opt AS_pat_opt1, _, _)) :: ( _, ( 
MlyValue.COLON_ty_opt COLON_ty_opt1, _, _)) :: ( _, ( MlyValue.vid' 
vid'1, (vid'left as vid'1left), _)) :: rest671)) => let val  result = 
MlyValue.patrow (fn _ => let val  (vid' as vid'1) = vid'1 ()
 val  (COLON_ty_opt as COLON_ty_opt1) = COLON_ty_opt1 ()
 val  (AS_pat_opt as AS_pat_opt1) = AS_pat_opt1 ()
 val  (COMMA_patrow_opt as COMMA_patrow_opt1) = COMMA_patrow_opt1 ()
 in (
 VIDPatRow(I(vid'left,COMMA_patrow_optright),
				    vid', COLON_ty_opt, AS_pat_opt,
				    COMMA_patrow_opt) 
)
end)
 in ( LrTable.NT 70, ( result, vid'1left, COMMA_patrow_opt1right), 
rest671)
end
|  ( 218, ( ( _, ( MlyValue.patrow patrow1, _, patrow1right)) :: ( _, 
( _, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.COMMA_patrow_opt (fn _ => let val  (patrow as patrow1) = 
patrow1 ()
 in ( SOME patrow )
end)
 in ( LrTable.NT 72, ( result, COMMA1left, patrow1right), rest671)
end
|  ( 219, ( rest671)) => let val  result = MlyValue.COMMA_patrow_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 72, ( result, defaultPos, defaultPos), rest671)
end
|  ( 220, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: ( _, ( _, 
COLON1left, _)) :: rest671)) => let val  result = 
MlyValue.COLON_ty_opt (fn _ => let val  (ty as ty1) = ty1 ()
 in ( SOME ty )
end)
 in ( LrTable.NT 73, ( result, COLON1left, ty1right), rest671)
end
|  ( 221, ( rest671)) => let val  result = MlyValue.COLON_ty_opt (fn _
 => ( NONE ))
 in ( LrTable.NT 73, ( result, defaultPos, defaultPos), rest671)
end
|  ( 222, ( ( _, ( MlyValue.pat pat1, _, pat1right)) :: ( _, ( _, 
AS1left, _)) :: rest671)) => let val  result = MlyValue.AS_pat_opt (fn
 _ => let val  (pat as pat1) = pat1 ()
 in ( SOME pat )
end)
 in ( LrTable.NT 74, ( result, AS1left, pat1right), rest671)
end
|  ( 223, ( rest671)) => let val  result = MlyValue.AS_pat_opt (fn _
 => ( NONE ))
 in ( LrTable.NT 74, ( result, defaultPos, defaultPos), rest671)
end
|  ( 224, ( ( _, ( MlyValue.patrow patrow1, patrow1left, patrow1right)
) :: rest671)) => let val  result = MlyValue.patrow_opt (fn _ => let
 val  (patrow as patrow1) = patrow1 ()
 in ( SOME patrow )
end)
 in ( LrTable.NT 71, ( result, patrow1left, patrow1right), rest671)

end
|  ( 225, ( rest671)) => let val  result = MlyValue.patrow_opt (fn _
 => ( NONE ))
 in ( LrTable.NT 71, ( result, defaultPos, defaultPos), rest671)
end
|  ( 226, ( ( _, ( MlyValue.atpat atpat1, (atpatleft as atpat1left), (
atpatright as atpat1right))) :: rest671)) => let val  result = 
MlyValue.infpat (fn _ => let val  (atpat as atpat1) = atpat1 ()
 in ( ATPATPat(I(atpatleft,atpatright), atpat) )
end)
 in ( LrTable.NT 75, ( result, atpat1left, atpat1right), rest671)
end
|  ( 227, ( ( _, ( MlyValue.atpat atpat1, _, (atpatright as 
atpat1right))) :: ( _, ( MlyValue.infpat infpat1, (infpatleft as 
infpat1left), _)) :: rest671)) => let val  result = MlyValue.infpat
 (fn _ => let val  (infpat as infpat1) = infpat1 ()
 val  (atpat as atpat1) = atpat1 ()
 in ( APPPat(I(infpatleft,atpatright), infpat, atpat) )
end)
 in ( LrTable.NT 75, ( result, infpat1left, atpat1right), rest671)
end
|  ( 228, ( ( _, ( MlyValue.infpat infpat1, infpat1left, infpat1right)
) :: rest671)) => let val  result = MlyValue.pat (fn _ => let val  (
infpat as infpat1) = infpat1 ()
 in ( infpat )
end)
 in ( LrTable.NT 76, ( result, infpat1left, infpat1right), rest671)

end
|  ( 229, ( ( _, ( MlyValue.ty ty1, _, (tyright as ty1right))) :: _ ::
 ( _, ( MlyValue.pat pat1, (patleft as pat1left), _)) :: rest671)) =>
 let val  result = MlyValue.pat (fn _ => let val  (pat as pat1) = pat1
 ()
 val  (ty as ty1) = ty1 ()
 in ( TYPEDPat(I(patleft,tyright), pat, ty) )
end)
 in ( LrTable.NT 76, ( result, pat1left, ty1right), rest671)
end
|  ( 230, ( ( _, ( MlyValue.pat pat1, _, (patright as pat1right))) :: 
( _, ( _, (NONleft as NON1left), _)) :: rest671)) => let val  result =
 MlyValue.pat (fn _ => let val  (pat as pat1) = pat1 ()
 in ( NONPat(I(NONleft,patright), pat) )
end)
 in ( LrTable.NT 76, ( result, NON1left, pat1right), rest671)
end
|  ( 231, ( ( _, ( MlyValue.pat pat2, _, pat2right)) :: _ :: ( _, ( 
MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = 
MlyValue.pat (fn _ => let val  pat1 = pat1 ()
 val  pat2 = pat2 ()
 in ( ASPat(I(pat1left,pat2right), pat1, pat2) )
end)
 in ( LrTable.NT 76, ( result, pat1left, pat2right), rest671)
end
|  ( 232, ( ( _, ( MlyValue.pat pat2, _, pat2right)) :: _ :: ( _, ( 
MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = 
MlyValue.pat (fn _ => let val  pat1 = pat1 ()
 val  pat2 = pat2 ()
 in (
 ATPATPat(I(pat1left,pat2right),
				   ALTAtPat(I(pat1left,pat2right),
					    [pat1, pat2])) 
)
end)
 in ( LrTable.NT 76, ( result, pat1left, pat2right), rest671)
end
|  ( 233, ( ( _, ( MlyValue.atexp atexp1, _, (atexpright as 
atexp1right))) :: _ :: ( _, ( MlyValue.pat pat1, (patleft as pat1left)
, _)) :: rest671)) => let val  result = MlyValue.pat (fn _ => let val 
 (pat as pat1) = pat1 ()
 val  (atexp as atexp1) = atexp1 ()
 in ( IFPat(I(patleft,atexpright), pat, atexp) )
end)
 in ( LrTable.NT 76, ( result, pat1left, atexp1right), rest671)
end
|  ( 234, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.valbind valbind1, _, _)) :: _ :: ( _, ( MlyValue.pat pat1, (
patleft as pat1left), _)) :: rest671)) => let val  result = 
MlyValue.pat (fn _ => let val  (pat as pat1) = pat1 ()
 val  (valbind as valbind1) = valbind1 ()
 in ( WITHVALPat(I(patleft,ENDright), pat, valbind) )
end)
 in ( LrTable.NT 76, ( result, pat1left, END1right), rest671)
end
|  ( 235, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.fvalbind fvalbind1, _, _)) :: _ :: ( _, ( MlyValue.pat pat1,
 (patleft as pat1left), _)) :: rest671)) => let val  result = 
MlyValue.pat (fn _ => let val  (pat as pat1) = pat1 ()
 val  (fvalbind as fvalbind1) = fvalbind1 ()
 in ( WITHFUNPat(I(patleft,ENDright), pat, fvalbind) )
end)
 in ( LrTable.NT 76, ( result, pat1left, END1right), rest671)
end
|  ( 236, ( ( _, ( MlyValue.tupty tupty1, tupty1left, tupty1right)) ::
 rest671)) => let val  result = MlyValue.ty (fn _ => let val  (tupty
 as tupty1) = tupty1 ()
 in ( tupty )
end)
 in ( LrTable.NT 77, ( result, tupty1left, tupty1right), rest671)
end
|  ( 237, ( ( _, ( MlyValue.ty ty1, _, (tyright as ty1right))) :: _ ::
 ( _, ( MlyValue.tupty tupty1, (tuptyleft as tupty1left), _)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (tupty
 as tupty1) = tupty1 ()
 val  (ty as ty1) = ty1 ()
 in ( ARROWTy(I(tuptyleft,tyright), tupty, ty) )
end)
 in ( LrTable.NT 77, ( result, tupty1left, ty1right), rest671)
end
|  ( 238, ( ( _, ( MlyValue.ty_STAR_list ty_STAR_list1, (
ty_STAR_listleft as ty_STAR_list1left), (ty_STAR_listright as 
ty_STAR_list1right))) :: rest671)) => let val  result = MlyValue.tupty
 (fn _ => let val  (ty_STAR_list as ty_STAR_list1) = ty_STAR_list1 ()
 in (
 TUPLETy(I(ty_STAR_listleft,ty_STAR_listright),
				   ty_STAR_list) )

end)
 in ( LrTable.NT 78, ( result, ty_STAR_list1left, ty_STAR_list1right),
 rest671)
end
|  ( 239, ( ( _, ( MlyValue.ty_STAR_list ty_STAR_list1, _, 
ty_STAR_list1right)) :: _ :: ( _, ( MlyValue.consty consty1, 
consty1left, _)) :: rest671)) => let val  result = 
MlyValue.ty_STAR_list (fn _ => let val  (consty as consty1) = consty1
 ()
 val  (ty_STAR_list as ty_STAR_list1) = ty_STAR_list1 ()
 in ( consty::ty_STAR_list )
end)
 in ( LrTable.NT 79, ( result, consty1left, ty_STAR_list1right), 
rest671)
end
|  ( 240, ( ( _, ( MlyValue.consty consty1, consty1left, consty1right)
) :: rest671)) => let val  result = MlyValue.ty_STAR_list (fn _ => let
 val  (consty as consty1) = consty1 ()
 in ( consty::[] )
end)
 in ( LrTable.NT 79, ( result, consty1left, consty1right), rest671)

end
|  ( 241, ( ( _, ( MlyValue.atty atty1, atty1left, atty1right)) :: 
rest671)) => let val  result = MlyValue.consty (fn _ => let val  (atty
 as atty1) = atty1 ()
 in ( atty )
end)
 in ( LrTable.NT 80, ( result, atty1left, atty1right), rest671)
end
|  ( 242, ( ( _, ( MlyValue.longtycon longtycon1, _, (longtyconright
 as longtycon1right))) :: ( _, ( MlyValue.tyseq tyseq1, (tyseqleft as 
tyseq1left), _)) :: rest671)) => let val  result = MlyValue.consty (fn
 _ => let val  (tyseq as tyseq1) = tyseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 in ( TYCONTy(I(tyseqleft,longtyconright),
					  tyseq, longtycon) )

end)
 in ( LrTable.NT 80, ( result, tyseq1left, longtycon1right), rest671)

end
|  ( 243, ( ( _, ( _, (UNDERBARleft as UNDERBAR1left), (UNDERBARright
 as UNDERBAR1right))) :: rest671)) => let val  result = MlyValue.atty
 (fn _ => ( WILDCARDTy(I(UNDERBARleft,UNDERBARright)) ))
 in ( LrTable.NT 81, ( result, UNDERBAR1left, UNDERBAR1right), rest671
)
end
|  ( 244, ( ( _, ( MlyValue.tyvar tyvar1, (tyvarleft as tyvar1left), (
tyvarright as tyvar1right))) :: rest671)) => let val  result = 
MlyValue.atty (fn _ => let val  (tyvar as tyvar1) = tyvar1 ()
 in ( TYVARTy(I(tyvarleft,tyvarright), tyvar) )
end)
 in ( LrTable.NT 81, ( result, tyvar1left, tyvar1right), rest671)
end
|  ( 245, ( ( _, ( _, _, (RBRACEright as RBRACE1right))) :: ( _, ( 
MlyValue.tyrow_opt tyrow_opt1, _, _)) :: ( _, ( _, (LBRACEleft as 
LBRACE1left), _)) :: rest671)) => let val  result = MlyValue.atty (fn
 _ => let val  (tyrow_opt as tyrow_opt1) = tyrow_opt1 ()
 in ( RECORDTy(I(LBRACEleft,RBRACEright), tyrow_opt) )
end)
 in ( LrTable.NT 81, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 246, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.ty ty1, _, _)) :: ( _, ( _, (LPARleft as LPAR1left), _)) :: 
rest671)) => let val  result = MlyValue.atty (fn _ => let val  (ty as 
ty1) = ty1 ()
 in ( PARTy(I(LPARleft,RPARright), ty) )
end)
 in ( LrTable.NT 81, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 247, ( ( _, ( MlyValue.COMMA_tyrow_opt COMMA_tyrow_opt1, _, (
COMMA_tyrow_optright as COMMA_tyrow_opt1right))) :: ( _, ( MlyValue.ty
 ty1, _, _)) :: _ :: ( _, ( MlyValue.lab lab1, (lableft as lab1left),
 _)) :: rest671)) => let val  result = MlyValue.tyrow (fn _ => let
 val  (lab as lab1) = lab1 ()
 val  (ty as ty1) = ty1 ()
 val  (COMMA_tyrow_opt as COMMA_tyrow_opt1) = COMMA_tyrow_opt1 ()
 in (
 ROWTyRow(I(lableft,COMMA_tyrow_optright),
				   lab, ty, COMMA_tyrow_opt) 
)
end)
 in ( LrTable.NT 82, ( result, lab1left, COMMA_tyrow_opt1right), 
rest671)
end
|  ( 248, ( ( _, ( MlyValue.COMMA_tyrow_opt COMMA_tyrow_opt1, _, (
COMMA_tyrow_optright as COMMA_tyrow_opt1right))) :: ( _, ( MlyValue.ty
 ty1, _, _)) :: _ :: ( _, ( _, (DOTSleft as DOTS1left), _)) :: rest671
)) => let val  result = MlyValue.tyrow (fn _ => let val  (ty as ty1) =
 ty1 ()
 val  (COMMA_tyrow_opt as COMMA_tyrow_opt1) = COMMA_tyrow_opt1 ()
 in (
 DOTSTyRow(I(DOTSleft,COMMA_tyrow_optright),
				    ty, COMMA_tyrow_opt) 
)
end)
 in ( LrTable.NT 82, ( result, DOTS1left, COMMA_tyrow_opt1right), 
rest671)
end
|  ( 249, ( ( _, ( MlyValue.tyrow tyrow1, _, tyrow1right)) :: ( _, ( _
, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.COMMA_tyrow_opt (fn _ => let val  (tyrow as tyrow1) = tyrow1
 ()
 in ( SOME tyrow )
end)
 in ( LrTable.NT 84, ( result, COMMA1left, tyrow1right), rest671)
end
|  ( 250, ( rest671)) => let val  result = MlyValue.COMMA_tyrow_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 84, ( result, defaultPos, defaultPos), rest671)
end
|  ( 251, ( ( _, ( MlyValue.tyrow tyrow1, tyrow1left, tyrow1right)) ::
 rest671)) => let val  result = MlyValue.tyrow_opt (fn _ => let val  (
tyrow as tyrow1) = tyrow1 ()
 in ( SOME tyrow )
end)
 in ( LrTable.NT 83, ( result, tyrow1left, tyrow1right), rest671)
end
|  ( 252, ( rest671)) => let val  result = MlyValue.tyrow_opt (fn _ =>
 ( NONE ))
 in ( LrTable.NT 83, ( result, defaultPos, defaultPos), rest671)
end
|  ( 253, ( ( _, ( MlyValue.consty consty1, (constyleft as consty1left
), (constyright as consty1right))) :: rest671)) => let val  result = 
MlyValue.tyseq (fn _ => let val  (consty as consty1) = consty1 ()
 in ( Seq(I(constyleft,constyright),
					      [consty]) )
end)
 in ( LrTable.NT 85, ( result, consty1left, consty1right), rest671)

end
|  ( 254, ( rest671)) => let val  result = MlyValue.tyseq (fn _ => (
 Seq(I(defaultPos,defaultPos), []) ))
 in ( LrTable.NT 85, ( result, defaultPos, defaultPos), rest671)
end
|  ( 255, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.ty_COMMA_list2 ty_COMMA_list21, _, _)) :: ( _, ( _, (LPARleft
 as LPAR1left), _)) :: rest671)) => let val  result = MlyValue.tyseq
 (fn _ => let val  (ty_COMMA_list2 as ty_COMMA_list21) = 
ty_COMMA_list21 ()
 in ( Seq(I(LPARleft,RPARright),
					      ty_COMMA_list2) )
end)
 in ( LrTable.NT 85, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 256, ( ( _, ( MlyValue.ty_COMMA_list2 ty_COMMA_list21, _, 
ty_COMMA_list21right)) :: _ :: ( _, ( MlyValue.ty ty1, ty1left, _)) ::
 rest671)) => let val  result = MlyValue.ty_COMMA_list2 (fn _ => let
 val  (ty as ty1) = ty1 ()
 val  (ty_COMMA_list2 as ty_COMMA_list21) = ty_COMMA_list21 ()
 in ( ty::ty_COMMA_list2 )
end)
 in ( LrTable.NT 86, ( result, ty1left, ty_COMMA_list21right), rest671
)
end
|  ( 257, ( ( _, ( MlyValue.ty ty2, _, ty2right)) :: _ :: ( _, ( 
MlyValue.ty ty1, ty1left, _)) :: rest671)) => let val  result = 
MlyValue.ty_COMMA_list2 (fn _ => let val  ty1 = ty1 ()
 val  ty2 = ty2 ()
 in ( [ty1, ty2] )
end)
 in ( LrTable.NT 86, ( result, ty1left, ty2right), rest671)
end
|  ( 258, ( ( _, ( MlyValue.tyvarseq1 tyvarseq11, tyvarseq11left, 
tyvarseq11right)) :: rest671)) => let val  result = MlyValue.tyvarseq
 (fn _ => let val  (tyvarseq1 as tyvarseq11) = tyvarseq11 ()
 in ( tyvarseq1 )
end)
 in ( LrTable.NT 87, ( result, tyvarseq11left, tyvarseq11right), 
rest671)
end
|  ( 259, ( rest671)) => let val  result = MlyValue.tyvarseq (fn _ =>
 ( Seq(I(defaultPos,defaultPos), []) ))
 in ( LrTable.NT 87, ( result, defaultPos, defaultPos), rest671)
end
|  ( 260, ( ( _, ( MlyValue.tyvar tyvar1, (tyvarleft as tyvar1left), (
tyvarright as tyvar1right))) :: rest671)) => let val  result = 
MlyValue.tyvarseq1 (fn _ => let val  (tyvar as tyvar1) = tyvar1 ()
 in ( Seq(I(tyvarleft,tyvarright), [tyvar]))
end)
 in ( LrTable.NT 88, ( result, tyvar1left, tyvar1right), rest671)
end
|  ( 261, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.tyvar_COMMA_list1 tyvar_COMMA_list11, _, _)) :: ( _, ( _, (
LPARleft as LPAR1left), _)) :: rest671)) => let val  result = 
MlyValue.tyvarseq1 (fn _ => let val  (tyvar_COMMA_list1 as 
tyvar_COMMA_list11) = tyvar_COMMA_list11 ()
 in ( Seq(I(LPARleft,RPARright),
					      tyvar_COMMA_list1) )
end)
 in ( LrTable.NT 88, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 262, ( ( _, ( MlyValue.tyvar_COMMA_list1 tyvar_COMMA_list11, _, 
tyvar_COMMA_list11right)) :: _ :: ( _, ( MlyValue.tyvar tyvar1, 
tyvar1left, _)) :: rest671)) => let val  result = 
MlyValue.tyvar_COMMA_list1 (fn _ => let val  (tyvar as tyvar1) = 
tyvar1 ()
 val  (tyvar_COMMA_list1 as tyvar_COMMA_list11) = tyvar_COMMA_list11
 ()
 in ( tyvar::tyvar_COMMA_list1 )
end)
 in ( LrTable.NT 89, ( result, tyvar1left, tyvar_COMMA_list11right), 
rest671)
end
|  ( 263, ( ( _, ( MlyValue.tyvar tyvar1, tyvar1left, tyvar1right)) ::
 rest671)) => let val  result = MlyValue.tyvar_COMMA_list1 (fn _ =>
 let val  (tyvar as tyvar1) = tyvar1 ()
 in ( tyvar::[] )
end)
 in ( LrTable.NT 89, ( result, tyvar1left, tyvar1right), rest671)
end
|  ( 264, ( ( _, ( MlyValue.longtyconseq1 longtyconseq11, 
longtyconseq11left, longtyconseq11right)) :: rest671)) => let val  
result = MlyValue.longtyconseq (fn _ => let val  (longtyconseq1 as 
longtyconseq11) = longtyconseq11 ()
 in ( longtyconseq1 )
end)
 in ( LrTable.NT 90, ( result, longtyconseq11left, longtyconseq11right
), rest671)
end
|  ( 265, ( rest671)) => let val  result = MlyValue.longtyconseq (fn _
 => ( Seq(I(defaultPos,defaultPos), []) ))
 in ( LrTable.NT 90, ( result, defaultPos, defaultPos), rest671)
end
|  ( 266, ( ( _, ( MlyValue.longtycon longtycon1, (longtyconleft as 
longtycon1left), (longtyconright as longtycon1right))) :: rest671)) =>
 let val  result = MlyValue.longtyconseq1 (fn _ => let val  (longtycon
 as longtycon1) = longtycon1 ()
 in ( Seq(I(longtyconleft,longtyconright),
					      [longtycon]))

end)
 in ( LrTable.NT 91, ( result, longtycon1left, longtycon1right), 
rest671)
end
|  ( 267, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.longtycon_COMMA_list1 longtycon_COMMA_list11, _, _)) :: ( _, 
( _, (LPARleft as LPAR1left), _)) :: rest671)) => let val  result = 
MlyValue.longtyconseq1 (fn _ => let val  (longtycon_COMMA_list1 as 
longtycon_COMMA_list11) = longtycon_COMMA_list11 ()
 in ( Seq(I(LPARleft,RPARright),
					      longtycon_COMMA_list1) )

end)
 in ( LrTable.NT 91, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 268, ( ( _, ( MlyValue.longtycon_COMMA_list1 
longtycon_COMMA_list11, _, longtycon_COMMA_list11right)) :: _ :: ( _, 
( MlyValue.longtycon longtycon1, longtycon1left, _)) :: rest671)) =>
 let val  result = MlyValue.longtycon_COMMA_list1 (fn _ => let val  (
longtycon as longtycon1) = longtycon1 ()
 val  (longtycon_COMMA_list1 as longtycon_COMMA_list11) = 
longtycon_COMMA_list11 ()
 in ( longtycon::longtycon_COMMA_list1 )
end)
 in ( LrTable.NT 92, ( result, longtycon1left, 
longtycon_COMMA_list11right), rest671)
end
|  ( 269, ( ( _, ( MlyValue.longtycon longtycon1, longtycon1left, 
longtycon1right)) :: rest671)) => let val  result = 
MlyValue.longtycon_COMMA_list1 (fn _ => let val  (longtycon as 
longtycon1) = longtycon1 ()
 in ( longtycon::[] )
end)
 in ( LrTable.NT 92, ( result, longtycon1left, longtycon1right), 
rest671)
end
|  ( 270, ( ( _, ( MlyValue.longvidseq1 longvidseq11, longvidseq11left
, longvidseq11right)) :: rest671)) => let val  result = 
MlyValue.longvidseq (fn _ => let val  (longvidseq1 as longvidseq11) = 
longvidseq11 ()
 in ( longvidseq1 )
end)
 in ( LrTable.NT 93, ( result, longvidseq11left, longvidseq11right), 
rest671)
end
|  ( 271, ( rest671)) => let val  result = MlyValue.longvidseq (fn _
 => ( Seq(I(defaultPos,defaultPos), []) ))
 in ( LrTable.NT 93, ( result, defaultPos, defaultPos), rest671)
end
|  ( 272, ( ( _, ( MlyValue.longvid longvid1, (longvidleft as 
longvid1left), (longvidright as longvid1right))) :: rest671)) => let
 val  result = MlyValue.longvidseq1 (fn _ => let val  (longvid as 
longvid1) = longvid1 ()
 in ( Seq(I(longvidleft,longvidright),
					      [longvid]))
end)
 in ( LrTable.NT 94, ( result, longvid1left, longvid1right), rest671)

end
|  ( 273, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.longvid_COMMA_list1 longvid_COMMA_list11, _, _)) :: ( _, ( _,
 (LPARleft as LPAR1left), _)) :: rest671)) => let val  result = 
MlyValue.longvidseq1 (fn _ => let val  (longvid_COMMA_list1 as 
longvid_COMMA_list11) = longvid_COMMA_list11 ()
 in ( Seq(I(LPARleft,RPARright),
					      longvid_COMMA_list1) )
end
)
 in ( LrTable.NT 94, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 274, ( ( _, ( MlyValue.longvid_COMMA_list1 longvid_COMMA_list11,
 _, longvid_COMMA_list11right)) :: _ :: ( _, ( MlyValue.longvid 
longvid1, longvid1left, _)) :: rest671)) => let val  result = 
MlyValue.longvid_COMMA_list1 (fn _ => let val  (longvid as longvid1) =
 longvid1 ()
 val  (longvid_COMMA_list1 as longvid_COMMA_list11) = 
longvid_COMMA_list11 ()
 in ( longvid::longvid_COMMA_list1 )
end)
 in ( LrTable.NT 95, ( result, longvid1left, longvid_COMMA_list11right
), rest671)
end
|  ( 275, ( ( _, ( MlyValue.longvid longvid1, longvid1left, 
longvid1right)) :: rest671)) => let val  result = 
MlyValue.longvid_COMMA_list1 (fn _ => let val  (longvid as longvid1) =
 longvid1 ()
 in ( longvid::[] )
end)
 in ( LrTable.NT 95, ( result, longvid1left, longvid1right), rest671)

end
|  ( 276, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.dec dec1, _, _)) :: ( _, ( _, (STRUCTleft as STRUCT1left), _)
) :: rest671)) => let val  result = MlyValue.atstrexp (fn _ => let
 val  (dec as dec1) = dec1 ()
 in ( STRUCTAtStrExp(I(STRUCTleft,ENDright), dec) )
end)
 in ( LrTable.NT 96, ( result, STRUCT1left, END1right), rest671)
end
|  ( 277, ( ( _, ( MlyValue.longstrid longstrid1, (longstridleft as 
longstrid1left), (longstridright as longstrid1right))) :: rest671)) =>
 let val  result = MlyValue.atstrexp (fn _ => let val  (longstrid as 
longstrid1) = longstrid1 ()
 in (
 LONGSTRIDAtStrExp(I(longstridleft,longstridright),
					    longstrid) 
)
end)
 in ( LrTable.NT 96, ( result, longstrid1left, longstrid1right), 
rest671)
end
|  ( 278, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.strexp strexp1, _, _)) :: ( _, ( _, (LPARleft as LPAR1left),
 _)) :: rest671)) => let val  result = MlyValue.atstrexp (fn _ => let
 val  (strexp as strexp1) = strexp1 ()
 in ( PARAtStrExp(I(LPARleft,RPARright), strexp) )
end)
 in ( LrTable.NT 96, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 279, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.dec dec1, _, _)) :: ( _, ( _, (LPARleft as LPAR1left), _)) ::
 rest671)) => let val  result = MlyValue.atstrexp (fn _ => let val  (
dec as dec1) = dec1 ()
 in ( DECAtStrExp(I(LPARleft,RPARright), dec) )
end)
 in ( LrTable.NT 96, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 280, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.strexp strexp1, _, _)) :: _ :: ( _, ( MlyValue.dec dec1, _, _
)) :: ( _, ( _, (LETleft as LET1left), _)) :: rest671)) => let val  
result = MlyValue.atstrexp (fn _ => let val  (dec as dec1) = dec1 ()
 val  (strexp as strexp1) = strexp1 ()
 in ( LETAtStrExp(I(LETleft,ENDright), dec, strexp) )
end)
 in ( LrTable.NT 96, ( result, LET1left, END1right), rest671)
end
|  ( 281, ( ( _, ( MlyValue.atstrexp atstrexp1, (atstrexpleft as 
atstrexp1left), (atstrexpright as atstrexp1right))) :: rest671)) =>
 let val  result = MlyValue.appstrexp (fn _ => let val  (atstrexp as 
atstrexp1) = atstrexp1 ()
 in ( ATSTREXPStrExp(I(atstrexpleft,atstrexpright),
					 atstrexp) )

end)
 in ( LrTable.NT 97, ( result, atstrexp1left, atstrexp1right), rest671
)
end
|  ( 282, ( ( _, ( MlyValue.atstrexp atstrexp1, _, (atstrexpright as 
atstrexp1right))) :: ( _, ( MlyValue.appstrexp appstrexp1, (
appstrexpleft as appstrexp1left), _)) :: rest671)) => let val  result
 = MlyValue.appstrexp (fn _ => let val  (appstrexp as appstrexp1) = 
appstrexp1 ()
 val  (atstrexp as atstrexp1) = atstrexp1 ()
 in (
 APPStrExp(I(appstrexpleft,atstrexpright),
				    appstrexp, atstrexp) 
)
end)
 in ( LrTable.NT 97, ( result, appstrexp1left, atstrexp1right), 
rest671)
end
|  ( 283, ( ( _, ( MlyValue.appstrexp appstrexp1, appstrexp1left, 
appstrexp1right)) :: rest671)) => let val  result = MlyValue.strexp
 (fn _ => let val  (appstrexp as appstrexp1) = appstrexp1 ()
 in ( appstrexp )
end)
 in ( LrTable.NT 98, ( result, appstrexp1left, appstrexp1right), 
rest671)
end
|  ( 284, ( ( _, ( MlyValue.sigexp sigexp1, _, (sigexpright as 
sigexp1right))) :: _ :: ( _, ( MlyValue.strexp strexp1, (strexpleft
 as strexp1left), _)) :: rest671)) => let val  result = 
MlyValue.strexp (fn _ => let val  (strexp as strexp1) = strexp1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 in (
 TRANSStrExp(I(strexpleft,sigexpright),
				      strexp, sigexp) )

end)
 in ( LrTable.NT 98, ( result, strexp1left, sigexp1right), rest671)

end
|  ( 285, ( ( _, ( MlyValue.sigexp sigexp1, _, (sigexpright as 
sigexp1right))) :: _ :: ( _, ( MlyValue.strexp strexp1, (strexpleft
 as strexp1left), _)) :: rest671)) => let val  result = 
MlyValue.strexp (fn _ => let val  (strexp as strexp1) = strexp1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 in ( OPAQStrExp(I(strexpleft,sigexpright), strexp, sigexp))
end)
 in ( LrTable.NT 98, ( result, strexp1left, sigexp1right), rest671)

end
|  ( 286, ( ( _, ( MlyValue.strexp strexp1, _, (strexpright as 
strexp1right))) :: _ :: ( _, ( MlyValue.strpat strpat1, _, _)) :: ( _,
 ( _, (FCTleft as FCT1left), _)) :: rest671)) => let val  result = 
MlyValue.strexp (fn _ => let val  (strpat as strpat1) = strpat1 ()
 val  (strexp as strexp1) = strexp1 ()
 in ( FCTStrExp(I(FCTleft,strexpright), strpat, strexp) )
end)
 in ( LrTable.NT 98, ( result, FCT1left, strexp1right), rest671)
end
|  ( 287, ( ( _, ( MlyValue.sigexp sigexp1, _, (sigexpright as 
sigexp1right))) :: _ :: ( _, ( MlyValue.infexp infexp1, _, _)) :: ( _,
 ( _, (UNPACKleft as UNPACK1left), _)) :: rest671)) => let val  result
 = MlyValue.strexp (fn _ => let val  (infexp as infexp1) = infexp1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 in (
 UNPACKStrExp(I(UNPACKleft,sigexpright),
				       infexp, sigexp) )

end)
 in ( LrTable.NT 98, ( result, UNPACK1left, sigexp1right), rest671)

end
|  ( 288, ( ( _, ( MlyValue.strexp strexp1, _, (strexpright as 
strexp1right))) :: ( _, ( _, (LAZYleft as LAZY1left), _)) :: rest671))
 => let val  result = MlyValue.strexp (fn _ => let val  (strexp as 
strexp1) = strexp1 ()
 in ( LAZYStrExp(I(LAZYleft,strexpright), strexp) )
end)
 in ( LrTable.NT 98, ( result, LAZY1left, strexp1right), rest671)
end
|  ( 289, ( ( _, ( MlyValue.strexp strexp1, _, (strexpright as 
strexp1right))) :: ( _, ( _, (SPAWNleft as SPAWN1left), _)) :: rest671
)) => let val  result = MlyValue.strexp (fn _ => let val  (strexp as 
strexp1) = strexp1 ()
 in ( SPAWNStrExp(I(SPAWNleft,strexpright), strexp) )
end)
 in ( LrTable.NT 98, ( result, SPAWN1left, strexp1right), rest671)
end
|  ( 290, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.sigexp sigexp1, _, _)) :: _ :: ( _, ( MlyValue.strid strid1,
 _, _)) :: ( _, ( _, (LPARleft as LPAR1left), _)) :: rest671)) => let
 val  result = MlyValue.atstrpat (fn _ => let val  (strid as strid1) =
 strid1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 in ( STRIDAtStrPat(I(LPARleft,RPARright), strid, sigexp) )
end)
 in ( LrTable.NT 99, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 291, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.sigexp sigexp1, _, _)) :: _ :: _ :: ( _, ( _, (LPARleft as 
LPAR1left), _)) :: rest671)) => let val  result = MlyValue.atstrpat
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 in ( WILDCARDAtStrPat(I(LPARleft,RPARright), sigexp) )
end)
 in ( LrTable.NT 99, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 292, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.spec spec1, _, _)) :: ( _, ( _, (LPARleft as LPAR1left), _))
 :: rest671)) => let val  result = MlyValue.atstrpat (fn _ => let val 
 (spec as spec1) = spec1 ()
 in ( SPECAtStrPat(I(LPARleft,RPARright), spec) )
end)
 in ( LrTable.NT 99, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 293, ( ( _, ( MlyValue.atstrpat atstrpat1, (atstrpatleft as 
atstrpat1left), (atstrpatright as atstrpat1right))) :: rest671)) =>
 let val  result = MlyValue.strpat (fn _ => let val  (atstrpat as 
atstrpat1) = atstrpat1 ()
 in ( ATSTRPATStrPat(I(atstrpatleft,atstrpatright),
					 atstrpat) )

end)
 in ( LrTable.NT 100, ( result, atstrpat1left, atstrpat1right), 
rest671)
end
|  ( 294, ( ( _, ( MlyValue.sigexp sigexp1, _, (sigexpright as 
sigexp1right))) :: _ :: ( _, ( MlyValue.strid strid1, (stridleft as 
strid1left), _)) :: rest671)) => let val  result = MlyValue.strpat (fn
 _ => let val  (strid as strid1) = strid1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 in ( STRIDStrPat(I(stridleft,sigexpright), strid, sigexp) )
end)
 in ( LrTable.NT 100, ( result, strid1left, sigexp1right), rest671)

end
|  ( 295, ( ( _, ( MlyValue.sigexp sigexp1, _, (sigexpright as 
sigexp1right))) :: _ :: ( _, ( _, (UNDERBARleft as UNDERBAR1left), _))
 :: rest671)) => let val  result = MlyValue.strpat (fn _ => let val  (
sigexp as sigexp1) = sigexp1 ()
 in ( WILDCARDStrPat(I(UNDERBARleft,sigexpright), sigexp) )
end)
 in ( LrTable.NT 100, ( result, UNDERBAR1left, sigexp1right), rest671)

end
|  ( 296, ( ( _, ( MlyValue.atstrpat atstrpat1, (atstrpatleft as 
atstrpat1left), (atstrpatright as atstrpat1right))) :: rest671)) =>
 let val  result = MlyValue.strpat' (fn _ => let val  (atstrpat as 
atstrpat1) = atstrpat1 ()
 in ( ATSTRPATStrPat(I(atstrpatleft,atstrpatright),
					 atstrpat) )

end)
 in ( LrTable.NT 101, ( result, atstrpat1left, atstrpat1right), 
rest671)
end
|  ( 297, ( ( _, ( MlyValue.atsigexp atsigexp1, atsigexpleft, (
atsigexpright as atsigexp1right))) :: _ :: ( _, ( MlyValue.strid 
strid1, (stridleft as strid1left), _)) :: rest671)) => let val  result
 = MlyValue.strpat' (fn _ => let val  (strid as strid1) = strid1 ()
 val  (atsigexp as atsigexp1) = atsigexp1 ()
 in (
 STRIDStrPat(I(stridleft,atsigexpright), strid,
				      ATSIGEXPSigExp(I(atsigexpleft,
						       atsigexpright),
						     atsigexp)) 
)
end)
 in ( LrTable.NT 101, ( result, strid1left, atsigexp1right), rest671)

end
|  ( 298, ( ( _, ( MlyValue.atsigexp atsigexp1, atsigexpleft, (
atsigexpright as atsigexp1right))) :: _ :: ( _, ( _, (UNDERBARleft as 
UNDERBAR1left), _)) :: rest671)) => let val  result = MlyValue.strpat'
 (fn _ => let val  (atsigexp as atsigexp1) = atsigexp1 ()
 in (
 WILDCARDStrPat(I(UNDERBARleft,atsigexpright),
					 ATSIGEXPSigExp(I(atsigexpleft,
							  atsigexpright),
							atsigexp)) 
)
end)
 in ( LrTable.NT 101, ( result, UNDERBAR1left, atsigexp1right), 
rest671)
end
|  ( 299, ( ( _, ( MlyValue.strexp__AND_strbind_opt 
strexp__AND_strbind_opt1, _, (strexp__AND_strbind_optright as 
strexp__AND_strbind_opt1right))) :: _ :: ( _, ( 
MlyValue.COLON_sigexp_opt COLON_sigexp_opt1, _, _)) :: ( _, ( 
MlyValue.strid strid1, (stridleft as strid1left), _)) :: rest671)) =>
 let val  result = MlyValue.strbind (fn _ => let val  (strid as strid1
) = strid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  (strexp__AND_strbind_opt as strexp__AND_strbind_opt1) = 
strexp__AND_strbind_opt1 ()
 in (
 TRANSStrBind(I(stridleft,
					 strexp__AND_strbind_optright),
				       strid, COLON_sigexp_opt,
				       #1 strexp__AND_strbind_opt,
				       #2 strexp__AND_strbind_opt) 
)
end)
 in ( LrTable.NT 102, ( result, strid1left, 
strexp__AND_strbind_opt1right), rest671)
end
|  ( 300, ( ( _, ( MlyValue.strexp__AND_strbind_opt 
strexp__AND_strbind_opt1, _, (strexp__AND_strbind_optright as 
strexp__AND_strbind_opt1right))) :: _ :: ( _, ( MlyValue.sigexp 
sigexp1, _, _)) :: _ :: ( _, ( MlyValue.strid strid1, (stridleft as 
strid1left), _)) :: rest671)) => let val  result = MlyValue.strbind
 (fn _ => let val  (strid as strid1) = strid1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 val  (strexp__AND_strbind_opt as strexp__AND_strbind_opt1) = 
strexp__AND_strbind_opt1 ()
 in (
 OPAQStrBind(I(stridleft,strexp__AND_strbind_optright),
				      strid, sigexp, #1 strexp__AND_strbind_opt,
				      #2 strexp__AND_strbind_opt) 
)
end)
 in ( LrTable.NT 102, ( result, strid1left, 
strexp__AND_strbind_opt1right), rest671)
end
|  ( 301, ( ( _, ( MlyValue.strexp__AND_strbind_opt 
strexp__AND_strbind_opt1, _, (strexp__AND_strbind_optright as 
strexp__AND_strbind_opt1right))) :: _ :: ( _, ( 
MlyValue.COLON_sigexp_opt COLON_sigexp_opt1, _, _)) :: ( _, ( _, (
UNDERBARleft as UNDERBAR1left), _)) :: rest671)) => let val  result = 
MlyValue.strbind (fn _ => let val  (COLON_sigexp_opt as 
COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  (strexp__AND_strbind_opt as strexp__AND_strbind_opt1) = 
strexp__AND_strbind_opt1 ()
 in (
 WILDCARDStrBind(I(UNDERBARleft,
					 strexp__AND_strbind_optright),
				       COLON_sigexp_opt,
				       #1 strexp__AND_strbind_opt,
				       #2 strexp__AND_strbind_opt) 
)
end)
 in ( LrTable.NT 102, ( result, UNDERBAR1left, 
strexp__AND_strbind_opt1right), rest671)
end
|  ( 302, ( ( _, ( MlyValue.strbind strbind1, _, strbind1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_strbind_opt (fn _ => let val  (strbind as strbind1) = 
strbind1 ()
 in ( SOME strbind )
end)
 in ( LrTable.NT 103, ( result, AND1left, strbind1right), rest671)
end
|  ( 303, ( rest671)) => let val  result = MlyValue.AND_strbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 103, ( result, defaultPos, defaultPos), rest671)
end
|  ( 304, ( ( _, ( MlyValue.AND_strbind_opt AND_strbind_opt1, _, 
AND_strbind_opt1right)) :: ( _, ( MlyValue.appstrexp appstrexp1, 
appstrexp1left, _)) :: rest671)) => let val  result = 
MlyValue.strexp__AND_strbind_opt (fn _ => let val  (appstrexp as 
appstrexp1) = appstrexp1 ()
 val  (AND_strbind_opt as AND_strbind_opt1) = AND_strbind_opt1 ()
 in ( ( appstrexp, AND_strbind_opt ) )
end)
 in ( LrTable.NT 104, ( result, appstrexp1left, AND_strbind_opt1right)
, rest671)
end
|  ( 305, ( ( _, ( MlyValue.sigexp__AND_strbind_opt 
sigexp__AND_strbind_opt1, _, (sigexp__AND_strbind_optright as 
sigexp__AND_strbind_opt1right))) :: _ :: ( _, ( MlyValue.strexp 
strexp1, (strexpleft as strexp1left), _)) :: rest671)) => let val  
result = MlyValue.strexp__AND_strbind_opt (fn _ => let val  (strexp
 as strexp1) = strexp1 ()
 val  (sigexp__AND_strbind_opt as sigexp__AND_strbind_opt1) = 
sigexp__AND_strbind_opt1 ()
 in (
 ( TRANSStrExp(I(strexpleft,
					  sigexp__AND_strbind_optright),
					strexp, #1 sigexp__AND_strbind_opt)
			  , #2 sigexp__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 104, ( result, strexp1left, 
sigexp__AND_strbind_opt1right), rest671)
end
|  ( 306, ( ( _, ( MlyValue.sigexp__AND_strbind_opt 
sigexp__AND_strbind_opt1, _, (sigexp__AND_strbind_optright as 
sigexp__AND_strbind_opt1right))) :: _ :: ( _, ( MlyValue.strexp 
strexp1, (strexpleft as strexp1left), _)) :: rest671)) => let val  
result = MlyValue.strexp__AND_strbind_opt (fn _ => let val  (strexp
 as strexp1) = strexp1 ()
 val  (sigexp__AND_strbind_opt as sigexp__AND_strbind_opt1) = 
sigexp__AND_strbind_opt1 ()
 in (
 ( OPAQStrExp(I(strexpleft,
					 sigexp__AND_strbind_optright),
				       strexp, #1 sigexp__AND_strbind_opt)
			  , #2 sigexp__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 104, ( result, strexp1left, 
sigexp__AND_strbind_opt1right), rest671)
end
|  ( 307, ( ( _, ( MlyValue.strexp__AND_strbind_opt 
strexp__AND_strbind_opt1, _, (strexp__AND_strbind_optright as 
strexp__AND_strbind_opt1right))) :: _ :: ( _, ( MlyValue.strpat 
strpat1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.strexp__AND_strbind_opt (fn _ => let
 val  (strpat as strpat1) = strpat1 ()
 val  (strexp__AND_strbind_opt as strexp__AND_strbind_opt1) = 
strexp__AND_strbind_opt1 ()
 in (
 ( FCTStrExp(I(FCTleft,strexp__AND_strbind_optright),
				      strpat, #1 strexp__AND_strbind_opt)
			  , #2 strexp__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 104, ( result, FCT1left, 
strexp__AND_strbind_opt1right), rest671)
end
|  ( 308, ( ( _, ( MlyValue.sigexp__AND_strbind_opt 
sigexp__AND_strbind_opt1, _, (sigexp__AND_strbind_optright as 
sigexp__AND_strbind_opt1right))) :: _ :: ( _, ( MlyValue.infexp 
infexp1, _, _)) :: ( _, ( _, (UNPACKleft as UNPACK1left), _)) :: 
rest671)) => let val  result = MlyValue.strexp__AND_strbind_opt (fn _
 => let val  (infexp as infexp1) = infexp1 ()
 val  (sigexp__AND_strbind_opt as sigexp__AND_strbind_opt1) = 
sigexp__AND_strbind_opt1 ()
 in (
 ( UNPACKStrExp(I(UNPACKleft,
					   sigexp__AND_strbind_optright),
					 infexp, #1 sigexp__AND_strbind_opt)
			  , #2 sigexp__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 104, ( result, UNPACK1left, 
sigexp__AND_strbind_opt1right), rest671)
end
|  ( 309, ( ( _, ( MlyValue.strexp__AND_strbind_opt 
strexp__AND_strbind_opt1, _, (strexp__AND_strbind_optright as 
strexp__AND_strbind_opt1right))) :: ( _, ( _, (LAZYleft as LAZY1left),
 _)) :: rest671)) => let val  result = 
MlyValue.strexp__AND_strbind_opt (fn _ => let val  (
strexp__AND_strbind_opt as strexp__AND_strbind_opt1) = 
strexp__AND_strbind_opt1 ()
 in (
 ( LAZYStrExp(I(LAZYleft,strexp__AND_strbind_optright),
				       #1 strexp__AND_strbind_opt)
			  , #2 strexp__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 104, ( result, LAZY1left, 
strexp__AND_strbind_opt1right), rest671)
end
|  ( 310, ( ( _, ( MlyValue.strexp__AND_strbind_opt 
strexp__AND_strbind_opt1, _, (strexp__AND_strbind_optright as 
strexp__AND_strbind_opt1right))) :: ( _, ( _, (SPAWNleft as SPAWN1left
), _)) :: rest671)) => let val  result = 
MlyValue.strexp__AND_strbind_opt (fn _ => let val  (
strexp__AND_strbind_opt as strexp__AND_strbind_opt1) = 
strexp__AND_strbind_opt1 ()
 in (
 ( SPAWNStrExp(I(SPAWNleft,
					  strexp__AND_strbind_optright),
					#1 strexp__AND_strbind_opt)
			  , #2 strexp__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 104, ( result, SPAWN1left, 
strexp__AND_strbind_opt1right), rest671)
end
|  ( 311, ( ( _, ( MlyValue.AND_strbind_opt AND_strbind_opt1, _, 
AND_strbind_opt1right)) :: ( _, ( MlyValue.sigexp' sigexp'1, 
sigexp'1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_strbind_opt (fn _ => let val  (sigexp' as 
sigexp'1) = sigexp'1 ()
 val  (AND_strbind_opt as AND_strbind_opt1) = AND_strbind_opt1 ()
 in ( ( sigexp', AND_strbind_opt ) )
end)
 in ( LrTable.NT 105, ( result, sigexp'1left, AND_strbind_opt1right), 
rest671)
end
|  ( 312, ( ( _, ( MlyValue.sigexp__AND_strbind_opt 
sigexp__AND_strbind_opt1, _, (sigexp__AND_strbind_optright as 
sigexp__AND_strbind_opt1right))) :: _ :: ( _, ( MlyValue.strpat' 
strpat'1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp__AND_strbind_opt (fn _ => let
 val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp__AND_strbind_opt as sigexp__AND_strbind_opt1) = 
sigexp__AND_strbind_opt1 ()
 in (
 ( FCTSigExp(I(FCTleft,sigexp__AND_strbind_optright),
				      strpat', #1 sigexp__AND_strbind_opt)
			  , #2 sigexp__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 105, ( result, FCT1left, 
sigexp__AND_strbind_opt1right), rest671)
end
|  ( 313, ( ( _, ( MlyValue.sigexp__AND_strbind_opt 
sigexp__AND_strbind_opt1, _, (sigexp__AND_strbind_optright as 
sigexp__AND_strbind_opt1right))) :: _ :: ( _, ( MlyValue.atsigexp 
atsigexp1, (atsigexpleft as atsigexp1left), _)) :: rest671)) => let
 val  result = MlyValue.sigexp__AND_strbind_opt (fn _ => let val  (
atsigexp as atsigexp1) = atsigexp1 ()
 val  (sigexp__AND_strbind_opt as sigexp__AND_strbind_opt1) = 
sigexp__AND_strbind_opt1 ()
 in (
 ( ARROWSigExp(I(atsigexpleft,
					  sigexp__AND_strbind_optright),
					atsigexp, #1 sigexp__AND_strbind_opt)
			  , #2 sigexp__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 105, ( result, atsigexp1left, 
sigexp__AND_strbind_opt1right), rest671)
end
|  ( 314, ( ( _, ( MlyValue.rea__AND_strbind_opt rea__AND_strbind_opt1
, _, (rea__AND_strbind_optright as rea__AND_strbind_opt1right))) :: _
 :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp__AND_strbind_opt
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 val  (rea__AND_strbind_opt as rea__AND_strbind_opt1) = 
rea__AND_strbind_opt1 ()
 in (
 ( WHEREREASigExp(I(sigexpleft,
					     rea__AND_strbind_optright),
					   sigexp, #1 rea__AND_strbind_opt)
			  , #2 rea__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 105, ( result, sigexp1left, 
rea__AND_strbind_opt1right), rest671)
end
|  ( 315, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: _ :: ( _, ( MlyValue.spec
 spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_strbind_opt (fn _ => let val  (
spec as spec1) = spec1 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( SIGRea(I(SIGleft,AND_rea_opt__AND_strbind_optright),
				   spec, #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, SIG1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 316, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_strbind_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( VALRea(I(VALleft,AND_rea_opt__AND_strbind_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, VAL1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 317, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_strbind_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( FUNRea(I(FUNleft,AND_rea_opt__AND_strbind_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, FUN1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 318, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea__AND_strbind_opt (fn
 _ => let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( CONSTRUCTORRea(I(CONSTRUCTORleft,
					     AND_rea_opt__AND_strbind_optright),
					   OP_opt1, longvid1, OP_opt2, longvid2,
				           #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, CONSTRUCTOR1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 319, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea__AND_strbind_opt (fn _ =>
 let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( EXCEPTIONRea(I(EXCEPTIONleft,
					   AND_rea_opt__AND_strbind_optright),
					 OP_opt1, longvid1, OP_opt2, longvid2,
					 #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, EXCEPTION1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 320, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.ty ty1, _
, _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_strbind_opt (fn _ => let val  (tyvarseq as tyvarseq1
) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( TYPERea(I(TYPEleft,
				      AND_rea_opt__AND_strbind_optright),
				    tyvarseq, longtycon, ty,
				    #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, TYPE1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 321, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea__AND_strbind_opt (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( EQTYPERea(I(EQTYPEleft,
					AND_rea_opt__AND_strbind_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, EQTYPE1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 322, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea__AND_strbind_opt (fn _ => let val  (tyvarseq
 as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( EQEQTYPERea(I(EQEQTYPEleft,
					AND_rea_opt__AND_strbind_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, EQEQTYPE1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 323, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_strbind_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( STRUCTURERea(I(STRUCTUREleft,
					   AND_rea_opt__AND_strbind_optright),
				         longstrid1, COLON_sigexp_opt,
					 longstrid2,
				         #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, STRUCTURE1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 324, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, (AND_rea_opt__AND_strbind_optright
 as AND_rea_opt__AND_strbind_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_strbind_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( FUNCTORRea(I(FUNCTORleft,
					 AND_rea_opt__AND_strbind_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       #1 AND_rea_opt__AND_strbind_opt)
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, FUNCTOR1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 325, ( ( _, ( MlyValue.sigexp__AND_rea_opt__AND_strbind_opt 
sigexp__AND_rea_opt__AND_strbind_opt1, _, (
sigexp__AND_rea_opt__AND_strbind_optright as 
sigexp__AND_rea_opt__AND_strbind_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_strbind_opt (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt__AND_strbind_opt as 
sigexp__AND_rea_opt__AND_strbind_opt1) = 
sigexp__AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( SIGNATURERea
				(I(SIGNATUREleft,
				   sigexp__AND_rea_opt__AND_strbind_optright),
				 longsigid, atstrpat_list0,
				 #1 sigexp__AND_rea_opt__AND_strbind_opt,
				 #2 sigexp__AND_rea_opt__AND_strbind_opt)
			  , #3 sigexp__AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 106, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 326, ( ( _, ( MlyValue.AND_strbind_opt AND_strbind_opt1, 
AND_strbind_opt1left, AND_strbind_opt1right)) :: rest671)) => let val 
 result = MlyValue.AND_rea_opt__AND_strbind_opt (fn _ => let val  (
AND_strbind_opt as AND_strbind_opt1) = AND_strbind_opt1 ()
 in ( ( NONE, AND_strbind_opt ) )
end)
 in ( LrTable.NT 107, ( result, AND_strbind_opt1left, 
AND_strbind_opt1right), rest671)
end
|  ( 327, ( ( _, ( MlyValue.rea__AND_strbind_opt rea__AND_strbind_opt1
, _, rea__AND_strbind_opt1right)) :: ( _, ( _, AND1left, _)) :: 
rest671)) => let val  result = MlyValue.AND_rea_opt__AND_strbind_opt
 (fn _ => let val  (rea__AND_strbind_opt as rea__AND_strbind_opt1) = 
rea__AND_strbind_opt1 ()
 in (
 ( SOME(#1 rea__AND_strbind_opt)
				  , #2 rea__AND_strbind_opt ) )

end)
 in ( LrTable.NT 107, ( result, AND1left, rea__AND_strbind_opt1right),
 rest671)
end
|  ( 328, ( ( _, ( MlyValue.AND_rea_opt__AND_strbind_opt 
AND_rea_opt__AND_strbind_opt1, _, AND_rea_opt__AND_strbind_opt1right))
 :: ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, _)) :: 
rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt__AND_strbind_opt (fn _ => let val  (
appsigexp as appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt__AND_strbind_opt as AND_rea_opt__AND_strbind_opt1)
 = AND_rea_opt__AND_strbind_opt1 ()
 in (
 ( appsigexp
		          , #1 AND_rea_opt__AND_strbind_opt
			  , #2 AND_rea_opt__AND_strbind_opt ) 
)
end)
 in ( LrTable.NT 108, ( result, appsigexp1left, 
AND_rea_opt__AND_strbind_opt1right), rest671)
end
|  ( 329, ( ( _, ( MlyValue.sigexp sigexp1, _, sigexp1right)) :: ( _, 
( _, COLON1left, _)) :: rest671)) => let val  result = 
MlyValue.COLON_sigexp_opt (fn _ => let val  (sigexp as sigexp1) = 
sigexp1 ()
 in ( SOME sigexp )
end)
 in ( LrTable.NT 109, ( result, COLON1left, sigexp1right), rest671)

end
|  ( 330, ( rest671)) => let val  result = MlyValue.COLON_sigexp_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 109, ( result, defaultPos, defaultPos), rest671)
end
|  ( 331, ( ( _, ( _, (ANYleft as ANY1left), (ANYright as ANY1right)))
 :: rest671)) => let val  result = MlyValue.atsigexp (fn _ => (
 ANYAtSigExp(I(ANYleft,ANYright)) ))
 in ( LrTable.NT 110, ( result, ANY1left, ANY1right), rest671)
end
|  ( 332, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.spec spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) ::
 rest671)) => let val  result = MlyValue.atsigexp (fn _ => let val  (
spec as spec1) = spec1 ()
 in ( SIGAtSigExp(I(SIGleft,ENDright), spec) )
end)
 in ( LrTable.NT 110, ( result, SIG1left, END1right), rest671)
end
|  ( 333, ( ( _, ( MlyValue.longsigid longsigid1, (longsigidleft as 
longsigid1left), (longsigidright as longsigid1right))) :: rest671)) =>
 let val  result = MlyValue.atsigexp (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 in (
 LONGSIGIDAtSigExp(I(longsigidleft,longsigidright),
					    longsigid) 
)
end)
 in ( LrTable.NT 110, ( result, longsigid1left, longsigid1right), 
rest671)
end
|  ( 334, ( ( _, ( _, _, (ENDright as END1right))) :: ( _, ( 
MlyValue.sigexp sigexp1, _, _)) :: _ :: ( _, ( MlyValue.dec dec1, _, _
)) :: ( _, ( _, (LETleft as LET1left), _)) :: rest671)) => let val  
result = MlyValue.atsigexp (fn _ => let val  (dec as dec1) = dec1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 in ( LETAtSigExp(I(LETleft,ENDright), dec, sigexp) )
end)
 in ( LrTable.NT 110, ( result, LET1left, END1right), rest671)
end
|  ( 335, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.sigexp sigexp1, _, _)) :: ( _, ( _, (LPARleft as LPAR1left),
 _)) :: rest671)) => let val  result = MlyValue.atsigexp (fn _ => let
 val  (sigexp as sigexp1) = sigexp1 ()
 in ( PARAtSigExp(I(LPARleft,RPARright), sigexp) )
end)
 in ( LrTable.NT 110, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 336, ( ( _, ( _, _, (RPARright as RPAR1right))) :: ( _, ( 
MlyValue.spec spec1, _, _)) :: ( _, ( _, (LPARleft as LPAR1left), _))
 :: rest671)) => let val  result = MlyValue.atsigexp (fn _ => let val 
 (spec as spec1) = spec1 ()
 in ( SPECAtSigExp(I(LPARleft,RPARright), spec) )
end)
 in ( LrTable.NT 110, ( result, LPAR1left, RPAR1right), rest671)
end
|  ( 337, ( ( _, ( MlyValue.atsigexp atsigexp1, (atsigexpleft as 
atsigexp1left), (atsigexpright as atsigexp1right))) :: rest671)) =>
 let val  result = MlyValue.appsigexp (fn _ => let val  (atsigexp as 
atsigexp1) = atsigexp1 ()
 in ( ATSIGEXPSigExp(I(atsigexpleft,atsigexpright),
					 atsigexp) )

end)
 in ( LrTable.NT 111, ( result, atsigexp1left, atsigexp1right), 
rest671)
end
|  ( 338, ( ( _, ( MlyValue.atstrexp atstrexp1, _, (atstrexpright as 
atstrexp1right))) :: ( _, ( MlyValue.appsigexp appsigexp1, (
appsigexpleft as appsigexp1left), _)) :: rest671)) => let val  result
 = MlyValue.appsigexp (fn _ => let val  (appsigexp as appsigexp1) = 
appsigexp1 ()
 val  (atstrexp as atstrexp1) = atstrexp1 ()
 in (
 APPSigExp(I(appsigexpleft,atstrexpright),
				    appsigexp, atstrexp) 
)
end)
 in ( LrTable.NT 111, ( result, appsigexp1left, atstrexp1right), 
rest671)
end
|  ( 339, ( ( _, ( MlyValue.sigexp' sigexp'1, sigexp'1left, 
sigexp'1right)) :: rest671)) => let val  result = MlyValue.sigexp (fn
 _ => let val  (sigexp' as sigexp'1) = sigexp'1 ()
 in ( sigexp' )
end)
 in ( LrTable.NT 112, ( result, sigexp'1left, sigexp'1right), rest671)

end
|  ( 340, ( ( _, ( MlyValue.sigexp sigexp1, _, (sigexpright as 
sigexp1right))) :: _ :: ( _, ( MlyValue.strpat' strpat'1, _, _)) :: (
 _, ( _, (FCTleft as FCT1left), _)) :: rest671)) => let val  result = 
MlyValue.sigexp (fn _ => let val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 in ( FCTSigExp(I(FCTleft,sigexpright), strpat', sigexp) )
end)
 in ( LrTable.NT 112, ( result, FCT1left, sigexp1right), rest671)
end
|  ( 341, ( ( _, ( MlyValue.sigexp sigexp1, _, (sigexpright as 
sigexp1right))) :: _ :: ( _, ( MlyValue.atsigexp atsigexp1, (
atsigexpleft as atsigexp1left), _)) :: rest671)) => let val  result = 
MlyValue.sigexp (fn _ => let val  (atsigexp as atsigexp1) = atsigexp1
 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 in (
 ARROWSigExp(I(atsigexpleft,sigexpright),
				      atsigexp, sigexp) 
)
end)
 in ( LrTable.NT 112, ( result, atsigexp1left, sigexp1right), rest671)

end
|  ( 342, ( ( _, ( MlyValue.rea rea1, _, (rearight as rea1right))) ::
 _ :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp (fn _ => let val  (
sigexp as sigexp1) = sigexp1 ()
 val  (rea as rea1) = rea1 ()
 in ( WHEREREASigExp(I(sigexpleft,rearight),
					 sigexp, rea) )
end)
 in ( LrTable.NT 112, ( result, sigexp1left, rea1right), rest671)
end
|  ( 343, ( ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, 
appsigexp1right)) :: rest671)) => let val  result = MlyValue.sigexp'
 (fn _ => let val  (appsigexp as appsigexp1) = appsigexp1 ()
 in ( appsigexp )
end)
 in ( LrTable.NT 113, ( result, appsigexp1left, appsigexp1right), 
rest671)
end
|  ( 344, ( ( _, ( MlyValue.longstrid longstrid2, _, longstrid2right))
 :: _ :: ( _, ( MlyValue.longstrid longstrid1, _, _)) :: _ :: ( _, ( 
MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp' (fn _ => let val  (sigexp as 
sigexp1) = sigexp1 ()
 val  longstrid1 = longstrid1 ()
 val  longstrid2 = longstrid2 ()
 in (
 WHERELONGSTRIDSigExp(I(sigexpleft,longstrid2right),
					       sigexp, longstrid1, longstrid2) 
)
end)
 in ( LrTable.NT 113, ( result, sigexp1left, longstrid2right), rest671
)
end
|  ( 345, ( ( _, ( MlyValue.sigexp__AND_sigbind_opt 
sigexp__AND_sigbind_opt1, _, (sigexp__AND_sigbind_optright as 
sigexp__AND_sigbind_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.sigid sigid1, (sigidleft as sigid1left), _)) :: rest671)) =>
 let val  result = MlyValue.sigbind (fn _ => let val  (sigid as sigid1
) = sigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_sigbind_opt as sigexp__AND_sigbind_opt1) = 
sigexp__AND_sigbind_opt1 ()
 in (
 SigBind(I(sigidleft,sigexp__AND_sigbind_optright),
				  sigid, atstrpat_list0,
				  #1 sigexp__AND_sigbind_opt,
				  #2 sigexp__AND_sigbind_opt) 
)
end)
 in ( LrTable.NT 114, ( result, sigid1left, 
sigexp__AND_sigbind_opt1right), rest671)
end
|  ( 346, ( ( _, ( MlyValue.atstrpat_list1 atstrpat_list11, 
atstrpat_list11left, atstrpat_list11right)) :: rest671)) => let val  
result = MlyValue.atstrpat_list0 (fn _ => let val  (atstrpat_list1 as 
atstrpat_list11) = atstrpat_list11 ()
 in ( atstrpat_list1 )
end)
 in ( LrTable.NT 115, ( result, atstrpat_list11left, 
atstrpat_list11right), rest671)
end
|  ( 347, ( rest671)) => let val  result = MlyValue.atstrpat_list0 (fn
 _ => ( [] ))
 in ( LrTable.NT 115, ( result, defaultPos, defaultPos), rest671)
end
|  ( 348, ( ( _, ( MlyValue.sigbind sigbind1, _, sigbind1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_sigbind_opt (fn _ => let val  (sigbind as sigbind1) = 
sigbind1 ()
 in ( SOME sigbind )
end)
 in ( LrTable.NT 116, ( result, AND1left, sigbind1right), rest671)
end
|  ( 349, ( rest671)) => let val  result = MlyValue.AND_sigbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 116, ( result, defaultPos, defaultPos), rest671)
end
|  ( 350, ( ( _, ( MlyValue.AND_sigbind_opt AND_sigbind_opt1, _, 
AND_sigbind_opt1right)) :: ( _, ( MlyValue.sigexp' sigexp'1, 
sigexp'1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_sigbind_opt (fn _ => let val  (sigexp' as 
sigexp'1) = sigexp'1 ()
 val  (AND_sigbind_opt as AND_sigbind_opt1) = AND_sigbind_opt1 ()
 in ( ( sigexp', AND_sigbind_opt ) )
end)
 in ( LrTable.NT 117, ( result, sigexp'1left, AND_sigbind_opt1right), 
rest671)
end
|  ( 351, ( ( _, ( MlyValue.sigexp__AND_sigbind_opt 
sigexp__AND_sigbind_opt1, _, (sigexp__AND_sigbind_optright as 
sigexp__AND_sigbind_opt1right))) :: _ :: ( _, ( MlyValue.strpat' 
strpat'1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp__AND_sigbind_opt (fn _ => let
 val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp__AND_sigbind_opt as sigexp__AND_sigbind_opt1) = 
sigexp__AND_sigbind_opt1 ()
 in (
 ( FCTSigExp(I(FCTleft,sigexp__AND_sigbind_optright),
				      strpat', #1 sigexp__AND_sigbind_opt)
			  , #2 sigexp__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 117, ( result, FCT1left, 
sigexp__AND_sigbind_opt1right), rest671)
end
|  ( 352, ( ( _, ( MlyValue.sigexp__AND_sigbind_opt 
sigexp__AND_sigbind_opt1, _, (sigexp__AND_sigbind_optright as 
sigexp__AND_sigbind_opt1right))) :: _ :: ( _, ( MlyValue.atsigexp 
atsigexp1, (atsigexpleft as atsigexp1left), _)) :: rest671)) => let
 val  result = MlyValue.sigexp__AND_sigbind_opt (fn _ => let val  (
atsigexp as atsigexp1) = atsigexp1 ()
 val  (sigexp__AND_sigbind_opt as sigexp__AND_sigbind_opt1) = 
sigexp__AND_sigbind_opt1 ()
 in (
 ( ARROWSigExp(I(atsigexpleft,
					  sigexp__AND_sigbind_optright),
					atsigexp, #1 sigexp__AND_sigbind_opt)
			  , #2 sigexp__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 117, ( result, atsigexp1left, 
sigexp__AND_sigbind_opt1right), rest671)
end
|  ( 353, ( ( _, ( MlyValue.rea__AND_sigbind_opt rea__AND_sigbind_opt1
, _, (rea__AND_sigbind_optright as rea__AND_sigbind_opt1right))) :: _
 :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp__AND_sigbind_opt
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 val  (rea__AND_sigbind_opt as rea__AND_sigbind_opt1) = 
rea__AND_sigbind_opt1 ()
 in (
 ( WHEREREASigExp(I(sigexpleft,
					     rea__AND_sigbind_optright),
					   sigexp, #1 rea__AND_sigbind_opt)
			  , #2 rea__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 117, ( result, sigexp1left, 
rea__AND_sigbind_opt1right), rest671)
end
|  ( 354, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: _ :: ( _, ( MlyValue.spec
 spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_sigbind_opt (fn _ => let val  (
spec as spec1) = spec1 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( SIGRea(I(SIGleft,AND_rea_opt__AND_sigbind_optright),
				   spec, #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, SIG1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 355, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_sigbind_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( VALRea(I(VALleft,AND_rea_opt__AND_sigbind_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, VAL1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 356, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_sigbind_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( FUNRea(I(FUNleft,AND_rea_opt__AND_sigbind_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, FUN1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 357, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea__AND_sigbind_opt (fn
 _ => let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( CONSTRUCTORRea(I(CONSTRUCTORleft,
					     AND_rea_opt__AND_sigbind_optright),
					   OP_opt1, longvid1, OP_opt2, longvid2,
				           #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, CONSTRUCTOR1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 358, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea__AND_sigbind_opt (fn _ =>
 let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( EXCEPTIONRea(I(EXCEPTIONleft,
					   AND_rea_opt__AND_sigbind_optright),
					 OP_opt1, longvid1, OP_opt2, longvid2,
					 #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, EXCEPTION1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 359, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.ty ty1, _
, _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_sigbind_opt (fn _ => let val  (tyvarseq as tyvarseq1
) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( TYPERea(I(TYPEleft,
				      AND_rea_opt__AND_sigbind_optright),
				    tyvarseq, longtycon, ty,
				    #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, TYPE1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 360, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea__AND_sigbind_opt (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( EQTYPERea(I(EQTYPEleft,
					AND_rea_opt__AND_sigbind_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, EQTYPE1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 361, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea__AND_sigbind_opt (fn _ => let val  (tyvarseq
 as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( EQEQTYPERea(I(EQEQTYPEleft,
					  AND_rea_opt__AND_sigbind_optright),
					tyvarseq, longtycon,
					#1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, EQEQTYPE1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 362, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_sigbind_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( STRUCTURERea(I(STRUCTUREleft,
					   AND_rea_opt__AND_sigbind_optright),
				         longstrid1, COLON_sigexp_opt,
					 longstrid2,
				         #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, STRUCTURE1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 363, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, (AND_rea_opt__AND_sigbind_optright
 as AND_rea_opt__AND_sigbind_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_sigbind_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( FUNCTORRea(I(FUNCTORleft,
					 AND_rea_opt__AND_sigbind_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       #1 AND_rea_opt__AND_sigbind_opt)
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, FUNCTOR1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 364, ( ( _, ( MlyValue.sigexp__AND_rea_opt__AND_sigbind_opt 
sigexp__AND_rea_opt__AND_sigbind_opt1, _, (
sigexp__AND_rea_opt__AND_sigbind_optright as 
sigexp__AND_rea_opt__AND_sigbind_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_sigbind_opt (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt__AND_sigbind_opt as 
sigexp__AND_rea_opt__AND_sigbind_opt1) = 
sigexp__AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( SIGNATURERea
				(I(SIGNATUREleft,
				   sigexp__AND_rea_opt__AND_sigbind_optright),
				 longsigid, atstrpat_list0,
				 #1 sigexp__AND_rea_opt__AND_sigbind_opt,
				 #2 sigexp__AND_rea_opt__AND_sigbind_opt)
			  , #3 sigexp__AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 118, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 365, ( ( _, ( MlyValue.AND_sigbind_opt AND_sigbind_opt1, 
AND_sigbind_opt1left, AND_sigbind_opt1right)) :: rest671)) => let val 
 result = MlyValue.AND_rea_opt__AND_sigbind_opt (fn _ => let val  (
AND_sigbind_opt as AND_sigbind_opt1) = AND_sigbind_opt1 ()
 in ( ( NONE, AND_sigbind_opt) )
end)
 in ( LrTable.NT 119, ( result, AND_sigbind_opt1left, 
AND_sigbind_opt1right), rest671)
end
|  ( 366, ( ( _, ( MlyValue.rea__AND_sigbind_opt rea__AND_sigbind_opt1
, _, rea__AND_sigbind_opt1right)) :: ( _, ( _, AND1left, _)) :: 
rest671)) => let val  result = MlyValue.AND_rea_opt__AND_sigbind_opt
 (fn _ => let val  (rea__AND_sigbind_opt as rea__AND_sigbind_opt1) = 
rea__AND_sigbind_opt1 ()
 in (
 ( SOME(#1 rea__AND_sigbind_opt)
				  , #2 rea__AND_sigbind_opt ) )

end)
 in ( LrTable.NT 119, ( result, AND1left, rea__AND_sigbind_opt1right),
 rest671)
end
|  ( 367, ( ( _, ( MlyValue.AND_rea_opt__AND_sigbind_opt 
AND_rea_opt__AND_sigbind_opt1, _, AND_rea_opt__AND_sigbind_opt1right))
 :: ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, _)) :: 
rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt__AND_sigbind_opt (fn _ => let val  (
appsigexp as appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt__AND_sigbind_opt as AND_rea_opt__AND_sigbind_opt1)
 = AND_rea_opt__AND_sigbind_opt1 ()
 in (
 ( appsigexp
		          , #1 AND_rea_opt__AND_sigbind_opt
			  , #2 AND_rea_opt__AND_sigbind_opt ) 
)
end)
 in ( LrTable.NT 120, ( result, appsigexp1left, 
AND_rea_opt__AND_sigbind_opt1right), rest671)
end
|  ( 368, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: _ :: ( _, ( MlyValue.spec 
spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea (fn _ => let val  (spec as spec1) = 
spec1 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in ( SIGRea(I(SIGleft,AND_rea_optright),
				 spec, AND_rea_opt) )

end)
 in ( LrTable.NT 121, ( result, SIG1left, AND_rea_opt1right), rest671)

end
|  ( 369, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea (fn _ => let val  OP_opt1 = OP_opt1
 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 VALRea(I(VALleft,AND_rea_optright),
				 OP_opt1, longvid1,
				 OP_opt2, longvid2, AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, VAL1left, AND_rea_opt1right), rest671)

end
|  ( 370, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea (fn _ => let val  OP_opt1 = OP_opt1
 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 FUNRea(I(FUNleft,AND_rea_optright),
				 OP_opt1, longvid1,
				 OP_opt2, longvid2, AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, FUN1left, AND_rea_opt1right), rest671)

end
|  ( 371, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 CONSTRUCTORRea(I(CONSTRUCTORleft,AND_rea_optright),
					 OP_opt1, longvid1,
					 OP_opt2, longvid2, AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, CONSTRUCTOR1left, AND_rea_opt1right), 
rest671)
end
|  ( 372, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea (fn _ => let val  OP_opt1
 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 EXCEPTIONRea(I(EXCEPTIONleft,AND_rea_optright),
					 OP_opt1, longvid1,
					 OP_opt2, longvid2, AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, EXCEPTION1left, AND_rea_opt1right), 
rest671)
end
|  ( 373, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.ty ty1, _,
 _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = MlyValue.rea (fn _
 => let val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 TYPERea(I(TYPEleft,AND_rea_optright),
				  tyvarseq, longtycon, ty, AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, TYPE1left, AND_rea_opt1right), rest671
)
end
|  ( 374, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.longtycon 
longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea (fn _ => let val  (tyvarseq as tyvarseq1) = 
tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 EQTYPERea(I(EQTYPEleft,AND_rea_optright),
				    tyvarseq, longtycon, AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, EQTYPE1left, AND_rea_opt1right), 
rest671)
end
|  ( 375, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.longtycon 
longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea (fn _ => let val  (tyvarseq as tyvarseq1) = 
tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 EQEQTYPERea(I(EQEQTYPEleft,AND_rea_optright),
				      tyvarseq, longtycon, AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, EQEQTYPE1left, AND_rea_opt1right), 
rest671)
end
|  ( 376, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.longstrid 
longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea (fn _ => let val  longstrid1 = 
longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 STRUCTURERea(I(STRUCTUREleft,AND_rea_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, STRUCTURE1left, AND_rea_opt1right), 
rest671)
end
|  ( 377, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, (
AND_rea_optright as AND_rea_opt1right))) :: ( _, ( MlyValue.longstrid 
longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea (fn _ => let val  longstrid1 = 
longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in (
 FUNCTORRea(I(FUNCTORleft,AND_rea_optright),
				     longstrid1, COLON_sigexp_opt, longstrid2,
				     AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, FUNCTOR1left, AND_rea_opt1right), 
rest671)
end
|  ( 378, ( ( _, ( MlyValue.sigexp__AND_rea_opt sigexp__AND_rea_opt1,
 _, (sigexp__AND_rea_optright as sigexp__AND_rea_opt1right))) :: _ :: 
( _, ( MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = MlyValue.rea
 (fn _ => let val  (longsigid as longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt as sigexp__AND_rea_opt1) = 
sigexp__AND_rea_opt1 ()
 in (
 SIGNATURERea(I(SIGNATUREleft,
					 sigexp__AND_rea_optright),
				       longsigid, atstrpat_list0,
				       #1 sigexp__AND_rea_opt,
				       #2 sigexp__AND_rea_opt) 
)
end)
 in ( LrTable.NT 121, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt1right), rest671)
end
|  ( 379, ( ( _, ( MlyValue.rea rea1, _, rea1right)) :: ( _, ( _, 
AND1left, _)) :: rest671)) => let val  result = MlyValue.AND_rea_opt
 (fn _ => let val  (rea as rea1) = rea1 ()
 in ( SOME rea )
end)
 in ( LrTable.NT 122, ( result, AND1left, rea1right), rest671)
end
|  ( 380, ( rest671)) => let val  result = MlyValue.AND_rea_opt (fn _
 => ( NONE ))
 in ( LrTable.NT 122, ( result, defaultPos, defaultPos), rest671)
end
|  ( 381, ( ( _, ( MlyValue.AND_rea_opt AND_rea_opt1, _, 
AND_rea_opt1right)) :: ( _, ( MlyValue.appsigexp appsigexp1, 
appsigexp1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt (fn _ => let val  (appsigexp as 
appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt as AND_rea_opt1) = AND_rea_opt1 ()
 in ( ( appsigexp, AND_rea_opt ) )
end)
 in ( LrTable.NT 123, ( result, appsigexp1left, AND_rea_opt1right), 
rest671)
end
|  ( 382, ( ( _, ( MlyValue.strexp__AND_funbind_opt 
strexp__AND_funbind_opt1, _, (strexp__AND_funbind_optright as 
strexp__AND_funbind_opt1right))) :: _ :: ( _, ( 
MlyValue.COLON_sigexp_opt COLON_sigexp_opt1, _, _)) :: ( _, ( 
MlyValue.atstrpat_list1 atstrpat_list11, _, _)) :: ( _, ( 
MlyValue.strid strid1, _, _)) :: ( _, ( MlyValue.LAZY_SPAWN_opt 
LAZY_SPAWN_opt1, (LAZY_SPAWN_optleft as LAZY_SPAWN_opt1left), _)) :: 
rest671)) => let val  result = MlyValue.funbind (fn _ => let val  (
LAZY_SPAWN_opt as LAZY_SPAWN_opt1) = LAZY_SPAWN_opt1 ()
 val  (strid as strid1) = strid1 ()
 val  (atstrpat_list1 as atstrpat_list11) = atstrpat_list11 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  (strexp__AND_funbind_opt as strexp__AND_funbind_opt1) = 
strexp__AND_funbind_opt1 ()
 in (
 TRANSFunBind(I(LAZY_SPAWN_optleft,
					 strexp__AND_funbind_optright),
				       LAZY_SPAWN_opt, strid, atstrpat_list1,
				       COLON_sigexp_opt,
				       #1 strexp__AND_funbind_opt,
				       #2 strexp__AND_funbind_opt) 
)
end)
 in ( LrTable.NT 124, ( result, LAZY_SPAWN_opt1left, 
strexp__AND_funbind_opt1right), rest671)
end
|  ( 383, ( ( _, ( MlyValue.strexp__AND_funbind_opt 
strexp__AND_funbind_opt1, _, (strexp__AND_funbind_optright as 
strexp__AND_funbind_opt1right))) :: _ :: ( _, ( MlyValue.sigexp 
sigexp1, _, _)) :: _ :: ( _, ( MlyValue.atstrpat_list1 atstrpat_list11
, _, _)) :: ( _, ( MlyValue.strid strid1, _, _)) :: ( _, ( 
MlyValue.LAZY_SPAWN_opt LAZY_SPAWN_opt1, (LAZY_SPAWN_optleft as 
LAZY_SPAWN_opt1left), _)) :: rest671)) => let val  result = 
MlyValue.funbind (fn _ => let val  (LAZY_SPAWN_opt as LAZY_SPAWN_opt1)
 = LAZY_SPAWN_opt1 ()
 val  (strid as strid1) = strid1 ()
 val  (atstrpat_list1 as atstrpat_list11) = atstrpat_list11 ()
 val  (sigexp as sigexp1) = sigexp1 ()
 val  (strexp__AND_funbind_opt as strexp__AND_funbind_opt1) = 
strexp__AND_funbind_opt1 ()
 in (
 OPAQFunBind(I(LAZY_SPAWN_optleft,
					strexp__AND_funbind_optright),
				      LAZY_SPAWN_opt, strid, atstrpat_list1,
				      sigexp,
				      #1 strexp__AND_funbind_opt,
				      #2 strexp__AND_funbind_opt) 
)
end)
 in ( LrTable.NT 124, ( result, LAZY_SPAWN_opt1left, 
strexp__AND_funbind_opt1right), rest671)
end
|  ( 384, ( ( _, ( MlyValue.atstrpat atstrpat1, atstrpat1left, 
atstrpat1right)) :: rest671)) => let val  result = 
MlyValue.atstrpat_list1 (fn _ => let val  (atstrpat as atstrpat1) = 
atstrpat1 ()
 in ( atstrpat::[] )
end)
 in ( LrTable.NT 125, ( result, atstrpat1left, atstrpat1right), 
rest671)
end
|  ( 385, ( ( _, ( MlyValue.atstrpat_list1 atstrpat_list11, _, 
atstrpat_list11right)) :: ( _, ( MlyValue.atstrpat atstrpat1, 
atstrpat1left, _)) :: rest671)) => let val  result = 
MlyValue.atstrpat_list1 (fn _ => let val  (atstrpat as atstrpat1) = 
atstrpat1 ()
 val  (atstrpat_list1 as atstrpat_list11) = atstrpat_list11 ()
 in ( atstrpat::atstrpat_list1 )
end)
 in ( LrTable.NT 125, ( result, atstrpat1left, atstrpat_list11right), 
rest671)
end
|  ( 386, ( ( _, ( MlyValue.funbind funbind1, _, funbind1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_funbind_opt (fn _ => let val  (funbind as funbind1) = 
funbind1 ()
 in ( SOME funbind )
end)
 in ( LrTable.NT 126, ( result, AND1left, funbind1right), rest671)
end
|  ( 387, ( rest671)) => let val  result = MlyValue.AND_funbind_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 126, ( result, defaultPos, defaultPos), rest671)
end
|  ( 388, ( ( _, ( MlyValue.AND_funbind_opt AND_funbind_opt1, _, 
AND_funbind_opt1right)) :: ( _, ( MlyValue.appstrexp appstrexp1, 
appstrexp1left, _)) :: rest671)) => let val  result = 
MlyValue.strexp__AND_funbind_opt (fn _ => let val  (appstrexp as 
appstrexp1) = appstrexp1 ()
 val  (AND_funbind_opt as AND_funbind_opt1) = AND_funbind_opt1 ()
 in ( ( appstrexp, AND_funbind_opt ) )
end)
 in ( LrTable.NT 127, ( result, appstrexp1left, AND_funbind_opt1right)
, rest671)
end
|  ( 389, ( ( _, ( MlyValue.sigexp__AND_funbind_opt 
sigexp__AND_funbind_opt1, _, (sigexp__AND_funbind_optright as 
sigexp__AND_funbind_opt1right))) :: _ :: ( _, ( MlyValue.strexp 
strexp1, (strexpleft as strexp1left), _)) :: rest671)) => let val  
result = MlyValue.strexp__AND_funbind_opt (fn _ => let val  (strexp
 as strexp1) = strexp1 ()
 val  (sigexp__AND_funbind_opt as sigexp__AND_funbind_opt1) = 
sigexp__AND_funbind_opt1 ()
 in (
 ( TRANSStrExp(I(strexpleft,
					  sigexp__AND_funbind_optright),
					strexp, #1 sigexp__AND_funbind_opt)
			  , #2 sigexp__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 127, ( result, strexp1left, 
sigexp__AND_funbind_opt1right), rest671)
end
|  ( 390, ( ( _, ( MlyValue.sigexp__AND_funbind_opt 
sigexp__AND_funbind_opt1, _, (sigexp__AND_funbind_optright as 
sigexp__AND_funbind_opt1right))) :: _ :: ( _, ( MlyValue.strexp 
strexp1, (strexpleft as strexp1left), _)) :: rest671)) => let val  
result = MlyValue.strexp__AND_funbind_opt (fn _ => let val  (strexp
 as strexp1) = strexp1 ()
 val  (sigexp__AND_funbind_opt as sigexp__AND_funbind_opt1) = 
sigexp__AND_funbind_opt1 ()
 in (
 ( OPAQStrExp(I(strexpleft,
					 sigexp__AND_funbind_optright),
				       strexp, #1 sigexp__AND_funbind_opt)
			  , #2 sigexp__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 127, ( result, strexp1left, 
sigexp__AND_funbind_opt1right), rest671)
end
|  ( 391, ( ( _, ( MlyValue.strexp__AND_funbind_opt 
strexp__AND_funbind_opt1, _, (strexp__AND_funbind_optright as 
strexp__AND_funbind_opt1right))) :: _ :: ( _, ( MlyValue.strpat 
strpat1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.strexp__AND_funbind_opt (fn _ => let
 val  (strpat as strpat1) = strpat1 ()
 val  (strexp__AND_funbind_opt as strexp__AND_funbind_opt1) = 
strexp__AND_funbind_opt1 ()
 in (
 ( FCTStrExp(I(FCTleft,strexp__AND_funbind_optright),
				      strpat, #1 strexp__AND_funbind_opt)
			  , #2 strexp__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 127, ( result, FCT1left, 
strexp__AND_funbind_opt1right), rest671)
end
|  ( 392, ( ( _, ( MlyValue.sigexp__AND_funbind_opt 
sigexp__AND_funbind_opt1, _, (sigexp__AND_funbind_optright as 
sigexp__AND_funbind_opt1right))) :: _ :: ( _, ( MlyValue.infexp 
infexp1, _, _)) :: ( _, ( _, (UNPACKleft as UNPACK1left), _)) :: 
rest671)) => let val  result = MlyValue.strexp__AND_funbind_opt (fn _
 => let val  (infexp as infexp1) = infexp1 ()
 val  (sigexp__AND_funbind_opt as sigexp__AND_funbind_opt1) = 
sigexp__AND_funbind_opt1 ()
 in (
 ( UNPACKStrExp(I(UNPACKleft,
					   sigexp__AND_funbind_optright),
					 infexp, #1 sigexp__AND_funbind_opt)
			  , #2 sigexp__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 127, ( result, UNPACK1left, 
sigexp__AND_funbind_opt1right), rest671)
end
|  ( 393, ( ( _, ( MlyValue.strexp__AND_funbind_opt 
strexp__AND_funbind_opt1, _, (strexp__AND_funbind_optright as 
strexp__AND_funbind_opt1right))) :: ( _, ( _, (LAZYleft as LAZY1left),
 _)) :: rest671)) => let val  result = 
MlyValue.strexp__AND_funbind_opt (fn _ => let val  (
strexp__AND_funbind_opt as strexp__AND_funbind_opt1) = 
strexp__AND_funbind_opt1 ()
 in (
 ( LAZYStrExp(I(LAZYleft,strexp__AND_funbind_optright),
				       #1 strexp__AND_funbind_opt)
			  , #2 strexp__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 127, ( result, LAZY1left, 
strexp__AND_funbind_opt1right), rest671)
end
|  ( 394, ( ( _, ( MlyValue.strexp__AND_funbind_opt 
strexp__AND_funbind_opt1, _, (strexp__AND_funbind_optright as 
strexp__AND_funbind_opt1right))) :: ( _, ( _, (SPAWNleft as SPAWN1left
), _)) :: rest671)) => let val  result = 
MlyValue.strexp__AND_funbind_opt (fn _ => let val  (
strexp__AND_funbind_opt as strexp__AND_funbind_opt1) = 
strexp__AND_funbind_opt1 ()
 in (
 ( SPAWNStrExp(I(SPAWNleft,
					  strexp__AND_funbind_optright),
					#1 strexp__AND_funbind_opt)
			  , #2 strexp__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 127, ( result, SPAWN1left, 
strexp__AND_funbind_opt1right), rest671)
end
|  ( 395, ( ( _, ( MlyValue.AND_funbind_opt AND_funbind_opt1, _, 
AND_funbind_opt1right)) :: ( _, ( MlyValue.sigexp' sigexp'1, 
sigexp'1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_funbind_opt (fn _ => let val  (sigexp' as 
sigexp'1) = sigexp'1 ()
 val  (AND_funbind_opt as AND_funbind_opt1) = AND_funbind_opt1 ()
 in ( ( sigexp', AND_funbind_opt ) )
end)
 in ( LrTable.NT 128, ( result, sigexp'1left, AND_funbind_opt1right), 
rest671)
end
|  ( 396, ( ( _, ( MlyValue.sigexp__AND_funbind_opt 
sigexp__AND_funbind_opt1, _, (sigexp__AND_funbind_optright as 
sigexp__AND_funbind_opt1right))) :: _ :: ( _, ( MlyValue.strpat' 
strpat'1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp__AND_funbind_opt (fn _ => let
 val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp__AND_funbind_opt as sigexp__AND_funbind_opt1) = 
sigexp__AND_funbind_opt1 ()
 in (
 ( FCTSigExp(I(FCTleft,sigexp__AND_funbind_optright),
				      strpat', #1 sigexp__AND_funbind_opt)
			  , #2 sigexp__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 128, ( result, FCT1left, 
sigexp__AND_funbind_opt1right), rest671)
end
|  ( 397, ( ( _, ( MlyValue.sigexp__AND_funbind_opt 
sigexp__AND_funbind_opt1, _, (sigexp__AND_funbind_optright as 
sigexp__AND_funbind_opt1right))) :: _ :: ( _, ( MlyValue.atsigexp 
atsigexp1, (atsigexpleft as atsigexp1left), _)) :: rest671)) => let
 val  result = MlyValue.sigexp__AND_funbind_opt (fn _ => let val  (
atsigexp as atsigexp1) = atsigexp1 ()
 val  (sigexp__AND_funbind_opt as sigexp__AND_funbind_opt1) = 
sigexp__AND_funbind_opt1 ()
 in (
 ( ARROWSigExp(I(atsigexpleft,
					  sigexp__AND_funbind_optright),
					atsigexp, #1 sigexp__AND_funbind_opt)
			  , #2 sigexp__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 128, ( result, atsigexp1left, 
sigexp__AND_funbind_opt1right), rest671)
end
|  ( 398, ( ( _, ( MlyValue.rea__AND_funbind_opt rea__AND_funbind_opt1
, _, (rea__AND_funbind_optright as rea__AND_funbind_opt1right))) :: _
 :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp__AND_funbind_opt
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 val  (rea__AND_funbind_opt as rea__AND_funbind_opt1) = 
rea__AND_funbind_opt1 ()
 in (
 ( WHEREREASigExp(I(sigexpleft,
					     rea__AND_funbind_optright),
					   sigexp, #1 rea__AND_funbind_opt)
			  , #2 rea__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 128, ( result, sigexp1left, 
rea__AND_funbind_opt1right), rest671)
end
|  ( 399, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: _ :: ( _, ( MlyValue.spec
 spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_funbind_opt (fn _ => let val  (
spec as spec1) = spec1 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( SIGRea(I(SIGleft,AND_rea_opt__AND_funbind_optright),
				   spec, #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, SIG1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 400, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_funbind_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( VALRea(I(VALleft,AND_rea_opt__AND_funbind_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, VAL1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 401, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_funbind_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( FUNRea(I(FUNleft,AND_rea_opt__AND_funbind_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, FUN1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 402, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea__AND_funbind_opt (fn
 _ => let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( CONSTRUCTORRea(I(CONSTRUCTORleft,
					     AND_rea_opt__AND_funbind_optright),
					   OP_opt1, longvid1, OP_opt2, longvid2,
				           #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, CONSTRUCTOR1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 403, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea__AND_funbind_opt (fn _ =>
 let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( EXCEPTIONRea(I(EXCEPTIONleft,
					   AND_rea_opt__AND_funbind_optright),
					 OP_opt1, longvid1, OP_opt2, longvid2,
					 #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, EXCEPTION1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 404, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.ty ty1, _
, _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_funbind_opt (fn _ => let val  (tyvarseq as tyvarseq1
) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( TYPERea(I(TYPEleft,
				      AND_rea_opt__AND_funbind_optright),
				    tyvarseq, longtycon, ty,
				    #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, TYPE1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 405, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea__AND_funbind_opt (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( EQTYPERea(I(EQTYPEleft,
					AND_rea_opt__AND_funbind_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, EQTYPE1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 406, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea__AND_funbind_opt (fn _ => let val  (tyvarseq
 as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( EQEQTYPERea(I(EQEQTYPEleft,
					  AND_rea_opt__AND_funbind_optright),
					tyvarseq, longtycon,
					#1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, EQEQTYPE1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 407, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_funbind_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( STRUCTURERea(I(STRUCTUREleft,
					   AND_rea_opt__AND_funbind_optright),
				         longstrid1, COLON_sigexp_opt,
					 longstrid2,
				         #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, STRUCTURE1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 408, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, (AND_rea_opt__AND_funbind_optright
 as AND_rea_opt__AND_funbind_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_funbind_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( FUNCTORRea(I(FUNCTORleft,
					 AND_rea_opt__AND_funbind_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       #1 AND_rea_opt__AND_funbind_opt)
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, FUNCTOR1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 409, ( ( _, ( MlyValue.sigexp__AND_rea_opt__AND_funbind_opt 
sigexp__AND_rea_opt__AND_funbind_opt1, _, (
sigexp__AND_rea_opt__AND_funbind_optright as 
sigexp__AND_rea_opt__AND_funbind_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_funbind_opt (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt__AND_funbind_opt as 
sigexp__AND_rea_opt__AND_funbind_opt1) = 
sigexp__AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( SIGNATURERea
				(I(SIGNATUREleft,
				   sigexp__AND_rea_opt__AND_funbind_optright),
				 longsigid, atstrpat_list0,
				 #1 sigexp__AND_rea_opt__AND_funbind_opt,
				 #2 sigexp__AND_rea_opt__AND_funbind_opt)
			  , #3 sigexp__AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 129, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 410, ( ( _, ( MlyValue.AND_funbind_opt AND_funbind_opt1, 
AND_funbind_opt1left, AND_funbind_opt1right)) :: rest671)) => let val 
 result = MlyValue.AND_rea_opt__AND_funbind_opt (fn _ => let val  (
AND_funbind_opt as AND_funbind_opt1) = AND_funbind_opt1 ()
 in ( ( NONE, AND_funbind_opt ) )
end)
 in ( LrTable.NT 130, ( result, AND_funbind_opt1left, 
AND_funbind_opt1right), rest671)
end
|  ( 411, ( ( _, ( MlyValue.rea__AND_funbind_opt rea__AND_funbind_opt1
, _, rea__AND_funbind_opt1right)) :: ( _, ( _, AND1left, _)) :: 
rest671)) => let val  result = MlyValue.AND_rea_opt__AND_funbind_opt
 (fn _ => let val  (rea__AND_funbind_opt as rea__AND_funbind_opt1) = 
rea__AND_funbind_opt1 ()
 in (
 ( SOME(#1 rea__AND_funbind_opt)
			  , #2 rea__AND_funbind_opt ) )

end)
 in ( LrTable.NT 130, ( result, AND1left, rea__AND_funbind_opt1right),
 rest671)
end
|  ( 412, ( ( _, ( MlyValue.AND_rea_opt__AND_funbind_opt 
AND_rea_opt__AND_funbind_opt1, _, AND_rea_opt__AND_funbind_opt1right))
 :: ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, _)) :: 
rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt__AND_funbind_opt (fn _ => let val  (
appsigexp as appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt__AND_funbind_opt as AND_rea_opt__AND_funbind_opt1)
 = AND_rea_opt__AND_funbind_opt1 ()
 in (
 ( appsigexp
		          , #1 AND_rea_opt__AND_funbind_opt
			  , #2 AND_rea_opt__AND_funbind_opt ) 
)
end)
 in ( LrTable.NT 131, ( result, appsigexp1left, 
AND_rea_opt__AND_funbind_opt1right), rest671)
end
|  ( 413, ( ( _, ( MlyValue.spec1 spec11, spec11left, spec11right)) ::
 rest671)) => let val  result = MlyValue.spec (fn _ => let val  (spec1
 as spec11) = spec11 ()
 in ( spec1 )
end)
 in ( LrTable.NT 132, ( result, spec11left, spec11right), rest671)
end
|  ( 414, ( rest671)) => let val  result = MlyValue.spec (fn _ => (
 EMPTYSpec(I(defaultPos,defaultPos)) ))
 in ( LrTable.NT 132, ( result, defaultPos, defaultPos), rest671)
end
|  ( 415, ( ( _, ( MlyValue.spec1' spec1'1, spec1'1left, spec1'1right)
) :: rest671)) => let val  result = MlyValue.spec1 (fn _ => let val  (
spec1' as spec1'1) = spec1'1 ()
 in ( spec1' )
end)
 in ( LrTable.NT 133, ( result, spec1'1left, spec1'1right), rest671)

end
|  ( 416, ( ( _, ( _, (SEMICOLONleft as SEMICOLON1left), 
SEMICOLON1right)) :: rest671)) => let val  result = MlyValue.spec1 (fn
 _ => ( EMPTYSpec(I(SEMICOLONleft,SEMICOLONleft)) ))
 in ( LrTable.NT 133, ( result, SEMICOLON1left, SEMICOLON1right), 
rest671)
end
|  ( 417, ( ( _, ( MlyValue.spec1' spec1'1, _, (spec1'right as 
spec1'1right))) :: ( _, ( MlyValue.spec1 spec11, (spec1left as 
spec11left), _)) :: rest671)) => let val  result = MlyValue.spec1 (fn
 _ => let val  (spec1 as spec11) = spec11 ()
 val  (spec1' as spec1'1) = spec1'1 ()
 in ( SEQSpec(I(spec1left,spec1'right), spec1, spec1') )
end)
 in ( LrTable.NT 133, ( result, spec11left, spec1'1right), rest671)

end
|  ( 418, ( ( _, ( _, _, SEMICOLON1right)) :: ( _, ( MlyValue.spec1 
spec11, spec11left, _)) :: rest671)) => let val  result = 
MlyValue.spec1 (fn _ => let val  (spec1 as spec11) = spec11 ()
 in ( spec1 )
end)
 in ( LrTable.NT 133, ( result, spec11left, SEMICOLON1right), rest671)

end
|  ( 419, ( ( _, ( MlyValue.longtycon_EQUALS_list2 
longtycon_EQUALS_list21, _, (longtycon_EQUALS_list2right as 
longtycon_EQUALS_list21right))) :: _ :: ( _, ( _, (SHARINGleft as 
SHARING1left), _)) :: rest671)) => let val  result = MlyValue.spec1
 (fn _ => let val  (longtycon_EQUALS_list2 as longtycon_EQUALS_list21)
 = longtycon_EQUALS_list21 ()
 in (
 SHARINGTYPESpec(I(SHARINGleft,
					    longtycon_EQUALS_list2right),
					  EMPTYSpec(I(SHARINGleft,SHARINGleft)),
					  longtycon_EQUALS_list2) 
)
end)
 in ( LrTable.NT 133, ( result, SHARING1left, 
longtycon_EQUALS_list21right), rest671)
end
|  ( 420, ( ( _, ( MlyValue.longtycon_EQUALS_list2 
longtycon_EQUALS_list21, _, (longtycon_EQUALS_list2right as 
longtycon_EQUALS_list21right))) :: _ :: _ :: ( _, ( MlyValue.spec1 
spec11, (spec1left as spec11left), _)) :: rest671)) => let val  result
 = MlyValue.spec1 (fn _ => let val  (spec1 as spec11) = spec11 ()
 val  (longtycon_EQUALS_list2 as longtycon_EQUALS_list21) = 
longtycon_EQUALS_list21 ()
 in (
 SHARINGTYPESpec(I(spec1left,
					    longtycon_EQUALS_list2right),
					  spec1, longtycon_EQUALS_list2) 
)
end)
 in ( LrTable.NT 133, ( result, spec11left, 
longtycon_EQUALS_list21right), rest671)
end
|  ( 421, ( ( _, ( MlyValue.longsigid_EQUALS_list2 
longsigid_EQUALS_list21, _, (longsigid_EQUALS_list2right as 
longsigid_EQUALS_list21right))) :: _ :: ( _, ( _, (SHARINGleft as 
SHARING1left), _)) :: rest671)) => let val  result = MlyValue.spec1
 (fn _ => let val  (longsigid_EQUALS_list2 as longsigid_EQUALS_list21)
 = longsigid_EQUALS_list21 ()
 in (
 SHARINGSIGNATURESpec(I(SHARINGleft,
						 longsigid_EQUALS_list2right),
					       EMPTYSpec(I(SHARINGleft,
							   SHARINGleft)),
					       longsigid_EQUALS_list2) 
)
end)
 in ( LrTable.NT 133, ( result, SHARING1left, 
longsigid_EQUALS_list21right), rest671)
end
|  ( 422, ( ( _, ( MlyValue.longsigid_EQUALS_list2 
longsigid_EQUALS_list21, _, (longsigid_EQUALS_list2right as 
longsigid_EQUALS_list21right))) :: _ :: _ :: ( _, ( MlyValue.spec1 
spec11, (spec1left as spec11left), _)) :: rest671)) => let val  result
 = MlyValue.spec1 (fn _ => let val  (spec1 as spec11) = spec11 ()
 val  (longsigid_EQUALS_list2 as longsigid_EQUALS_list21) = 
longsigid_EQUALS_list21 ()
 in (
 SHARINGSIGNATURESpec(I(spec1left,
						 longsigid_EQUALS_list2right),
					       spec1, longsigid_EQUALS_list2) 
)
end)
 in ( LrTable.NT 133, ( result, spec11left, 
longsigid_EQUALS_list21right), rest671)
end
|  ( 423, ( ( _, ( MlyValue.longstrid_EQUALS_list2 
longstrid_EQUALS_list21, _, (longstrid_EQUALS_list2right as 
longstrid_EQUALS_list21right))) :: ( _, ( _, (SHARINGleft as 
SHARING1left), _)) :: rest671)) => let val  result = MlyValue.spec1
 (fn _ => let val  (longstrid_EQUALS_list2 as longstrid_EQUALS_list21)
 = longstrid_EQUALS_list21 ()
 in (
 SHARINGSpec(I(SHARINGleft,
					longstrid_EQUALS_list2right),
				      EMPTYSpec(I(SHARINGleft,SHARINGleft)),
				      longstrid_EQUALS_list2) 
)
end)
 in ( LrTable.NT 133, ( result, SHARING1left, 
longstrid_EQUALS_list21right), rest671)
end
|  ( 424, ( ( _, ( MlyValue.longstrid_EQUALS_list2 
longstrid_EQUALS_list21, _, (longstrid_EQUALS_list2right as 
longstrid_EQUALS_list21right))) :: _ :: ( _, ( MlyValue.spec1 spec11,
 (spec1left as spec11left), _)) :: rest671)) => let val  result = 
MlyValue.spec1 (fn _ => let val  (spec1 as spec11) = spec11 ()
 val  (longstrid_EQUALS_list2 as longstrid_EQUALS_list21) = 
longstrid_EQUALS_list21 ()
 in (
 SHARINGSpec(I(spec1left,longstrid_EQUALS_list2right),
				      spec1, longstrid_EQUALS_list2) 
)
end)
 in ( LrTable.NT 133, ( result, spec11left, 
longstrid_EQUALS_list21right), rest671)
end
|  ( 425, ( ( _, ( MlyValue.valdesc valdesc1, _, (valdescright as 
valdesc1right))) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.spec1' (fn _ => let val  (valdesc as 
valdesc1) = valdesc1 ()
 in ( VALSpec(I(VALleft,valdescright), valdesc) )
end)
 in ( LrTable.NT 134, ( result, VAL1left, valdesc1right), rest671)
end
|  ( 426, ( ( _, ( MlyValue.valdesc valdesc1, _, (valdescright as 
valdesc1right))) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.spec1' (fn _ => let val  (valdesc as 
valdesc1) = valdesc1 ()
 in ( FUNSpec(I(FUNleft,valdescright), valdesc) )
end)
 in ( LrTable.NT 134, ( result, FUN1left, valdesc1right), rest671)
end
|  ( 427, ( ( _, ( MlyValue.typdesc typdesc1, _, (typdescright as 
typdesc1right))) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: rest671)
) => let val  result = MlyValue.spec1' (fn _ => let val  (typdesc as 
typdesc1) = typdesc1 ()
 in ( TYPESpec(I(TYPEleft,typdescright), typdesc) )
end)
 in ( LrTable.NT 134, ( result, TYPE1left, typdesc1right), rest671)

end
|  ( 428, ( ( _, ( MlyValue.typdesc typdesc1, _, (typdescright as 
typdesc1right))) :: ( _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
typdesc as typdesc1) = typdesc1 ()
 in ( EQTYPESpec(I(EQTYPEleft,typdescright), typdesc) )
end)
 in ( LrTable.NT 134, ( result, EQTYPE1left, typdesc1right), rest671)

end
|  ( 429, ( ( _, ( MlyValue.typdesc typdesc1, _, (typdescright as 
typdesc1right))) :: ( _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
typdesc as typdesc1) = typdesc1 ()
 in ( EQEQTYPESpec(I(EQEQTYPEleft,typdescright), typdesc) )
end)
 in ( LrTable.NT 134, ( result, EQEQTYPE1left, typdesc1right), rest671
)
end
|  ( 430, ( ( _, ( MlyValue.WITHTYPE_typdesc_opt WITHTYPE_typdesc_opt1
, _, (WITHTYPE_typdesc_optright as WITHTYPE_typdesc_opt1right))) :: (
 _, ( MlyValue.datdesc0 datdesc01, _, _)) :: ( _, ( _, (DATATYPEleft
 as DATATYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.spec1' (fn _ => let val  (datdesc0 as datdesc01) = datdesc01
 ()
 val  (WITHTYPE_typdesc_opt as WITHTYPE_typdesc_opt1) = 
WITHTYPE_typdesc_opt1 ()
 in (
 DATATYPESpec(I(DATATYPEleft,
					 WITHTYPE_typdesc_optright),
				       datdesc0, WITHTYPE_typdesc_opt) 
)
end)
 in ( LrTable.NT 134, ( result, DATATYPE1left, 
WITHTYPE_typdesc_opt1right), rest671)
end
|  ( 431, ( ( _, ( MlyValue.WITHTYPE_typdesc_opt WITHTYPE_typdesc_opt1
, _, (WITHTYPE_typdesc_optright as WITHTYPE_typdesc_opt1right))) :: (
 _, ( MlyValue.datdesc1 datdesc11, _, _)) :: ( _, ( _, (DATATYPEleft
 as DATATYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.spec1' (fn _ => let val  (datdesc1 as datdesc11) = datdesc11
 ()
 val  (WITHTYPE_typdesc_opt as WITHTYPE_typdesc_opt1) = 
WITHTYPE_typdesc_opt1 ()
 in (
 DATATYPESpec(I(DATATYPEleft,
					 WITHTYPE_typdesc_optright),
				       datdesc1, WITHTYPE_typdesc_opt) 
)
end)
 in ( LrTable.NT 134, ( result, DATATYPE1left, 
WITHTYPE_typdesc_opt1right), rest671)
end
|  ( 432, ( ( _, ( MlyValue.longtycon longtycon1, _, (longtyconright
 as longtycon1right))) :: _ :: _ :: ( _, ( MlyValue.tycon tycon1, _, _
)) :: ( _, ( _, (DATATYPEleft as DATATYPE1left), _)) :: rest671)) =>
 let val  result = MlyValue.spec1' (fn _ => let val  (tycon as tycon1)
 = tycon1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 in (
 REPLICATIONSpec(I(DATATYPEleft,longtyconright),
					  tycon, longtycon) 
)
end)
 in ( LrTable.NT 134, ( result, DATATYPE1left, longtycon1right), 
rest671)
end
|  ( 433, ( ( _, ( MlyValue.extdesc extdesc1, _, (extdescright as 
extdesc1right))) :: ( _, ( _, (EXTTYPEleft as EXTTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
extdesc as extdesc1) = extdesc1 ()
 in ( EXTTYPESpec(I(EXTTYPEleft,extdescright), extdesc) )
end)
 in ( LrTable.NT 134, ( result, EXTTYPE1left, extdesc1right), rest671)

end
|  ( 434, ( ( _, ( MlyValue.econdesc econdesc1, _, (econdescright as 
econdesc1right))) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left),
 _)) :: rest671)) => let val  result = MlyValue.spec1' (fn _ => let
 val  (econdesc as econdesc1) = econdesc1 ()
 in (
 CONSTRUCTORSpec(I(CONSTRUCTORleft,econdescright),
					  econdesc) )

end)
 in ( LrTable.NT 134, ( result, CONSTRUCTOR1left, econdesc1right), 
rest671)
end
|  ( 435, ( ( _, ( MlyValue.exdesc exdesc1, _, (exdescright as 
exdesc1right))) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
exdesc as exdesc1) = exdesc1 ()
 in ( EXCEPTIONSpec(I(EXCEPTIONleft,exdescright), exdesc) )
end)
 in ( LrTable.NT 134, ( result, EXCEPTION1left, exdesc1right), rest671
)
end
|  ( 436, ( ( _, ( MlyValue.strdesc strdesc1, _, (strdescright as 
strdesc1right))) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _))
 :: rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
strdesc as strdesc1) = strdesc1 ()
 in ( STRUCTURESpec(I(STRUCTUREleft,strdescright), strdesc))
end)
 in ( LrTable.NT 134, ( result, STRUCTURE1left, strdesc1right), 
rest671)
end
|  ( 437, ( ( _, ( MlyValue.sigdesc sigdesc1, _, (sigdescright as 
sigdesc1right))) :: ( _, ( _, (SIGNATUREleft as SIGNATURE1left), _))
 :: rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
sigdesc as sigdesc1) = sigdesc1 ()
 in ( SIGNATURESpec(I(SIGNATUREleft,sigdescright), sigdesc))
end)
 in ( LrTable.NT 134, ( result, SIGNATURE1left, sigdesc1right), 
rest671)
end
|  ( 438, ( ( _, ( MlyValue.fundesc fundesc1, _, (fundescright as 
fundesc1right))) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: 
rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
fundesc as fundesc1) = fundesc1 ()
 in ( FUNCTORSpec(I(FUNCTORleft,fundescright), fundesc))
end)
 in ( LrTable.NT 134, ( result, FUNCTOR1left, fundesc1right), rest671)

end
|  ( 439, ( ( _, ( MlyValue.sigexp sigexp1, _, (sigexpright as 
sigexp1right))) :: ( _, ( _, (INCLUDEleft as INCLUDE1left), _)) :: 
rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
sigexp as sigexp1) = sigexp1 ()
 in ( INCLUDESpec(I(INCLUDEleft,sigexpright), sigexp) )
end)
 in ( LrTable.NT 134, ( result, INCLUDE1left, sigexp1right), rest671)

end
|  ( 440, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( MlyValue.d_opt d_opt1, _, _)) :: ( _,
 ( _, (INFIXleft as INFIX1left), _)) :: rest671)) => let val  result =
 MlyValue.spec1' (fn _ => let val  (d_opt as d_opt1) = d_opt1 ()
 val  (vid_list1 as vid_list11) = vid_list11 ()
 in (
 INFIXMULTISpec(I(INFIXleft,vid_list1right), d_opt,
					 vid_list1) )

end)
 in ( LrTable.NT 134, ( result, INFIX1left, vid_list11right), rest671)

end
|  ( 441, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( MlyValue.d_opt d_opt1, _, _)) :: ( _,
 ( _, (INFIXRleft as INFIXR1left), _)) :: rest671)) => let val  result
 = MlyValue.spec1' (fn _ => let val  (d_opt as d_opt1) = d_opt1 ()
 val  (vid_list1 as vid_list11) = vid_list11 ()
 in (
 INFIXRMULTISpec(I(INFIXRleft,vid_list1right), d_opt,
					  vid_list1) 
)
end)
 in ( LrTable.NT 134, ( result, INFIXR1left, vid_list11right), rest671
)
end
|  ( 442, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( _, (NONFIXleft as NONFIX1left), _))
 :: rest671)) => let val  result = MlyValue.spec1' (fn _ => let val  (
vid_list1 as vid_list11) = vid_list11 ()
 in ( NONFIXMULTISpec(I(NONFIXleft,vid_list1right),
					  vid_list1) 
)
end)
 in ( LrTable.NT 134, ( result, NONFIX1left, vid_list11right), rest671
)
end
|  ( 443, ( ( _, ( MlyValue.typdesc typdesc1, _, typdesc1right)) :: (
 _, ( _, WITHTYPE1left, _)) :: rest671)) => let val  result = 
MlyValue.WITHTYPE_typdesc_opt (fn _ => let val  (typdesc as typdesc1)
 = typdesc1 ()
 in ( SOME typdesc )
end)
 in ( LrTable.NT 135, ( result, WITHTYPE1left, typdesc1right), rest671
)
end
|  ( 444, ( rest671)) => let val  result = 
MlyValue.WITHTYPE_typdesc_opt (fn _ => ( NONE ))
 in ( LrTable.NT 135, ( result, defaultPos, defaultPos), rest671)
end
|  ( 445, ( ( _, ( MlyValue.longtycon_EQUALS_list1 
longtycon_EQUALS_list11, _, longtycon_EQUALS_list11right)) :: _ :: ( _
, ( MlyValue.longtycon longtycon1, longtycon1left, _)) :: rest671)) =>
 let val  result = MlyValue.longtycon_EQUALS_list1 (fn _ => let val  (
longtycon as longtycon1) = longtycon1 ()
 val  (longtycon_EQUALS_list1 as longtycon_EQUALS_list11) = 
longtycon_EQUALS_list11 ()
 in ( longtycon::longtycon_EQUALS_list1 )
end)
 in ( LrTable.NT 136, ( result, longtycon1left, 
longtycon_EQUALS_list11right), rest671)
end
|  ( 446, ( ( _, ( MlyValue.longtycon longtycon1, longtycon1left, 
longtycon1right)) :: rest671)) => let val  result = 
MlyValue.longtycon_EQUALS_list1 (fn _ => let val  (longtycon as 
longtycon1) = longtycon1 ()
 in ( longtycon::[] )
end)
 in ( LrTable.NT 136, ( result, longtycon1left, longtycon1right), 
rest671)
end
|  ( 447, ( ( _, ( MlyValue.longtycon_EQUALS_list1 
longtycon_EQUALS_list11, _, longtycon_EQUALS_list11right)) :: _ :: ( _
, ( MlyValue.longtycon longtycon1, longtycon1left, _)) :: rest671)) =>
 let val  result = MlyValue.longtycon_EQUALS_list2 (fn _ => let val  (
longtycon as longtycon1) = longtycon1 ()
 val  (longtycon_EQUALS_list1 as longtycon_EQUALS_list11) = 
longtycon_EQUALS_list11 ()
 in ( longtycon::longtycon_EQUALS_list1 )
end)
 in ( LrTable.NT 137, ( result, longtycon1left, 
longtycon_EQUALS_list11right), rest671)
end
|  ( 448, ( ( _, ( MlyValue.longsigid_EQUALS_list1 
longsigid_EQUALS_list11, _, longsigid_EQUALS_list11right)) :: _ :: ( _
, ( MlyValue.longsigid longsigid1, longsigid1left, _)) :: rest671)) =>
 let val  result = MlyValue.longsigid_EQUALS_list1 (fn _ => let val  (
longsigid as longsigid1) = longsigid1 ()
 val  (longsigid_EQUALS_list1 as longsigid_EQUALS_list11) = 
longsigid_EQUALS_list11 ()
 in ( longsigid::longsigid_EQUALS_list1 )
end)
 in ( LrTable.NT 138, ( result, longsigid1left, 
longsigid_EQUALS_list11right), rest671)
end
|  ( 449, ( ( _, ( MlyValue.longsigid longsigid1, longsigid1left, 
longsigid1right)) :: rest671)) => let val  result = 
MlyValue.longsigid_EQUALS_list1 (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 in ( longsigid::[] )
end)
 in ( LrTable.NT 138, ( result, longsigid1left, longsigid1right), 
rest671)
end
|  ( 450, ( ( _, ( MlyValue.longsigid_EQUALS_list1 
longsigid_EQUALS_list11, _, longsigid_EQUALS_list11right)) :: _ :: ( _
, ( MlyValue.longsigid longsigid1, longsigid1left, _)) :: rest671)) =>
 let val  result = MlyValue.longsigid_EQUALS_list2 (fn _ => let val  (
longsigid as longsigid1) = longsigid1 ()
 val  (longsigid_EQUALS_list1 as longsigid_EQUALS_list11) = 
longsigid_EQUALS_list11 ()
 in ( longsigid::longsigid_EQUALS_list1 )
end)
 in ( LrTable.NT 139, ( result, longsigid1left, 
longsigid_EQUALS_list11right), rest671)
end
|  ( 451, ( ( _, ( MlyValue.longstrid_EQUALS_list1 
longstrid_EQUALS_list11, _, longstrid_EQUALS_list11right)) :: _ :: ( _
, ( MlyValue.longstrid longstrid1, longstrid1left, _)) :: rest671)) =>
 let val  result = MlyValue.longstrid_EQUALS_list1 (fn _ => let val  (
longstrid as longstrid1) = longstrid1 ()
 val  (longstrid_EQUALS_list1 as longstrid_EQUALS_list11) = 
longstrid_EQUALS_list11 ()
 in ( longstrid::longstrid_EQUALS_list1 )
end)
 in ( LrTable.NT 140, ( result, longstrid1left, 
longstrid_EQUALS_list11right), rest671)
end
|  ( 452, ( ( _, ( MlyValue.longstrid longstrid1, longstrid1left, 
longstrid1right)) :: rest671)) => let val  result = 
MlyValue.longstrid_EQUALS_list1 (fn _ => let val  (longstrid as 
longstrid1) = longstrid1 ()
 in ( longstrid::[] )
end)
 in ( LrTable.NT 140, ( result, longstrid1left, longstrid1right), 
rest671)
end
|  ( 453, ( ( _, ( MlyValue.longstrid_EQUALS_list1 
longstrid_EQUALS_list11, _, longstrid_EQUALS_list11right)) :: _ :: ( _
, ( MlyValue.longstrid longstrid1, longstrid1left, _)) :: rest671)) =>
 let val  result = MlyValue.longstrid_EQUALS_list2 (fn _ => let val  (
longstrid as longstrid1) = longstrid1 ()
 val  (longstrid_EQUALS_list1 as longstrid_EQUALS_list11) = 
longstrid_EQUALS_list11 ()
 in ( longstrid::longstrid_EQUALS_list1 )
end)
 in ( LrTable.NT 141, ( result, longstrid1left, 
longstrid_EQUALS_list11right), rest671)
end
|  ( 454, ( ( _, ( MlyValue.AND_valdesc_opt AND_valdesc_opt1, _, (
AND_valdesc_optright as AND_valdesc_opt1right))) :: ( _, ( MlyValue.ty
 ty1, _, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, (OP_optleft as OP_opt1left), _)) :: rest671))
 => let val  result = MlyValue.valdesc (fn _ => let val  (OP_opt as 
OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_valdesc_opt as AND_valdesc_opt1) = AND_valdesc_opt1 ()
 in (
 NEWValDesc(I(OP_optleft,AND_valdesc_optright),
				  OP_opt, vid, ty, AND_valdesc_opt) 
)
end)
 in ( LrTable.NT 142, ( result, OP_opt1left, AND_valdesc_opt1right), 
rest671)
end
|  ( 455, ( ( _, ( MlyValue.AND_valdesc_opt AND_valdesc_opt1, _, (
AND_valdesc_optright as AND_valdesc_opt1right))) :: ( _, ( 
MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _
, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, OP_opt1left, _)) :: rest671)) => let val  
result = MlyValue.valdesc (fn _ => let val  OP_opt1 = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  (longvid as longvid1) = longvid1 ()
 val  (AND_valdesc_opt as AND_valdesc_opt1) = AND_valdesc_opt1 ()
 in (
 EQUALValDesc(I(OP_opt1left,AND_valdesc_optright),
				       OP_opt1, vid,
				       OP_opt2, longvid, AND_valdesc_opt) 
)
end)
 in ( LrTable.NT 142, ( result, OP_opt1left, AND_valdesc_opt1right), 
rest671)
end
|  ( 456, ( ( _, ( MlyValue.valdesc valdesc1, _, valdesc1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_valdesc_opt (fn _ => let val  (valdesc as valdesc1) = 
valdesc1 ()
 in ( SOME valdesc )
end)
 in ( LrTable.NT 143, ( result, AND1left, valdesc1right), rest671)
end
|  ( 457, ( rest671)) => let val  result = MlyValue.AND_valdesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 143, ( result, defaultPos, defaultPos), rest671)
end
|  ( 458, ( ( _, ( MlyValue.AND_typdesc_opt AND_typdesc_opt1, _, (
AND_typdesc_optright as AND_typdesc_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, (
tyvarseqleft as tyvarseq1left), _)) :: rest671)) => let val  result = 
MlyValue.typdesc (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (AND_typdesc_opt as AND_typdesc_opt1) = AND_typdesc_opt1 ()
 in (
 NEWTypDesc(I(tyvarseqleft,AND_typdesc_optright),
				     tyvarseq, tycon, AND_typdesc_opt) 
)
end)
 in ( LrTable.NT 144, ( result, tyvarseq1left, AND_typdesc_opt1right),
 rest671)
end
|  ( 459, ( ( _, ( MlyValue.AND_typdesc_opt AND_typdesc_opt1, _, (
AND_typdesc_optright as AND_typdesc_opt1right))) :: ( _, ( MlyValue.ty
 ty1, _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, (tyvarseqleft as tyvarseq1left), _)) :: 
rest671)) => let val  result = MlyValue.typdesc (fn _ => let val  (
tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_typdesc_opt as AND_typdesc_opt1) = AND_typdesc_opt1 ()
 in (
 EQUALTypDesc(I(tyvarseqleft,AND_typdesc_optright),
				       tyvarseq, tycon, ty, AND_typdesc_opt) 
)
end)
 in ( LrTable.NT 144, ( result, tyvarseq1left, AND_typdesc_opt1right),
 rest671)
end
|  ( 460, ( ( _, ( MlyValue.typdesc typdesc1, _, typdesc1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_typdesc_opt (fn _ => let val  (typdesc as typdesc1) = 
typdesc1 ()
 in ( SOME typdesc )
end)
 in ( LrTable.NT 145, ( result, AND1left, typdesc1right), rest671)
end
|  ( 461, ( rest671)) => let val  result = MlyValue.AND_typdesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 145, ( result, defaultPos, defaultPos), rest671)
end
|  ( 462, ( ( _, ( MlyValue.AND_datdesc_opt AND_datdesc_opt1, _, (
AND_datdesc_optright as AND_datdesc_opt1right))) :: ( _, ( 
MlyValue.condesc condesc1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1,
 _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, (tyvarseqleft as tyvarseq1left), _)) :: 
rest671)) => let val  result = MlyValue.datdesc (fn _ => let val  (
tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (tycon as tycon1) = tycon1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (condesc as condesc1) = condesc1 ()
 val  (AND_datdesc_opt as AND_datdesc_opt1) = AND_datdesc_opt1 ()
 in (
 DatDesc(I(tyvarseqleft,AND_datdesc_optright),
				  tyvarseq, tycon, condesc, AND_datdesc_opt) 
)
end)
 in ( LrTable.NT 146, ( result, tyvarseq1left, AND_datdesc_opt1right),
 rest671)
end
|  ( 463, ( ( _, ( MlyValue.AND_datdesc_opt AND_datdesc_opt1, _, (
AND_datdesc_optright as AND_datdesc_opt1right))) :: ( _, ( 
MlyValue.condesc condesc1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1,
 _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, (tyconleft as tycon1left
), _)) :: rest671)) => let val  result = MlyValue.datdesc0 (fn _ =>
 let val  (tycon as tycon1) = tycon1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (condesc as condesc1) = condesc1 ()
 val  (AND_datdesc_opt as AND_datdesc_opt1) = AND_datdesc_opt1 ()
 in (
 DatDesc(I(tyconleft,AND_datdesc_optright),
	  			  Seq(I(defaultPos,defaultPos), []),
				  tycon, condesc, AND_datdesc_opt) 
)
end)
 in ( LrTable.NT 147, ( result, tycon1left, AND_datdesc_opt1right), 
rest671)
end
|  ( 464, ( ( _, ( MlyValue.AND_datdesc_opt AND_datdesc_opt1, _, (
AND_datdesc_optright as AND_datdesc_opt1right))) :: ( _, ( 
MlyValue.condesc condesc1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1,
 _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq1 tyvarseq11, (tyvarseq1left as tyvarseq11left), _))
 :: rest671)) => let val  result = MlyValue.datdesc1 (fn _ => let val 
 (tyvarseq1 as tyvarseq11) = tyvarseq11 ()
 val  (tycon as tycon1) = tycon1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (condesc as condesc1) = condesc1 ()
 val  (AND_datdesc_opt as AND_datdesc_opt1) = AND_datdesc_opt1 ()
 in (
 DatDesc(I(tyvarseq1left,AND_datdesc_optright),
	  			  tyvarseq1, tycon, condesc, AND_datdesc_opt) 
)
end)
 in ( LrTable.NT 148, ( result, tyvarseq11left, AND_datdesc_opt1right)
, rest671)
end
|  ( 465, ( ( _, ( MlyValue.datdesc datdesc1, _, datdesc1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_datdesc_opt (fn _ => let val  (datdesc as datdesc1) = 
datdesc1 ()
 in ( SOME datdesc )
end)
 in ( LrTable.NT 149, ( result, AND1left, datdesc1right), rest671)
end
|  ( 466, ( rest671)) => let val  result = MlyValue.AND_datdesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 149, ( result, defaultPos, defaultPos), rest671)
end
|  ( 467, ( ( _, ( MlyValue.BAR_condesc_opt BAR_condesc_opt1, _, (
BAR_condesc_optright as BAR_condesc_opt1right))) :: ( _, ( 
MlyValue.OF_ty_opt OF_ty_opt1, _, _)) :: ( _, ( MlyValue.vid vid1, _,
 _)) :: ( _, ( MlyValue.OP_opt OP_opt1, (OP_optleft as OP_opt1left), _
)) :: rest671)) => let val  result = MlyValue.condesc (fn _ => let
 val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (BAR_condesc_opt as BAR_condesc_opt1) = BAR_condesc_opt1 ()
 in (
 ConDesc(I(OP_optleft,BAR_condesc_optright),
				  OP_opt, vid, OF_ty_opt, BAR_condesc_opt) 
)
end)
 in ( LrTable.NT 150, ( result, OP_opt1left, BAR_condesc_opt1right), 
rest671)
end
|  ( 468, ( ( _, ( MlyValue.condesc condesc1, _, condesc1right)) :: (
 _, ( _, BAR1left, _)) :: rest671)) => let val  result = 
MlyValue.BAR_condesc_opt (fn _ => let val  (condesc as condesc1) = 
condesc1 ()
 in ( SOME condesc )
end)
 in ( LrTable.NT 151, ( result, BAR1left, condesc1right), rest671)
end
|  ( 469, ( rest671)) => let val  result = MlyValue.BAR_condesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 151, ( result, defaultPos, defaultPos), rest671)
end
|  ( 470, ( ( _, ( MlyValue.AND_extdesc_opt AND_extdesc_opt1, _, (
AND_extdesc_optright as AND_extdesc_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, (
tyvarseqleft as tyvarseq1left), _)) :: rest671)) => let val  result = 
MlyValue.extdesc (fn _ => let val  (tyvarseq as tyvarseq1) = tyvarseq1
 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (AND_extdesc_opt as AND_extdesc_opt1) = AND_extdesc_opt1 ()
 in (
 ExtDesc(I(tyvarseqleft,AND_extdesc_optright),
				  tyvarseq, tycon, AND_extdesc_opt) 
)
end)
 in ( LrTable.NT 152, ( result, tyvarseq1left, AND_extdesc_opt1right),
 rest671)
end
|  ( 471, ( ( _, ( MlyValue.extdesc extdesc1, _, extdesc1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_extdesc_opt (fn _ => let val  (extdesc as extdesc1) = 
extdesc1 ()
 in ( SOME extdesc )
end)
 in ( LrTable.NT 153, ( result, AND1left, extdesc1right), rest671)
end
|  ( 472, ( rest671)) => let val  result = MlyValue.AND_extdesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 153, ( result, defaultPos, defaultPos), rest671)
end
|  ( 473, ( ( _, ( MlyValue.AND_econdesc_opt AND_econdesc_opt1, _, (
AND_econdesc_optright as AND_econdesc_opt1right))) :: ( _, ( 
MlyValue.longtycon longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq 
tyvarseq1, _, _)) :: _ :: ( _, ( MlyValue.OF_ty_opt OF_ty_opt1, _, _))
 :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1
, (OP_optleft as OP_opt1left), _)) :: rest671)) => let val  result = 
MlyValue.econdesc (fn _ => let val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_econdesc_opt as AND_econdesc_opt1) = AND_econdesc_opt1 ()
 in (
 NEWEconDesc(I(OP_optleft,AND_econdesc_optright),
				      OP_opt, vid, OF_ty_opt,
				      tyvarseq, longtycon, AND_econdesc_opt) 
)
end)
 in ( LrTable.NT 154, ( result, OP_opt1left, AND_econdesc_opt1right), 
rest671)
end
|  ( 474, ( ( _, ( MlyValue.AND_econdesc_opt AND_econdesc_opt1, _, (
AND_econdesc_optright as AND_econdesc_opt1right))) :: ( _, ( 
MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _
, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, OP_opt1left, _)) :: rest671)) => let val  
result = MlyValue.econdesc (fn _ => let val  OP_opt1 = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  (longvid as longvid1) = longvid1 ()
 val  (AND_econdesc_opt as AND_econdesc_opt1) = AND_econdesc_opt1 ()
 in (
 EQUALEconDesc(I(OP_opt1left,AND_econdesc_optright),
					OP_opt1, vid,
					OP_opt2, longvid, AND_econdesc_opt) 
)
end)
 in ( LrTable.NT 154, ( result, OP_opt1left, AND_econdesc_opt1right), 
rest671)
end
|  ( 475, ( ( _, ( MlyValue.econdesc econdesc1, _, econdesc1right)) ::
 ( _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_econdesc_opt (fn _ => let val  (econdesc as econdesc1) = 
econdesc1 ()
 in ( SOME econdesc )
end)
 in ( LrTable.NT 155, ( result, AND1left, econdesc1right), rest671)

end
|  ( 476, ( rest671)) => let val  result = MlyValue.AND_econdesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 155, ( result, defaultPos, defaultPos), rest671)
end
|  ( 477, ( ( _, ( MlyValue.AND_exdesc_opt AND_exdesc_opt1, _, (
AND_exdesc_optright as AND_exdesc_opt1right))) :: ( _, ( 
MlyValue.OF_ty_opt OF_ty_opt1, _, _)) :: ( _, ( MlyValue.vid vid1, _,
 _)) :: ( _, ( MlyValue.OP_opt OP_opt1, (OP_optleft as OP_opt1left), _
)) :: rest671)) => let val  result = MlyValue.exdesc (fn _ => let val 
 (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (AND_exdesc_opt as AND_exdesc_opt1) = AND_exdesc_opt1 ()
 in (
 NEWExDesc(I(OP_optleft,AND_exdesc_optright),
	  			    OP_opt, vid, OF_ty_opt, AND_exdesc_opt) 
)
end)
 in ( LrTable.NT 156, ( result, OP_opt1left, AND_exdesc_opt1right), 
rest671)
end
|  ( 478, ( ( _, ( MlyValue.AND_exdesc_opt AND_exdesc_opt1, _, (
AND_exdesc_optright as AND_exdesc_opt1right))) :: ( _, ( 
MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _
, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, OP_opt1left, _)) :: rest671)) => let val  
result = MlyValue.exdesc (fn _ => let val  OP_opt1 = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  (longvid as longvid1) = longvid1 ()
 val  (AND_exdesc_opt as AND_exdesc_opt1) = AND_exdesc_opt1 ()
 in (
 EQUALExDesc(I(OP_opt1left,AND_exdesc_optright),
				      OP_opt1, vid,
				      OP_opt2, longvid, AND_exdesc_opt) 
)
end)
 in ( LrTable.NT 156, ( result, OP_opt1left, AND_exdesc_opt1right), 
rest671)
end
|  ( 479, ( ( _, ( MlyValue.exdesc exdesc1, _, exdesc1right)) :: ( _, 
( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_exdesc_opt (fn _ => let val  (exdesc as exdesc1) = 
exdesc1 ()
 in ( SOME exdesc )
end)
 in ( LrTable.NT 157, ( result, AND1left, exdesc1right), rest671)
end
|  ( 480, ( rest671)) => let val  result = MlyValue.AND_exdesc_opt (fn
 _ => ( NONE ))
 in ( LrTable.NT 157, ( result, defaultPos, defaultPos), rest671)
end
|  ( 481, ( ( _, ( MlyValue.sigexp__AND_strdesc_opt 
sigexp__AND_strdesc_opt1, _, (sigexp__AND_strdesc_optright as 
sigexp__AND_strdesc_opt1right))) :: _ :: ( _, ( MlyValue.strid strid1,
 (stridleft as strid1left), _)) :: rest671)) => let val  result = 
MlyValue.strdesc (fn _ => let val  (strid as strid1) = strid1 ()
 val  (sigexp__AND_strdesc_opt as sigexp__AND_strdesc_opt1) = 
sigexp__AND_strdesc_opt1 ()
 in (
 NEWStrDesc(I(stridleft,sigexp__AND_strdesc_optright),
				     strid, #1 sigexp__AND_strdesc_opt,
				     #2 sigexp__AND_strdesc_opt) 
)
end)
 in ( LrTable.NT 158, ( result, strid1left, 
sigexp__AND_strdesc_opt1right), rest671)
end
|  ( 482, ( ( _, ( MlyValue.AND_strdesc_opt AND_strdesc_opt1, _, (
AND_strdesc_optright as AND_strdesc_opt1right))) :: ( _, ( 
MlyValue.longstrid longstrid1, _, _)) :: _ :: ( _, ( 
MlyValue.COLON_sigexp_opt COLON_sigexp_opt1, _, _)) :: ( _, ( 
MlyValue.strid strid1, (stridleft as strid1left), _)) :: rest671)) =>
 let val  result = MlyValue.strdesc (fn _ => let val  (strid as strid1
) = strid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  (longstrid as longstrid1) = longstrid1 ()
 val  (AND_strdesc_opt as AND_strdesc_opt1) = AND_strdesc_opt1 ()
 in (
 EQUALStrDesc(I(stridleft,AND_strdesc_optright),
				       strid, COLON_sigexp_opt, longstrid,
				       AND_strdesc_opt) 
)
end)
 in ( LrTable.NT 158, ( result, strid1left, AND_strdesc_opt1right), 
rest671)
end
|  ( 483, ( ( _, ( MlyValue.strdesc strdesc1, _, strdesc1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_strdesc_opt (fn _ => let val  (strdesc as strdesc1) = 
strdesc1 ()
 in ( SOME strdesc )
end)
 in ( LrTable.NT 159, ( result, AND1left, strdesc1right), rest671)
end
|  ( 484, ( rest671)) => let val  result = MlyValue.AND_strdesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 159, ( result, defaultPos, defaultPos), rest671)
end
|  ( 485, ( ( _, ( MlyValue.AND_strdesc_opt AND_strdesc_opt1, _, 
AND_strdesc_opt1right)) :: ( _, ( MlyValue.sigexp' sigexp'1, 
sigexp'1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_strdesc_opt (fn _ => let val  (sigexp' as 
sigexp'1) = sigexp'1 ()
 val  (AND_strdesc_opt as AND_strdesc_opt1) = AND_strdesc_opt1 ()
 in ( ( sigexp', AND_strdesc_opt ) )
end)
 in ( LrTable.NT 160, ( result, sigexp'1left, AND_strdesc_opt1right), 
rest671)
end
|  ( 486, ( ( _, ( MlyValue.sigexp__AND_strdesc_opt 
sigexp__AND_strdesc_opt1, _, (sigexp__AND_strdesc_optright as 
sigexp__AND_strdesc_opt1right))) :: _ :: ( _, ( MlyValue.strpat' 
strpat'1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp__AND_strdesc_opt (fn _ => let
 val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp__AND_strdesc_opt as sigexp__AND_strdesc_opt1) = 
sigexp__AND_strdesc_opt1 ()
 in (
 ( FCTSigExp(I(FCTleft,sigexp__AND_strdesc_optright),
				      strpat', #1 sigexp__AND_strdesc_opt)
			  , #2 sigexp__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 160, ( result, FCT1left, 
sigexp__AND_strdesc_opt1right), rest671)
end
|  ( 487, ( ( _, ( MlyValue.sigexp__AND_strdesc_opt 
sigexp__AND_strdesc_opt1, _, (sigexp__AND_strdesc_optright as 
sigexp__AND_strdesc_opt1right))) :: _ :: ( _, ( MlyValue.atsigexp 
atsigexp1, (atsigexpleft as atsigexp1left), _)) :: rest671)) => let
 val  result = MlyValue.sigexp__AND_strdesc_opt (fn _ => let val  (
atsigexp as atsigexp1) = atsigexp1 ()
 val  (sigexp__AND_strdesc_opt as sigexp__AND_strdesc_opt1) = 
sigexp__AND_strdesc_opt1 ()
 in (
 ( ARROWSigExp(I(atsigexpleft,
					  sigexp__AND_strdesc_optright),
					atsigexp, #1 sigexp__AND_strdesc_opt)
			  , #2 sigexp__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 160, ( result, atsigexp1left, 
sigexp__AND_strdesc_opt1right), rest671)
end
|  ( 488, ( ( _, ( MlyValue.rea__AND_strdesc_opt rea__AND_strdesc_opt1
, _, (rea__AND_strdesc_optright as rea__AND_strdesc_opt1right))) :: _
 :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp__AND_strdesc_opt
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 val  (rea__AND_strdesc_opt as rea__AND_strdesc_opt1) = 
rea__AND_strdesc_opt1 ()
 in (
 ( WHEREREASigExp(I(sigexpleft,
					     rea__AND_strdesc_optright),
					   sigexp, #1 rea__AND_strdesc_opt)
			  , #2 rea__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 160, ( result, sigexp1left, 
rea__AND_strdesc_opt1right), rest671)
end
|  ( 489, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: _ :: ( _, ( MlyValue.spec
 spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_strdesc_opt (fn _ => let val  (
spec as spec1) = spec1 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( SIGRea(I(SIGleft,AND_rea_opt__AND_strdesc_optright),
				   spec, #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, SIG1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 490, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_strdesc_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( VALRea(I(VALleft,AND_rea_opt__AND_strdesc_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, VAL1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 491, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_strdesc_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( FUNRea(I(FUNleft,AND_rea_opt__AND_strdesc_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, FUN1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 492, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea__AND_strdesc_opt (fn
 _ => let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( CONSTRUCTORRea(I(CONSTRUCTORleft,
					     AND_rea_opt__AND_strdesc_optright),
					   OP_opt1, longvid1, OP_opt2, longvid2,
				           #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, CONSTRUCTOR1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 493, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea__AND_strdesc_opt (fn _ =>
 let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( EXCEPTIONRea(I(EXCEPTIONleft,
					   AND_rea_opt__AND_strdesc_optright),
					 OP_opt1, longvid1, OP_opt2, longvid2,
					 #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, EXCEPTION1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 494, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.ty ty1, _
, _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_strdesc_opt (fn _ => let val  (tyvarseq as tyvarseq1
) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( TYPERea(I(TYPEleft,
				      AND_rea_opt__AND_strdesc_optright),
				    tyvarseq, longtycon, ty,
				    #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, TYPE1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 495, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea__AND_strdesc_opt (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( EQTYPERea(I(EQTYPEleft,
					AND_rea_opt__AND_strdesc_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, EQTYPE1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 496, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea__AND_strdesc_opt (fn _ => let val  (tyvarseq
 as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( EQEQTYPERea(I(EQEQTYPEleft,
					  AND_rea_opt__AND_strdesc_optright),
					tyvarseq, longtycon,
					#1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, EQEQTYPE1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 497, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_strdesc_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( STRUCTURERea(I(STRUCTUREleft,
					   AND_rea_opt__AND_strdesc_optright),
				         longstrid1, COLON_sigexp_opt,
					 longstrid2,
				         #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, STRUCTURE1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 498, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, (AND_rea_opt__AND_strdesc_optright
 as AND_rea_opt__AND_strdesc_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_strdesc_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( FUNCTORRea(I(FUNCTORleft,
					 AND_rea_opt__AND_strdesc_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       #1 AND_rea_opt__AND_strdesc_opt)
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, FUNCTOR1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 499, ( ( _, ( MlyValue.sigexp__AND_rea_opt__AND_strdesc_opt 
sigexp__AND_rea_opt__AND_strdesc_opt1, _, (
sigexp__AND_rea_opt__AND_strdesc_optright as 
sigexp__AND_rea_opt__AND_strdesc_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_strdesc_opt (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt__AND_strdesc_opt as 
sigexp__AND_rea_opt__AND_strdesc_opt1) = 
sigexp__AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( SIGNATURERea
				(I(SIGNATUREleft,
				   sigexp__AND_rea_opt__AND_strdesc_optright),
				 longsigid, atstrpat_list0,
				 #1 sigexp__AND_rea_opt__AND_strdesc_opt,
				 #2 sigexp__AND_rea_opt__AND_strdesc_opt)
			  , #3 sigexp__AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 161, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 500, ( ( _, ( MlyValue.AND_strdesc_opt AND_strdesc_opt1, 
AND_strdesc_opt1left, AND_strdesc_opt1right)) :: rest671)) => let val 
 result = MlyValue.AND_rea_opt__AND_strdesc_opt (fn _ => let val  (
AND_strdesc_opt as AND_strdesc_opt1) = AND_strdesc_opt1 ()
 in ( ( NONE, AND_strdesc_opt ) )
end)
 in ( LrTable.NT 162, ( result, AND_strdesc_opt1left, 
AND_strdesc_opt1right), rest671)
end
|  ( 501, ( ( _, ( MlyValue.rea__AND_strdesc_opt rea__AND_strdesc_opt1
, _, rea__AND_strdesc_opt1right)) :: ( _, ( _, AND1left, _)) :: 
rest671)) => let val  result = MlyValue.AND_rea_opt__AND_strdesc_opt
 (fn _ => let val  (rea__AND_strdesc_opt as rea__AND_strdesc_opt1) = 
rea__AND_strdesc_opt1 ()
 in (
 ( SOME(#1 rea__AND_strdesc_opt)
				  , #2 rea__AND_strdesc_opt ) )

end)
 in ( LrTable.NT 162, ( result, AND1left, rea__AND_strdesc_opt1right),
 rest671)
end
|  ( 502, ( ( _, ( MlyValue.AND_rea_opt__AND_strdesc_opt 
AND_rea_opt__AND_strdesc_opt1, _, AND_rea_opt__AND_strdesc_opt1right))
 :: ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, _)) :: 
rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt__AND_strdesc_opt (fn _ => let val  (
appsigexp as appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt__AND_strdesc_opt as AND_rea_opt__AND_strdesc_opt1)
 = AND_rea_opt__AND_strdesc_opt1 ()
 in (
 ( appsigexp
		          , #1 AND_rea_opt__AND_strdesc_opt
			  , #2 AND_rea_opt__AND_strdesc_opt ) 
)
end)
 in ( LrTable.NT 163, ( result, appsigexp1left, 
AND_rea_opt__AND_strdesc_opt1right), rest671)
end
|  ( 503, ( ( _, ( MlyValue.AND_sigdesc_opt AND_sigdesc_opt1, _, (
AND_sigdesc_optright as AND_sigdesc_opt1right))) :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.sigid sigid1, (sigidleft as sigid1left), _)) :: rest671)) =>
 let val  result = MlyValue.sigdesc (fn _ => let val  (sigid as sigid1
) = sigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (AND_sigdesc_opt as AND_sigdesc_opt1) = AND_sigdesc_opt1 ()
 in (
 NEWSigDesc(I(sigidleft,AND_sigdesc_optright),
				     sigid, atstrpat_list0, AND_sigdesc_opt) 
)
end)
 in ( LrTable.NT 164, ( result, sigid1left, AND_sigdesc_opt1right), 
rest671)
end
|  ( 504, ( ( _, ( MlyValue.sigexp__AND_sigdesc_opt 
sigexp__AND_sigdesc_opt1, _, (sigexp__AND_sigdesc_optright as 
sigexp__AND_sigdesc_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.sigid sigid1, (sigidleft as sigid1left), _)) :: rest671)) =>
 let val  result = MlyValue.sigdesc (fn _ => let val  (sigid as sigid1
) = sigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_sigdesc_opt as sigexp__AND_sigdesc_opt1) = 
sigexp__AND_sigdesc_opt1 ()
 in (
 EQUALSigDesc(I(sigidleft,
					 sigexp__AND_sigdesc_optright),
				       sigid, atstrpat_list0,
				       #1 sigexp__AND_sigdesc_opt,
				       #2 sigexp__AND_sigdesc_opt) 
)
end)
 in ( LrTable.NT 164, ( result, sigid1left, 
sigexp__AND_sigdesc_opt1right), rest671)
end
|  ( 505, ( ( _, ( MlyValue.sigdesc sigdesc1, _, sigdesc1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_sigdesc_opt (fn _ => let val  (sigdesc as sigdesc1) = 
sigdesc1 ()
 in ( SOME sigdesc )
end)
 in ( LrTable.NT 165, ( result, AND1left, sigdesc1right), rest671)
end
|  ( 506, ( rest671)) => let val  result = MlyValue.AND_sigdesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 165, ( result, defaultPos, defaultPos), rest671)
end
|  ( 507, ( ( _, ( MlyValue.AND_sigdesc_opt AND_sigdesc_opt1, _, 
AND_sigdesc_opt1right)) :: ( _, ( MlyValue.sigexp' sigexp'1, 
sigexp'1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_sigdesc_opt (fn _ => let val  (sigexp' as 
sigexp'1) = sigexp'1 ()
 val  (AND_sigdesc_opt as AND_sigdesc_opt1) = AND_sigdesc_opt1 ()
 in ( ( sigexp', AND_sigdesc_opt ) )
end)
 in ( LrTable.NT 166, ( result, sigexp'1left, AND_sigdesc_opt1right), 
rest671)
end
|  ( 508, ( ( _, ( MlyValue.sigexp__AND_sigdesc_opt 
sigexp__AND_sigdesc_opt1, _, (sigexp__AND_sigdesc_optright as 
sigexp__AND_sigdesc_opt1right))) :: _ :: ( _, ( MlyValue.strpat' 
strpat'1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp__AND_sigdesc_opt (fn _ => let
 val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp__AND_sigdesc_opt as sigexp__AND_sigdesc_opt1) = 
sigexp__AND_sigdesc_opt1 ()
 in (
 ( FCTSigExp(I(FCTleft,sigexp__AND_sigdesc_optright),
				      strpat', #1 sigexp__AND_sigdesc_opt)
			  , #2 sigexp__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 166, ( result, FCT1left, 
sigexp__AND_sigdesc_opt1right), rest671)
end
|  ( 509, ( ( _, ( MlyValue.sigexp__AND_sigdesc_opt 
sigexp__AND_sigdesc_opt1, _, (sigexp__AND_sigdesc_optright as 
sigexp__AND_sigdesc_opt1right))) :: _ :: ( _, ( MlyValue.atsigexp 
atsigexp1, (atsigexpleft as atsigexp1left), _)) :: rest671)) => let
 val  result = MlyValue.sigexp__AND_sigdesc_opt (fn _ => let val  (
atsigexp as atsigexp1) = atsigexp1 ()
 val  (sigexp__AND_sigdesc_opt as sigexp__AND_sigdesc_opt1) = 
sigexp__AND_sigdesc_opt1 ()
 in (
 ( ARROWSigExp(I(atsigexpleft,
					  sigexp__AND_sigdesc_optright),
					atsigexp, #1 sigexp__AND_sigdesc_opt)
			  , #2 sigexp__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 166, ( result, atsigexp1left, 
sigexp__AND_sigdesc_opt1right), rest671)
end
|  ( 510, ( ( _, ( MlyValue.rea__AND_sigdesc_opt rea__AND_sigdesc_opt1
, _, (rea__AND_sigdesc_optright as rea__AND_sigdesc_opt1right))) :: _
 :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp__AND_sigdesc_opt
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 val  (rea__AND_sigdesc_opt as rea__AND_sigdesc_opt1) = 
rea__AND_sigdesc_opt1 ()
 in (
 ( WHEREREASigExp(I(sigexpleft,
					     rea__AND_sigdesc_optright),
					   sigexp, #1 rea__AND_sigdesc_opt)
			  , #2 rea__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 166, ( result, sigexp1left, 
rea__AND_sigdesc_opt1right), rest671)
end
|  ( 511, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: _ :: ( _, ( MlyValue.spec
 spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_sigdesc_opt (fn _ => let val  (
spec as spec1) = spec1 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( SIGRea(I(SIGleft,AND_rea_opt__AND_sigdesc_optright),
				   spec, #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, SIG1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 512, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_sigdesc_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( VALRea(I(VALleft,AND_rea_opt__AND_sigdesc_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, VAL1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 513, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_sigdesc_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( FUNRea(I(FUNleft,AND_rea_opt__AND_sigdesc_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, FUN1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 514, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea__AND_sigdesc_opt (fn
 _ => let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( CONSTRUCTORRea(I(CONSTRUCTORleft,
					     AND_rea_opt__AND_sigdesc_optright),
					   OP_opt1, longvid1, OP_opt2, longvid2,
				           #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, CONSTRUCTOR1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 515, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea__AND_sigdesc_opt (fn _ =>
 let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( EXCEPTIONRea(I(EXCEPTIONleft,
					   AND_rea_opt__AND_sigdesc_optright),
					 OP_opt1, longvid1, OP_opt2, longvid2,
					 #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, EXCEPTION1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 516, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.ty ty1, _
, _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_sigdesc_opt (fn _ => let val  (tyvarseq as tyvarseq1
) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( TYPERea(I(TYPEleft,
				      AND_rea_opt__AND_sigdesc_optright),
				    tyvarseq, longtycon, ty,
				    #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, TYPE1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 517, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea__AND_sigdesc_opt (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( EQTYPERea(I(EQTYPEleft,
					AND_rea_opt__AND_sigdesc_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, EQTYPE1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 518, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea__AND_sigdesc_opt (fn _ => let val  (tyvarseq
 as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( EQEQTYPERea(I(EQEQTYPEleft,
					  AND_rea_opt__AND_sigdesc_optright),
					tyvarseq, longtycon,
					#1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, EQEQTYPE1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 519, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_sigdesc_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( STRUCTURERea(I(STRUCTUREleft,
					   AND_rea_opt__AND_sigdesc_optright),
				         longstrid1, COLON_sigexp_opt,
					 longstrid2,
				         #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, STRUCTURE1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 520, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, (AND_rea_opt__AND_sigdesc_optright
 as AND_rea_opt__AND_sigdesc_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_sigdesc_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( FUNCTORRea(I(FUNCTORleft,
					 AND_rea_opt__AND_sigdesc_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       #1 AND_rea_opt__AND_sigdesc_opt)
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, FUNCTOR1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 521, ( ( _, ( MlyValue.sigexp__AND_rea_opt__AND_sigdesc_opt 
sigexp__AND_rea_opt__AND_sigdesc_opt1, _, (
sigexp__AND_rea_opt__AND_sigdesc_optright as 
sigexp__AND_rea_opt__AND_sigdesc_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_sigdesc_opt (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt__AND_sigdesc_opt as 
sigexp__AND_rea_opt__AND_sigdesc_opt1) = 
sigexp__AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( SIGNATURERea
				(I(SIGNATUREleft,
				   sigexp__AND_rea_opt__AND_sigdesc_optright),
				 longsigid, atstrpat_list0,
				 #1 sigexp__AND_rea_opt__AND_sigdesc_opt,
				 #2 sigexp__AND_rea_opt__AND_sigdesc_opt)
			  , #3 sigexp__AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 167, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 522, ( ( _, ( MlyValue.AND_sigdesc_opt AND_sigdesc_opt1, 
AND_sigdesc_opt1left, AND_sigdesc_opt1right)) :: rest671)) => let val 
 result = MlyValue.AND_rea_opt__AND_sigdesc_opt (fn _ => let val  (
AND_sigdesc_opt as AND_sigdesc_opt1) = AND_sigdesc_opt1 ()
 in ( ( NONE, AND_sigdesc_opt) )
end)
 in ( LrTable.NT 168, ( result, AND_sigdesc_opt1left, 
AND_sigdesc_opt1right), rest671)
end
|  ( 523, ( ( _, ( MlyValue.rea__AND_sigdesc_opt rea__AND_sigdesc_opt1
, _, rea__AND_sigdesc_opt1right)) :: ( _, ( _, AND1left, _)) :: 
rest671)) => let val  result = MlyValue.AND_rea_opt__AND_sigdesc_opt
 (fn _ => let val  (rea__AND_sigdesc_opt as rea__AND_sigdesc_opt1) = 
rea__AND_sigdesc_opt1 ()
 in (
 ( SOME(#1 rea__AND_sigdesc_opt)
				  , #2 rea__AND_sigdesc_opt ) )

end)
 in ( LrTable.NT 168, ( result, AND1left, rea__AND_sigdesc_opt1right),
 rest671)
end
|  ( 524, ( ( _, ( MlyValue.AND_rea_opt__AND_sigdesc_opt 
AND_rea_opt__AND_sigdesc_opt1, _, AND_rea_opt__AND_sigdesc_opt1right))
 :: ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, _)) :: 
rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt__AND_sigdesc_opt (fn _ => let val  (
appsigexp as appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt__AND_sigdesc_opt as AND_rea_opt__AND_sigdesc_opt1)
 = AND_rea_opt__AND_sigdesc_opt1 ()
 in (
 ( appsigexp
		          , #1 AND_rea_opt__AND_sigdesc_opt
			  , #2 AND_rea_opt__AND_sigdesc_opt ) 
)
end)
 in ( LrTable.NT 169, ( result, appsigexp1left, 
AND_rea_opt__AND_sigdesc_opt1right), rest671)
end
|  ( 525, ( ( _, ( MlyValue.sigexp__AND_fundesc_opt 
sigexp__AND_fundesc_opt1, _, (sigexp__AND_fundesc_optright as 
sigexp__AND_fundesc_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.strid strid1, (stridleft as strid1left), _)) :: rest671)) =>
 let val  result = MlyValue.fundesc (fn _ => let val  (strid as strid1
) = strid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_fundesc_opt as sigexp__AND_fundesc_opt1) = 
sigexp__AND_fundesc_opt1 ()
 in (
 FunDesc(I(stridleft,sigexp__AND_fundesc_optright),
				  strid, atstrpat_list0,
				  #1 sigexp__AND_fundesc_opt,
				  #2 sigexp__AND_fundesc_opt) 
)
end)
 in ( LrTable.NT 170, ( result, strid1left, 
sigexp__AND_fundesc_opt1right), rest671)
end
|  ( 526, ( ( _, ( MlyValue.fundesc fundesc1, _, fundesc1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_fundesc_opt (fn _ => let val  (fundesc as fundesc1) = 
fundesc1 ()
 in ( SOME fundesc )
end)
 in ( LrTable.NT 171, ( result, AND1left, fundesc1right), rest671)
end
|  ( 527, ( rest671)) => let val  result = MlyValue.AND_fundesc_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 171, ( result, defaultPos, defaultPos), rest671)
end
|  ( 528, ( ( _, ( MlyValue.AND_fundesc_opt AND_fundesc_opt1, _, 
AND_fundesc_opt1right)) :: ( _, ( MlyValue.sigexp' sigexp'1, 
sigexp'1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_fundesc_opt (fn _ => let val  (sigexp' as 
sigexp'1) = sigexp'1 ()
 val  (AND_fundesc_opt as AND_fundesc_opt1) = AND_fundesc_opt1 ()
 in ( ( sigexp', AND_fundesc_opt ) )
end)
 in ( LrTable.NT 172, ( result, sigexp'1left, AND_fundesc_opt1right), 
rest671)
end
|  ( 529, ( ( _, ( MlyValue.sigexp__AND_fundesc_opt 
sigexp__AND_fundesc_opt1, _, (sigexp__AND_fundesc_optright as 
sigexp__AND_fundesc_opt1right))) :: _ :: ( _, ( MlyValue.strpat' 
strpat'1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp__AND_fundesc_opt (fn _ => let
 val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp__AND_fundesc_opt as sigexp__AND_fundesc_opt1) = 
sigexp__AND_fundesc_opt1 ()
 in (
 ( FCTSigExp(I(FCTleft,sigexp__AND_fundesc_optright),
				      strpat', #1 sigexp__AND_fundesc_opt)
			  , #2 sigexp__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 172, ( result, FCT1left, 
sigexp__AND_fundesc_opt1right), rest671)
end
|  ( 530, ( ( _, ( MlyValue.sigexp__AND_fundesc_opt 
sigexp__AND_fundesc_opt1, _, (sigexp__AND_fundesc_optright as 
sigexp__AND_fundesc_opt1right))) :: _ :: ( _, ( MlyValue.atsigexp 
atsigexp1, (atsigexpleft as atsigexp1left), _)) :: rest671)) => let
 val  result = MlyValue.sigexp__AND_fundesc_opt (fn _ => let val  (
atsigexp as atsigexp1) = atsigexp1 ()
 val  (sigexp__AND_fundesc_opt as sigexp__AND_fundesc_opt1) = 
sigexp__AND_fundesc_opt1 ()
 in (
 ( ARROWSigExp(I(atsigexpleft,
					  sigexp__AND_fundesc_optright),
					atsigexp, #1 sigexp__AND_fundesc_opt)
			  , #2 sigexp__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 172, ( result, atsigexp1left, 
sigexp__AND_fundesc_opt1right), rest671)
end
|  ( 531, ( ( _, ( MlyValue.rea__AND_fundesc_opt rea__AND_fundesc_opt1
, _, (rea__AND_fundesc_optright as rea__AND_fundesc_opt1right))) :: _
 :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp__AND_fundesc_opt
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 val  (rea__AND_fundesc_opt as rea__AND_fundesc_opt1) = 
rea__AND_fundesc_opt1 ()
 in (
 ( WHEREREASigExp(I(sigexpleft,
					     rea__AND_fundesc_optright),
					   sigexp, #1 rea__AND_fundesc_opt)
			  , #2 rea__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 172, ( result, sigexp1left, 
rea__AND_fundesc_opt1right), rest671)
end
|  ( 532, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: _ :: ( _, ( MlyValue.spec
 spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_fundesc_opt (fn _ => let val  (
spec as spec1) = spec1 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( SIGRea(I(SIGleft,AND_rea_opt__AND_fundesc_optright),
				   spec, #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, SIG1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 533, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_fundesc_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( VALRea(I(VALleft,AND_rea_opt__AND_fundesc_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, VAL1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 534, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_fundesc_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( FUNRea(I(FUNleft,AND_rea_opt__AND_fundesc_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, FUN1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 535, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea__AND_fundesc_opt (fn
 _ => let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( CONSTRUCTORRea(I(CONSTRUCTORleft,
					     AND_rea_opt__AND_fundesc_optright),
					   OP_opt1, longvid1, OP_opt2, longvid2,
				           #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, CONSTRUCTOR1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 536, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea__AND_fundesc_opt (fn _ =>
 let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( EXCEPTIONRea(I(EXCEPTIONleft,
					   AND_rea_opt__AND_fundesc_optright),
					 OP_opt1, longvid1, OP_opt2, longvid2,
					 #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, EXCEPTION1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 537, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.ty ty1, _
, _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_fundesc_opt (fn _ => let val  (tyvarseq as tyvarseq1
) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( TYPERea(I(TYPEleft,
				      AND_rea_opt__AND_fundesc_optright),
				    tyvarseq, longtycon, ty,
				    #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, TYPE1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 538, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea__AND_fundesc_opt (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( EQTYPERea(I(EQTYPEleft,
					AND_rea_opt__AND_fundesc_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, EQTYPE1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 539, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea__AND_fundesc_opt (fn _ => let val  (tyvarseq
 as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( EQEQTYPERea(I(EQEQTYPEleft,
					  AND_rea_opt__AND_fundesc_optright),
					tyvarseq, longtycon,
					#1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, EQEQTYPE1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 540, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_fundesc_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( STRUCTURERea(I(STRUCTUREleft,
					   AND_rea_opt__AND_fundesc_optright),
				         longstrid1, COLON_sigexp_opt,
					 longstrid2,
				         #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, STRUCTURE1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 541, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, (AND_rea_opt__AND_fundesc_optright
 as AND_rea_opt__AND_fundesc_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_fundesc_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( FUNCTORRea(I(FUNCTORleft,
					 AND_rea_opt__AND_fundesc_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       #1 AND_rea_opt__AND_fundesc_opt)
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, FUNCTOR1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 542, ( ( _, ( MlyValue.sigexp__AND_rea_opt__AND_fundesc_opt 
sigexp__AND_rea_opt__AND_fundesc_opt1, _, (
sigexp__AND_rea_opt__AND_fundesc_optright as 
sigexp__AND_rea_opt__AND_fundesc_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_fundesc_opt (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt__AND_fundesc_opt as 
sigexp__AND_rea_opt__AND_fundesc_opt1) = 
sigexp__AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( SIGNATURERea
				(I(SIGNATUREleft,
				   sigexp__AND_rea_opt__AND_fundesc_optright),
				 longsigid, atstrpat_list0,
				 #1 sigexp__AND_rea_opt__AND_fundesc_opt,
				 #2 sigexp__AND_rea_opt__AND_fundesc_opt)
			  , #3 sigexp__AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 173, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 543, ( ( _, ( MlyValue.AND_fundesc_opt AND_fundesc_opt1, 
AND_fundesc_opt1left, AND_fundesc_opt1right)) :: rest671)) => let val 
 result = MlyValue.AND_rea_opt__AND_fundesc_opt (fn _ => let val  (
AND_fundesc_opt as AND_fundesc_opt1) = AND_fundesc_opt1 ()
 in ( ( NONE, AND_fundesc_opt ) )
end)
 in ( LrTable.NT 174, ( result, AND_fundesc_opt1left, 
AND_fundesc_opt1right), rest671)
end
|  ( 544, ( ( _, ( MlyValue.rea__AND_fundesc_opt rea__AND_fundesc_opt1
, _, rea__AND_fundesc_opt1right)) :: ( _, ( _, AND1left, _)) :: 
rest671)) => let val  result = MlyValue.AND_rea_opt__AND_fundesc_opt
 (fn _ => let val  (rea__AND_fundesc_opt as rea__AND_fundesc_opt1) = 
rea__AND_fundesc_opt1 ()
 in (
 ( SOME(#1 rea__AND_fundesc_opt),
			    #2 rea__AND_fundesc_opt ) )

end)
 in ( LrTable.NT 174, ( result, AND1left, rea__AND_fundesc_opt1right),
 rest671)
end
|  ( 545, ( ( _, ( MlyValue.AND_rea_opt__AND_fundesc_opt 
AND_rea_opt__AND_fundesc_opt1, _, AND_rea_opt__AND_fundesc_opt1right))
 :: ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, _)) :: 
rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt__AND_fundesc_opt (fn _ => let val  (
appsigexp as appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt__AND_fundesc_opt as AND_rea_opt__AND_fundesc_opt1)
 = AND_rea_opt__AND_fundesc_opt1 ()
 in (
 ( appsigexp
		          , #1 AND_rea_opt__AND_fundesc_opt
			  , #2 AND_rea_opt__AND_fundesc_opt ) 
)
end)
 in ( LrTable.NT 175, ( result, appsigexp1left, 
AND_rea_opt__AND_fundesc_opt1right), rest671)
end
|  ( 546, ( ( _, ( MlyValue.imp1 imp11, imp11left, imp11right)) :: 
rest671)) => let val  result = MlyValue.imp (fn _ => let val  (imp1
 as imp11) = imp11 ()
 in ( imp1 )
end)
 in ( LrTable.NT 176, ( result, imp11left, imp11right), rest671)
end
|  ( 547, ( rest671)) => let val  result = MlyValue.imp (fn _ => (
 EMPTYImp(I(defaultPos,defaultPos)) ))
 in ( LrTable.NT 176, ( result, defaultPos, defaultPos), rest671)
end
|  ( 548, ( ( _, ( MlyValue.imp1' imp1'1, imp1'1left, imp1'1right)) ::
 rest671)) => let val  result = MlyValue.imp1 (fn _ => let val  (imp1'
 as imp1'1) = imp1'1 ()
 in ( imp1' )
end)
 in ( LrTable.NT 177, ( result, imp1'1left, imp1'1right), rest671)
end
|  ( 549, ( ( _, ( MlyValue.imp1' imp1'1, _, (imp1'right as 
imp1'1right))) :: ( _, ( MlyValue.imp1 imp11, (imp1left as imp11left),
 _)) :: rest671)) => let val  result = MlyValue.imp1 (fn _ => let val 
 (imp1 as imp11) = imp11 ()
 val  (imp1' as imp1'1) = imp1'1 ()
 in ( SEQImp(I(imp1left,imp1'right), imp1, imp1') )
end)
 in ( LrTable.NT 177, ( result, imp11left, imp1'1right), rest671)
end
|  ( 550, ( ( _, ( _, (SEMICOLONleft as SEMICOLON1left), 
SEMICOLON1right)) :: rest671)) => let val  result = MlyValue.imp1 (fn
 _ => ( EMPTYImp(I(SEMICOLONleft,SEMICOLONleft)) ))
 in ( LrTable.NT 177, ( result, SEMICOLON1left, SEMICOLON1right), 
rest671)
end
|  ( 551, ( ( _, ( MlyValue.valitem valitem1, _, (valitemright as 
valitem1right))) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.imp1' (fn _ => let val  (valitem as 
valitem1) = valitem1 ()
 in ( VALImp(I(VALleft,valitemright), valitem) )
end)
 in ( LrTable.NT 178, ( result, VAL1left, valitem1right), rest671)
end
|  ( 552, ( ( _, ( MlyValue.valitem valitem1, _, (valitemright as 
valitem1right))) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.imp1' (fn _ => let val  (valitem as 
valitem1) = valitem1 ()
 in ( FUNImp(I(FUNleft,valitemright), valitem) )
end)
 in ( LrTable.NT 178, ( result, FUN1left, valitem1right), rest671)
end
|  ( 553, ( ( _, ( MlyValue.typitem typitem1, _, (typitemright as 
typitem1right))) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: rest671)
) => let val  result = MlyValue.imp1' (fn _ => let val  (typitem as 
typitem1) = typitem1 ()
 in ( TYPEImp(I(TYPEleft,typitemright), typitem) )
end)
 in ( LrTable.NT 178, ( result, TYPE1left, typitem1right), rest671)

end
|  ( 554, ( ( _, ( MlyValue.typitem typitem1, _, (typitemright as 
typitem1right))) :: ( _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
typitem as typitem1) = typitem1 ()
 in ( EQTYPEImp(I(EQTYPEleft,typitemright), typitem) )
end)
 in ( LrTable.NT 178, ( result, EQTYPE1left, typitem1right), rest671)

end
|  ( 555, ( ( _, ( MlyValue.typitem typitem1, _, (typitemright as 
typitem1right))) :: ( _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
typitem as typitem1) = typitem1 ()
 in ( EQEQTYPEImp(I(EQEQTYPEleft,typitemright), typitem) )
end)
 in ( LrTable.NT 178, ( result, EQEQTYPE1left, typitem1right), rest671
)
end
|  ( 556, ( ( _, ( MlyValue.datitem datitem1, _, (datitemright as 
datitem1right))) :: ( _, ( _, (DATATYPEleft as DATATYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
datitem as datitem1) = datitem1 ()
 in ( DATATYPEImp(I(DATATYPEleft,datitemright), datitem) )
end)
 in ( LrTable.NT 178, ( result, DATATYPE1left, datitem1right), rest671
)
end
|  ( 557, ( ( _, ( MlyValue.extitem extitem1, _, (extitemright as 
extitem1right))) :: ( _, ( _, (EXTTYPEleft as EXTTYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
extitem as extitem1) = extitem1 ()
 in ( EXTTYPEImp(I(EXTTYPEleft,extitemright), extitem) )
end)
 in ( LrTable.NT 178, ( result, EXTTYPE1left, extitem1right), rest671)

end
|  ( 558, ( ( _, ( MlyValue.econitem econitem1, _, (econitemright as 
econitem1right))) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left),
 _)) :: rest671)) => let val  result = MlyValue.imp1' (fn _ => let
 val  (econitem as econitem1) = econitem1 ()
 in (
 CONSTRUCTORImp(I(CONSTRUCTORleft,econitemright),
					  econitem) )

end)
 in ( LrTable.NT 178, ( result, CONSTRUCTOR1left, econitem1right), 
rest671)
end
|  ( 559, ( ( _, ( MlyValue.exitem exitem1, _, (exitemright as 
exitem1right))) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
exitem as exitem1) = exitem1 ()
 in ( EXCEPTIONImp(I(EXCEPTIONleft,exitemright), exitem) )
end)
 in ( LrTable.NT 178, ( result, EXCEPTION1left, exitem1right), rest671
)
end
|  ( 560, ( ( _, ( MlyValue.stritem stritem1, _, (stritemright as 
stritem1right))) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _))
 :: rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
stritem as stritem1) = stritem1 ()
 in ( STRUCTUREImp(I(STRUCTUREleft,stritemright), stritem))
end)
 in ( LrTable.NT 178, ( result, STRUCTURE1left, stritem1right), 
rest671)
end
|  ( 561, ( ( _, ( MlyValue.sigitem sigitem1, _, (sigitemright as 
sigitem1right))) :: ( _, ( _, (SIGNATUREleft as SIGNATURE1left), _))
 :: rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
sigitem as sigitem1) = sigitem1 ()
 in ( SIGNATUREImp(I(SIGNATUREleft,sigitemright), sigitem))
end)
 in ( LrTable.NT 178, ( result, SIGNATURE1left, sigitem1right), 
rest671)
end
|  ( 562, ( ( _, ( MlyValue.funitem funitem1, _, (funitemright as 
funitem1right))) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: 
rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
funitem as funitem1) = funitem1 ()
 in ( FUNCTORImp(I(FUNCTORleft,funitemright), funitem))
end)
 in ( LrTable.NT 178, ( result, FUNCTOR1left, funitem1right), rest671)

end
|  ( 563, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( MlyValue.d_opt d_opt1, _, _)) :: ( _,
 ( _, (INFIXleft as INFIX1left), _)) :: rest671)) => let val  result =
 MlyValue.imp1' (fn _ => let val  (d_opt as d_opt1) = d_opt1 ()
 val  (vid_list1 as vid_list11) = vid_list11 ()
 in (
 INFIXMULTIImp(I(INFIXleft,vid_list1right), d_opt,
					vid_list1) )

end)
 in ( LrTable.NT 178, ( result, INFIX1left, vid_list11right), rest671)

end
|  ( 564, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( MlyValue.d_opt d_opt1, _, _)) :: ( _,
 ( _, (INFIXRleft as INFIXR1left), _)) :: rest671)) => let val  result
 = MlyValue.imp1' (fn _ => let val  (d_opt as d_opt1) = d_opt1 ()
 val  (vid_list1 as vid_list11) = vid_list11 ()
 in (
 INFIXRMULTIImp(I(INFIXRleft,vid_list1right), d_opt,
					 vid_list1) 
)
end)
 in ( LrTable.NT 178, ( result, INFIXR1left, vid_list11right), rest671
)
end
|  ( 565, ( ( _, ( MlyValue.vid_list1 vid_list11, _, (vid_list1right
 as vid_list11right))) :: ( _, ( _, (NONFIXleft as NONFIX1left), _))
 :: rest671)) => let val  result = MlyValue.imp1' (fn _ => let val  (
vid_list1 as vid_list11) = vid_list11 ()
 in ( NONFIXMULTIImp(I(NONFIXleft,vid_list1right),
					 vid_list1) )

end)
 in ( LrTable.NT 178, ( result, NONFIX1left, vid_list11right), rest671
)
end
|  ( 566, ( ( _, ( MlyValue.AND_valitem_opt AND_valitem_opt1, _, (
AND_valitem_optright as AND_valitem_opt1right))) :: ( _, ( 
MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1, (
OP_optleft as OP_opt1left), _)) :: rest671)) => let val  result = 
MlyValue.valitem (fn _ => let val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (AND_valitem_opt as AND_valitem_opt1) = AND_valitem_opt1 ()
 in (
 PLAINValItem(I(OP_optleft,AND_valitem_optright),
				       OP_opt, vid, AND_valitem_opt) 
)
end)
 in ( LrTable.NT 179, ( result, OP_opt1left, AND_valitem_opt1right), 
rest671)
end
|  ( 567, ( ( _, ( MlyValue.AND_valitem_opt AND_valitem_opt1, _, (
AND_valitem_optright as AND_valitem_opt1right))) :: ( _, ( MlyValue.ty
 ty1, _, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, (OP_optleft as OP_opt1left), _)) :: rest671))
 => let val  result = MlyValue.valitem (fn _ => let val  (OP_opt as 
OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_valitem_opt as AND_valitem_opt1) = AND_valitem_opt1 ()
 in (
 DESCValItem(I(OP_optleft,AND_valitem_optright),
				      OP_opt, vid, ty, AND_valitem_opt) 
)
end)
 in ( LrTable.NT 179, ( result, OP_opt1left, AND_valitem_opt1right), 
rest671)
end
|  ( 568, ( ( _, ( MlyValue.valitem valitem1, _, valitem1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_valitem_opt (fn _ => let val  (valitem as valitem1) = 
valitem1 ()
 in ( SOME valitem )
end)
 in ( LrTable.NT 180, ( result, AND1left, valitem1right), rest671)
end
|  ( 569, ( rest671)) => let val  result = MlyValue.AND_valitem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 180, ( result, defaultPos, defaultPos), rest671)
end
|  ( 570, ( ( _, ( MlyValue.AND_typitem_opt AND_typitem_opt1, _, (
AND_typitem_optright as AND_typitem_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, (tyconleft as tycon1left), _)) :: rest671)) =>
 let val  result = MlyValue.typitem (fn _ => let val  (tycon as tycon1
) = tycon1 ()
 val  (AND_typitem_opt as AND_typitem_opt1) = AND_typitem_opt1 ()
 in (
 PLAINTypItem(I(tyconleft,AND_typitem_optright),
				       tycon, AND_typitem_opt) 
)
end)
 in ( LrTable.NT 181, ( result, tycon1left, AND_typitem_opt1right), 
rest671)
end
|  ( 571, ( ( _, ( MlyValue.AND_typitem_opt AND_typitem_opt1, _, (
AND_typitem_optright as AND_typitem_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, _, _)) :: ( _, ( MlyValue.tyvarseq1 tyvarseq11,
 (tyvarseq1left as tyvarseq11left), _)) :: rest671)) => let val  
result = MlyValue.typitem (fn _ => let val  (tyvarseq1 as tyvarseq11)
 = tyvarseq11 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (AND_typitem_opt as AND_typitem_opt1) = AND_typitem_opt1 ()
 in (
 DESCTypItem(I(tyvarseq1left,AND_typitem_optright),
				      tyvarseq1, tycon, AND_typitem_opt) 
)
end)
 in ( LrTable.NT 181, ( result, tyvarseq11left, AND_typitem_opt1right)
, rest671)
end
|  ( 572, ( ( _, ( MlyValue.typitem typitem1, _, typitem1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_typitem_opt (fn _ => let val  (typitem as typitem1) = 
typitem1 ()
 in ( SOME typitem )
end)
 in ( LrTable.NT 182, ( result, AND1left, typitem1right), rest671)
end
|  ( 573, ( rest671)) => let val  result = MlyValue.AND_typitem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 182, ( result, defaultPos, defaultPos), rest671)
end
|  ( 574, ( ( _, ( MlyValue.AND_datitem_opt AND_datitem_opt1, _, (
AND_datitem_optright as AND_datitem_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, (tyconleft as tycon1left), _)) :: rest671)) =>
 let val  result = MlyValue.datitem (fn _ => let val  (tycon as tycon1
) = tycon1 ()
 val  (AND_datitem_opt as AND_datitem_opt1) = AND_datitem_opt1 ()
 in (
 PLAINDatItem(I(tyconleft,AND_datitem_optright),
				      tycon, AND_datitem_opt) 
)
end)
 in ( LrTable.NT 183, ( result, tycon1left, AND_datitem_opt1right), 
rest671)
end
|  ( 575, ( ( _, ( MlyValue.AND_datitem_opt AND_datitem_opt1, _, (
AND_datitem_optright as AND_datitem_opt1right))) :: ( _, ( 
MlyValue.conitem conitem1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1,
 _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, (tyconleft as tycon1left
), _)) :: rest671)) => let val  result = MlyValue.datitem (fn _ => let
 val  (tycon as tycon1) = tycon1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (conitem as conitem1) = conitem1 ()
 val  (AND_datitem_opt as AND_datitem_opt1) = AND_datitem_opt1 ()
 in (
 DESCDatItem(I(tyconleft,AND_datitem_optright),
				      Seq(I(defaultPos,defaultPos), []),
				      tycon, conitem, AND_datitem_opt) 
)
end)
 in ( LrTable.NT 183, ( result, tycon1left, AND_datitem_opt1right), 
rest671)
end
|  ( 576, ( ( _, ( MlyValue.AND_datitem_opt AND_datitem_opt1, _, (
AND_datitem_optright as AND_datitem_opt1right))) :: ( _, ( 
MlyValue.conitem conitem1, _, _)) :: ( _, ( MlyValue.BAR_opt BAR_opt1,
 _, _)) :: _ :: ( _, ( MlyValue.tycon tycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq1 tyvarseq11, (tyvarseq1left as tyvarseq11left), _))
 :: rest671)) => let val  result = MlyValue.datitem (fn _ => let val 
 (tyvarseq1 as tyvarseq11) = tyvarseq11 ()
 val  (tycon as tycon1) = tycon1 ()
 val  BAR_opt1 = BAR_opt1 ()
 val  (conitem as conitem1) = conitem1 ()
 val  (AND_datitem_opt as AND_datitem_opt1) = AND_datitem_opt1 ()
 in (
 DESCDatItem(I(tyvarseq1left,AND_datitem_optright),
				      tyvarseq1, tycon, conitem,
				      AND_datitem_opt) 
)
end)
 in ( LrTable.NT 183, ( result, tyvarseq11left, AND_datitem_opt1right)
, rest671)
end
|  ( 577, ( ( _, ( MlyValue.datitem datitem1, _, datitem1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_datitem_opt (fn _ => let val  (datitem as datitem1) = 
datitem1 ()
 in ( SOME datitem )
end)
 in ( LrTable.NT 184, ( result, AND1left, datitem1right), rest671)
end
|  ( 578, ( rest671)) => let val  result = MlyValue.AND_datitem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 184, ( result, defaultPos, defaultPos), rest671)
end
|  ( 579, ( ( _, ( MlyValue.BAR_conitem_opt BAR_conitem_opt1, _, (
BAR_conitem_optright as BAR_conitem_opt1right))) :: ( _, ( 
MlyValue.OF_ty_opt OF_ty_opt1, _, _)) :: ( _, ( MlyValue.vid vid1, _,
 _)) :: ( _, ( MlyValue.OP_opt OP_opt1, (OP_optleft as OP_opt1left), _
)) :: rest671)) => let val  result = MlyValue.conitem (fn _ => let
 val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (BAR_conitem_opt as BAR_conitem_opt1) = BAR_conitem_opt1 ()
 in (
 ConItem(I(OP_optleft,BAR_conitem_optright),
				  OP_opt, vid, OF_ty_opt, BAR_conitem_opt) 
)
end)
 in ( LrTable.NT 185, ( result, OP_opt1left, BAR_conitem_opt1right), 
rest671)
end
|  ( 580, ( ( _, ( MlyValue.conitem conitem1, _, conitem1right)) :: (
 _, ( _, BAR1left, _)) :: rest671)) => let val  result = 
MlyValue.BAR_conitem_opt (fn _ => let val  (conitem as conitem1) = 
conitem1 ()
 in ( SOME conitem )
end)
 in ( LrTable.NT 186, ( result, BAR1left, conitem1right), rest671)
end
|  ( 581, ( rest671)) => let val  result = MlyValue.BAR_conitem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 186, ( result, defaultPos, defaultPos), rest671)
end
|  ( 582, ( ( _, ( MlyValue.AND_extitem_opt AND_extitem_opt1, _, (
AND_extitem_optright as AND_extitem_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, (tyconleft as tycon1left), _)) :: rest671)) =>
 let val  result = MlyValue.extitem (fn _ => let val  (tycon as tycon1
) = tycon1 ()
 val  (AND_extitem_opt as AND_extitem_opt1) = AND_extitem_opt1 ()
 in (
 PLAINExtItem(I(tyconleft,AND_extitem_optright),
				       tycon, AND_extitem_opt) 
)
end)
 in ( LrTable.NT 187, ( result, tycon1left, AND_extitem_opt1right), 
rest671)
end
|  ( 583, ( ( _, ( MlyValue.AND_extitem_opt AND_extitem_opt1, _, (
AND_extitem_optright as AND_extitem_opt1right))) :: ( _, ( 
MlyValue.tycon tycon1, _, _)) :: ( _, ( MlyValue.tyvarseq1 tyvarseq11,
 (tyvarseq1left as tyvarseq11left), _)) :: rest671)) => let val  
result = MlyValue.extitem (fn _ => let val  (tyvarseq1 as tyvarseq11)
 = tyvarseq11 ()
 val  (tycon as tycon1) = tycon1 ()
 val  (AND_extitem_opt as AND_extitem_opt1) = AND_extitem_opt1 ()
 in (
 DESCExtItem(I(tyvarseq1left,AND_extitem_optright),
				      tyvarseq1, tycon, AND_extitem_opt) 
)
end)
 in ( LrTable.NT 187, ( result, tyvarseq11left, AND_extitem_opt1right)
, rest671)
end
|  ( 584, ( ( _, ( MlyValue.extitem extitem1, _, extitem1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_extitem_opt (fn _ => let val  (extitem as extitem1) = 
extitem1 ()
 in ( SOME extitem )
end)
 in ( LrTable.NT 188, ( result, AND1left, extitem1right), rest671)
end
|  ( 585, ( rest671)) => let val  result = MlyValue.AND_extitem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 188, ( result, defaultPos, defaultPos), rest671)
end
|  ( 586, ( ( _, ( MlyValue.AND_econitem_opt AND_econitem_opt1, _, (
AND_econitem_optright as AND_econitem_opt1right))) :: ( _, ( 
MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1, (
OP_optleft as OP_opt1left), _)) :: rest671)) => let val  result = 
MlyValue.econitem (fn _ => let val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (AND_econitem_opt as AND_econitem_opt1) = AND_econitem_opt1 ()
 in (
 PLAINEconItem(I(OP_optleft,AND_econitem_optright),
					OP_opt, vid, AND_econitem_opt) 
)
end)
 in ( LrTable.NT 189, ( result, OP_opt1left, AND_econitem_opt1right), 
rest671)
end
|  ( 587, ( ( _, ( MlyValue.AND_econitem_opt AND_econitem_opt1, _, (
AND_econitem_optright as AND_econitem_opt1right))) :: ( _, ( 
MlyValue.longtycon longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq 
tyvarseq1, _, _)) :: _ :: ( _, ( MlyValue.OF_ty_opt OF_ty_opt1, _, _))
 :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1
, (OP_optleft as OP_opt1left), _)) :: rest671)) => let val  result = 
MlyValue.econitem (fn _ => let val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (OF_ty_opt as OF_ty_opt1) = OF_ty_opt1 ()
 val  (tyvarseq as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_econitem_opt as AND_econitem_opt1) = AND_econitem_opt1 ()
 in (
 DESCEconItem(I(OP_optleft,AND_econitem_optright),
				       OP_opt, vid, OF_ty_opt,
				       tyvarseq, longtycon, AND_econitem_opt) 
)
end)
 in ( LrTable.NT 189, ( result, OP_opt1left, AND_econitem_opt1right), 
rest671)
end
|  ( 588, ( ( _, ( MlyValue.econitem econitem1, _, econitem1right)) ::
 ( _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_econitem_opt (fn _ => let val  (econitem as econitem1) = 
econitem1 ()
 in ( SOME econitem )
end)
 in ( LrTable.NT 190, ( result, AND1left, econitem1right), rest671)

end
|  ( 589, ( rest671)) => let val  result = MlyValue.AND_econitem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 190, ( result, defaultPos, defaultPos), rest671)
end
|  ( 590, ( ( _, ( MlyValue.AND_exitem_opt AND_exitem_opt1, _, (
AND_exitem_optright as AND_exitem_opt1right))) :: ( _, ( MlyValue.vid 
vid1, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt1, (OP_optleft as 
OP_opt1left), _)) :: rest671)) => let val  result = MlyValue.exitem
 (fn _ => let val  (OP_opt as OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (AND_exitem_opt as AND_exitem_opt1) = AND_exitem_opt1 ()
 in (
 PLAINExItem(I(OP_optleft,AND_exitem_optright),
	  			      OP_opt, vid, AND_exitem_opt) 
)
end)
 in ( LrTable.NT 191, ( result, OP_opt1left, AND_exitem_opt1right), 
rest671)
end
|  ( 591, ( ( _, ( MlyValue.AND_exitem_opt AND_exitem_opt1, _, (
AND_exitem_optright as AND_exitem_opt1right))) :: ( _, ( MlyValue.ty 
ty1, _, _)) :: _ :: ( _, ( MlyValue.vid vid1, _, _)) :: ( _, ( 
MlyValue.OP_opt OP_opt1, (OP_optleft as OP_opt1left), _)) :: rest671))
 => let val  result = MlyValue.exitem (fn _ => let val  (OP_opt as 
OP_opt1) = OP_opt1 ()
 val  (vid as vid1) = vid1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_exitem_opt as AND_exitem_opt1) = AND_exitem_opt1 ()
 in (
 DESCExItem(I(OP_optleft,AND_exitem_optright),
	  			     OP_opt, vid, ty, AND_exitem_opt) 
)
end)
 in ( LrTable.NT 191, ( result, OP_opt1left, AND_exitem_opt1right), 
rest671)
end
|  ( 592, ( ( _, ( MlyValue.exitem exitem1, _, exitem1right)) :: ( _, 
( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_exitem_opt (fn _ => let val  (exitem as exitem1) = 
exitem1 ()
 in ( SOME exitem )
end)
 in ( LrTable.NT 192, ( result, AND1left, exitem1right), rest671)
end
|  ( 593, ( rest671)) => let val  result = MlyValue.AND_exitem_opt (fn
 _ => ( NONE ))
 in ( LrTable.NT 192, ( result, defaultPos, defaultPos), rest671)
end
|  ( 594, ( ( _, ( MlyValue.AND_stritem_opt AND_stritem_opt1, _, (
AND_stritem_optright as AND_stritem_opt1right))) :: ( _, ( 
MlyValue.strid strid1, (stridleft as strid1left), _)) :: rest671)) =>
 let val  result = MlyValue.stritem (fn _ => let val  (strid as strid1
) = strid1 ()
 val  (AND_stritem_opt as AND_stritem_opt1) = AND_stritem_opt1 ()
 in (
 PLAINStrItem(I(stridleft,AND_stritem_optright),
				       strid, AND_stritem_opt) 
)
end)
 in ( LrTable.NT 193, ( result, strid1left, AND_stritem_opt1right), 
rest671)
end
|  ( 595, ( ( _, ( MlyValue.sigexp__AND_stritem_opt 
sigexp__AND_stritem_opt1, _, (sigexp__AND_stritem_optright as 
sigexp__AND_stritem_opt1right))) :: _ :: ( _, ( MlyValue.strid strid1,
 (stridleft as strid1left), _)) :: rest671)) => let val  result = 
MlyValue.stritem (fn _ => let val  (strid as strid1) = strid1 ()
 val  (sigexp__AND_stritem_opt as sigexp__AND_stritem_opt1) = 
sigexp__AND_stritem_opt1 ()
 in (
 DESCStrItem(I(stridleft,sigexp__AND_stritem_optright),
				      strid, #1 sigexp__AND_stritem_opt,
				      #2 sigexp__AND_stritem_opt) 
)
end)
 in ( LrTable.NT 193, ( result, strid1left, 
sigexp__AND_stritem_opt1right), rest671)
end
|  ( 596, ( ( _, ( MlyValue.stritem stritem1, _, stritem1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_stritem_opt (fn _ => let val  (stritem as stritem1) = 
stritem1 ()
 in ( SOME stritem )
end)
 in ( LrTable.NT 194, ( result, AND1left, stritem1right), rest671)
end
|  ( 597, ( rest671)) => let val  result = MlyValue.AND_stritem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 194, ( result, defaultPos, defaultPos), rest671)
end
|  ( 598, ( ( _, ( MlyValue.AND_stritem_opt AND_stritem_opt1, _, 
AND_stritem_opt1right)) :: ( _, ( MlyValue.sigexp' sigexp'1, 
sigexp'1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_stritem_opt (fn _ => let val  (sigexp' as 
sigexp'1) = sigexp'1 ()
 val  (AND_stritem_opt as AND_stritem_opt1) = AND_stritem_opt1 ()
 in ( ( sigexp', AND_stritem_opt ) )
end)
 in ( LrTable.NT 195, ( result, sigexp'1left, AND_stritem_opt1right), 
rest671)
end
|  ( 599, ( ( _, ( MlyValue.sigexp__AND_stritem_opt 
sigexp__AND_stritem_opt1, _, (sigexp__AND_stritem_optright as 
sigexp__AND_stritem_opt1right))) :: _ :: ( _, ( MlyValue.strpat' 
strpat'1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp__AND_stritem_opt (fn _ => let
 val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp__AND_stritem_opt as sigexp__AND_stritem_opt1) = 
sigexp__AND_stritem_opt1 ()
 in (
 ( FCTSigExp(I(FCTleft,sigexp__AND_stritem_optright),
				      strpat', #1 sigexp__AND_stritem_opt)
			  , #2 sigexp__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 195, ( result, FCT1left, 
sigexp__AND_stritem_opt1right), rest671)
end
|  ( 600, ( ( _, ( MlyValue.sigexp__AND_stritem_opt 
sigexp__AND_stritem_opt1, _, (sigexp__AND_stritem_optright as 
sigexp__AND_stritem_opt1right))) :: _ :: ( _, ( MlyValue.atsigexp 
atsigexp1, (atsigexpleft as atsigexp1left), _)) :: rest671)) => let
 val  result = MlyValue.sigexp__AND_stritem_opt (fn _ => let val  (
atsigexp as atsigexp1) = atsigexp1 ()
 val  (sigexp__AND_stritem_opt as sigexp__AND_stritem_opt1) = 
sigexp__AND_stritem_opt1 ()
 in (
 ( ARROWSigExp(I(atsigexpleft,
					  sigexp__AND_stritem_optright),
					atsigexp, #1 sigexp__AND_stritem_opt)
			  , #2 sigexp__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 195, ( result, atsigexp1left, 
sigexp__AND_stritem_opt1right), rest671)
end
|  ( 601, ( ( _, ( MlyValue.rea__AND_stritem_opt rea__AND_stritem_opt1
, _, (rea__AND_stritem_optright as rea__AND_stritem_opt1right))) :: _
 :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp__AND_stritem_opt
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 val  (rea__AND_stritem_opt as rea__AND_stritem_opt1) = 
rea__AND_stritem_opt1 ()
 in (
 ( WHEREREASigExp(I(sigexpleft,
					     rea__AND_stritem_optright),
					   sigexp, #1 rea__AND_stritem_opt)
			  , #2 rea__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 195, ( result, sigexp1left, 
rea__AND_stritem_opt1right), rest671)
end
|  ( 602, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: _ :: ( _, ( MlyValue.spec
 spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_stritem_opt (fn _ => let val  (
spec as spec1) = spec1 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( SIGRea(I(SIGleft,AND_rea_opt__AND_stritem_optright),
				   spec, #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, SIG1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 603, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_stritem_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( VALRea(I(VALleft,AND_rea_opt__AND_stritem_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, VAL1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 604, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_stritem_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( FUNRea(I(FUNleft,AND_rea_opt__AND_stritem_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, FUN1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 605, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea__AND_stritem_opt (fn
 _ => let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( CONSTRUCTORRea(I(CONSTRUCTORleft,
					     AND_rea_opt__AND_stritem_optright),
					   OP_opt1, longvid1, OP_opt2, longvid2,
				           #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, CONSTRUCTOR1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 606, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea__AND_stritem_opt (fn _ =>
 let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( EXCEPTIONRea(I(EXCEPTIONleft,
					   AND_rea_opt__AND_stritem_optright),
					 OP_opt1, longvid1, OP_opt2, longvid2,
					 #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, EXCEPTION1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 607, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.ty ty1, _
, _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_stritem_opt (fn _ => let val  (tyvarseq as tyvarseq1
) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( TYPERea(I(TYPEleft,
				      AND_rea_opt__AND_stritem_optright),
				    tyvarseq, longtycon, ty,
				    #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, TYPE1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 608, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea__AND_stritem_opt (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( EQTYPERea(I(EQTYPEleft,
					AND_rea_opt__AND_stritem_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, EQTYPE1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 609, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea__AND_stritem_opt (fn _ => let val  (tyvarseq
 as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( EQEQTYPERea(I(EQEQTYPEleft,
					  AND_rea_opt__AND_stritem_optright),
					tyvarseq, longtycon,
					#1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, EQEQTYPE1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 610, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_stritem_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( STRUCTURERea(I(STRUCTUREleft,
					   AND_rea_opt__AND_stritem_optright),
				         longstrid1, COLON_sigexp_opt,
					 longstrid2,
				         #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, STRUCTURE1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 611, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, (AND_rea_opt__AND_stritem_optright
 as AND_rea_opt__AND_stritem_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_stritem_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( FUNCTORRea(I(FUNCTORleft,
					 AND_rea_opt__AND_stritem_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       #1 AND_rea_opt__AND_stritem_opt)
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, FUNCTOR1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 612, ( ( _, ( MlyValue.sigexp__AND_rea_opt__AND_stritem_opt 
sigexp__AND_rea_opt__AND_stritem_opt1, _, (
sigexp__AND_rea_opt__AND_stritem_optright as 
sigexp__AND_rea_opt__AND_stritem_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_stritem_opt (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt__AND_stritem_opt as 
sigexp__AND_rea_opt__AND_stritem_opt1) = 
sigexp__AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( SIGNATURERea
				(I(SIGNATUREleft,
				   sigexp__AND_rea_opt__AND_stritem_optright),
				 longsigid, atstrpat_list0,
				 #1 sigexp__AND_rea_opt__AND_stritem_opt,
				 #2 sigexp__AND_rea_opt__AND_stritem_opt)
			  , #3 sigexp__AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 196, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 613, ( ( _, ( MlyValue.AND_stritem_opt AND_stritem_opt1, 
AND_stritem_opt1left, AND_stritem_opt1right)) :: rest671)) => let val 
 result = MlyValue.AND_rea_opt__AND_stritem_opt (fn _ => let val  (
AND_stritem_opt as AND_stritem_opt1) = AND_stritem_opt1 ()
 in ( ( NONE, AND_stritem_opt ) )
end)
 in ( LrTable.NT 197, ( result, AND_stritem_opt1left, 
AND_stritem_opt1right), rest671)
end
|  ( 614, ( ( _, ( MlyValue.rea__AND_stritem_opt rea__AND_stritem_opt1
, _, rea__AND_stritem_opt1right)) :: ( _, ( _, AND1left, _)) :: 
rest671)) => let val  result = MlyValue.AND_rea_opt__AND_stritem_opt
 (fn _ => let val  (rea__AND_stritem_opt as rea__AND_stritem_opt1) = 
rea__AND_stritem_opt1 ()
 in (
 ( SOME(#1 rea__AND_stritem_opt)
				  , #2 rea__AND_stritem_opt ) )

end)
 in ( LrTable.NT 197, ( result, AND1left, rea__AND_stritem_opt1right),
 rest671)
end
|  ( 615, ( ( _, ( MlyValue.AND_rea_opt__AND_stritem_opt 
AND_rea_opt__AND_stritem_opt1, _, AND_rea_opt__AND_stritem_opt1right))
 :: ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, _)) :: 
rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt__AND_stritem_opt (fn _ => let val  (
appsigexp as appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt__AND_stritem_opt as AND_rea_opt__AND_stritem_opt1)
 = AND_rea_opt__AND_stritem_opt1 ()
 in (
 ( appsigexp
		          , #1 AND_rea_opt__AND_stritem_opt
			  , #2 AND_rea_opt__AND_stritem_opt ) 
)
end)
 in ( LrTable.NT 198, ( result, appsigexp1left, 
AND_rea_opt__AND_stritem_opt1right), rest671)
end
|  ( 616, ( ( _, ( MlyValue.AND_sigitem_opt AND_sigitem_opt1, _, (
AND_sigitem_optright as AND_sigitem_opt1right))) :: ( _, ( 
MlyValue.sigid sigid1, (sigidleft as sigid1left), _)) :: rest671)) =>
 let val  result = MlyValue.sigitem (fn _ => let val  (sigid as sigid1
) = sigid1 ()
 val  (AND_sigitem_opt as AND_sigitem_opt1) = AND_sigitem_opt1 ()
 in (
 PLAINSigItem(I(sigidleft,AND_sigitem_optright),
				       sigid, AND_sigitem_opt) 
)
end)
 in ( LrTable.NT 199, ( result, sigid1left, AND_sigitem_opt1right), 
rest671)
end
|  ( 617, ( ( _, ( MlyValue.AND_sigitem_opt AND_sigitem_opt1, _, (
AND_sigitem_optright as AND_sigitem_opt1right))) :: ( _, ( 
MlyValue.atstrpat_list1 atstrpat_list11, _, _)) :: ( _, ( 
MlyValue.sigid sigid1, (sigidleft as sigid1left), _)) :: rest671)) =>
 let val  result = MlyValue.sigitem (fn _ => let val  (sigid as sigid1
) = sigid1 ()
 val  (atstrpat_list1 as atstrpat_list11) = atstrpat_list11 ()
 val  (AND_sigitem_opt as AND_sigitem_opt1) = AND_sigitem_opt1 ()
 in (
 DESCSigItem(I(sigidleft,AND_sigitem_optright),
				      sigid, atstrpat_list1, AND_sigitem_opt) 
)
end)
 in ( LrTable.NT 199, ( result, sigid1left, AND_sigitem_opt1right), 
rest671)
end
|  ( 618, ( ( _, ( MlyValue.sigitem sigitem1, _, sigitem1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_sigitem_opt (fn _ => let val  (sigitem as sigitem1) = 
sigitem1 ()
 in ( SOME sigitem )
end)
 in ( LrTable.NT 200, ( result, AND1left, sigitem1right), rest671)
end
|  ( 619, ( rest671)) => let val  result = MlyValue.AND_sigitem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 200, ( result, defaultPos, defaultPos), rest671)
end
|  ( 620, ( ( _, ( MlyValue.AND_funitem_opt AND_funitem_opt1, _, (
AND_funitem_optright as AND_funitem_opt1right))) :: ( _, ( 
MlyValue.strid strid1, (stridleft as strid1left), _)) :: rest671)) =>
 let val  result = MlyValue.funitem (fn _ => let val  (strid as strid1
) = strid1 ()
 val  (AND_funitem_opt as AND_funitem_opt1) = AND_funitem_opt1 ()
 in (
 PLAINFunItem(I(stridleft,AND_funitem_optright),
				      strid, AND_funitem_opt) 
)
end)
 in ( LrTable.NT 201, ( result, strid1left, AND_funitem_opt1right), 
rest671)
end
|  ( 621, ( ( _, ( MlyValue.sigexp__AND_funitem_opt 
sigexp__AND_funitem_opt1, _, (sigexp__AND_funitem_optright as 
sigexp__AND_funitem_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.strid strid1, (stridleft as strid1left), _)) :: rest671)) =>
 let val  result = MlyValue.funitem (fn _ => let val  (strid as strid1
) = strid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_funitem_opt as sigexp__AND_funitem_opt1) = 
sigexp__AND_funitem_opt1 ()
 in (
 DESCFunItem(I(stridleft,sigexp__AND_funitem_optright),
				      strid, atstrpat_list0,
				      #1 sigexp__AND_funitem_opt,
				      #2 sigexp__AND_funitem_opt) 
)
end)
 in ( LrTable.NT 201, ( result, strid1left, 
sigexp__AND_funitem_opt1right), rest671)
end
|  ( 622, ( ( _, ( MlyValue.funitem funitem1, _, funitem1right)) :: (
 _, ( _, AND1left, _)) :: rest671)) => let val  result = 
MlyValue.AND_funitem_opt (fn _ => let val  (funitem as funitem1) = 
funitem1 ()
 in ( SOME funitem )
end)
 in ( LrTable.NT 202, ( result, AND1left, funitem1right), rest671)
end
|  ( 623, ( rest671)) => let val  result = MlyValue.AND_funitem_opt
 (fn _ => ( NONE ))
 in ( LrTable.NT 202, ( result, defaultPos, defaultPos), rest671)
end
|  ( 624, ( ( _, ( MlyValue.AND_funitem_opt AND_funitem_opt1, _, 
AND_funitem_opt1right)) :: ( _, ( MlyValue.sigexp' sigexp'1, 
sigexp'1left, _)) :: rest671)) => let val  result = 
MlyValue.sigexp__AND_funitem_opt (fn _ => let val  (sigexp' as 
sigexp'1) = sigexp'1 ()
 val  (AND_funitem_opt as AND_funitem_opt1) = AND_funitem_opt1 ()
 in ( ( sigexp', AND_funitem_opt ) )
end)
 in ( LrTable.NT 203, ( result, sigexp'1left, AND_funitem_opt1right), 
rest671)
end
|  ( 625, ( ( _, ( MlyValue.sigexp__AND_funitem_opt 
sigexp__AND_funitem_opt1, _, (sigexp__AND_funitem_optright as 
sigexp__AND_funitem_opt1right))) :: _ :: ( _, ( MlyValue.strpat' 
strpat'1, _, _)) :: ( _, ( _, (FCTleft as FCT1left), _)) :: rest671))
 => let val  result = MlyValue.sigexp__AND_funitem_opt (fn _ => let
 val  (strpat' as strpat'1) = strpat'1 ()
 val  (sigexp__AND_funitem_opt as sigexp__AND_funitem_opt1) = 
sigexp__AND_funitem_opt1 ()
 in (
 ( FCTSigExp(I(FCTleft,sigexp__AND_funitem_optright),
				      strpat', #1 sigexp__AND_funitem_opt)
			  , #2 sigexp__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 203, ( result, FCT1left, 
sigexp__AND_funitem_opt1right), rest671)
end
|  ( 626, ( ( _, ( MlyValue.sigexp__AND_funitem_opt 
sigexp__AND_funitem_opt1, _, (sigexp__AND_funitem_optright as 
sigexp__AND_funitem_opt1right))) :: _ :: ( _, ( MlyValue.atsigexp 
atsigexp1, (atsigexpleft as atsigexp1left), _)) :: rest671)) => let
 val  result = MlyValue.sigexp__AND_funitem_opt (fn _ => let val  (
atsigexp as atsigexp1) = atsigexp1 ()
 val  (sigexp__AND_funitem_opt as sigexp__AND_funitem_opt1) = 
sigexp__AND_funitem_opt1 ()
 in (
 ( ARROWSigExp(I(atsigexpleft,
					  sigexp__AND_funitem_optright),
					atsigexp, #1 sigexp__AND_funitem_opt)
			  , #2 sigexp__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 203, ( result, atsigexp1left, 
sigexp__AND_funitem_opt1right), rest671)
end
|  ( 627, ( ( _, ( MlyValue.rea__AND_funitem_opt rea__AND_funitem_opt1
, _, (rea__AND_funitem_optright as rea__AND_funitem_opt1right))) :: _
 :: ( _, ( MlyValue.sigexp sigexp1, (sigexpleft as sigexp1left), _))
 :: rest671)) => let val  result = MlyValue.sigexp__AND_funitem_opt
 (fn _ => let val  (sigexp as sigexp1) = sigexp1 ()
 val  (rea__AND_funitem_opt as rea__AND_funitem_opt1) = 
rea__AND_funitem_opt1 ()
 in (
 ( WHEREREASigExp(I(sigexpleft,
					     rea__AND_funitem_optright),
					   sigexp, #1 rea__AND_funitem_opt)
			  , #2 rea__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 203, ( result, sigexp1left, 
rea__AND_funitem_opt1right), rest671)
end
|  ( 628, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: _ :: ( _, ( MlyValue.spec
 spec1, _, _)) :: ( _, ( _, (SIGleft as SIG1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_funitem_opt (fn _ => let val  (
spec as spec1) = spec1 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( SIGRea(I(SIGleft,AND_rea_opt__AND_funitem_optright),
				   spec, #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, SIG1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 629, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (VALleft as VAL1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_funitem_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( VALRea(I(VALleft,AND_rea_opt__AND_funitem_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, VAL1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 630, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (FUNleft as FUN1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_funitem_opt (fn _ => let val  
OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( FUNRea(I(FUNleft,AND_rea_opt__AND_funitem_optright),
				   OP_opt1, longvid1, OP_opt2, longvid2,
				   #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, FUN1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 631, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (CONSTRUCTORleft as CONSTRUCTOR1left), _)
) :: rest671)) => let val  result = MlyValue.rea__AND_funitem_opt (fn
 _ => let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( CONSTRUCTORRea(I(CONSTRUCTORleft,
					     AND_rea_opt__AND_funitem_optright),
					   OP_opt1, longvid1, OP_opt2, longvid2,
				           #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, CONSTRUCTOR1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 632, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.longvid 
longvid2, _, _)) :: ( _, ( MlyValue.OP_opt OP_opt2, _, _)) :: _ :: ( _
, ( MlyValue.longvid longvid1, _, _)) :: ( _, ( MlyValue.OP_opt 
OP_opt1, _, _)) :: ( _, ( _, (EXCEPTIONleft as EXCEPTION1left), _)) ::
 rest671)) => let val  result = MlyValue.rea__AND_funitem_opt (fn _ =>
 let val  OP_opt1 = OP_opt1 ()
 val  longvid1 = longvid1 ()
 val  OP_opt2 = OP_opt2 ()
 val  longvid2 = longvid2 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( EXCEPTIONRea(I(EXCEPTIONleft,
					   AND_rea_opt__AND_funitem_optright),
					 OP_opt1, longvid1, OP_opt2, longvid2,
					 #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, EXCEPTION1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 633, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.ty ty1, _
, _)) :: _ :: ( _, ( MlyValue.longtycon longtycon1, _, _)) :: ( _, ( 
MlyValue.tyvarseq tyvarseq1, _, _)) :: ( _, ( _, (TYPEleft as 
TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_funitem_opt (fn _ => let val  (tyvarseq as tyvarseq1
) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (ty as ty1) = ty1 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( TYPERea(I(TYPEleft,
				      AND_rea_opt__AND_funitem_optright),
				    tyvarseq, longtycon, ty,
				    #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, TYPE1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 634, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQTYPEleft as EQTYPE1left), _)) :: rest671)) => let val  
result = MlyValue.rea__AND_funitem_opt (fn _ => let val  (tyvarseq as 
tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( EQTYPERea(I(EQTYPEleft,
					AND_rea_opt__AND_funitem_optright),
				      tyvarseq, longtycon,
				      #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, EQTYPE1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 635, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.longtycon
 longtycon1, _, _)) :: ( _, ( MlyValue.tyvarseq tyvarseq1, _, _)) :: (
 _, ( _, (EQEQTYPEleft as EQEQTYPE1left), _)) :: rest671)) => let val 
 result = MlyValue.rea__AND_funitem_opt (fn _ => let val  (tyvarseq
 as tyvarseq1) = tyvarseq1 ()
 val  (longtycon as longtycon1) = longtycon1 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( EQEQTYPERea(I(EQEQTYPEleft,
					  AND_rea_opt__AND_funitem_optright),
					tyvarseq, longtycon,
					#1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, EQEQTYPE1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 636, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (STRUCTUREleft as STRUCTURE1left), _)) :: rest671))
 => let val  result = MlyValue.rea__AND_funitem_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( STRUCTURERea(I(STRUCTUREleft,
					   AND_rea_opt__AND_funitem_optright),
				         longstrid1, COLON_sigexp_opt,
					 longstrid2,
				         #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, STRUCTURE1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 637, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, (AND_rea_opt__AND_funitem_optright
 as AND_rea_opt__AND_funitem_opt1right))) :: ( _, ( MlyValue.longstrid
 longstrid2, _, _)) :: _ :: ( _, ( MlyValue.COLON_sigexp_opt 
COLON_sigexp_opt1, _, _)) :: ( _, ( MlyValue.longstrid longstrid1, _,
 _)) :: ( _, ( _, (FUNCTORleft as FUNCTOR1left), _)) :: rest671)) =>
 let val  result = MlyValue.rea__AND_funitem_opt (fn _ => let val  
longstrid1 = longstrid1 ()
 val  (COLON_sigexp_opt as COLON_sigexp_opt1) = COLON_sigexp_opt1 ()
 val  longstrid2 = longstrid2 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( FUNCTORRea(I(FUNCTORleft,
					 AND_rea_opt__AND_funitem_optright),
				       longstrid1, COLON_sigexp_opt, longstrid2,
				       #1 AND_rea_opt__AND_funitem_opt)
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, FUNCTOR1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 638, ( ( _, ( MlyValue.sigexp__AND_rea_opt__AND_funitem_opt 
sigexp__AND_rea_opt__AND_funitem_opt1, _, (
sigexp__AND_rea_opt__AND_funitem_optright as 
sigexp__AND_rea_opt__AND_funitem_opt1right))) :: _ :: ( _, ( 
MlyValue.atstrpat_list0 atstrpat_list01, _, _)) :: ( _, ( 
MlyValue.longsigid longsigid1, _, _)) :: ( _, ( _, (SIGNATUREleft as 
SIGNATURE1left), _)) :: rest671)) => let val  result = 
MlyValue.rea__AND_funitem_opt (fn _ => let val  (longsigid as 
longsigid1) = longsigid1 ()
 val  (atstrpat_list0 as atstrpat_list01) = atstrpat_list01 ()
 val  (sigexp__AND_rea_opt__AND_funitem_opt as 
sigexp__AND_rea_opt__AND_funitem_opt1) = 
sigexp__AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( SIGNATURERea
				(I(SIGNATUREleft,
				   sigexp__AND_rea_opt__AND_funitem_optright),
				 longsigid, atstrpat_list0,
				 #1 sigexp__AND_rea_opt__AND_funitem_opt,
				 #2 sigexp__AND_rea_opt__AND_funitem_opt)
			  , #3 sigexp__AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 204, ( result, SIGNATURE1left, 
sigexp__AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 639, ( ( _, ( MlyValue.AND_funitem_opt AND_funitem_opt1, 
AND_funitem_opt1left, AND_funitem_opt1right)) :: rest671)) => let val 
 result = MlyValue.AND_rea_opt__AND_funitem_opt (fn _ => let val  (
AND_funitem_opt as AND_funitem_opt1) = AND_funitem_opt1 ()
 in ( ( NONE, AND_funitem_opt ) )
end)
 in ( LrTable.NT 205, ( result, AND_funitem_opt1left, 
AND_funitem_opt1right), rest671)
end
|  ( 640, ( ( _, ( MlyValue.rea__AND_funitem_opt rea__AND_funitem_opt1
, _, rea__AND_funitem_opt1right)) :: ( _, ( _, AND1left, _)) :: 
rest671)) => let val  result = MlyValue.AND_rea_opt__AND_funitem_opt
 (fn _ => let val  (rea__AND_funitem_opt as rea__AND_funitem_opt1) = 
rea__AND_funitem_opt1 ()
 in (
 ( SOME(#1 rea__AND_funitem_opt),
			    #2 rea__AND_funitem_opt ) )

end)
 in ( LrTable.NT 205, ( result, AND1left, rea__AND_funitem_opt1right),
 rest671)
end
|  ( 641, ( ( _, ( MlyValue.AND_rea_opt__AND_funitem_opt 
AND_rea_opt__AND_funitem_opt1, _, AND_rea_opt__AND_funitem_opt1right))
 :: ( _, ( MlyValue.appsigexp appsigexp1, appsigexp1left, _)) :: 
rest671)) => let val  result = 
MlyValue.sigexp__AND_rea_opt__AND_funitem_opt (fn _ => let val  (
appsigexp as appsigexp1) = appsigexp1 ()
 val  (AND_rea_opt__AND_funitem_opt as AND_rea_opt__AND_funitem_opt1)
 = AND_rea_opt__AND_funitem_opt1 ()
 in (
 ( appsigexp
		          , #1 AND_rea_opt__AND_funitem_opt
			  , #2 AND_rea_opt__AND_funitem_opt ) 
)
end)
 in ( LrTable.NT 206, ( result, appsigexp1left, 
AND_rea_opt__AND_funitem_opt1right), rest671)
end
|  ( 642, ( ( _, ( MlyValue.ann1 ann11, ann11left, ann11right)) :: 
rest671)) => let val  result = MlyValue.ann0 (fn _ => let val  (ann1
 as ann11) = ann11 ()
 in ( ann1 )
end)
 in ( LrTable.NT 207, ( result, ann11left, ann11right), rest671)
end
|  ( 643, ( rest671)) => let val  result = MlyValue.ann0 (fn _ => (
 EMPTYAnn(I(defaultPos,defaultPos)) ))
 in ( LrTable.NT 207, ( result, defaultPos, defaultPos), rest671)
end
|  ( 644, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.imp imp1, _, _)) :: ( _, ( _,
 (IMPORTleft as IMPORT1left), _)) :: rest671)) => let val  result = 
MlyValue.ann1 (fn _ => let val  (imp as imp1) = imp1 ()
 val  (STRING as STRING1) = STRING1 ()
 in ( IMPORTAnn(I(IMPORTleft,STRINGright),
					    imp, STRING) )
end
)
 in ( LrTable.NT 208, ( result, IMPORT1left, STRING1right), rest671)

end
|  ( 645, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: ( _, ( _, (IMPORTleft as IMPORT1left), _)) :: 
rest671)) => let val  result = MlyValue.ann1 (fn _ => let val  (STRING
 as STRING1) = STRING1 ()
 in ( IMPORTALLAnn(I(IMPORTleft,STRINGright),
					    STRING) )
end)
 in ( LrTable.NT 208, ( result, IMPORT1left, STRING1right), rest671)

end
|  ( 646, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.imp imp1, _, _)) :: _ :: ( _, 
( _, (IMPORTleft as IMPORT1left), _)) :: rest671)) => let val  result
 = MlyValue.ann1 (fn _ => let val  (imp as imp1) = imp1 ()
 val  (STRING as STRING1) = STRING1 ()
 in (
 PRIMITIVEIMPORTAnn(I(IMPORTleft,STRINGright),
						     imp, STRING) 
)
end)
 in ( LrTable.NT 208, ( result, IMPORT1left, STRING1right), rest671)

end
|  ( 647, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( _, (IMPORTleft as IMPORT1left), _)) :: 
rest671)) => let val  result = MlyValue.ann1 (fn _ => let val  (STRING
 as STRING1) = STRING1 ()
 in (
 PRIMITIVEIMPORTALLAnn(I(IMPORTleft,
							  STRINGright), STRING))

end)
 in ( LrTable.NT 208, ( result, IMPORT1left, STRING1right), rest671)

end
|  ( 648, ( ( _, ( MlyValue.ann1 ann12, _, ann12right)) :: ( _, ( 
MlyValue.ann1 ann11, ann11left, _)) :: rest671)) => let val  result = 
MlyValue.ann1 (fn _ => let val  ann11 = ann11 ()
 val  ann12 = ann12 ()
 in ( SEQAnn(I(ann11left,ann12right),
					 ann11, ann12) )
end)
 in ( LrTable.NT 208, ( result, ann11left, ann12right), rest671)
end
|  ( 649, ( ( _, ( _, (SEMICOLONleft as SEMICOLON1left), 
SEMICOLON1right)) :: rest671)) => let val  result = MlyValue.ann1 (fn
 _ => ( EMPTYAnn(I(SEMICOLONleft,SEMICOLONleft)) ))
 in ( LrTable.NT 208, ( result, SEMICOLON1left, SEMICOLON1right), 
rest671)
end
|  ( 650, ( ( _, ( MlyValue.localann1 localann11, localann11left, 
localann11right)) :: rest671)) => let val  result = MlyValue.localann
 (fn _ => let val  (localann1 as localann11) = localann11 ()
 in ( localann1 )
end)
 in ( LrTable.NT 209, ( result, localann11left, localann11right), 
rest671)
end
|  ( 651, ( rest671)) => let val  result = MlyValue.localann (fn _ =>
 ( EMPTYLocalAnn(I(defaultPos,defaultPos)) ))
 in ( LrTable.NT 209, ( result, defaultPos, defaultPos), rest671)
end
|  ( 652, ( ( _, ( MlyValue.STRING STRING1, _, (STRINGright as 
STRING1right))) :: _ :: ( _, ( MlyValue.spec spec1, _, _)) :: ( _, ( _
, (IMPORTleft as IMPORT1left), _)) :: rest671)) => let val  result = 
MlyValue.localann1 (fn _ => let val  (spec as spec1) = spec1 ()
 val  (STRING as STRING1) = STRING1 ()
 in ( IMPORTLocalAnn(I(IMPORTleft,STRINGright),
						 spec, STRING) )

end)
 in ( LrTable.NT 210, ( result, IMPORT1left, STRING1right), rest671)

end
|  ( 653, ( ( _, ( MlyValue.localann1 localann12, _, localann12right))
 :: ( _, ( MlyValue.localann1 localann11, localann11left, _)) :: 
rest671)) => let val  result = MlyValue.localann1 (fn _ => let val  
localann11 = localann11 ()
 val  localann12 = localann12 ()
 in (
 SEQLocalAnn(I(localann11left,localann12right),
					      localann11, localann12) 
)
end)
 in ( LrTable.NT 210, ( result, localann11left, localann12right), 
rest671)
end
|  ( 654, ( ( _, ( _, (SEMICOLONleft as SEMICOLON1left), 
SEMICOLON1right)) :: rest671)) => let val  result = MlyValue.localann1
 (fn _ => ( EMPTYLocalAnn(I(SEMICOLONleft,SEMICOLONleft))))
 in ( LrTable.NT 210, ( result, SEMICOLON1left, SEMICOLON1right), 
rest671)
end
|  ( 655, ( ( _, ( MlyValue.dec' dec'1, (dec'left as dec'1left), (
dec'right as dec'1right))) :: rest671)) => let val  result = 
MlyValue.program (fn _ => let val  (dec' as dec'1) = dec'1 ()
 in ( DECProgram(I(dec'left,dec'right),
				     dec', NONE) )
end)
 in ( LrTable.NT 211, ( result, dec'1left, dec'1right), rest671)
end
|  ( 656, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), (expright
 as exp1right))) :: rest671)) => let val  result = MlyValue.program
 (fn _ => let val  (exp as exp1) = exp1 ()
 in ( EXPProgram(I(expleft,expright),
				     exp, NONE) )
end)
 in ( LrTable.NT 211, ( result, exp1left, exp1right), rest671)
end
|  ( 657, ( ( _, ( MlyValue.program_opt' program_opt'1, _, (
program_opt'right as program_opt'1right))) :: _ :: ( _, ( 
MlyValue.dec' dec'1, (dec'left as dec'1left), _)) :: rest671)) => let
 val  result = MlyValue.program (fn _ => let val  (dec' as dec'1) = 
dec'1 ()
 val  (program_opt' as program_opt'1) = program_opt'1 ()
 in (
 DECProgram(I(dec'left,program_opt'right),
				     dec', program_opt') 
)
end)
 in ( LrTable.NT 211, ( result, dec'1left, program_opt'1right), 
rest671)
end
|  ( 658, ( ( _, ( MlyValue.program_opt' program_opt'1, _, (
program_opt'right as program_opt'1right))) :: _ :: ( _, ( MlyValue.exp
 exp1, (expleft as exp1left), _)) :: rest671)) => let val  result = 
MlyValue.program (fn _ => let val  (exp as exp1) = exp1 ()
 val  (program_opt' as program_opt'1) = program_opt'1 ()
 in (
 EXPProgram(I(expleft,program_opt'right),
				     exp, program_opt') 
)
end)
 in ( LrTable.NT 211, ( result, exp1left, program_opt'1right), rest671
)
end
|  ( 659, ( ( _, ( MlyValue.program program1, program1left, 
program1right)) :: rest671)) => let val  result = MlyValue.program_opt
 (fn _ => let val  (program as program1) = program1 ()
 in ( SOME program )
end)
 in ( LrTable.NT 212, ( result, program1left, program1right), rest671)

end
|  ( 660, ( rest671)) => let val  result = MlyValue.program_opt (fn _
 => ( NONE ))
 in ( LrTable.NT 212, ( result, defaultPos, defaultPos), rest671)
end
|  ( 661, ( ( _, ( MlyValue.program_opt program_opt1, program_opt1left
, program_opt1right)) :: rest671)) => let val  result = 
MlyValue.program_opt' (fn _ => let val  (program_opt as program_opt1)
 = program_opt1 ()
 in ( program_opt )
end)
 in ( LrTable.NT 213, ( result, program_opt1left, program_opt1right), 
rest671)
end
|  ( 662, ( ( _, ( MlyValue.program_opt' program_opt'1, _, 
program_opt'1right)) :: ( _, ( _, SEMICOLON1left, _)) :: rest671)) =>
 let val  result = MlyValue.program_opt' (fn _ => let val  (
program_opt' as program_opt'1) = program_opt'1 ()
 in ( program_opt' )
end)
 in ( LrTable.NT 213, ( result, SEMICOLON1left, program_opt'1right), 
rest671)
end
|  ( 663, ( ( _, ( MlyValue.program_opt program_opt1, _, (
program_optright as program_opt1right))) :: ( _, ( MlyValue.ann0 ann01
, (ann0left as ann01left), _)) :: rest671)) => let val  result = 
MlyValue.component (fn _ => let val  (ann0 as ann01) = ann01 ()
 val  (program_opt as program_opt1) = program_opt1 ()
 in (
 Component(I(ann0left,program_optright),
					    ann0, program_opt) )

end)
 in ( LrTable.NT 214, ( result, ann01left, program_opt1right), rest671
)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.component x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Parser_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ABSTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDALSO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun AS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun CASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun DATATYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun EXCEPTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun FUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun HANDLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIXR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun LOCAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun NONFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun OP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun OPEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun ORELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun RAISE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun REC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun VAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun WITH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun UNDERBAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun BAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUALS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun DARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun ARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun HASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun HASHBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun FINALLY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSERT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.ASSERT (fn () => i),p1,p2))
fun FILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun LINE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun EXTTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun CONSTRUCTOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun NON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHFUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHVAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun LAZY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun SPAWN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun EQTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun INCLUDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun SHARING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun SIG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun SIGNATURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCTURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun WHERE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
fun COLONGREATER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 71,(
ParserData.MlyValue.VOID,p1,p2))
fun ANY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun FCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.VOID,p1,p2))
fun PACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 74,(
ParserData.MlyValue.VOID,p1,p2))
fun UNPACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 75,(
ParserData.MlyValue.VOID,p1,p2))
fun IMPORT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 76,(
ParserData.MlyValue.VOID,p1,p2))
fun FROM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 77,(
ParserData.MlyValue.VOID,p1,p2))
fun COMP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 78,(
ParserData.MlyValue.VOID,p1,p2))
fun PRIMITIVE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 79,(
ParserData.MlyValue.VOID,p1,p2))
fun OVERLOAD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 80,(
ParserData.MlyValue.VOID,p1,p2))
fun EQEQTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 81,(
ParserData.MlyValue.VOID,p1,p2))
fun REFTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 82,(
ParserData.MlyValue.VOID,p1,p2))
fun PERVASIVE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 83,(
ParserData.MlyValue.VOID,p1,p2))
fun ZERO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 84,(
ParserData.MlyValue.VOID,p1,p2))
fun DIGIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 85,(
ParserData.MlyValue.DIGIT (fn () => i),p1,p2))
fun NUMERIC (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 86,(
ParserData.MlyValue.NUMERIC (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 87,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun WORD (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 88,(
ParserData.MlyValue.WORD (fn () => i),p1,p2))
fun REAL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 89,(
ParserData.MlyValue.REAL (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 90,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun CHAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 91,(
ParserData.MlyValue.CHAR (fn () => i),p1,p2))
fun ALPHA (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 92,(
ParserData.MlyValue.ALPHA (fn () => i),p1,p2))
fun SYMBOL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 93,(
ParserData.MlyValue.SYMBOL (fn () => i),p1,p2))
fun STAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 94,(
ParserData.MlyValue.VOID,p1,p2))
fun TYVAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 95,(
ParserData.MlyValue.TYVAR (fn () => i),p1,p2))
fun ETYVAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 96,(
ParserData.MlyValue.ETYVAR (fn () => i),p1,p2))
end
end
