 functor MkLexer(structure Tokens:     Parser_TOKENS
			  structure LexerError: LEXER_ERROR
			  where type token = (Tokens.svalue,int) Tokens.token
			  where type error = ParsingError.error)  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
COMMENT | LCOMMENT | INITIAL
    structure UserDeclarations = 
      struct

(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2006
 *
 * Last change:
 *   $Date: 2007-03-20 17:06:14 $ by $Author: rossberg $
 *   $Revision: 1.39 $
 *)

(*
 * Standard ML lexical analysis
 *
 * Definition, sections 2.1-2.5, 3.1
 *
 * Extensions and modifications:
 *   - line comments
 *   - more liberal constant prefixes (allow 0xw)
 *   - binary int and word constants (0b010, 0wb010)
 *   - allow underscores in numbers
 *   - longids have been moved to the context-free grammar,
 *     so the LONGID token is substituted by a DOT token
 *   - #[ keyword for vector expressions
 *   - FINALLY keyword
 *   - ASSERT keyword(s)
 *   - EXTTYPE and CONSTRUCTOR keywords for extensible datatypes
 *   - NON keyword added for negated patterns
 *   - WITHVAL and WITHFUN keywords for bindings inside pattern
 *   - LAZY and SPAWN keywords for futures
 *   - FCT keyword for functor expressions and signatures
 *   - ANY keyword for top signature
 *   - PACK and UNPACK keyword for first class structures
 *   - IMPORT and FROM keywords added
 *   - PRIMITIVE, OVERLOAD, EQEQTYPE, REFTYPE, and PERVASIVE keywords added
 *
 * Notes:
 *   Since all lexical classes must be disjoint:
 *   - There is no single class ID, use ALPHA|SYMBOL|STAR|EQUALS.
 *   - There is no class LAB, use ALPHA|SYMBOL|NUMERIC|DIGIT|STAR.
 *   - ID does not contain `=' and `*', those are EQUALS and STAR.
 *   - INT does not contain positive decimal integers without leading 0,
 *     and single DIGIT integers, those are in NUMERIC, DIGIT, and ZERO.
 *   - NUMERIC does not contain single digit numbers, those are in DIGIT.
 *   - DIGIT does not contain 0, that is ZERO.
 *
 *   The parser uses a global variable to recognise nested comments, so it is
 *   not reentrant.
 *)


    structure E = ParsingError

    val error = LexerError.error


  (* Types to match structure LEXER.UserDeclaration *)

    type ('a,'b) token = ('a,'b) Tokens.token
    type pos           = int
    type svalue        = Tokens.svalue
    type lexresult     = (svalue, pos) token


  (* Source positions *)

    fun toLRPos(yypos, yytext) =
	let
	    val yypos = yypos - 2	(* bug in ML-Lex... *)
	in
	    (yypos, yypos + String.size yytext)
	end


  (* Handling nested comments *)

    val nesting = ref [] : int list ref

    fun nest yypos = nesting := yypos-2 :: !nesting
    fun nested ()  = not (List.null(!nesting))
    fun unnest ()  = ( nesting := List.tl(!nesting) ; List.null(!nesting) )

    fun eof() =
	case !nesting
	  of []    => raise LexerError.EOF(fn i => Tokens.EOF i)
	   | i0::_ =>
		( nesting := [];
		  raise LexerError.EOF(fn(i1,i2) =>
					  error((i0,i2), E.UnclosedComment)))



  (* Some helpers to create tokens *)

    open Tokens


    fun token(TOKEN, yypos, yytext) =
        TOKEN(toLRPos(yypos, yytext))

    fun tokenOf(TOKEN, toVal, yypos, yytext) =
	let
	    val i as (l,r) = toLRPos(yypos, yytext)
	in
	    TOKEN(toVal(yytext,i), l, r)
	end

    fun ASSERT_ d_opt (l,r) = ASSERT(d_opt, l, r)

    fun error'(yypos, yytext, e) = error(toLRPos(yypos, yytext), e)



  (* Convert identifiers and constants *)

    datatype radix = datatype StringCvt.radix

    fun toId(s,i) = s

    fun toDigit(s,i) = Char.ord(String.sub(s,0)) - Char.ord #"0"

    fun toInt(s,i) =
	case String.sub(s,0)
	  of #"~" => toInt'("~", String.extract(s,1,NONE), i)
	   |   _  => toInt'("", s, i)
	(* Be careful to handle minInt correctly - let scan do the trick... *)

    and toInt'(s0,s,i) =
	case String.sub(s,0)
	  of #"0" => (if String.size s = 1 then LargeInt.fromInt 0 else
		      case String.sub(s,1)
			of #"b" => toInt''(s0^String.extract(s,2,NONE), BIN, i)
			 | #"x" => toInt''(s0^String.extract(s,2,NONE), HEX, i)
			 |   _  => toInt''(s0^s, DEC, i)
		     )
	   |   _  => toInt''(s0^s, DEC, i)

    and toInt''(s,b,i) = Option.valOf(StringCvt.scanString (LargeInt.scan b) s)
			 handle Overflow => error(i, E.IntTooLarge)

    fun toWord(s,i) =
	case (String.sub(s,1), String.sub(s,2))
	  of ( (#"b",_) | (_,#"b") ) => toWord'(String.extract(s,3,NONE), BIN,i)
	   | ( (#"x",_) | (_,#"x") ) => toWord'(String.extract(s,3,NONE), HEX,i)
	   |            _            => toWord'(String.extract(s,2,NONE), DEC,i)

    and toWord'(s,b,i) = Option.valOf(StringCvt.scanString (LargeWord.scan b) s)
			 handle Overflow => error(i, E.WordTooLarge)

    fun toReal(s,i)    = Option.valOf(StringCvt.scanString LargeReal.scan s)
			 handle Overflow => error(i, E.RealTooLarge)


    fun toString(s,i) =
	let
            fun base(s,b,m) =
		WideChar.chr(Option.valOf(StringCvt.scanString (Int.scan b) s))
		handle (Chr | Overflow) =>
			 error(i, E.EscapeCharTooLarge m)

	    fun dec s     = base(s, DEC, false)
	    fun unicode s = base(s, HEX, true)

	    fun convert(k,cs) =
		case String.sub(s,k)
		  of #"\"" => WideString.implode(List.rev cs)
		   | #"\\" => escape(k+1,cs)
		   |   c   => convert(k+1, Char.toWide(c)::cs)

	    and escape(k,cs) =
		case String.sub(s,k)
		  of #"a"  => convert(k+1, #"\a"::cs)
		   | #"b"  => convert(k+1, #"\b"::cs)
		   | #"t"  => convert(k+1, #"\t"::cs)
		   | #"n"  => convert(k+1, #"\n"::cs)
		   | #"v"  => convert(k+1, #"\v"::cs)
		   | #"f"  => convert(k+1, #"\f"::cs)
		   | #"r"  => convert(k+1, #"\r"::cs)
		   | #"\"" => convert(k+1, #"\""::cs)
		   | #"\\" => convert(k+1, #"\\"::cs)
		   | #"^"  => let val c = String.sub(s,k+1) in
				  convert(k+2, WideChar.chr(Char.ord c -
							    Char.ord #"@")::cs)
			      end

		   | #"u"  => let val s' = String.extract(s, k+1, SOME 4) in
				  convert(k+5, unicode s' :: cs)
			      end

		   |   c   => if Char.isDigit c then
				  let val s' = String.extract(s, k, SOME 3) in
				      convert(k+3, dec s' :: cs)
				  end
			      else if Char.isSpace c then
				   gap(k+1, cs)
			      else raise Crash.Crash "Lexer.toString: \
						     \invalid escape sequence"

	    and gap(k, cs) =
		    if String.sub(s,k) = #"\\" then
			convert(k+1, cs)
		    else
			gap(k+1, cs)

	in
	    convert(1,[])
	end


    fun toChar(s, i) =
	let
	    val s'  = String.substring(s, 1, String.size s - 1)
	    val ss' = toString(s', i)
	in
	    if WideString.size ss' = 1 then
		WideString.sub(ss', 0)
	    else
		error(i, E.CharLengthInvalid ss')
	end



      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\t",3),
(#"\v",#"'",3),
(#")",#")",3),
(#"+",#"\255",3),
(#"\n",#"\n",4),
(#"(",#"(",5),
(#"*",#"*",6)], []), ([(#"\^@",#"\t",10),
(#"\v",#"\255",10),
(#"\n",#"\n",11)], []), ([(#"\^@",#"\b",12),
(#"\^N",#"\^_",12),
(#"\127",#"\255",12),
(#"\t",#"\t",13),
(#"\v",#"\r",13),
(#" ",#" ",13),
(#"\n",#"\n",14),
(#"!",#"!",15),
(#"$",#"&",15),
(#"+",#"+",15),
(#"/",#"/",15),
(#"<",#"<",15),
(#">",#"@",15),
(#"\\",#"\\",15),
(#"^",#"^",15),
(#"`",#"`",15),
(#"\"",#"\"",16),
(#"#",#"#",17),
(#"'",#"'",18),
(#"(",#"(",19),
(#")",#")",20),
(#"*",#"*",21),
(#",",#",",22),
(#"-",#"-",23),
(#".",#".",24),
(#"0",#"0",25),
(#"1",#"9",26),
(#":",#":",27),
(#";",#";",28),
(#"=",#"=",29),
(#"A",#"Z",30),
(#"b",#"b",30),
(#"g",#"g",30),
(#"j",#"k",30),
(#"m",#"m",30),
(#"q",#"q",30),
(#"x",#"z",30),
(#"[",#"[",31),
(#"]",#"]",32),
(#"_",#"_",33),
(#"a",#"a",34),
(#"c",#"c",35),
(#"d",#"d",36),
(#"e",#"e",37),
(#"f",#"f",38),
(#"h",#"h",39),
(#"i",#"i",40),
(#"l",#"l",41),
(#"n",#"n",42),
(#"o",#"o",43),
(#"p",#"p",44),
(#"r",#"r",45),
(#"s",#"s",46),
(#"t",#"t",47),
(#"u",#"u",48),
(#"v",#"v",49),
(#"w",#"w",50),
(#"{",#"{",51),
(#"|",#"|",52),
(#"}",#"}",53),
(#"~",#"~",54)], []), ([], [110]), ([], [111]), ([(#"*",#"*",8)], [110]), ([(#")",#")",7)], [110]), ([], [109]), ([(#")",#")",9)], [108]), ([], [107]), ([], [112]), ([], [113]), ([], [115]), ([(#"\t",#"\r",14),
(#" ",#" ",14)], [0, 115]), ([(#"\t",#"\r",14),
(#" ",#" ",14)], [0]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55)], [104, 115]), ([(#" ",#"!",353),
(#"#",#"[",353),
(#"]",#"~",353),
(#"\128",#"\255",353),
(#"\"",#"\"",354),
(#"\\",#"\\",355)], [114, 115]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55),
(#"\"",#"\"",341),
(#"[",#"[",342)], [1, 104, 115]), ([(#"'",#"'",340),
(#"0",#"9",340),
(#"A",#"Z",340),
(#"_",#"_",340),
(#"a",#"z",340)], [103, 115]), ([(#"*",#"*",338)], [3, 115]), ([], [4, 115]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55)], [5, 104, 115]), ([], [6, 115]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"=",55),
(#"?",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55),
(#">",#">",337)], [104, 115]), ([(#".",#".",335)], [8, 115]), ([(#".",#".",58),
(#"0",#"9",57),
(#"_",#"_",57),
(#"E",#"E",59),
(#"e",#"e",59),
(#"b",#"b",326),
(#"w",#"w",327),
(#"x",#"x",328)], [95, 98, 115]), ([(#".",#".",58),
(#"0",#"9",325),
(#"E",#"E",59),
(#"e",#"e",59),
(#"_",#"_",57)], [96, 97, 98, 115]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"=",55),
(#"?",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55),
(#">",#">",324)], [10, 104, 115]), ([], [12, 115]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"=",55),
(#"?",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55),
(#">",#">",323)], [13, 104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [104, 115]), ([], [15, 115]), ([], [16, 115]), ([(#"_",#"_",272),
(#"f",#"f",273),
(#"l",#"l",274)], [17, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"a",67),
(#"c",#"m",67),
(#"o",#"r",67),
(#"t",#"z",67),
(#"b",#"b",244),
(#"n",#"n",245),
(#"s",#"s",246)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"n",67),
(#"p",#"z",67),
(#"a",#"a",229),
(#"o",#"o",230)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"n",67),
(#"p",#"z",67),
(#"a",#"a",221),
(#"o",#"o",222)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"m",67),
(#"o",#"p",67),
(#"r",#"w",67),
(#"y",#"z",67),
(#"l",#"l",198),
(#"n",#"n",199),
(#"q",#"q",200),
(#"x",#"x",201)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"h",67),
(#"j",#"m",67),
(#"o",#"q",67),
(#"s",#"t",67),
(#"v",#"z",67),
(#"c",#"c",180),
(#"i",#"i",181),
(#"n",#"n",182),
(#"r",#"r",183),
(#"u",#"u",184)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",175)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"e",67),
(#"g",#"l",67),
(#"o",#"z",67),
(#"f",#"f",159),
(#"m",#"m",160),
(#"n",#"n",161)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"d",67),
(#"f",#"n",67),
(#"p",#"z",67),
(#"a",#"a",150),
(#"e",#"e",151),
(#"o",#"o",152)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"n",67),
(#"p",#"z",67),
(#"o",#"o",145)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"e",67),
(#"g",#"o",67),
(#"q",#"q",67),
(#"s",#"z",67),
(#"f",#"f",136),
(#"p",#"p",137),
(#"r",#"r",138)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",133)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"d",67),
(#"f",#"z",67),
(#"a",#"a",127),
(#"e",#"e",128)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"g",67),
(#"j",#"o",67),
(#"q",#"s",67),
(#"u",#"z",67),
(#"h",#"h",101),
(#"i",#"i",102),
(#"p",#"p",103),
(#"t",#"t",104)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"g",67),
(#"i",#"x",67),
(#"z",#"z",67),
(#"h",#"h",95),
(#"y",#"y",96)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",90)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",88)], [104, 115]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"g",67),
(#"j",#"z",67),
(#"h",#"h",68),
(#"i",#"i",69)], [104, 115]), ([], [18, 115]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55)], [19, 104, 115]), ([], [20, 115]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55),
(#"0",#"0",56),
(#"1",#"9",57)], [104, 115]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55)], [104]), ([(#".",#".",58),
(#"0",#"9",57),
(#"_",#"_",57),
(#"E",#"E",59),
(#"e",#"e",59),
(#"b",#"b",63),
(#"x",#"x",64)], [98]), ([(#".",#".",58),
(#"0",#"9",57),
(#"_",#"_",57),
(#"E",#"E",59),
(#"e",#"e",59)], [98]), ([(#"0",#"9",62),
(#"_",#"_",58)], []), ([(#"0",#"9",60),
(#"~",#"~",61)], []), ([(#"0",#"9",60),
(#"_",#"_",60)], [100]), ([(#"0",#"9",60)], []), ([(#"0",#"9",62),
(#"_",#"_",62),
(#"E",#"E",59),
(#"e",#"e",59)], [100]), ([(#"0",#"1",66),
(#"_",#"_",63)], []), ([(#"0",#"9",65),
(#"A",#"F",65),
(#"a",#"f",65),
(#"_",#"_",64)], []), ([(#"0",#"9",65),
(#"A",#"F",65),
(#"_",#"_",65),
(#"a",#"f",65)], [98]), ([(#"0",#"1",66),
(#"_",#"_",66)], [98]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"h",67),
(#"j",#"z",67),
(#"e",#"e",82),
(#"i",#"i",83)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",70)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"g",67),
(#"i",#"z",67),
(#"h",#"h",71)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"e",67),
(#"g",#"s",67),
(#"u",#"u",67),
(#"w",#"z",67),
(#"f",#"f",72),
(#"t",#"t",73),
(#"v",#"v",74)], [91, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"t",67),
(#"v",#"z",67),
(#"u",#"u",80)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"x",67),
(#"z",#"z",67),
(#"y",#"y",77)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",75)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",76)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [94, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",78)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",79)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [93, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",81)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [92, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",86)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",84)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",85)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [90, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",87)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [89, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",89)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [88, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",91)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",92)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"z",67),
(#"c",#"c",93)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"j",67),
(#"l",#"z",67),
(#"k",#"k",94)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [87, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",99)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",97)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",98)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [86, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",100)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [85, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",122)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"f",67),
(#"h",#"z",67),
(#"g",#"g",115)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",112)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",105)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"t",67),
(#"v",#"z",67),
(#"u",#"u",106)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"z",67),
(#"c",#"c",107)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",108)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"t",67),
(#"v",#"z",67),
(#"u",#"u",109)], [83, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",110)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",111)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [84, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"v",67),
(#"x",#"z",67),
(#"w",#"w",113)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",114)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [82, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",116)], [80, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",117)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",118)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"t",67),
(#"v",#"z",67),
(#"u",#"u",119)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",120)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",121)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [81, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",123)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"h",67),
(#"j",#"z",67),
(#"i",#"i",124)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",125)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"f",67),
(#"h",#"z",67),
(#"g",#"g",126)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [79, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"h",67),
(#"j",#"z",67),
(#"i",#"i",130)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"z",67),
(#"c",#"c",129)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [78, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"r",67),
(#"t",#"z",67),
(#"s",#"s",131)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",132)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [77, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"z",67),
(#"c",#"c",134)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"j",67),
(#"l",#"z",67),
(#"k",#"k",135)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [76, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [72, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",143)], [73, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",139)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",140)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"r",67),
(#"t",#"z",67),
(#"s",#"s",141)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",142)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [75, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",144)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [74, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",146)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"e",67),
(#"g",#"z",67),
(#"f",#"f",147)], [70, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"h",67),
(#"j",#"z",67),
(#"i",#"i",148)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"w",67),
(#"y",#"z",67),
(#"x",#"x",149)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [71, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"y",67),
(#"z",#"z",157)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",156)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"z",67),
(#"c",#"c",153)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",154)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",155)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [69, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [68, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"x",67),
(#"z",#"z",67),
(#"y",#"y",158)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [67, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [61, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",171)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"e",67),
(#"g",#"z",67),
(#"c",#"c",162),
(#"f",#"f",163)], [63, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",167)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"h",67),
(#"j",#"z",67),
(#"i",#"i",164)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"w",67),
(#"y",#"z",67),
(#"x",#"x",165)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",166)], [65, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [66, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"t",67),
(#"v",#"z",67),
(#"u",#"u",168)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"c",67),
(#"e",#"z",67),
(#"d",#"d",169)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",170)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [64, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"n",67),
(#"p",#"z",67),
(#"o",#"o",172)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",173)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",174)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [62, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",176)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"c",67),
(#"e",#"z",67),
(#"d",#"d",177)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",178)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",179)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [60, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",197)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",192)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [56, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"n",67),
(#"p",#"z",67),
(#"o",#"o",190)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",185)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"z",67),
(#"c",#"c",186)], [58, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",187)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"n",67),
(#"p",#"z",67),
(#"o",#"o",188)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",189)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [59, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"l",67),
(#"n",#"z",67),
(#"m",#"m",191)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [57, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",193)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",194)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",195)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"x",67),
(#"z",#"z",67),
(#"y",#"y",196)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [55, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [54, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"r",67),
(#"t",#"z",67),
(#"s",#"s",219)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"c",67),
(#"e",#"z",67),
(#"d",#"d",218)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",214)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"s",67),
(#"u",#"z",67),
(#"c",#"c",202),
(#"t",#"t",203)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",208)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",204)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"x",67),
(#"z",#"z",67),
(#"y",#"y",205)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",206)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",207)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [53, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",209)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",210)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"h",67),
(#"j",#"z",67),
(#"i",#"i",211)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"n",67),
(#"p",#"z",67),
(#"o",#"o",212)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"m",67),
(#"o",#"z",67),
(#"n",#"n",213)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [52, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"x",67),
(#"z",#"z",67),
(#"y",#"y",215)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",216)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",217)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [51, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [50, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",220)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [49, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",223)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [48, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",224)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",225)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"x",67),
(#"z",#"z",67),
(#"y",#"y",226)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",227)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",228)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [47, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"r",67),
(#"t",#"z",67),
(#"s",#"s",242)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"l",67),
(#"o",#"z",67),
(#"m",#"m",231),
(#"n",#"n",232)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",241)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"r",67),
(#"t",#"z",67),
(#"s",#"s",233)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",234)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",235)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"t",67),
(#"v",#"z",67),
(#"u",#"u",236)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"b",67),
(#"d",#"z",67),
(#"c",#"c",237)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",238)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"n",67),
(#"p",#"z",67),
(#"o",#"o",239)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",240)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [46, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [45, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",243)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [44, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"r",67),
(#"t",#"z",67),
(#"s",#"s",267)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"c",67),
(#"e",#"x",67),
(#"z",#"z",67),
(#"d",#"d",261),
(#"y",#"y",262)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"r",67),
(#"t",#"z",67),
(#"s",#"s",247)], [32, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",248)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"q",67),
(#"s",#"z",67),
(#"r",#"r",249)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",250)], [104]), ([(#"'",#"'",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67),
(#"0",#"0",251),
(#"1",#"1",252),
(#"2",#"2",253),
(#"3",#"3",254),
(#"4",#"4",255),
(#"5",#"5",256),
(#"6",#"6",257),
(#"7",#"7",258),
(#"8",#"8",259),
(#"9",#"9",260)], [33, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [34, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [35, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [36, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [37, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [38, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [39, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [40, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [41, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [42, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [43, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"b",#"z",67),
(#"a",#"a",263)], [29, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [31, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"k",67),
(#"m",#"z",67),
(#"l",#"l",264)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"r",67),
(#"t",#"z",67),
(#"s",#"s",265)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"n",67),
(#"p",#"z",67),
(#"o",#"o",266)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [30, 104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"s",67),
(#"u",#"z",67),
(#"t",#"t",268)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"x",67),
(#"z",#"z",67),
(#"y",#"y",269)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"o",67),
(#"q",#"z",67),
(#"p",#"p",270)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"d",67),
(#"f",#"z",67),
(#"e",#"e",271)], [104]), ([(#"'",#"'",67),
(#"0",#"9",67),
(#"A",#"Z",67),
(#"_",#"_",67),
(#"a",#"z",67)], [28, 104]), ([(#"e",#"e",283),
(#"o",#"o",284),
(#"p",#"p",285),
(#"r",#"r",286)], []), ([(#"i",#"i",279)], []), ([(#"i",#"i",275)], []), ([(#"n",#"n",276)], []), ([(#"e",#"e",277)], []), ([(#"_",#"_",278)], []), ([], [27]), ([(#"l",#"l",280)], []), ([(#"e",#"e",281)], []), ([(#"_",#"_",282)], []), ([], [26]), ([(#"q",#"q",316)], []), ([(#"v",#"v",309)], []), ([(#"e",#"e",293),
(#"r",#"r",294)], []), ([(#"e",#"e",287)], []), ([(#"f",#"f",288)], []), ([(#"t",#"t",289)], []), ([(#"y",#"y",290)], []), ([(#"p",#"p",291)], []), ([(#"e",#"e",292)], []), ([], [25]), ([(#"r",#"r",302)], []), ([(#"i",#"i",295)], []), ([(#"m",#"m",296)], []), ([(#"i",#"i",297)], []), ([(#"t",#"t",298)], []), ([(#"i",#"i",299)], []), ([(#"v",#"v",300)], []), ([(#"e",#"e",301)], []), ([], [24]), ([(#"v",#"v",303)], []), ([(#"a",#"a",304)], []), ([(#"s",#"s",305)], []), ([(#"i",#"i",306)], []), ([(#"v",#"v",307)], []), ([(#"e",#"e",308)], []), ([], [23]), ([(#"e",#"e",310)], []), ([(#"r",#"r",311)], []), ([(#"l",#"l",312)], []), ([(#"o",#"o",313)], []), ([(#"a",#"a",314)], []), ([(#"d",#"d",315)], []), ([], [22]), ([(#"e",#"e",317)], []), ([(#"q",#"q",318)], []), ([(#"t",#"t",319)], []), ([(#"y",#"y",320)], []), ([(#"p",#"p",321)], []), ([(#"e",#"e",322)], []), ([], [21]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55)], [14, 104]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55)], [11, 104]), ([(#".",#".",58),
(#"0",#"9",325),
(#"E",#"E",59),
(#"e",#"e",59),
(#"_",#"_",57)], [97, 98]), ([(#"0",#"1",66),
(#"_",#"_",63),
(#"w",#"w",333)], []), ([(#"0",#"9",331),
(#"_",#"_",332),
(#"b",#"b",333),
(#"x",#"x",329)], []), ([(#"0",#"9",65),
(#"A",#"F",65),
(#"a",#"f",65),
(#"_",#"_",64),
(#"w",#"w",329)], []), ([(#"0",#"9",330),
(#"A",#"F",330),
(#"a",#"f",330),
(#"_",#"_",329)], []), ([(#"0",#"9",330),
(#"A",#"F",330),
(#"_",#"_",330),
(#"a",#"f",330)], [99]), ([(#"0",#"9",331),
(#"_",#"_",331)], [99]), ([(#"0",#"9",331),
(#"_",#"_",332)], []), ([(#"0",#"1",334),
(#"_",#"_",333)], []), ([(#"0",#"1",334),
(#"_",#"_",334)], [99]), ([(#".",#".",336)], []), ([], [9]), ([(#"!",#"!",55),
(#"#",#"&",55),
(#"*",#"+",55),
(#"-",#"-",55),
(#"/",#"/",55),
(#":",#":",55),
(#"<",#"@",55),
(#"\\",#"\\",55),
(#"^",#"^",55),
(#"`",#"`",55),
(#"|",#"|",55),
(#"~",#"~",55)], [7, 104]), ([(#")",#")",339)], [106]), ([], [105]), ([(#"'",#"'",340),
(#"0",#"9",340),
(#"A",#"Z",340),
(#"_",#"_",340),
(#"a",#"z",340)], [103]), ([(#" ",#"!",341),
(#"#",#"[",341),
(#"]",#"~",341),
(#"\128",#"\255",341),
(#"\"",#"\"",343),
(#"\\",#"\\",344)], []), ([], [2]), ([], [102]), ([(#"\t",#"\r",345),
(#" ",#" ",345),
(#"\"",#"\"",341),
(#"\\",#"\\",341),
(#"a",#"b",341),
(#"f",#"f",341),
(#"n",#"n",341),
(#"r",#"r",341),
(#"t",#"t",341),
(#"v",#"v",341),
(#"0",#"9",346),
(#"^",#"^",347),
(#"u",#"u",348)], []), ([(#"\t",#"\r",345),
(#" ",#" ",345),
(#"\\",#"\\",341)], []), ([(#"0",#"9",352)], []), ([(#"@",#"_",341)], []), ([(#"0",#"9",349),
(#"A",#"F",349),
(#"a",#"f",349)], []), ([(#"0",#"9",350),
(#"A",#"F",350),
(#"a",#"f",350)], []), ([(#"0",#"9",351),
(#"A",#"F",351),
(#"a",#"f",351)], []), ([(#"0",#"9",341),
(#"A",#"F",341),
(#"a",#"f",341)], []), ([(#"0",#"9",341)], []), ([(#" ",#"!",353),
(#"#",#"[",353),
(#"]",#"~",353),
(#"\128",#"\255",353),
(#"\"",#"\"",354),
(#"\\",#"\\",355)], []), ([], [101]), ([(#"\t",#"\r",356),
(#" ",#" ",356),
(#"\"",#"\"",353),
(#"\\",#"\\",353),
(#"a",#"b",353),
(#"f",#"f",353),
(#"n",#"n",353),
(#"r",#"r",353),
(#"t",#"t",353),
(#"v",#"v",353),
(#"0",#"9",357),
(#"^",#"^",358),
(#"u",#"u",359)], []), ([(#"\t",#"\r",356),
(#" ",#" ",356),
(#"\\",#"\\",353)], []), ([(#"0",#"9",363)], []), ([(#"@",#"_",353)], []), ([(#"0",#"9",360),
(#"A",#"F",360),
(#"a",#"f",360)], []), ([(#"0",#"9",361),
(#"A",#"F",361),
(#"a",#"f",361)], []), ([(#"0",#"9",362),
(#"A",#"F",362),
(#"a",#"f",362)], []), ([(#"0",#"9",353),
(#"A",#"F",353),
(#"a",#"f",353)], []), ([(#"0",#"9",353)], [])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as ()) = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm; ( continue() ))
fun yyAction1 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(HASH,      yypos, yytext) )
      end
fun yyAction2 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(HASHBRACK, yypos, yytext) )
      end
fun yyAction3 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(LPAR,      yypos, yytext) )
      end
fun yyAction4 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(RPAR,      yypos, yytext) )
      end
fun yyAction5 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(STAR,      yypos, yytext) )
      end
fun yyAction6 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(COMMA,     yypos, yytext) )
      end
fun yyAction7 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ARROW,     yypos, yytext) )
      end
fun yyAction8 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(DOT,       yypos, yytext) )
      end
fun yyAction9 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(DOTS,      yypos, yytext) )
      end
fun yyAction10 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(COLON,     yypos, yytext) )
      end
fun yyAction11 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(COLONGREATER, yypos, yytext) )
      end
fun yyAction12 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(SEMICOLON, yypos, yytext) )
      end
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(EQUALS,    yypos, yytext) )
      end
fun yyAction14 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(DARROW,    yypos, yytext) )
      end
fun yyAction15 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(LBRACK,    yypos, yytext) )
      end
fun yyAction16 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(RBRACK,    yypos, yytext) )
      end
fun yyAction17 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(UNDERBAR,  yypos, yytext) )
      end
fun yyAction18 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(LBRACE,    yypos, yytext) )
      end
fun yyAction19 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(BAR,       yypos, yytext) )
      end
fun yyAction20 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(RBRACE,    yypos, yytext) )
      end
fun yyAction21 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(EQEQTYPE,  yypos, yytext) )
      end
fun yyAction22 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(OVERLOAD,  yypos, yytext) )
      end
fun yyAction23 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(PERVASIVE, yypos, yytext) )
      end
fun yyAction24 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(PRIMITIVE, yypos, yytext) )
      end
fun yyAction25 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(REFTYPE,   yypos, yytext) )
      end
fun yyAction26 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(FILE,      yypos, yytext) )
      end
fun yyAction27 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(LINE,      yypos, yytext) )
      end
fun yyAction28 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ABSTYPE,   yypos, yytext) )
      end
fun yyAction29 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(AND,       yypos, yytext) )
      end
fun yyAction30 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ANDALSO,   yypos, yytext) )
      end
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ANY,       yypos, yytext) )
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(AS,        yypos, yytext) )
      end
fun yyAction33 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_ NONE,    yypos, yytext) )
      end
fun yyAction34 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 0), yypos, yytext) )
      end
fun yyAction35 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 1), yypos, yytext) )
      end
fun yyAction36 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 2), yypos, yytext) )
      end
fun yyAction37 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 3), yypos, yytext) )
      end
fun yyAction38 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 4), yypos, yytext) )
      end
fun yyAction39 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 5), yypos, yytext) )
      end
fun yyAction40 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 6), yypos, yytext) )
      end
fun yyAction41 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 7), yypos, yytext) )
      end
fun yyAction42 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 8), yypos, yytext) )
      end
fun yyAction43 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ASSERT_(SOME 9), yypos, yytext) )
      end
fun yyAction44 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(CASE,      yypos, yytext) )
      end
fun yyAction45 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(COMP,      yypos, yytext) )
      end
fun yyAction46 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(CONSTRUCTOR,yypos, yytext) )
      end
fun yyAction47 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(DATATYPE,  yypos, yytext) )
      end
fun yyAction48 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(DO,        yypos, yytext) )
      end
fun yyAction49 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ELSE,      yypos, yytext) )
      end
fun yyAction50 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(END,       yypos, yytext) )
      end
fun yyAction51 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(EQTYPE,    yypos, yytext) )
      end
fun yyAction52 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(EXCEPTION, yypos, yytext) )
      end
fun yyAction53 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(EXTTYPE,   yypos, yytext) )
      end
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(FCT,       yypos, yytext) )
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(FINALLY,   yypos, yytext) )
      end
fun yyAction56 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(FN,        yypos, yytext) )
      end
fun yyAction57 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(FROM,      yypos, yytext) )
      end
fun yyAction58 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(FUN,       yypos, yytext) )
      end
fun yyAction59 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(FUNCTOR,   yypos, yytext) )
      end
fun yyAction60 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(HANDLE,    yypos, yytext) )
      end
fun yyAction61 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(IF,        yypos, yytext) )
      end
fun yyAction62 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(IMPORT,    yypos, yytext) )
      end
fun yyAction63 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(IN,        yypos, yytext) )
      end
fun yyAction64 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(INCLUDE,   yypos, yytext) )
      end
fun yyAction65 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(INFIX,     yypos, yytext) )
      end
fun yyAction66 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(INFIXR,    yypos, yytext) )
      end
fun yyAction67 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(LAZY,      yypos, yytext) )
      end
fun yyAction68 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(LET,       yypos, yytext) )
      end
fun yyAction69 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(LOCAL,     yypos, yytext) )
      end
fun yyAction70 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(NON,       yypos, yytext) )
      end
fun yyAction71 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(NONFIX,    yypos, yytext) )
      end
fun yyAction72 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(OF,        yypos, yytext) )
      end
fun yyAction73 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(OP,        yypos, yytext) )
      end
fun yyAction74 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(OPEN,      yypos, yytext) )
      end
fun yyAction75 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(ORELSE,    yypos, yytext) )
      end
fun yyAction76 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(PACK,      yypos, yytext) )
      end
fun yyAction77 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(RAISE,     yypos, yytext) )
      end
fun yyAction78 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(REC,       yypos, yytext) )
      end
fun yyAction79 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(SHARING,   yypos, yytext) )
      end
fun yyAction80 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(SIG,       yypos, yytext) )
      end
fun yyAction81 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(SIGNATURE, yypos, yytext) )
      end
fun yyAction82 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(SPAWN,     yypos, yytext) )
      end
fun yyAction83 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(STRUCT,    yypos, yytext) )
      end
fun yyAction84 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(STRUCTURE, yypos, yytext) )
      end
fun yyAction85 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(THEN,      yypos, yytext) )
      end
fun yyAction86 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(TYPE,      yypos, yytext) )
      end
fun yyAction87 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(UNPACK,    yypos, yytext) )
      end
fun yyAction88 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(VAL,       yypos, yytext) )
      end
fun yyAction89 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(WHERE,     yypos, yytext) )
      end
fun yyAction90 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(WHILE,     yypos, yytext) )
      end
fun yyAction91 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(WITH,      yypos, yytext) )
      end
fun yyAction92 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(WITHFUN,   yypos, yytext) )
      end
fun yyAction93 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(WITHTYPE,  yypos, yytext) )
      end
fun yyAction94 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token(WITHVAL,   yypos, yytext) )
      end
fun yyAction95 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( token  (ZERO,              yypos, yytext) )
      end
fun yyAction96 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(DIGIT,   toDigit,  yypos, yytext) )
      end
fun yyAction97 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(NUMERIC, toInt,    yypos, yytext) )
      end
fun yyAction98 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(INT,     toInt,    yypos, yytext) )
      end
fun yyAction99 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(WORD,    toWord,   yypos, yytext) )
      end
fun yyAction100 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(REAL,    toReal,   yypos, yytext) )
      end
fun yyAction101 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(STRING,  toString, yypos, yytext) )
      end
fun yyAction102 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(CHAR,    toChar,   yypos, yytext) )
      end
fun yyAction103 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(TYVAR,   toId,     yypos, yytext) )
      end
fun yyAction104 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( tokenOf(ALPHA,   toId,     yypos, yytext) )
      end
fun yyAction105 (strm, lastMatch : yymatch) = (yystrm := strm;
      ( YYBEGIN LCOMMENT ; continue() ))
fun yyAction106 (strm, lastMatch : yymatch) = (yystrm := strm;
      ( nest yypos ; YYBEGIN COMMENT ; continue() ))
fun yyAction107 (strm, lastMatch : yymatch) = (yystrm := strm;
      ( YYBEGIN LCOMMENT ; continue() ))
fun yyAction108 (strm, lastMatch : yymatch) = (yystrm := strm;
      ( nest yypos ; continue() ))
fun yyAction109 (strm, lastMatch : yymatch) = (yystrm := strm;
      ( if unnest() then YYBEGIN INITIAL else () ;
			     continue() ))
fun yyAction110 (strm, lastMatch : yymatch) = (yystrm := strm; ( continue() ))
fun yyAction111 (strm, lastMatch : yymatch) = (yystrm := strm; ( continue() ))
fun yyAction112 (strm, lastMatch : yymatch) = (yystrm := strm; ( continue() ))
fun yyAction113 (strm, lastMatch : yymatch) = (yystrm := strm;
      ( YYBEGIN (if nested() then COMMENT else INITIAL) ;
			     continue() ))
fun yyAction114 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; ( error'(yypos, yytext, E.InvalidString) )
      end
fun yyAction115 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        ( error'(yypos, yytext,
				    E.InvalidChar(String.sub(yytext,0))) )
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58,
  yyAction59, yyAction60, yyAction61, yyAction62, yyAction63, yyAction64,
  yyAction65, yyAction66, yyAction67, yyAction68, yyAction69, yyAction70,
  yyAction71, yyAction72, yyAction73, yyAction74, yyAction75, yyAction76,
  yyAction77, yyAction78, yyAction79, yyAction80, yyAction81, yyAction82,
  yyAction83, yyAction84, yyAction85, yyAction86, yyAction87, yyAction88,
  yyAction89, yyAction90, yyAction91, yyAction92, yyAction93, yyAction94,
  yyAction95, yyAction96, yyAction97, yyAction98, yyAction99, yyAction100,
  yyAction101, yyAction102, yyAction103, yyAction104, yyAction105, yyAction106,
  yyAction107, yyAction108, yyAction109, yyAction110, yyAction111, yyAction112,
  yyAction113, yyAction114, yyAction115])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of COMMENT => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | LCOMMENT => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    fun makeLexer' ins = mk (yyInput.mkStream ins)
    end

  end
